
F407forNRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b0  080042b0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b8  080042b8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080042c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000003a0  20000028  20000028  00020028  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0e4  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001952  00000000  00000000  0002a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000860  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002027d  00000000  00000000  0002cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091a1  00000000  00000000  0004ce95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2526  00000000  00000000  00056036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011855c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000258c  00000000  00000000  001185b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004288 	.word	0x08004288

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08004288 	.word	0x08004288

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <AESK_UINT16toUINT8_LE>:
 *  		dizi[0] = 0x55;
 *  		dizi[1] = 0x45;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT16toUINT8_LE(uint16_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4413      	add	r3, r2
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	4413      	add	r3, r2
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	7852      	ldrb	r2, [r2, #1]
 8000b56:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint16_t);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	801a      	strh	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <AESK_FLOAT32toUINT8_LE>:
/***************************************  INT32 PACKAGE END *********************************************************/

/***************************************  FLOAT32 PACKAGE START *********************************************************/

void AESK_FLOAT32toUINT8_LE(float *packData, uint8_t *packBuf, uint16_t *index)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	4413      	add	r3, r2
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	4413      	add	r3, r2
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	7852      	ldrb	r2, [r2, #1]
 8000b9a:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 2] = ((uint8_t*)packData)[2];
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	7892      	ldrb	r2, [r2, #2]
 8000baa:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 3] = ((uint8_t*)packData)[3];
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3303      	adds	r3, #3
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	78d2      	ldrb	r2, [r2, #3]
 8000bba:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(float);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	801a      	strh	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <AESK_UINT8toUINT16_LE>:
 *  		dizi[3] = 0x12
 *  		yemre = 0x1200;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT8toUINT16_LE(uint16_t *packData, uint8_t* packBuf, uint16_t *index)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	((uint8_t *)packData)[0] = packBuf[*index];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	4413      	add	r3, r2
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	701a      	strb	r2, [r3, #0]
	((uint8_t *)packData)[1] = packBuf[(*index) + 1];
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	441a      	add	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(int16_t);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	3302      	adds	r3, #2
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	801a      	strh	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <AESK_UINT8toUINT24_LE>:

	*index = *index + sizeof(uint32_t);
}

void AESK_UINT8toUINT24_LE(uint32_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	((uint8_t*) packData)[0] = packBuf[(*index)];
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
	((uint8_t*) packData)[1] = packBuf[(*index) + 1];
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	441a      	add	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3301      	adds	r3, #1
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	701a      	strb	r2, [r3, #0]
	((uint8_t*) packData)[2] = packBuf[(*index) + 2];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	441a      	add	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3302      	adds	r3, #2
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	701a      	strb	r2, [r3, #0]
	((uint8_t*) packData)[3] = 0;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]

	*index = *index + 3;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	3303      	adds	r3, #3
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	801a      	strh	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_SYSTICK_Callback>:
		((uint8_t*)aesk_gl)[i] = 0;
	}
}

void HAL_SYSTICK_Callback(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
	aesk_gl.system_clock_counter_1ms++;
 8000c80:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000c88:	6013      	str	r3, [r2, #0]

		if(aesk_gl.system_clock_counter_1ms % 10 == 0)
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <HAL_SYSTICK_Callback+0xd0>)
 8000c90:	fba3 2301 	umull	r2, r3, r3, r1
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	1aca      	subs	r2, r1, r3
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d104      	bne.n	8000cae <HAL_SYSTICK_Callback+0x32>
		{
			tt.time_task_t.task_100_Hz = 1;
 8000ca4:	4a2a      	ldr	r2, [pc, #168]	; (8000d50 <HAL_SYSTICK_Callback+0xd4>)
 8000ca6:	7813      	ldrb	r3, [r2, #0]
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	7013      	strb	r3, [r2, #0]
		}

		if(aesk_gl.system_clock_counter_1ms % 20 == 0)
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_SYSTICK_Callback+0xd0>)
 8000cb4:	fba3 2301 	umull	r2, r3, r3, r1
 8000cb8:	091a      	lsrs	r2, r3, #4
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	1aca      	subs	r2, r1, r3
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d104      	bne.n	8000cd2 <HAL_SYSTICK_Callback+0x56>
		{
			tt.time_task_t.task_50_Hz = 1;
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <HAL_SYSTICK_Callback+0xd4>)
 8000cca:	7813      	ldrb	r3, [r2, #0]
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	7013      	strb	r3, [r2, #0]
		}

		if(aesk_gl.system_clock_counter_1ms % 50 == 0)
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_SYSTICK_Callback+0xd8>)
 8000cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	2132      	movs	r1, #50	; 0x32
 8000ce0:	fb01 f303 	mul.w	r3, r1, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <HAL_SYSTICK_Callback+0x78>
		{
			tt.time_task_t.task_20_Hz = 1;
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_SYSTICK_Callback+0xd4>)
 8000cec:	7813      	ldrb	r3, [r2, #0]
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	7013      	strb	r3, [r2, #0]
		}
		if(aesk_gl.system_clock_counter_1ms % 500 == 0)
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_SYSTICK_Callback+0xdc>)
 8000cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d04:	fb01 f303 	mul.w	r3, r1, r3
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <HAL_SYSTICK_Callback+0x9c>
		{
			tt.time_task_t.task_2_Hz = 1;
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_SYSTICK_Callback+0xd4>)
 8000d10:	7813      	ldrb	r3, [r2, #0]
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	7013      	strb	r3, [r2, #0]
		}
		if(aesk_gl.system_clock_counter_1ms % 1000 == 0)
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_SYSTICK_Callback+0xcc>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_SYSTICK_Callback+0xdc>)
 8000d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d104      	bne.n	8000d3c <HAL_SYSTICK_Callback+0xc0>
		{
			tt.time_task_t.task_1_Hz = 1;
 8000d32:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_SYSTICK_Callback+0xd4>)
 8000d34:	7813      	ldrb	r3, [r2, #0]
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	7013      	strb	r3, [r2, #0]
		}

}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000068 	.word	0x20000068
 8000d4c:	cccccccd 	.word	0xcccccccd
 8000d50:	2000006c 	.word	0x2000006c
 8000d54:	51eb851f 	.word	0x51eb851f
 8000d58:	10624dd3 	.word	0x10624dd3

08000d5c <AESK_NRF24_Init>:
static uint16_t nrf24_CSN_PIN;
static uint16_t nrf24_CE_PIN;
//SPI handle
static SPI_HandleTypeDef * nrf24_hspi;
void AESK_NRF24_Init(SPI_HandleTypeDef * hspi,GPIO_TypeDef * CSN_CE_Port, uint16_t CSN_Pin, uint16_t CE_Pin)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	80fb      	strh	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	80bb      	strh	r3, [r7, #4]
	AESK_NRF24_begin(CSN_CE_Port, CSN_Pin, CE_Pin, hspi);
 8000d72:	88ba      	ldrh	r2, [r7, #4]
 8000d74:	88f9      	ldrh	r1, [r7, #6]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f000 f9cf 	bl	800111c <AESK_NRF24_begin>
	AESK_NRF24_startListening();
 8000d7e:	f000 faa1 	bl	80012c4 <AESK_NRF24_startListening>
	AESK_NRF24_SetPayloadSize();
 8000d82:	f000 fb65 	bl	8001450 <AESK_NRF24_SetPayloadSize>
	AESK_NRF24_openReadingPipe(aesk_nrf24_data.RxpipeAddrs);
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <AESK_NRF24_Init+0x68>)
 8000d88:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f000 fb40 	bl	8001414 <AESK_NRF24_openReadingPipe>
	AESK_NRF24_openWritingPipe(aesk_nrf24_data.TxpipeAddrs);
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <AESK_NRF24_Init+0x68>)
 8000d96:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f000 fb48 	bl	8001432 <AESK_NRF24_openWritingPipe>
	AESK_NRF24_setChannel(aesk_nrf24_data.Channel);
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <AESK_NRF24_Init+0x68>)
 8000da4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fb82 	bl	80014b2 <AESK_NRF24_setChannel>
	AESK_NRF24_setAutoAck(false);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 fbd8 	bl	8001564 <AESK_NRF24_setAutoAck>
	AESK_NRF24_setPayloadSize(32);
 8000db4:	2020      	movs	r0, #32
 8000db6:	f000 fb91 	bl	80014dc <AESK_NRF24_setPayloadSize>

}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000070 	.word	0x20000070

08000dc8 <AESK_NRF24_DATA_Init>:
void AESK_NRF24_DATA_Init(uint8_t Channel, uint64_t RxpipeAddrs, void (*OnReceive)(uint8_t * pack, uint16_t len))
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4601      	mov	r1, r0
 8000dd0:	e9c7 2300 	strd	r2, r3, [r7]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	73fb      	strb	r3, [r7, #15]
	aesk_nrf24_data.ReadByte = 0;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	aesk_nrf24_data.WrittenByte = 0;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	aesk_nrf24_data.Channel = Channel;
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	aesk_nrf24_data.RxpipeAddrs = RxpipeAddrs;
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000df6:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
	aesk_nrf24_data.TxpipeAddrs = 0x1122112211;
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <AESK_NRF24_DATA_Init+0x60>)
 8000dfe:	f04f 0311 	mov.w	r3, #17
 8000e02:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
	aesk_nrf24_data.lastPackCount = 0;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	aesk_nrf24_data.onReceive = OnReceive;
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <AESK_NRF24_DATA_Init+0x5c>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000070 	.word	0x20000070
 8000e28:	22112211 	.word	0x22112211

08000e2c <AESK_NRF24_DelayMicroSeconds>:
//Microsecond delay function
void AESK_NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <AESK_NRF24_DelayMicroSeconds+0x3c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <AESK_NRF24_DelayMicroSeconds+0x40>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0c9a      	lsrs	r2, r3, #18
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	60fb      	str	r3, [r7, #12]
	while (uSecVar--);
 8000e4c:	bf00      	nop
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1e5a      	subs	r2, r3, #1
 8000e52:	60fa      	str	r2, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1fa      	bne.n	8000e4e <AESK_NRF24_DelayMicroSeconds+0x22>
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000018 	.word	0x20000018
 8000e6c:	165e9f81 	.word	0x165e9f81

08000e70 <AESK_NRF24_csn>:

//1. Chip Select function
void AESK_NRF24_csn(int state)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if (state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <AESK_NRF24_csn+0x20>
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <AESK_NRF24_csn+0x38>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <AESK_NRF24_csn+0x3c>)
 8000e84:	8811      	ldrh	r1, [r2, #0]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 ff9d 	bl	8002dc8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000e8e:	e007      	b.n	8000ea0 <AESK_NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <AESK_NRF24_csn+0x38>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <AESK_NRF24_csn+0x3c>)
 8000e96:	8811      	ldrh	r1, [r2, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 ff94 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000058 	.word	0x20000058
 8000eac:	2000005c 	.word	0x2000005c

08000eb0 <AESK_NRF24_ce>:
//2. Chip Enable
void AESK_NRF24_ce(int state)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if (state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <AESK_NRF24_ce+0x20>
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <AESK_NRF24_ce+0x38>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <AESK_NRF24_ce+0x3c>)
 8000ec4:	8811      	ldrh	r1, [r2, #0]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 ff7d 	bl	8002dc8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000ece:	e007      	b.n	8000ee0 <AESK_NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <AESK_NRF24_ce+0x38>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <AESK_NRF24_ce+0x3c>)
 8000ed6:	8811      	ldrh	r1, [r2, #0]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 ff74 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000058 	.word	0x20000058
 8000eec:	2000005e 	.word	0x2000005e

08000ef0 <AESK_NRF24_read_register>:
//3. Read single byte from a register
uint8_t AESK_NRF24_read_register(uint8_t reg)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	AESK_NRF24_csn(0);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffb8 	bl	8000e70 <AESK_NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <AESK_NRF24_read_register+0x50>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f107 010c 	add.w	r1, r7, #12
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	2201      	movs	r2, #1
 8000f16:	f002 fc6c 	bl	80037f2 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(nrf24_hspi, &spiBuf[1], 1, 100);
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <AESK_NRF24_read_register+0x50>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	1c59      	adds	r1, r3, #1
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	2201      	movs	r2, #1
 8000f28:	f002 fd9f 	bl	8003a6a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
 8000f2e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	AESK_NRF24_csn(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff ff9d 	bl	8000e70 <AESK_NRF24_csn>
	return retData;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000060 	.word	0x20000060

08000f44 <AESK_NRF24_read_registerN>:
//4. Read multiple bytes register
void AESK_NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff8b 	bl	8000e70 <AESK_NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <AESK_NRF24_read_registerN+0x50>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	f107 010c 	add.w	r1, r7, #12
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f002 fc3f 	bl	80037f2 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(nrf24_hspi, buf, len, 100);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <AESK_NRF24_read_registerN+0x50>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	f002 fd73 	bl	8003a6a <HAL_SPI_Receive>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff ff73 	bl	8000e70 <AESK_NRF24_csn>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000060 	.word	0x20000060

08000f98 <AESK_NRF24_write_register>:
//5. Write single byte register
void AESK_NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff ff61 	bl	8000e70 <AESK_NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 2, 100);
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <AESK_NRF24_write_register+0x44>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f107 010c 	add.w	r1, r7, #12
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f002 fc13 	bl	80037f2 <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ff4f 	bl	8000e70 <AESK_NRF24_csn>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000060 	.word	0x20000060

08000fe0 <AESK_NRF24_write_registerN>:
//6. Write multipl bytes register
void AESK_NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff ff3d 	bl	8000e70 <AESK_NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <AESK_NRF24_write_registerN+0x50>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f107 010c 	add.w	r1, r7, #12
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	f002 fbf1 	bl	80037f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*) buf, len, 100);
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <AESK_NRF24_write_registerN+0x50>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	b29a      	uxth	r2, r3
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	f002 fbe9 	bl	80037f2 <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff25 	bl	8000e70 <AESK_NRF24_csn>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000060 	.word	0x20000060

08001034 <AESK_NRF24_write_payload>:
//7. Write transmit payload
void AESK_NRF24_write_payload(const void *buf, uint8_t len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	AESK_NRF24_csn(0);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff15 	bl	8000e70 <AESK_NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001046:	23a0      	movs	r3, #160	; 0xa0
 8001048:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(nrf24_hspi, &wrPayloadCmd, 1, 100);
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <AESK_NRF24_write_payload+0x44>)
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f107 010f 	add.w	r1, r7, #15
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2201      	movs	r2, #1
 8001056:	f002 fbcc 	bl	80037f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*) buf, len, 100);
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <AESK_NRF24_write_payload+0x44>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	b29a      	uxth	r2, r3
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	f002 fbc4 	bl	80037f2 <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff00 	bl	8000e70 <AESK_NRF24_csn>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000060 	.word	0x20000060

0800107c <AESK_NRF24_read_payload>:
//8. Read receive payload
void AESK_NRF24_read_payload(void *buf, uint8_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, AESK_NRF24_getPayloadSize());
 8001088:	f000 fa40 	bl	800150c <AESK_NRF24_getPayloadSize>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	4293      	cmp	r3, r2
 8001094:	d303      	bcc.n	800109e <AESK_NRF24_read_payload+0x22>
 8001096:	f000 fa39 	bl	800150c <AESK_NRF24_getPayloadSize>
 800109a:	4603      	mov	r3, r0
 800109c:	e000      	b.n	80010a0 <AESK_NRF24_read_payload+0x24>
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	AESK_NRF24_csn(0);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fee4 	bl	8000e70 <AESK_NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80010a8:	2361      	movs	r3, #97	; 0x61
 80010aa:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(nrf24_hspi, &cmdRxBuf, 1, 100);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <AESK_NRF24_read_payload+0x60>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f107 010e 	add.w	r1, r7, #14
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	f002 fb9b 	bl	80037f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf24_hspi, buf, data_len, 100);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <AESK_NRF24_read_payload+0x60>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f002 fccf 	bl	8003a6a <HAL_SPI_Receive>
	AESK_NRF24_csn(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff fecf 	bl	8000e70 <AESK_NRF24_csn>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000060 	.word	0x20000060

080010e0 <AESK_NRF24_flush_tx>:

//9. Flush Tx buffer
void AESK_NRF24_flush_tx(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80010e4:	21ff      	movs	r1, #255	; 0xff
 80010e6:	20e1      	movs	r0, #225	; 0xe1
 80010e8:	f7ff ff56 	bl	8000f98 <AESK_NRF24_write_register>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <AESK_NRF24_flush_rx>:
//10. Flush Rx buffer
void AESK_NRF24_flush_rx(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80010f4:	21ff      	movs	r1, #255	; 0xff
 80010f6:	20e2      	movs	r0, #226	; 0xe2
 80010f8:	f7ff ff4e 	bl	8000f98 <AESK_NRF24_write_register>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <AESK_NRF24_get_status>:
//11. Get status register value
uint8_t AESK_NRF24_get_status(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = AESK_NRF24_read_register(REG_STATUS);
 8001106:	2007      	movs	r0, #7
 8001108:	f7ff fef2 	bl	8000ef0 <AESK_NRF24_read_register>
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001110:	79fb      	ldrb	r3, [r7, #7]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <AESK_NRF24_begin>:

//12. Begin function
void AESK_NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef * nrfSPI)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	817b      	strh	r3, [r7, #10]
 800112a:	4613      	mov	r3, r2
 800112c:	813b      	strh	r3, [r7, #8]
	nrf24_hspi = nrfSPI;
 800112e:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <AESK_NRF24_begin+0x198>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6013      	str	r3, [r2, #0]
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001134:	4a60      	ldr	r2, [pc, #384]	; (80012b8 <AESK_NRF24_begin+0x19c>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800113a:	4a60      	ldr	r2, [pc, #384]	; (80012bc <AESK_NRF24_begin+0x1a0>)
 800113c:	897b      	ldrh	r3, [r7, #10]
 800113e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001140:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <AESK_NRF24_begin+0x1a4>)
 8001142:	893b      	ldrh	r3, [r7, #8]
 8001144:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	AESK_NRF24_csn(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fe92 	bl	8000e70 <AESK_NRF24_csn>
	AESK_NRF24_ce(0);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff feaf 	bl	8000eb0 <AESK_NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f001 fb60 	bl	8002818 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	AESK_NRF24_write_register(0x00, 0x08);
 8001158:	2108      	movs	r1, #8
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ff1c 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x01, 0x3f);
 8001160:	213f      	movs	r1, #63	; 0x3f
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff ff18 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x02, 0x03);
 8001168:	2103      	movs	r1, #3
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff ff14 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x03, 0x03);
 8001170:	2103      	movs	r1, #3
 8001172:	2003      	movs	r0, #3
 8001174:	f7ff ff10 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x04, 0x03);
 8001178:	2103      	movs	r1, #3
 800117a:	2004      	movs	r0, #4
 800117c:	f7ff ff0c 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x05, 0x02);
 8001180:	2102      	movs	r1, #2
 8001182:	2005      	movs	r0, #5
 8001184:	f7ff ff08 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x06, 0x0f);
 8001188:	210f      	movs	r1, #15
 800118a:	2006      	movs	r0, #6
 800118c:	f7ff ff04 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x07, 0x0e);
 8001190:	210e      	movs	r1, #14
 8001192:	2007      	movs	r0, #7
 8001194:	f7ff ff00 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x08, 0x00);
 8001198:	2100      	movs	r1, #0
 800119a:	2008      	movs	r0, #8
 800119c:	f7ff fefc 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x09, 0x00);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2009      	movs	r0, #9
 80011a4:	f7ff fef8 	bl	8000f98 <AESK_NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 80011a8:	23e7      	movs	r3, #231	; 0xe7
 80011aa:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 80011ac:	23e7      	movs	r3, #231	; 0xe7
 80011ae:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 80011b0:	23e7      	movs	r3, #231	; 0xe7
 80011b2:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 80011b4:	23e7      	movs	r3, #231	; 0xe7
 80011b6:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 80011b8:	23e7      	movs	r3, #231	; 0xe7
 80011ba:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2205      	movs	r2, #5
 80011c2:	4619      	mov	r1, r3
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff ff0b 	bl	8000fe0 <AESK_NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 80011ca:	23c2      	movs	r3, #194	; 0xc2
 80011cc:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xC2;
 80011ce:	23c2      	movs	r3, #194	; 0xc2
 80011d0:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xC2;
 80011d2:	23c2      	movs	r3, #194	; 0xc2
 80011d4:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xC2;
 80011d6:	23c2      	movs	r3, #194	; 0xc2
 80011d8:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xC2;
 80011da:	23c2      	movs	r3, #194	; 0xc2
 80011dc:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2205      	movs	r2, #5
 80011e4:	4619      	mov	r1, r3
 80011e6:	200b      	movs	r0, #11
 80011e8:	f7ff fefa 	bl	8000fe0 <AESK_NRF24_write_registerN>
	AESK_NRF24_write_register(0x0C, 0xC3);
 80011ec:	21c3      	movs	r1, #195	; 0xc3
 80011ee:	200c      	movs	r0, #12
 80011f0:	f7ff fed2 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0D, 0xC4);
 80011f4:	21c4      	movs	r1, #196	; 0xc4
 80011f6:	200d      	movs	r0, #13
 80011f8:	f7ff fece 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0E, 0xC5);
 80011fc:	21c5      	movs	r1, #197	; 0xc5
 80011fe:	200e      	movs	r0, #14
 8001200:	f7ff feca 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0F, 0xC6);
 8001204:	21c6      	movs	r1, #198	; 0xc6
 8001206:	200f      	movs	r0, #15
 8001208:	f7ff fec6 	bl	8000f98 <AESK_NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 800120c:	23e7      	movs	r3, #231	; 0xe7
 800120e:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 8001210:	23e7      	movs	r3, #231	; 0xe7
 8001212:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 8001214:	23e7      	movs	r3, #231	; 0xe7
 8001216:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 8001218:	23e7      	movs	r3, #231	; 0xe7
 800121a:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 800121c:	23e7      	movs	r3, #231	; 0xe7
 800121e:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2205      	movs	r2, #5
 8001226:	4619      	mov	r1, r3
 8001228:	2010      	movs	r0, #16
 800122a:	f7ff fed9 	bl	8000fe0 <AESK_NRF24_write_registerN>
	AESK_NRF24_write_register(0x11, 0);
 800122e:	2100      	movs	r1, #0
 8001230:	2011      	movs	r0, #17
 8001232:	f7ff feb1 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x12, 0);
 8001236:	2100      	movs	r1, #0
 8001238:	2012      	movs	r0, #18
 800123a:	f7ff fead 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x13, 0);
 800123e:	2100      	movs	r1, #0
 8001240:	2013      	movs	r0, #19
 8001242:	f7ff fea9 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x14, 0);
 8001246:	2100      	movs	r1, #0
 8001248:	2014      	movs	r0, #20
 800124a:	f7ff fea5 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x15, 0);
 800124e:	2100      	movs	r1, #0
 8001250:	2015      	movs	r0, #21
 8001252:	f7ff fea1 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x16, 0);
 8001256:	2100      	movs	r1, #0
 8001258:	2016      	movs	r0, #22
 800125a:	f7ff fe9d 	bl	8000f98 <AESK_NRF24_write_register>

	AESK_NRF24_ACTIVATE_cmd();
 800125e:	f000 fae5 	bl	800182c <AESK_NRF24_ACTIVATE_cmd>
	AESK_NRF24_write_register(0x1c, 0);
 8001262:	2100      	movs	r1, #0
 8001264:	201c      	movs	r0, #28
 8001266:	f7ff fe97 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x1d, 0);
 800126a:	2100      	movs	r1, #0
 800126c:	201d      	movs	r0, #29
 800126e:	f7ff fe93 	bl	8000f98 <AESK_NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	AESK_NRF24_setRetries(15, 15);
 8001272:	210f      	movs	r1, #15
 8001274:	200f      	movs	r0, #15
 8001276:	f000 f901 	bl	800147c <AESK_NRF24_setRetries>
	//Initialise PA level to max (0dB)
	AESK_NRF24_setPALevel(RF24_PA_0dB);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 f987 	bl	800158e <AESK_NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	AESK_NRF24_setDataRate(RF24_250KBPS);
 8001280:	2002      	movs	r0, #2
 8001282:	f000 f9bb 	bl	80015fc <AESK_NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	AESK_NRF24_setCRCLength(RF24_CRC_16);
 8001286:	2002      	movs	r0, #2
 8001288:	f000 f9fe 	bl	8001688 <AESK_NRF24_setCRCLength>
	//Disable dynamic payload
	AESK_NRF24_disableDynamicPayloads();
 800128c:	f000 f952 	bl	8001534 <AESK_NRF24_disableDynamicPayloads>
	//Set payload size
	AESK_NRF24_setPayloadSize(32);
 8001290:	2020      	movs	r0, #32
 8001292:	f000 f923 	bl	80014dc <AESK_NRF24_setPayloadSize>

	//Reset status register
	AESK_NRF24_resetStatus();
 8001296:	f000 fac0 	bl	800181a <AESK_NRF24_resetStatus>
	//Initialise channel to 76
	AESK_NRF24_setChannel(76);
 800129a:	204c      	movs	r0, #76	; 0x4c
 800129c:	f000 f909 	bl	80014b2 <AESK_NRF24_setChannel>
	//Flush buffers
	AESK_NRF24_flush_tx();
 80012a0:	f7ff ff1e 	bl	80010e0 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 80012a4:	f7ff ff24 	bl	80010f0 <AESK_NRF24_flush_rx>

	AESK_NRF24_powerDown();
 80012a8:	f000 fa16 	bl	80016d8 <AESK_NRF24_powerDown>

}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000060 	.word	0x20000060
 80012b8:	20000058 	.word	0x20000058
 80012bc:	2000005c 	.word	0x2000005c
 80012c0:	2000005e 	.word	0x2000005e

080012c4 <AESK_NRF24_startListening>:
//13. Listen on open pipes for reading (Must call AESK_NRF24_openReadingPipe() first)
void AESK_NRF24_startListening(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fe11 	bl	8000ef0 <AESK_NRF24_read_register>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f043 0303 	orr.w	r3, r3, #3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fe5d 	bl	8000f98 <AESK_NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address) AESK_NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&pipe0_reading_address), 5);
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <AESK_NRF24_startListening+0x48>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	d004      	beq.n	80012f2 <AESK_NRF24_startListening+0x2e>
 80012e8:	2205      	movs	r2, #5
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <AESK_NRF24_startListening+0x48>)
 80012ec:	200a      	movs	r0, #10
 80012ee:	f7ff fe77 	bl	8000fe0 <AESK_NRF24_write_registerN>

	//Flush buffers
	AESK_NRF24_flush_tx();
 80012f2:	f7ff fef5 	bl	80010e0 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 80012f6:	f7ff fefb 	bl	80010f0 <AESK_NRF24_flush_rx>
	//Set CE HIGH to start listenning
	AESK_NRF24_ce(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fdd8 	bl	8000eb0 <AESK_NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	AESK_NRF24_DelayMicroSeconds(150);
 8001300:	2096      	movs	r0, #150	; 0x96
 8001302:	f7ff fd93 	bl	8000e2c <AESK_NRF24_DelayMicroSeconds>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000048 	.word	0x20000048

08001310 <AESK_NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void AESK_NRF24_stopListening(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	AESK_NRF24_ce(0);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fdcb 	bl	8000eb0 <AESK_NRF24_ce>
	AESK_NRF24_flush_tx();
 800131a:	f7ff fee1 	bl	80010e0 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 800131e:	f7ff fee7 	bl	80010f0 <AESK_NRF24_flush_rx>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <AESK_NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool AESK_NRF24_write(const void *buf, uint8_t len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	AESK_NRF24_resetStatus();
 8001334:	f000 fa71 	bl	800181a <AESK_NRF24_resetStatus>
	AESK_NRF24_startWrite(buf, len);
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fa0a 	bl	8001756 <AESK_NRF24_startWrite>

	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 8001342:	f001 fa5d 	bl	8002800 <HAL_GetTick>
 8001346:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001348:	230a      	movs	r3, #10
 800134a:	613b      	str	r3, [r7, #16]
	do {
		AESK_NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 800134c:	f107 030d 	add.w	r3, r7, #13
 8001350:	2201      	movs	r2, #1
 8001352:	4619      	mov	r1, r3
 8001354:	2008      	movs	r0, #8
 8001356:	f7ff fdf5 	bl	8000f44 <AESK_NRF24_read_registerN>
		//Get status register
		status = AESK_NRF24_get_status();
 800135a:	f7ff fed1 	bl	8001100 <AESK_NRF24_get_status>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT))) && (HAL_GetTick() - sent_at < timeout));
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <AESK_NRF24_write+0x54>
 800136c:	f001 fa48 	bl	8002800 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8e7      	bhi.n	800134c <AESK_NRF24_write+0x24>

	bool tx_ok, tx_fail;
	AESK_NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 800137c:	f107 010b 	add.w	r1, r7, #11
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <AESK_NRF24_write+0x90>)
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa14 	bl	80017b4 <AESK_NRF24_whatHappened>
	retStatus = tx_ok;
 800138c:	7b3b      	ldrb	r3, [r7, #12]
 800138e:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available)
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <AESK_NRF24_write+0x90>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <AESK_NRF24_write+0x7c>
	{
		ack_payload_length = AESK_NRF24_getDynamicPayloadSize();
 8001398:	f000 f8c4 	bl	8001524 <AESK_NRF24_getDynamicPayloadSize>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <AESK_NRF24_write+0x94>)
 80013a2:	701a      	strb	r2, [r3, #0]
	}
	//Power down
	AESK_NRF24_available();
 80013a4:	f000 f80c 	bl	80013c0 <AESK_NRF24_available>
	AESK_NRF24_flush_tx();
 80013a8:	f7ff fe9a 	bl	80010e0 <AESK_NRF24_flush_tx>

	return retStatus;
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000050 	.word	0x20000050
 80013bc:	20000051 	.word	0x20000051

080013c0 <AESK_NRF24_available>:
//16. Check for available data to read
bool AESK_NRF24_available(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	return AESK_NRF24_availablePipe(NULL);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 f996 	bl	80016f6 <AESK_NRF24_availablePipe>
 80013ca:	4603      	mov	r3, r0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <AESK_NRF24_read>:
//17. Read received data
bool AESK_NRF24_read(void *buf, uint8_t len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
	AESK_NRF24_read_payload(buf, len);
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fe4b 	bl	800107c <AESK_NRF24_read_payload>
	uint8_t rxStatus = AESK_NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80013e6:	2017      	movs	r0, #23
 80013e8:	f7ff fd82 	bl	8000ef0 <AESK_NRF24_read_register>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
	AESK_NRF24_flush_rx();
 80013f4:	f7ff fe7c 	bl	80010f0 <AESK_NRF24_flush_rx>
	AESK_NRF24_getDynamicPayloadSize();
 80013f8:	f000 f894 	bl	8001524 <AESK_NRF24_getDynamicPayloadSize>
	AESK_NRF24_resetStatus();
 80013fc:	f000 fa0d 	bl	800181a <AESK_NRF24_resetStatus>
	return rxStatus;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <AESK_NRF24_openReadingPipe>:
void AESK_NRF24_openReadingPipe(uint64_t address)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	e9c7 0100 	strd	r0, r1, [r7]
	AESK_NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 800141e:	463b      	mov	r3, r7
 8001420:	2205      	movs	r2, #5
 8001422:	4619      	mov	r1, r3
 8001424:	200a      	movs	r0, #10
 8001426:	f7ff fddb 	bl	8000fe0 <AESK_NRF24_write_registerN>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <AESK_NRF24_openWritingPipe>:
void AESK_NRF24_openWritingPipe(uint64_t address)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	e9c7 0100 	strd	r0, r1, [r7]
	AESK_NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 800143c:	463b      	mov	r3, r7
 800143e:	2205      	movs	r2, #5
 8001440:	4619      	mov	r1, r3
 8001442:	2010      	movs	r0, #16
 8001444:	f7ff fdcc 	bl	8000fe0 <AESK_NRF24_write_registerN>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <AESK_NRF24_SetPayloadSize>:
void AESK_NRF24_SetPayloadSize()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	const uint8_t max_payload_size = 32;
 8001456:	2320      	movs	r3, #32
 8001458:	71fb      	strb	r3, [r7, #7]
	AESK_NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <AESK_NRF24_SetPayloadSize+0x28>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	79fa      	ldrb	r2, [r7, #7]
 8001460:	4293      	cmp	r3, r2
 8001462:	bf28      	it	cs
 8001464:	4613      	movcs	r3, r2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	2011      	movs	r0, #17
 800146c:	f7ff fd94 	bl	8000f98 <AESK_NRF24_write_register>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000052 	.word	0x20000052

0800147c <AESK_NRF24_setRetries>:
//	}
//
//}
//20 set transmit retries (rf24_Retries_e) and delay
void AESK_NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	AESK_NRF24_write_register(REG_SETUP_RETR, (delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	b25a      	sxtb	r2, r3
 8001492:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	2004      	movs	r0, #4
 80014a6:	f7ff fd77 	bl	8000f98 <AESK_NRF24_write_register>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <AESK_NRF24_setChannel>:

//21. Set RF channel frequency
void AESK_NRF24_setChannel(uint8_t channel)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80014bc:	237f      	movs	r3, #127	; 0x7f
 80014be:	73fb      	strb	r3, [r7, #15]
	AESK_NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf28      	it	cs
 80014c8:	4613      	movcs	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	2005      	movs	r0, #5
 80014d0:	f7ff fd62 	bl	8000f98 <AESK_NRF24_write_register>
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <AESK_NRF24_setPayloadSize>:
//22. Set payload size
void AESK_NRF24_setPayloadSize(uint8_t size)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80014e6:	2320      	movs	r3, #32
 80014e8:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	bf28      	it	cs
 80014f2:	4613      	movcs	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <AESK_NRF24_setPayloadSize+0x2c>)
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000052 	.word	0x20000052

0800150c <AESK_NRF24_getPayloadSize>:
//23. Get payload size
uint8_t AESK_NRF24_getPayloadSize(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return payload_size;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <AESK_NRF24_getPayloadSize+0x14>)
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000052 	.word	0x20000052

08001524 <AESK_NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t AESK_NRF24_getDynamicPayloadSize(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	return AESK_NRF24_read_register(CMD_R_RX_PL_WID);
 8001528:	2060      	movs	r0, #96	; 0x60
 800152a:	f7ff fce1 	bl	8000ef0 <AESK_NRF24_read_register>
 800152e:	4603      	mov	r3, r0
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}

08001534 <AESK_NRF24_disableDynamicPayloads>:
	AESK_NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void AESK_NRF24_disableDynamicPayloads(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_FEATURE, AESK_NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8001538:	201d      	movs	r0, #29
 800153a:	f7ff fcd9 	bl	8000ef0 <AESK_NRF24_read_register>
 800153e:	4603      	mov	r3, r0
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	201d      	movs	r0, #29
 800154a:	f7ff fd25 	bl	8000f98 <AESK_NRF24_write_register>
	//Disable for all pipes 
	AESK_NRF24_write_register(REG_DYNPD, 0);
 800154e:	2100      	movs	r1, #0
 8001550:	201c      	movs	r0, #28
 8001552:	f7ff fd21 	bl	8000f98 <AESK_NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001556:	4b02      	ldr	r3, [pc, #8]	; (8001560 <AESK_NRF24_disableDynamicPayloads+0x2c>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000053 	.word	0x20000053

08001564 <AESK_NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void AESK_NRF24_setAutoAck(bool enable)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	if (enable) AESK_NRF24_write_register(REG_EN_AA, 0x3F);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <AESK_NRF24_setAutoAck+0x1a>
 8001574:	213f      	movs	r1, #63	; 0x3f
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fd0e 	bl	8000f98 <AESK_NRF24_write_register>
	else 		AESK_NRF24_write_register(REG_EN_AA, 0x00);
}
 800157c:	e003      	b.n	8001586 <AESK_NRF24_setAutoAck+0x22>
	else 		AESK_NRF24_write_register(REG_EN_AA, 0x00);
 800157e:	2100      	movs	r1, #0
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fd09 	bl	8000f98 <AESK_NRF24_write_register>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <AESK_NRF24_setPALevel>:
		AESK_NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void AESK_NRF24_setPALevel(rf24_pa_dbm_e level)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = AESK_NRF24_read_register(REG_RF_SETUP);
 8001598:	2006      	movs	r0, #6
 800159a:	f7ff fca9 	bl	8000ef0 <AESK_NRF24_read_register>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f023 0306 	bic.w	r3, r3, #6
 80015a8:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) 		 setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d104      	bne.n	80015ba <AESK_NRF24_setPALevel+0x2c>
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	f043 0306 	orr.w	r3, r3, #6
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e016      	b.n	80015e8 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_m6dB)  setup |= _BV(RF_PWR_HIGH);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d104      	bne.n	80015ca <AESK_NRF24_setPALevel+0x3c>
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e00e      	b.n	80015e8 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_m12dB) setup |= _BV(RF_PWR_LOW);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <AESK_NRF24_setPALevel+0x4c>
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e006      	b.n	80015e8 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_ERROR) setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d103      	bne.n	80015e8 <AESK_NRF24_setPALevel+0x5a>
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f043 0306 	orr.w	r3, r3, #6
 80015e6:	73fb      	strb	r3, [r7, #15]


	AESK_NRF24_write_register( REG_RF_SETUP, setup);
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	4619      	mov	r1, r3
 80015ec:	2006      	movs	r0, #6
 80015ee:	f7ff fcd3 	bl	8000f98 <AESK_NRF24_write_register>
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <AESK_NRF24_setDataRate>:

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool AESK_NRF24_setDataRate(rf24_datarate_e speed)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = AESK_NRF24_read_register(REG_RF_SETUP);
 800160a:	2006      	movs	r0, #6
 800160c:	f7ff fc70 	bl	8000ef0 <AESK_NRF24_read_register>
 8001610:	4603      	mov	r3, r0
 8001612:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <AESK_NRF24_setDataRate+0x88>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 800161a:	7bbb      	ldrb	r3, [r7, #14]
 800161c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001620:	73bb      	strb	r3, [r7, #14]
	if (speed == RF24_250KBPS)
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d107      	bne.n	8001638 <AESK_NRF24_setDataRate+0x3c>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <AESK_NRF24_setDataRate+0x88>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	73bb      	strb	r3, [r7, #14]
 8001636:	e00d      	b.n	8001654 <AESK_NRF24_setDataRate+0x58>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <AESK_NRF24_setDataRate+0x52>
		{
			wide_band = true;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <AESK_NRF24_setDataRate+0x88>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	e002      	b.n	8001654 <AESK_NRF24_setDataRate+0x58>
		}
		else
		{
			// 1Mbs
			wide_band = false;
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <AESK_NRF24_setDataRate+0x88>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
		}
	}
	AESK_NRF24_write_register(REG_RF_SETUP, setup);
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	4619      	mov	r1, r3
 8001658:	2006      	movs	r0, #6
 800165a:	f7ff fc9d 	bl	8000f98 <AESK_NRF24_write_register>

	// Verify our result
	if (AESK_NRF24_read_register(REG_RF_SETUP) == setup) result = true;
 800165e:	2006      	movs	r0, #6
 8001660:	f7ff fc46 	bl	8000ef0 <AESK_NRF24_read_register>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	7bbb      	ldrb	r3, [r7, #14]
 800166a:	4293      	cmp	r3, r2
 800166c:	d102      	bne.n	8001674 <AESK_NRF24_setDataRate+0x78>
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e002      	b.n	800167a <AESK_NRF24_setDataRate+0x7e>
	else wide_band = false;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <AESK_NRF24_setDataRate+0x88>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
	return result;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000054 	.word	0x20000054

08001688 <AESK_NRF24_setCRCLength>:

	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void AESK_NRF24_setCRCLength(rf24_crclength_e length)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	uint8_t config = AESK_NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fc2c 	bl	8000ef0 <AESK_NRF24_read_register>
 8001698:	4603      	mov	r3, r0
 800169a:	f023 030c 	bic.w	r3, r3, #12
 800169e:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM
	if (length == RF24_CRC_DISABLED)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00f      	beq.n	80016c6 <AESK_NRF24_setCRCLength+0x3e>
	{
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8)
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d104      	bne.n	80016b6 <AESK_NRF24_setCRCLength+0x2e>
	{
		config |= _BV(BIT_EN_CRC);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e007      	b.n	80016c6 <AESK_NRF24_setCRCLength+0x3e>
	} else
	{
		config |= _BV(BIT_EN_CRC);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	73fb      	strb	r3, [r7, #15]
	}
	AESK_NRF24_write_register( REG_CONFIG, config);
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	4619      	mov	r1, r3
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fc64 	bl	8000f98 <AESK_NRF24_write_register>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <AESK_NRF24_powerDown>:
{
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void AESK_NRF24_powerDown(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fc07 	bl	8000ef0 <AESK_NRF24_read_register>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f023 0302 	bic.w	r3, r3, #2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fc53 	bl	8000f98 <AESK_NRF24_write_register>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <AESK_NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool AESK_NRF24_availablePipe(uint8_t *pipe_num)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	uint8_t status = AESK_NRF24_get_status();
 80016fe:	f7ff fcff 	bl	8001100 <AESK_NRF24_get_status>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]

	bool result = (status & _BV(BIT_RX_DR));
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]

	if (result)
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d017      	beq.n	800174c <AESK_NRF24_availablePipe+0x56>
	{
		// If the caller wants the pipe number, include that
		if (pipe_num) *pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <AESK_NRF24_availablePipe+0x3c>
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	701a      	strb	r2, [r3, #0]
		// Clear the status bit
		AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	2007      	movs	r0, #7
 8001736:	f7ff fc2f 	bl	8000f98 <AESK_NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS))
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <AESK_NRF24_availablePipe+0x56>
		{
			AESK_NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8001744:	2120      	movs	r1, #32
 8001746:	2007      	movs	r0, #7
 8001748:	f7ff fc26 	bl	8000f98 <AESK_NRF24_write_register>
		}
	}
	return result;
 800174c:	7bbb      	ldrb	r3, [r7, #14]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <AESK_NRF24_startWrite>:
//40. Start write (for IRQ mode)
void AESK_NRF24_startWrite(const void *buf, uint8_t len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	AESK_NRF24_ce(0);
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fba4 	bl	8000eb0 <AESK_NRF24_ce>
	AESK_NRF24_write_register(REG_CONFIG, (AESK_NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP)) & ~_BV(BIT_PRIM_RX));
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fbc1 	bl	8000ef0 <AESK_NRF24_read_register>
 800176e:	4603      	mov	r3, r0
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fc0a 	bl	8000f98 <AESK_NRF24_write_register>
	AESK_NRF24_ce(1);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fb93 	bl	8000eb0 <AESK_NRF24_ce>
	AESK_NRF24_DelayMicroSeconds(150);
 800178a:	2096      	movs	r0, #150	; 0x96
 800178c:	f7ff fb4e 	bl	8000e2c <AESK_NRF24_DelayMicroSeconds>

	// Send the payload
	AESK_NRF24_write_payload(buf, len);
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4619      	mov	r1, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fc4d 	bl	8001034 <AESK_NRF24_write_payload>

	// Enable Tx for 15usec
	AESK_NRF24_ce(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff fb88 	bl	8000eb0 <AESK_NRF24_ce>
	AESK_NRF24_DelayMicroSeconds(15);
 80017a0:	200f      	movs	r0, #15
 80017a2:	f7ff fb43 	bl	8000e2c <AESK_NRF24_DelayMicroSeconds>
	AESK_NRF24_ce(0);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fb82 	bl	8000eb0 <AESK_NRF24_ce>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <AESK_NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void AESK_NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
	uint8_t status = AESK_NRF24_get_status();
 80017c0:	f7ff fc9e 	bl	8001100 <AESK_NRF24_get_status>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
	AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
 80017ce:	2170      	movs	r1, #112	; 0x70
 80017d0:	2007      	movs	r0, #7
 80017d2:	f7ff fbe1 	bl	8000f98 <AESK_NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf14      	ite	ne
 8001808:	2301      	movne	r3, #1
 800180a:	2300      	moveq	r3, #0
 800180c:	b2da      	uxtb	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <AESK_NRF24_resetStatus>:
	return AESK_NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void AESK_NRF24_resetStatus(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
 800181e:	2170      	movs	r1, #112	; 0x70
 8001820:	2007      	movs	r0, #7
 8001822:	f7ff fbb9 	bl	8000f98 <AESK_NRF24_write_register>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <AESK_NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void AESK_NRF24_ACTIVATE_cmd(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	AESK_NRF24_csn(0);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fb1c 	bl	8000e70 <AESK_NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001838:	2350      	movs	r3, #80	; 0x50
 800183a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800183c:	2373      	movs	r3, #115	; 0x73
 800183e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(nrf24_hspi, cmdRxBuf, 2, 100);
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <AESK_NRF24_ACTIVATE_cmd+0x30>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	1d39      	adds	r1, r7, #4
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2202      	movs	r2, #2
 800184a:	f001 ffd2 	bl	80037f2 <HAL_SPI_Transmit>
	AESK_NRF24_csn(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff fb0e 	bl	8000e70 <AESK_NRF24_csn>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000060 	.word	0x20000060

08001860 <AESK_NRF24_Set_PipeAdress>:
{
	return ack_payload_length;
}

void AESK_NRF24_Set_PipeAdress(uint64_t TxpipeAddrs)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	e9c7 0100 	strd	r0, r1, [r7]
	aesk_nrf24_data.TxpipeAddrs = TxpipeAddrs;
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <AESK_NRF24_Set_PipeAdress+0x2c>)
 800186c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001870:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
	AESK_NRF24_openWritingPipe(aesk_nrf24_data.TxpipeAddrs);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <AESK_NRF24_Set_PipeAdress+0x2c>)
 8001876:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff fdd8 	bl	8001432 <AESK_NRF24_openWritingPipe>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000070 	.word	0x20000070

08001890 <AESK_NRF24_ReadPack>:

void AESK_NRF24_ReadPack()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0

	if(AESK_NRF24_available())
 8001896:	f7ff fd93 	bl	80013c0 <AESK_NRF24_available>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05a      	beq.n	8001956 <AESK_NRF24_ReadPack+0xc6>
	{
		uint8_t tempBuf[32];
		int i;

		AESK_NRF24_read(tempBuf, payload_size);
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <AESK_NRF24_ReadPack+0xd0>)
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd91 	bl	80013d0 <AESK_NRF24_read>
		for (i = 0; i < payload_size-1; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
 80018b2:	e011      	b.n	80018d8 <AESK_NRF24_ReadPack+0x48>
		{
			aesk_nrf24_data.RxBuffer[aesk_nrf24_data.ReadByte++] = tempBuf[i];
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 80018b6:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	b291      	uxth	r1, r2
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 80018c0:	f8a2 11fe 	strh.w	r1, [r2, #510]	; 0x1fe
 80018c4:	4619      	mov	r1, r3
 80018c6:	1d3a      	adds	r2, r7, #4
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	4413      	add	r3, r2
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 80018d0:	545a      	strb	r2, [r3, r1]
		for (i = 0; i < payload_size-1; i++)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	3301      	adds	r3, #1
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <AESK_NRF24_ReadPack+0xd0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbe7      	blt.n	80018b4 <AESK_NRF24_ReadPack+0x24>
		}
		aesk_nrf24_data.packCount = tempBuf[i];
 80018e4:	1d3a      	adds	r2, r7, #4
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	4413      	add	r3, r2
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 80018ee:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
		if((aesk_nrf24_data.packCount - aesk_nrf24_data.lastPackCount == 1))
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 80018f4:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 80018fc:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <AESK_NRF24_ReadPack+0x84>
		{
			aesk_nrf24_data.lastPackCount = aesk_nrf24_data.packCount;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 8001908:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 800190e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8001912:	e007      	b.n	8001924 <AESK_NRF24_ReadPack+0x94>
		}
		else
		{
			aesk_nrf24_data.ReadByte = 0;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 8001916:	2200      	movs	r2, #0
 8001918:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
			aesk_nrf24_data.lastPackCount = 0;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
		}
		if(aesk_nrf24_data.ReadByte >= aesk_nrf24_data.RxBuffer[1])
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 8001926:	f8b3 21fe 	ldrh.w	r2, [r3, #510]	; 0x1fe
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	b29b      	uxth	r3, r3
 8001930:	429a      	cmp	r2, r3
 8001932:	d310      	bcc.n	8001956 <AESK_NRF24_ReadPack+0xc6>
		{
			aesk_nrf24_data.ReadByte = 0;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 8001936:	2200      	movs	r2, #0
 8001938:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
			aesk_nrf24_data.lastPackCount = 0;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219

			aesk_nrf24_data.onReceive(aesk_nrf24_data.RxBuffer, aesk_nrf24_data.RxBuffer[1]);
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 8001946:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 800194c:	7852      	ldrb	r2, [r2, #1]
 800194e:	b292      	uxth	r2, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <AESK_NRF24_ReadPack+0xd4>)
 8001954:	4798      	blx	r3
	}
//	else
//	{
//		CDC_Transmit_FS(aesk_nrf24_data.ErrorBuffer, 2);
//	}
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000052 	.word	0x20000052
 8001964:	20000070 	.word	0x20000070

08001968 <AESK_NRF24_WritePack>:
bool AESK_NRF24_WritePack(uint8_t * pack, uint16_t len, uint64_t TxpipeAddrs)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	e9c7 2300 	strd	r2, r3, [r7]
 8001974:	460b      	mov	r3, r1
 8001976:	817b      	strh	r3, [r7, #10]
	AESK_NRF24_stopListening();
 8001978:	f7ff fcca 	bl	8001310 <AESK_NRF24_stopListening>

	AESK_NRF24_Set_PipeAdress(TxpipeAddrs);
 800197c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001980:	f7ff ff6e 	bl	8001860 <AESK_NRF24_Set_PipeAdress>

	bool status;
	int i;
	aesk_nrf24_data.packCounter = 1;
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 8001986:	2201      	movs	r2, #1
 8001988:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b

	while(aesk_nrf24_data.WrittenByte < len)
 800198c:	e041      	b.n	8001a12 <AESK_NRF24_WritePack+0xaa>
	{
		uint8_t tempBuf[32] = {0};
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]
		for (i = 0; i < payload_size-1; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
 80019aa:	e014      	b.n	80019d6 <AESK_NRF24_WritePack+0x6e>
		{
			tempBuf[i] = pack[aesk_nrf24_data.WrittenByte++];
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 80019ae:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	b291      	uxth	r1, r2
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 80019b8:	f8a2 1200 	strh.w	r1, [r2, #512]	; 0x200
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	7819      	ldrb	r1, [r3, #0]
 80019c4:	f107 0210 	add.w	r2, r7, #16
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ca:	4413      	add	r3, r2
 80019cc:	460a      	mov	r2, r1
 80019ce:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < payload_size-1; i++)
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	3301      	adds	r3, #1
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <AESK_NRF24_WritePack+0xe4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbe4      	blt.n	80019ac <AESK_NRF24_WritePack+0x44>
		}
		tempBuf[i] = aesk_nrf24_data.packCounter++;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 80019e4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	b2d1      	uxtb	r1, r2
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 80019ee:	f882 121b 	strb.w	r1, [r2, #539]	; 0x21b
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f8:	440a      	add	r2, r1
 80019fa:	7013      	strb	r3, [r2, #0]
		status = AESK_NRF24_write(tempBuf, payload_size);
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <AESK_NRF24_WritePack+0xe4>)
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fc8e 	bl	8001328 <AESK_NRF24_write>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(aesk_nrf24_data.WrittenByte < len)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 8001a14:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001a18:	897a      	ldrh	r2, [r7, #10]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d8b7      	bhi.n	800198e <AESK_NRF24_WritePack+0x26>
	}

	if(status)
 8001a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <AESK_NRF24_WritePack+0xc8>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a2a:	4809      	ldr	r0, [pc, #36]	; (8001a50 <AESK_NRF24_WritePack+0xe8>)
 8001a2c:	f001 f9e5 	bl	8002dfa <HAL_GPIO_TogglePin>

	aesk_nrf24_data.WrittenByte = 0;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <AESK_NRF24_WritePack+0xe0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	AESK_NRF24_startListening();
 8001a38:	f7ff fc44 	bl	80012c4 <AESK_NRF24_startListening>
	return status;
 8001a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000070 	.word	0x20000070
 8001a4c:	20000052 	.word	0x20000052
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	00000000 	.word	0x00000000

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f000 fe69 	bl	8002734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a62:	f000 fa11 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f000 faaf 	bl	8001fc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a6a:	f000 fa77 	bl	8001f5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  AESK_NRF24_DATA_Init(48, thisNode, &onReceive);
 8001a6e:	4bb8      	ldr	r3, [pc, #736]	; (8001d50 <main+0x2f8>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	49b7      	ldr	r1, [pc, #732]	; (8001d54 <main+0x2fc>)
 8001a76:	9100      	str	r1, [sp, #0]
 8001a78:	2030      	movs	r0, #48	; 0x30
 8001a7a:	f7ff f9a5 	bl	8000dc8 <AESK_NRF24_DATA_Init>
  AESK_NRF24_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_Pin);
 8001a7e:	2320      	movs	r3, #32
 8001a80:	2210      	movs	r2, #16
 8001a82:	49b5      	ldr	r1, [pc, #724]	; (8001d58 <main+0x300>)
 8001a84:	48b5      	ldr	r0, [pc, #724]	; (8001d5c <main+0x304>)
 8001a86:	f7ff f969 	bl	8000d5c <AESK_NRF24_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tt.time_task_t.task_20_Hz == 1 && onReceiveFlag == 1)
 8001a8a:	4bb5      	ldr	r3, [pc, #724]	; (8001d60 <main+0x308>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f8      	beq.n	8001a8a <main+0x32>
 8001a98:	4bb2      	ldr	r3, [pc, #712]	; (8001d64 <main+0x30c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f4      	beq.n	8001a8a <main+0x32>
	  {
		  counter += 2;
 8001aa0:	4bb1      	ldr	r3, [pc, #708]	; (8001d68 <main+0x310>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4baf      	ldr	r3, [pc, #700]	; (8001d68 <main+0x310>)
 8001aaa:	801a      	strh	r2, [r3, #0]
		  indexTx = 2;
 8001aac:	4baf      	ldr	r3, [pc, #700]	; (8001d6c <main+0x314>)
 8001aae:	2202      	movs	r2, #2
 8001ab0:	801a      	strh	r2, [r3, #0]

		  yaw = counter*255/500;
 8001ab2:	4bad      	ldr	r3, [pc, #692]	; (8001d68 <main+0x310>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4613      	mov	r3, r2
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	4aac      	ldr	r2, [pc, #688]	; (8001d70 <main+0x318>)
 8001ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac4:	1152      	asrs	r2, r2, #5
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad2:	4ba8      	ldr	r3, [pc, #672]	; (8001d74 <main+0x31c>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
		  roll = counter*180/500;
 8001ad8:	4ba3      	ldr	r3, [pc, #652]	; (8001d68 <main+0x310>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	23b4      	movs	r3, #180	; 0xb4
 8001ae0:	fb03 f302 	mul.w	r3, r3, r2
 8001ae4:	4aa2      	ldr	r2, [pc, #648]	; (8001d70 <main+0x318>)
 8001ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aea:	1152      	asrs	r2, r2, #5
 8001aec:	17db      	asrs	r3, r3, #31
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	4b9f      	ldr	r3, [pc, #636]	; (8001d78 <main+0x320>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]
		  pitch = counter*180/500;
 8001afe:	4b9a      	ldr	r3, [pc, #616]	; (8001d68 <main+0x310>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	23b4      	movs	r3, #180	; 0xb4
 8001b06:	fb03 f302 	mul.w	r3, r3, r2
 8001b0a:	4a99      	ldr	r2, [pc, #612]	; (8001d70 <main+0x318>)
 8001b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b10:	1152      	asrs	r2, r2, #5
 8001b12:	17db      	asrs	r3, r3, #31
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1e:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <main+0x324>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		  altitude = counter;
 8001b24:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <main+0x310>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b30:	4b93      	ldr	r3, [pc, #588]	; (8001d80 <main+0x328>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
		  motor1 = 1000 + counter*700/500;
 8001b36:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <main+0x310>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001b40:	fb03 f302 	mul.w	r3, r3, r2
 8001b44:	4a8a      	ldr	r2, [pc, #552]	; (8001d70 <main+0x318>)
 8001b46:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4a:	1152      	asrs	r2, r2, #5
 8001b4c:	17db      	asrs	r3, r3, #31
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b8a      	ldr	r3, [pc, #552]	; (8001d84 <main+0x32c>)
 8001b5a:	801a      	strh	r2, [r3, #0]
		  motor2 = 1000 + counter*700/500;
 8001b5c:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <main+0x310>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001b66:	fb03 f302 	mul.w	r3, r3, r2
 8001b6a:	4a81      	ldr	r2, [pc, #516]	; (8001d70 <main+0x318>)
 8001b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b70:	1152      	asrs	r2, r2, #5
 8001b72:	17db      	asrs	r3, r3, #31
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <main+0x330>)
 8001b80:	801a      	strh	r2, [r3, #0]
		  motor3 = 1000 + counter*700/500;
 8001b82:	4b79      	ldr	r3, [pc, #484]	; (8001d68 <main+0x310>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001b8c:	fb03 f302 	mul.w	r3, r3, r2
 8001b90:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <main+0x318>)
 8001b92:	fb82 1203 	smull	r1, r2, r2, r3
 8001b96:	1152      	asrs	r2, r2, #5
 8001b98:	17db      	asrs	r3, r3, #31
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <main+0x334>)
 8001ba6:	801a      	strh	r2, [r3, #0]
		  motor4 = 1000 + counter*700/500;
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <main+0x310>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001bb2:	fb03 f302 	mul.w	r3, r3, r2
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <main+0x318>)
 8001bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bbc:	1152      	asrs	r2, r2, #5
 8001bbe:	17db      	asrs	r3, r3, #31
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b71      	ldr	r3, [pc, #452]	; (8001d90 <main+0x338>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		  yawError = yaw - 55;
 8001bce:	4b69      	ldr	r3, [pc, #420]	; (8001d74 <main+0x31c>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001d94 <main+0x33c>
 8001bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bdc:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <main+0x340>)
 8001bde:	edc3 7a00 	vstr	s15, [r3]
		  rollError = roll - 45;
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <main+0x320>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001d9c <main+0x344>
 8001bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <main+0x348>)
 8001bf2:	edc3 7a00 	vstr	s15, [r3]
		  pitchError = pitch - 45;
 8001bf6:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <main+0x324>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001d9c <main+0x344>
 8001c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <main+0x34c>)
 8001c06:	edc3 7a00 	vstr	s15, [r3]
		  altitudeError = altitude - 3;
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <main+0x328>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c18:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <main+0x350>)
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
		  latitude_f32 = 41.02539 - counter*0.0001;
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <main+0x310>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fd4c 	bl	80006c0 <__aeabi_i2d>
 8001c28:	a343      	add	r3, pc, #268	; (adr r3, 8001d38 <main+0x2e0>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe facb 	bl	80001c8 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	a142      	add	r1, pc, #264	; (adr r1, 8001d40 <main+0x2e8>)
 8001c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c3c:	f7fe fbf2 	bl	8000424 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe fda4 	bl	8000794 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a57      	ldr	r2, [pc, #348]	; (8001dac <main+0x354>)
 8001c50:	6013      	str	r3, [r2, #0]
		  longtitude_f32 = 28.88818 - counter*0.0001;
 8001c52:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <main+0x310>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fd32 	bl	80006c0 <__aeabi_i2d>
 8001c5c:	a336      	add	r3, pc, #216	; (adr r3, 8001d38 <main+0x2e0>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fab1 	bl	80001c8 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	a137      	add	r1, pc, #220	; (adr r1, 8001d48 <main+0x2f0>)
 8001c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c70:	f7fe fbd8 	bl	8000424 <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe fd8a 	bl	8000794 <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a4b      	ldr	r2, [pc, #300]	; (8001db0 <main+0x358>)
 8001c84:	6013      	str	r3, [r2, #0]

		  AESK_FLOAT32toUINT8_LE(&yaw,aesk_nrf24_data.TxBuffer,&indexTx);
 8001c86:	4a39      	ldr	r2, [pc, #228]	; (8001d6c <main+0x314>)
 8001c88:	494a      	ldr	r1, [pc, #296]	; (8001db4 <main+0x35c>)
 8001c8a:	483a      	ldr	r0, [pc, #232]	; (8001d74 <main+0x31c>)
 8001c8c:	f7fe ff70 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&roll,aesk_nrf24_data.TxBuffer,&indexTx);
 8001c90:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <main+0x314>)
 8001c92:	4948      	ldr	r1, [pc, #288]	; (8001db4 <main+0x35c>)
 8001c94:	4838      	ldr	r0, [pc, #224]	; (8001d78 <main+0x320>)
 8001c96:	f7fe ff6b 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&pitch,aesk_nrf24_data.TxBuffer,&indexTx);
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <main+0x314>)
 8001c9c:	4945      	ldr	r1, [pc, #276]	; (8001db4 <main+0x35c>)
 8001c9e:	4837      	ldr	r0, [pc, #220]	; (8001d7c <main+0x324>)
 8001ca0:	f7fe ff66 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&altitude, aesk_nrf24_data.TxBuffer,&indexTx);
 8001ca4:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <main+0x314>)
 8001ca6:	4943      	ldr	r1, [pc, #268]	; (8001db4 <main+0x35c>)
 8001ca8:	4835      	ldr	r0, [pc, #212]	; (8001d80 <main+0x328>)
 8001caa:	f7fe ff61 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>

		  AESK_UINT16toUINT8_LE(&motor1,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <main+0x314>)
 8001cb0:	4940      	ldr	r1, [pc, #256]	; (8001db4 <main+0x35c>)
 8001cb2:	4834      	ldr	r0, [pc, #208]	; (8001d84 <main+0x32c>)
 8001cb4:	f7fe ff3a 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&motor2,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	; (8001d6c <main+0x314>)
 8001cba:	493e      	ldr	r1, [pc, #248]	; (8001db4 <main+0x35c>)
 8001cbc:	4832      	ldr	r0, [pc, #200]	; (8001d88 <main+0x330>)
 8001cbe:	f7fe ff35 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&motor3,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cc2:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <main+0x314>)
 8001cc4:	493b      	ldr	r1, [pc, #236]	; (8001db4 <main+0x35c>)
 8001cc6:	4831      	ldr	r0, [pc, #196]	; (8001d8c <main+0x334>)
 8001cc8:	f7fe ff30 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&motor4,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <main+0x314>)
 8001cce:	4939      	ldr	r1, [pc, #228]	; (8001db4 <main+0x35c>)
 8001cd0:	482f      	ldr	r0, [pc, #188]	; (8001d90 <main+0x338>)
 8001cd2:	f7fe ff2b 	bl	8000b2c <AESK_UINT16toUINT8_LE>

		  AESK_FLOAT32toUINT8_LE(&yawError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cd6:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <main+0x314>)
 8001cd8:	4936      	ldr	r1, [pc, #216]	; (8001db4 <main+0x35c>)
 8001cda:	482f      	ldr	r0, [pc, #188]	; (8001d98 <main+0x340>)
 8001cdc:	f7fe ff48 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&rollError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001ce0:	4a22      	ldr	r2, [pc, #136]	; (8001d6c <main+0x314>)
 8001ce2:	4934      	ldr	r1, [pc, #208]	; (8001db4 <main+0x35c>)
 8001ce4:	482e      	ldr	r0, [pc, #184]	; (8001da0 <main+0x348>)
 8001ce6:	f7fe ff43 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&pitchError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cea:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <main+0x314>)
 8001cec:	4931      	ldr	r1, [pc, #196]	; (8001db4 <main+0x35c>)
 8001cee:	482d      	ldr	r0, [pc, #180]	; (8001da4 <main+0x34c>)
 8001cf0:	f7fe ff3e 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&altitudeError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <main+0x314>)
 8001cf6:	492f      	ldr	r1, [pc, #188]	; (8001db4 <main+0x35c>)
 8001cf8:	482b      	ldr	r0, [pc, #172]	; (8001da8 <main+0x350>)
 8001cfa:	f7fe ff39 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>

		  AESK_FLOAT32toUINT8_LE(&latitude_f32,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <main+0x314>)
 8001d00:	492c      	ldr	r1, [pc, #176]	; (8001db4 <main+0x35c>)
 8001d02:	482a      	ldr	r0, [pc, #168]	; (8001dac <main+0x354>)
 8001d04:	f7fe ff34 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&longtitude_f32,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <main+0x314>)
 8001d0a:	492a      	ldr	r1, [pc, #168]	; (8001db4 <main+0x35c>)
 8001d0c:	4828      	ldr	r0, [pc, #160]	; (8001db0 <main+0x358>)
 8001d0e:	f7fe ff2f 	bl	8000b70 <AESK_FLOAT32toUINT8_LE>

		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc1,aesk_nrf24_data.TxBuffer,&indexTx);
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <main+0x314>)
 8001d14:	4927      	ldr	r1, [pc, #156]	; (8001db4 <main+0x35c>)
 8001d16:	4828      	ldr	r0, [pc, #160]	; (8001db8 <main+0x360>)
 8001d18:	f7fe ff08 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc2,aesk_nrf24_data.TxBuffer,&indexTx);
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <main+0x314>)
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <main+0x35c>)
 8001d20:	4826      	ldr	r0, [pc, #152]	; (8001dbc <main+0x364>)
 8001d22:	f7fe ff03 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc3,aesk_nrf24_data.TxBuffer,&indexTx);
 8001d26:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <main+0x314>)
 8001d28:	4922      	ldr	r1, [pc, #136]	; (8001db4 <main+0x35c>)
 8001d2a:	4825      	ldr	r0, [pc, #148]	; (8001dc0 <main+0x368>)
 8001d2c:	f7fe fefe 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc3,aesk_nrf24_data.TxBuffer,&indexTx);
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <main+0x314>)
 8001d32:	4920      	ldr	r1, [pc, #128]	; (8001db4 <main+0x35c>)
 8001d34:	e046      	b.n	8001dc4 <main+0x36c>
 8001d36:	bf00      	nop
 8001d38:	eb1c432d 	.word	0xeb1c432d
 8001d3c:	3f1a36e2 	.word	0x3f1a36e2
 8001d40:	fac1d29e 	.word	0xfac1d29e
 8001d44:	4044833f 	.word	0x4044833f
 8001d48:	c3b4f616 	.word	0xc3b4f616
 8001d4c:	403ce35f 	.word	0x403ce35f
 8001d50:	20000008 	.word	0x20000008
 8001d54:	08002125 	.word	0x08002125
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	200002b8 	.word	0x200002b8
 8001d60:	2000006c 	.word	0x2000006c
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000064 	.word	0x20000064
 8001d6c:	2000037a 	.word	0x2000037a
 8001d70:	10624dd3 	.word	0x10624dd3
 8001d74:	20000310 	.word	0x20000310
 8001d78:	20000374 	.word	0x20000374
 8001d7c:	20000370 	.word	0x20000370
 8001d80:	200002b0 	.word	0x200002b0
 8001d84:	200002b4 	.word	0x200002b4
 8001d88:	20000290 	.word	0x20000290
 8001d8c:	20000378 	.word	0x20000378
 8001d90:	200002a0 	.word	0x200002a0
 8001d94:	425c0000 	.word	0x425c0000
 8001d98:	2000029c 	.word	0x2000029c
 8001d9c:	42340000 	.word	0x42340000
 8001da0:	20000298 	.word	0x20000298
 8001da4:	200002a4 	.word	0x200002a4
 8001da8:	200002ac 	.word	0x200002ac
 8001dac:	20000294 	.word	0x20000294
 8001db0:	200002a8 	.word	0x200002a8
 8001db4:	2000016f 	.word	0x2000016f
 8001db8:	2000035c 	.word	0x2000035c
 8001dbc:	2000035e 	.word	0x2000035e
 8001dc0:	20000360 	.word	0x20000360
 8001dc4:	4822      	ldr	r0, [pc, #136]	; (8001e50 <main+0x3f8>)
 8001dc6:	f7fe feb1 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc4,aesk_nrf24_data.TxBuffer,&indexTx);
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <main+0x3fc>)
 8001dcc:	4922      	ldr	r1, [pc, #136]	; (8001e58 <main+0x400>)
 8001dce:	4823      	ldr	r0, [pc, #140]	; (8001e5c <main+0x404>)
 8001dd0:	f7fe feac 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc5,aesk_nrf24_data.TxBuffer,&indexTx);
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <main+0x3fc>)
 8001dd6:	4920      	ldr	r1, [pc, #128]	; (8001e58 <main+0x400>)
 8001dd8:	4821      	ldr	r0, [pc, #132]	; (8001e60 <main+0x408>)
 8001dda:	f7fe fea7 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc6,aesk_nrf24_data.TxBuffer,&indexTx);
 8001dde:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <main+0x3fc>)
 8001de0:	491d      	ldr	r1, [pc, #116]	; (8001e58 <main+0x400>)
 8001de2:	4820      	ldr	r0, [pc, #128]	; (8001e64 <main+0x40c>)
 8001de4:	f7fe fea2 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc7,aesk_nrf24_data.TxBuffer,&indexTx);
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <main+0x3fc>)
 8001dea:	491b      	ldr	r1, [pc, #108]	; (8001e58 <main+0x400>)
 8001dec:	481e      	ldr	r0, [pc, #120]	; (8001e68 <main+0x410>)
 8001dee:	f7fe fe9d 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc8,aesk_nrf24_data.TxBuffer,&indexTx);
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <main+0x3fc>)
 8001df4:	4918      	ldr	r1, [pc, #96]	; (8001e58 <main+0x400>)
 8001df6:	481d      	ldr	r0, [pc, #116]	; (8001e6c <main+0x414>)
 8001df8:	f7fe fe98 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc9,aesk_nrf24_data.TxBuffer,&indexTx);
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <main+0x3fc>)
 8001dfe:	4916      	ldr	r1, [pc, #88]	; (8001e58 <main+0x400>)
 8001e00:	481b      	ldr	r0, [pc, #108]	; (8001e70 <main+0x418>)
 8001e02:	f7fe fe93 	bl	8000b2c <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc10,aesk_nrf24_data.TxBuffer,&indexTx);
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <main+0x3fc>)
 8001e08:	4913      	ldr	r1, [pc, #76]	; (8001e58 <main+0x400>)
 8001e0a:	481a      	ldr	r0, [pc, #104]	; (8001e74 <main+0x41c>)
 8001e0c:	f7fe fe8e 	bl	8000b2c <AESK_UINT16toUINT8_LE>

		  aesk_nrf24_data.TxBuffer[0] = 'A';
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <main+0x420>)
 8001e12:	2241      	movs	r2, #65	; 0x41
 8001e14:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		  aesk_nrf24_data.TxBuffer[1] = indexTx;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <main+0x3fc>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <main+0x420>)
 8001e20:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

		  AESK_NRF24_WritePack(aesk_nrf24_data.TxBuffer, indexTx, node);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <main+0x3fc>)
 8001e26:	8819      	ldrh	r1, [r3, #0]
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <main+0x424>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <main+0x400>)
 8001e30:	f7ff fd9a 	bl	8001968 <AESK_NRF24_WritePack>

		  if(counter == 500)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <main+0x428>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e3c:	d102      	bne.n	8001e44 <main+0x3ec>
			  counter = 0;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <main+0x428>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	801a      	strh	r2, [r3, #0]

		  tt.time_task_t.task_20_Hz = 0;
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <main+0x42c>)
 8001e46:	7813      	ldrb	r3, [r2, #0]
 8001e48:	f36f 03c3 	bfc	r3, #3, #1
 8001e4c:	7013      	strb	r3, [r2, #0]
	  if(tt.time_task_t.task_20_Hz == 1 && onReceiveFlag == 1)
 8001e4e:	e61c      	b.n	8001a8a <main+0x32>
 8001e50:	20000360 	.word	0x20000360
 8001e54:	2000037a 	.word	0x2000037a
 8001e58:	2000016f 	.word	0x2000016f
 8001e5c:	20000362 	.word	0x20000362
 8001e60:	20000364 	.word	0x20000364
 8001e64:	20000366 	.word	0x20000366
 8001e68:	20000368 	.word	0x20000368
 8001e6c:	2000036a 	.word	0x2000036a
 8001e70:	2000036c 	.word	0x2000036c
 8001e74:	2000036e 	.word	0x2000036e
 8001e78:	20000070 	.word	0x20000070
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	20000064 	.word	0x20000064
 8001e84:	2000006c 	.word	0x2000006c

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	2230      	movs	r2, #48	; 0x30
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 f9ee 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <SystemClock_Config+0xcc>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <SystemClock_Config+0xcc>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <SystemClock_Config+0xcc>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <SystemClock_Config+0xd0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <SystemClock_Config+0xd0>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <SystemClock_Config+0xd0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ef2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 142;
 8001efc:	238e      	movs	r3, #142	; 0x8e
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f04:	2307      	movs	r3, #7
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 ffa7 	bl	8002e60 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f18:	f000 fb26 	bl	8002568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f20:	2302      	movs	r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2104      	movs	r1, #4
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 fa08 	bl	8003350 <HAL_RCC_ClockConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f46:	f000 fb0f 	bl	8002568 <Error_Handler>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3750      	adds	r7, #80	; 0x50
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000

08001f5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <MX_SPI1_Init+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f90:	2210      	movs	r2, #16
 8001f92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001fa8:	220a      	movs	r2, #10
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001fae:	f001 fb97 	bl	80036e0 <HAL_SPI_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fb8:	f000 fad6 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200002b8 	.word	0x200002b8
 8001fc4:	40013000 	.word	0x40013000

08001fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b42      	ldr	r3, [pc, #264]	; (80020ec <MX_GPIO_Init+0x124>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a41      	ldr	r2, [pc, #260]	; (80020ec <MX_GPIO_Init+0x124>)
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <MX_GPIO_Init+0x124>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <MX_GPIO_Init+0x124>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <MX_GPIO_Init+0x124>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <MX_GPIO_Init+0x124>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <MX_GPIO_Init+0x124>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a33      	ldr	r2, [pc, #204]	; (80020ec <MX_GPIO_Init+0x124>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <MX_GPIO_Init+0x124>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <MX_GPIO_Init+0x124>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <MX_GPIO_Init+0x124>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <MX_GPIO_Init+0x124>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <MX_GPIO_Init+0x124>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <MX_GPIO_Init+0x124>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <MX_GPIO_Init+0x124>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2130      	movs	r1, #48	; 0x30
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <MX_GPIO_Init+0x128>)
 8002070:	f000 feaa 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800207a:	481e      	ldr	r0, [pc, #120]	; (80020f4 <MX_GPIO_Init+0x12c>)
 800207c:	f000 fea4 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8002080:	2330      	movs	r3, #48	; 0x30
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4816      	ldr	r0, [pc, #88]	; (80020f0 <MX_GPIO_Init+0x128>)
 8002098:	f000 fcfa 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800209c:	2302      	movs	r3, #2
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4811      	ldr	r0, [pc, #68]	; (80020f8 <MX_GPIO_Init+0x130>)
 80020b2:	f000 fced 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80020b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <MX_GPIO_Init+0x12c>)
 80020d0:	f000 fcde 	bl	8002a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	2007      	movs	r0, #7
 80020da:	f000 fc9c 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020de:	2007      	movs	r0, #7
 80020e0:	f000 fcb5 	bl	8002a4e <HAL_NVIC_EnableIRQ>

}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40020400 	.word	0x40020400

080020fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
	onReceiveFlag = 0;
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_GPIO_EXTI_Callback+0x24>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]

	AESK_NRF24_ReadPack();
 800210c:	f7ff fbc0 	bl	8001890 <AESK_NRF24_ReadPack>

	onReceiveFlag = 1;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GPIO_EXTI_Callback+0x24>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <onReceive>:
void onReceive(uint8_t * pack, uint16_t len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
	if(*pack != 'T')
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b54      	cmp	r3, #84	; 0x54
 8002136:	d006      	beq.n	8002146 <onReceive+0x22>
		AESK_NRF24_WritePack(pack, len, node);
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <onReceive+0x38>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	8879      	ldrh	r1, [r7, #2]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fc11 	bl	8001968 <AESK_NRF24_WritePack>

	parseBuffer(pack);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f80c 	bl	8002164 <parseBuffer>

	onReceiveFlag = 1;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <onReceive+0x3c>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000010 	.word	0x20000010
 8002160:	20000000 	.word	0x20000000

08002164 <parseBuffer>:

void parseBuffer(uint8_t * buffer)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	uint16_t index = 2;
 800216c:	2302      	movs	r3, #2
 800216e:	81fb      	strh	r3, [r7, #14]

	if(aesk_nrf24_data.RxBuffer[0] == 'P')
 8002170:	4bb6      	ldr	r3, [pc, #728]	; (800244c <parseBuffer+0x2e8>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b50      	cmp	r3, #80	; 0x50
 8002176:	f040 8193 	bne.w	80024a0 <parseBuffer+0x33c>
	{
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKp,buffer,&index);
 800217a:	f107 030e 	add.w	r3, r7, #14
 800217e:	461a      	mov	r2, r3
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	48b3      	ldr	r0, [pc, #716]	; (8002450 <parseBuffer+0x2ec>)
 8002184:	f7fe fd49 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKi,buffer,&index);
 8002188:	f107 030e 	add.w	r3, r7, #14
 800218c:	461a      	mov	r2, r3
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	48b0      	ldr	r0, [pc, #704]	; (8002454 <parseBuffer+0x2f0>)
 8002192:	f7fe fd42 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKd,buffer,&index);
 8002196:	f107 030e 	add.w	r3, r7, #14
 800219a:	461a      	mov	r2, r3
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	48ae      	ldr	r0, [pc, #696]	; (8002458 <parseBuffer+0x2f4>)
 80021a0:	f7fe fd3b 	bl	8000c1a <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKp,buffer,&index);
 80021a4:	f107 030e 	add.w	r3, r7, #14
 80021a8:	461a      	mov	r2, r3
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	48ab      	ldr	r0, [pc, #684]	; (800245c <parseBuffer+0x2f8>)
 80021ae:	f7fe fd34 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKi,buffer,&index);
 80021b2:	f107 030e 	add.w	r3, r7, #14
 80021b6:	461a      	mov	r2, r3
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	48a9      	ldr	r0, [pc, #676]	; (8002460 <parseBuffer+0x2fc>)
 80021bc:	f7fe fd2d 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKd,buffer,&index);
 80021c0:	f107 030e 	add.w	r3, r7, #14
 80021c4:	461a      	mov	r2, r3
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	48a6      	ldr	r0, [pc, #664]	; (8002464 <parseBuffer+0x300>)
 80021ca:	f7fe fd26 	bl	8000c1a <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKp,buffer,&index);
 80021ce:	f107 030e 	add.w	r3, r7, #14
 80021d2:	461a      	mov	r2, r3
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	48a4      	ldr	r0, [pc, #656]	; (8002468 <parseBuffer+0x304>)
 80021d8:	f7fe fd1f 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKi,buffer,&index);
 80021dc:	f107 030e 	add.w	r3, r7, #14
 80021e0:	461a      	mov	r2, r3
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	48a1      	ldr	r0, [pc, #644]	; (800246c <parseBuffer+0x308>)
 80021e6:	f7fe fd18 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKd,buffer,&index);
 80021ea:	f107 030e 	add.w	r3, r7, #14
 80021ee:	461a      	mov	r2, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	489f      	ldr	r0, [pc, #636]	; (8002470 <parseBuffer+0x30c>)
 80021f4:	f7fe fd11 	bl	8000c1a <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKp,buffer,&index);
 80021f8:	f107 030e 	add.w	r3, r7, #14
 80021fc:	461a      	mov	r2, r3
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	489c      	ldr	r0, [pc, #624]	; (8002474 <parseBuffer+0x310>)
 8002202:	f7fe fd0a 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKi,buffer,&index);
 8002206:	f107 030e 	add.w	r3, r7, #14
 800220a:	461a      	mov	r2, r3
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	489a      	ldr	r0, [pc, #616]	; (8002478 <parseBuffer+0x314>)
 8002210:	f7fe fd03 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKd,buffer,&index);
 8002214:	f107 030e 	add.w	r3, r7, #14
 8002218:	461a      	mov	r2, r3
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4897      	ldr	r0, [pc, #604]	; (800247c <parseBuffer+0x318>)
 800221e:	f7fe fcfc 	bl	8000c1a <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kp,buffer,&index);
 8002222:	f107 030e 	add.w	r3, r7, #14
 8002226:	461a      	mov	r2, r3
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4895      	ldr	r0, [pc, #596]	; (8002480 <parseBuffer+0x31c>)
 800222c:	f7fe fcf5 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Ki,buffer,&index);
 8002230:	f107 030e 	add.w	r3, r7, #14
 8002234:	461a      	mov	r2, r3
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4892      	ldr	r0, [pc, #584]	; (8002484 <parseBuffer+0x320>)
 800223a:	f7fe fcee 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kd,buffer,&index);
 800223e:	f107 030e 	add.w	r3, r7, #14
 8002242:	461a      	mov	r2, r3
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4890      	ldr	r0, [pc, #576]	; (8002488 <parseBuffer+0x324>)
 8002248:	f7fe fce7 	bl	8000c1a <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kp,buffer,&index);
 800224c:	f107 030e 	add.w	r3, r7, #14
 8002250:	461a      	mov	r2, r3
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	488d      	ldr	r0, [pc, #564]	; (800248c <parseBuffer+0x328>)
 8002256:	f7fe fce0 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Ki,buffer,&index);
 800225a:	f107 030e 	add.w	r3, r7, #14
 800225e:	461a      	mov	r2, r3
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	488b      	ldr	r0, [pc, #556]	; (8002490 <parseBuffer+0x32c>)
 8002264:	f7fe fcd9 	bl	8000c1a <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kd,buffer,&index);
 8002268:	f107 030e 	add.w	r3, r7, #14
 800226c:	461a      	mov	r2, r3
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4888      	ldr	r0, [pc, #544]	; (8002494 <parseBuffer+0x330>)
 8002272:	f7fe fcd2 	bl	8000c1a <AESK_UINT8toUINT24_LE>


		aesk_Rx_Datas_Float.floatRollPitchKp = (float)aesk_Rx_Datas_Int.RollPitchKp/100000;
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <parseBuffer+0x2ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002282:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002498 <parseBuffer+0x334>
 8002286:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800228a:	4b84      	ldr	r3, [pc, #528]	; (800249c <parseBuffer+0x338>)
 800228c:	edc3 7a00 	vstr	s15, [r3]
		aesk_Rx_Datas_Float.floatRollPitchKi = (float)aesk_Rx_Datas_Int.RollPitchKi/100000;
 8002290:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <parseBuffer+0x2ec>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002498 <parseBuffer+0x334>
 80022a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a4:	4b7d      	ldr	r3, [pc, #500]	; (800249c <parseBuffer+0x338>)
 80022a6:	edc3 7a01 	vstr	s15, [r3, #4]
		aesk_Rx_Datas_Float.floatRollPitchKd = (float)aesk_Rx_Datas_Int.RollPitchKd/100000;
 80022aa:	4b69      	ldr	r3, [pc, #420]	; (8002450 <parseBuffer+0x2ec>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b6:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002498 <parseBuffer+0x334>
 80022ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022be:	4b77      	ldr	r3, [pc, #476]	; (800249c <parseBuffer+0x338>)
 80022c0:	edc3 7a02 	vstr	s15, [r3, #8]

		aesk_Rx_Datas_Float.floatYawKp = (float)aesk_Rx_Datas_Int.YawKp/100000;
 80022c4:	4b62      	ldr	r3, [pc, #392]	; (8002450 <parseBuffer+0x2ec>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d0:	eddf 6a71 	vldr	s13, [pc, #452]	; 8002498 <parseBuffer+0x334>
 80022d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022d8:	4b70      	ldr	r3, [pc, #448]	; (800249c <parseBuffer+0x338>)
 80022da:	edc3 7a03 	vstr	s15, [r3, #12]
		aesk_Rx_Datas_Float.floatYawKi = (float)aesk_Rx_Datas_Int.YawKi/100000;
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <parseBuffer+0x2ec>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ea:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002498 <parseBuffer+0x334>
 80022ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f2:	4b6a      	ldr	r3, [pc, #424]	; (800249c <parseBuffer+0x338>)
 80022f4:	edc3 7a04 	vstr	s15, [r3, #16]
		aesk_Rx_Datas_Float.floatYawKd = (float)aesk_Rx_Datas_Int.YawKd/100000;
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <parseBuffer+0x2ec>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002304:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002498 <parseBuffer+0x334>
 8002308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230c:	4b63      	ldr	r3, [pc, #396]	; (800249c <parseBuffer+0x338>)
 800230e:	edc3 7a05 	vstr	s15, [r3, #20]

		aesk_Rx_Datas_Float.floatAltitudeKp = (float)aesk_Rx_Datas_Int.AltitudeKp/100000;
 8002312:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <parseBuffer+0x2ec>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231e:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002498 <parseBuffer+0x334>
 8002322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <parseBuffer+0x338>)
 8002328:	edc3 7a06 	vstr	s15, [r3, #24]
		aesk_Rx_Datas_Float.floatAltitudeKi = (float)aesk_Rx_Datas_Int.AltitudeKi/100000;
 800232c:	4b48      	ldr	r3, [pc, #288]	; (8002450 <parseBuffer+0x2ec>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002338:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002498 <parseBuffer+0x334>
 800233c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002340:	4b56      	ldr	r3, [pc, #344]	; (800249c <parseBuffer+0x338>)
 8002342:	edc3 7a07 	vstr	s15, [r3, #28]
		aesk_Rx_Datas_Float.floatAltitudeKd = (float)aesk_Rx_Datas_Int.AltitudeKd/100000;
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <parseBuffer+0x2ec>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002352:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002498 <parseBuffer+0x334>
 8002356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <parseBuffer+0x338>)
 800235c:	edc3 7a08 	vstr	s15, [r3, #32]

		aesk_Rx_Datas_Float.floatGpsKp = (float)aesk_Rx_Datas_Int.GpsKp/100000;
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <parseBuffer+0x2ec>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800236c:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002498 <parseBuffer+0x334>
 8002370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002374:	4b49      	ldr	r3, [pc, #292]	; (800249c <parseBuffer+0x338>)
 8002376:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		aesk_Rx_Datas_Float.floatGpsKi = (float)aesk_Rx_Datas_Int.GpsKi/100000;
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <parseBuffer+0x2ec>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002386:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002498 <parseBuffer+0x334>
 800238a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800238e:	4b43      	ldr	r3, [pc, #268]	; (800249c <parseBuffer+0x338>)
 8002390:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		aesk_Rx_Datas_Float.floatGpsKd = (float)aesk_Rx_Datas_Int.GpsKd/100000;
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <parseBuffer+0x2ec>)
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002498 <parseBuffer+0x334>
 80023a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a8:	4b3c      	ldr	r3, [pc, #240]	; (800249c <parseBuffer+0x338>)
 80023aa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		aesk_Rx_Datas_Float.floatExt1Kp = (float)aesk_Rx_Datas_Int.Ext1Kp/100000;
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <parseBuffer+0x2ec>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ba:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002498 <parseBuffer+0x334>
 80023be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <parseBuffer+0x338>)
 80023c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		aesk_Rx_Datas_Float.floatExt1Ki = (float)aesk_Rx_Datas_Int.Ext1Ki/100000;
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <parseBuffer+0x2ec>)
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002498 <parseBuffer+0x334>
 80023d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023dc:	4b2f      	ldr	r3, [pc, #188]	; (800249c <parseBuffer+0x338>)
 80023de:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		aesk_Rx_Datas_Float.floatExt1Kd = (float)aesk_Rx_Datas_Int.Ext1Kd/100000;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <parseBuffer+0x2ec>)
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ee:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002498 <parseBuffer+0x334>
 80023f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <parseBuffer+0x338>)
 80023f8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		aesk_Rx_Datas_Float.floatExt2Kp = (float)aesk_Rx_Datas_Int.Ext2Kp/100000;
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <parseBuffer+0x2ec>)
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002408:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002498 <parseBuffer+0x334>
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <parseBuffer+0x338>)
 8002412:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		aesk_Rx_Datas_Float.floatExt2Ki = (float)aesk_Rx_Datas_Int.Ext2Ki/100000;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <parseBuffer+0x2ec>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002422:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002498 <parseBuffer+0x334>
 8002426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <parseBuffer+0x338>)
 800242c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		aesk_Rx_Datas_Float.floatExt2Kd = (float)aesk_Rx_Datas_Int.Ext2Kd/100000;
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <parseBuffer+0x2ec>)
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800243c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002498 <parseBuffer+0x334>
 8002440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <parseBuffer+0x338>)
 8002446:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc8,buffer,&index);
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc9,buffer,&index);
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc10,buffer,&index);
	}

}
 800244a:	e073      	b.n	8002534 <parseBuffer+0x3d0>
 800244c:	20000070 	.word	0x20000070
 8002450:	20000314 	.word	0x20000314
 8002454:	20000318 	.word	0x20000318
 8002458:	2000031c 	.word	0x2000031c
 800245c:	20000320 	.word	0x20000320
 8002460:	20000324 	.word	0x20000324
 8002464:	20000328 	.word	0x20000328
 8002468:	2000032c 	.word	0x2000032c
 800246c:	20000330 	.word	0x20000330
 8002470:	20000334 	.word	0x20000334
 8002474:	20000338 	.word	0x20000338
 8002478:	2000033c 	.word	0x2000033c
 800247c:	20000340 	.word	0x20000340
 8002480:	20000344 	.word	0x20000344
 8002484:	20000348 	.word	0x20000348
 8002488:	2000034c 	.word	0x2000034c
 800248c:	20000350 	.word	0x20000350
 8002490:	20000354 	.word	0x20000354
 8002494:	20000358 	.word	0x20000358
 8002498:	47c35000 	.word	0x47c35000
 800249c:	2000037c 	.word	0x2000037c
	else if(aesk_nrf24_data.RxBuffer[0] == 'T')
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <parseBuffer+0x3d8>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b54      	cmp	r3, #84	; 0x54
 80024a6:	d145      	bne.n	8002534 <parseBuffer+0x3d0>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc1,buffer,&index);
 80024a8:	f107 030e 	add.w	r3, r7, #14
 80024ac:	461a      	mov	r2, r3
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4823      	ldr	r0, [pc, #140]	; (8002540 <parseBuffer+0x3dc>)
 80024b2:	f7fe fb8f 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc2,buffer,&index);
 80024b6:	f107 030e 	add.w	r3, r7, #14
 80024ba:	461a      	mov	r2, r3
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4821      	ldr	r0, [pc, #132]	; (8002544 <parseBuffer+0x3e0>)
 80024c0:	f7fe fb88 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc3,buffer,&index);
 80024c4:	f107 030e 	add.w	r3, r7, #14
 80024c8:	461a      	mov	r2, r3
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	481e      	ldr	r0, [pc, #120]	; (8002548 <parseBuffer+0x3e4>)
 80024ce:	f7fe fb81 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc4,buffer,&index);
 80024d2:	f107 030e 	add.w	r3, r7, #14
 80024d6:	461a      	mov	r2, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	481c      	ldr	r0, [pc, #112]	; (800254c <parseBuffer+0x3e8>)
 80024dc:	f7fe fb7a 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc5,buffer,&index);
 80024e0:	f107 030e 	add.w	r3, r7, #14
 80024e4:	461a      	mov	r2, r3
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4819      	ldr	r0, [pc, #100]	; (8002550 <parseBuffer+0x3ec>)
 80024ea:	f7fe fb73 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc6,buffer,&index);
 80024ee:	f107 030e 	add.w	r3, r7, #14
 80024f2:	461a      	mov	r2, r3
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4817      	ldr	r0, [pc, #92]	; (8002554 <parseBuffer+0x3f0>)
 80024f8:	f7fe fb6c 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc7,buffer,&index);
 80024fc:	f107 030e 	add.w	r3, r7, #14
 8002500:	461a      	mov	r2, r3
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4814      	ldr	r0, [pc, #80]	; (8002558 <parseBuffer+0x3f4>)
 8002506:	f7fe fb65 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc8,buffer,&index);
 800250a:	f107 030e 	add.w	r3, r7, #14
 800250e:	461a      	mov	r2, r3
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4812      	ldr	r0, [pc, #72]	; (800255c <parseBuffer+0x3f8>)
 8002514:	f7fe fb5e 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc9,buffer,&index);
 8002518:	f107 030e 	add.w	r3, r7, #14
 800251c:	461a      	mov	r2, r3
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	480f      	ldr	r0, [pc, #60]	; (8002560 <parseBuffer+0x3fc>)
 8002522:	f7fe fb57 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc10,buffer,&index);
 8002526:	f107 030e 	add.w	r3, r7, #14
 800252a:	461a      	mov	r2, r3
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <parseBuffer+0x400>)
 8002530:	f7fe fb50 	bl	8000bd4 <AESK_UINT8toUINT16_LE>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000070 	.word	0x20000070
 8002540:	2000035c 	.word	0x2000035c
 8002544:	2000035e 	.word	0x2000035e
 8002548:	20000360 	.word	0x20000360
 800254c:	20000362 	.word	0x20000362
 8002550:	20000364 	.word	0x20000364
 8002554:	20000366 	.word	0x20000366
 8002558:	20000368 	.word	0x20000368
 800255c:	2000036a 	.word	0x2000036a
 8002560:	2000036c 	.word	0x2000036c
 8002564:	2000036e 	.word	0x2000036e

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002570:	e7fe      	b.n	8002570 <Error_Handler+0x8>
	...

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_MspInit+0x4c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_MspInit+0x4c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_MspInit+0x4c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_MspInit+0x4c>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_MspInit+0x4c>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025b2:	2007      	movs	r0, #7
 80025b4:	f000 fa24 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_SPI_MspInit+0x84>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d12b      	bne.n	800263e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_SPI_MspInit+0x88>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_SPI_MspInit+0x88>)
 80025f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_SPI_MspInit+0x88>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_SPI_MspInit+0x88>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_SPI_MspInit+0x88>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_SPI_MspInit+0x88>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800261e:	23e0      	movs	r3, #224	; 0xe0
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800262e:	2305      	movs	r3, #5
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <HAL_SPI_MspInit+0x8c>)
 800263a:	f000 fa29 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40013000 	.word	0x40013000
 800264c:	40023800 	.word	0x40023800
 8002650:	40020000 	.word	0x40020000

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 f89a 	bl	80027d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80026a4:	f000 f9ed 	bl	8002a82 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH1_OSC_OUT_Pin);
 80026b0:	2002      	movs	r0, #2
 80026b2:	f000 fbbd 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270a:	f7ff ffd7 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f001 fd8f 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7ff f9a1 	bl	8001a58 <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002724:	080042c0 	.word	0x080042c0
  ldr r2, =_sbss
 8002728:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800272c:	200003c8 	.word	0x200003c8

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_Init+0x40>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_Init+0x40>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x40>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f94f 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f808 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff ff04 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f967 	bl	8002a6a <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f000 f92f 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000018 	.word	0x20000018
 80027d0:	20000020 	.word	0x20000020
 80027d4:	2000001c 	.word	0x2000001c

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000020 	.word	0x20000020
 80027fc:	200003c4 	.word	0x200003c4

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200003c4 	.word	0x200003c4

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000020 	.word	0x20000020

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002a86:	f7fe f8f9 	bl	8000c7c <HAL_SYSTICK_Callback>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e16b      	b.n	8002d84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 815a 	bne.w	8002d7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80b4 	beq.w	8002d7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b60      	ldr	r3, [pc, #384]	; (8002d9c <HAL_GPIO_Init+0x30c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a5f      	ldr	r2, [pc, #380]	; (8002d9c <HAL_GPIO_Init+0x30c>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <HAL_GPIO_Init+0x30c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <HAL_GPIO_Init+0x310>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_GPIO_Init+0x314>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02b      	beq.n	8002cb6 <HAL_GPIO_Init+0x226>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <HAL_GPIO_Init+0x318>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d025      	beq.n	8002cb2 <HAL_GPIO_Init+0x222>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_GPIO_Init+0x31c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <HAL_GPIO_Init+0x21e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_GPIO_Init+0x320>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d019      	beq.n	8002caa <HAL_GPIO_Init+0x21a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0x216>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4d      	ldr	r2, [pc, #308]	; (8002db8 <HAL_GPIO_Init+0x328>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00d      	beq.n	8002ca2 <HAL_GPIO_Init+0x212>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <HAL_GPIO_Init+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_GPIO_Init+0x20a>
 8002c96:	2307      	movs	r3, #7
 8002c98:	e00e      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	e00c      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	e00a      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	e008      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002caa:	2303      	movs	r3, #3
 8002cac:	e004      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e002      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_GPIO_Init+0x228>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	f002 0203 	and.w	r2, r2, #3
 8002cbe:	0092      	lsls	r2, r2, #2
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc8:	4935      	ldr	r1, [pc, #212]	; (8002da0 <HAL_GPIO_Init+0x310>)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cfa:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d78:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b0f      	cmp	r3, #15
 8002d88:	f67f ae90 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40013800 	.word	0x40013800
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40020400 	.word	0x40020400
 8002dac:	40020800 	.word	0x40020800
 8002db0:	40020c00 	.word	0x40020c00
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40021400 	.word	0x40021400
 8002dbc:	40021800 	.word	0x40021800
 8002dc0:	40021c00 	.word	0x40021c00
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	041a      	lsls	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f954 	bl	80020fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40013c00 	.word	0x40013c00

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e264      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d075      	beq.n	8002f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	4ba3      	ldr	r3, [pc, #652]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d00c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4ba0      	ldr	r3, [pc, #640]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b9d      	ldr	r3, [pc, #628]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4b99      	ldr	r3, [pc, #612]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05b      	beq.n	8002f68 <HAL_RCC_OscConfig+0x108>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d157      	bne.n	8002f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e23f      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x74>
 8002ec6:	4b91      	ldr	r3, [pc, #580]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a8a      	ldr	r2, [pc, #552]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a87      	ldr	r2, [pc, #540]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	4b84      	ldr	r3, [pc, #528]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a83      	ldr	r2, [pc, #524]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff fc72 	bl	8002800 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f20:	f7ff fc6e 	bl	8002800 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e204      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0xc0>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7ff fc5e 	bl	8002800 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7ff fc5a 	bl	8002800 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1f0      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0xe8>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d063      	beq.n	800303e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b62      	ldr	r3, [pc, #392]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1c4      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4952      	ldr	r1, [pc, #328]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <HAL_RCC_OscConfig+0x2b0>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7ff fc13 	bl	8002800 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7ff fc0f 	bl	8002800 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1a5      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4940      	ldr	r1, [pc, #256]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_OscConfig+0x2b0>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7ff fbf2 	bl	8002800 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7ff fbee 	bl	8002800 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e184      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d030      	beq.n	80030ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCC_OscConfig+0x2b4>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7ff fbd2 	bl	8002800 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7ff fbce 	bl	8002800 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e164      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x200>
 800307e:	e015      	b.n	80030ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x2b4>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7ff fbbb 	bl	8002800 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7ff fbb7 	bl	8002800 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e14d      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a0 	beq.w	80031fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_RCC_OscConfig+0x2b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_RCC_OscConfig+0x2b8>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7ff fb7d 	bl	8002800 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e011      	b.n	800312e <HAL_RCC_OscConfig+0x2ce>
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	42470000 	.word	0x42470000
 8003114:	42470e80 	.word	0x42470e80
 8003118:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311c:	f7ff fb70 	bl	8002800 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e106      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b85      	ldr	r3, [pc, #532]	; (8003344 <HAL_RCC_OscConfig+0x4e4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x2f0>
 8003142:	4b81      	ldr	r3, [pc, #516]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x32a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x312>
 8003158:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a7a      	ldr	r2, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x32a>
 8003172:	4b75      	ldr	r3, [pc, #468]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a74      	ldr	r2, [pc, #464]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7ff fb35 	bl	8002800 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7ff fb31 	bl	8002800 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0c5      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCC_OscConfig+0x33a>
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7ff fb1f 	bl	8002800 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7ff fb1b 	bl	8002800 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0af      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a55      	ldr	r2, [pc, #340]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 809b 	beq.w	800333a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d05c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d141      	bne.n	800329c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b4c      	ldr	r3, [pc, #304]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7ff faef 	bl	8002800 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003226:	f7ff faeb 	bl	8002800 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e081      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003238:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	4937      	ldr	r1, [pc, #220]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7ff fac4 	bl	8002800 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7ff fac0 	bl	8002800 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e056      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x41c>
 800329a:	e04e      	b.n	800333a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7ff faad 	bl	8002800 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032aa:	f7ff faa9 	bl	8002800 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e03f      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCC_OscConfig+0x44a>
 80032c8:	e037      	b.n	800333a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e032      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d028      	beq.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d121      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11a      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40007000 	.word	0x40007000
 8003348:	40023800 	.word	0x40023800
 800334c:	42470060 	.word	0x42470060

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d90c      	bls.n	800338c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	2b03      	cmp	r3, #3
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e067      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4934      	ldr	r1, [pc, #208]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7ff f9de 	bl	8002800 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7ff f9da 	bl	8002800 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d20c      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d6:	f000 f821 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f93e 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00
 800350c:	40023800 	.word	0x40023800
 8003510:	080042a0 	.word	0x080042a0
 8003514:	20000018 	.word	0x20000018
 8003518:	2000001c 	.word	0x2000001c

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	2300      	movs	r3, #0
 800352e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003534:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d00d      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x40>
 8003540:	2b08      	cmp	r3, #8
 8003542:	f200 80bd 	bhi.w	80036c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x34>
 800354a:	2b04      	cmp	r3, #4
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x3a>
 800354e:	e0b7      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003552:	60bb      	str	r3, [r7, #8]
       break;
 8003554:	e0b7      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003556:	4b61      	ldr	r3, [pc, #388]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003558:	60bb      	str	r3, [r7, #8]
      break;
 800355a:	e0b4      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04d      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	461a      	mov	r2, r3
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	ea02 0800 	and.w	r8, r2, r0
 800358a:	ea03 0901 	and.w	r9, r3, r1
 800358e:	4640      	mov	r0, r8
 8003590:	4649      	mov	r1, r9
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	014b      	lsls	r3, r1, #5
 800359c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035a0:	0142      	lsls	r2, r0, #5
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	ebb0 0008 	subs.w	r0, r0, r8
 80035aa:	eb61 0109 	sbc.w	r1, r1, r9
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	018b      	lsls	r3, r1, #6
 80035b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035bc:	0182      	lsls	r2, r0, #6
 80035be:	1a12      	subs	r2, r2, r0
 80035c0:	eb63 0301 	sbc.w	r3, r3, r1
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	00d9      	lsls	r1, r3, #3
 80035ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d2:	00d0      	lsls	r0, r2, #3
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	eb12 0208 	adds.w	r2, r2, r8
 80035dc:	eb43 0309 	adc.w	r3, r3, r9
 80035e0:	f04f 0000 	mov.w	r0, #0
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	0259      	lsls	r1, r3, #9
 80035ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035ee:	0250      	lsls	r0, r2, #9
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f7fd f918 	bl	8000834 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e04a      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	461a      	mov	r2, r3
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	ea02 0400 	and.w	r4, r2, r0
 8003626:	ea03 0501 	and.w	r5, r3, r1
 800362a:	4620      	mov	r0, r4
 800362c:	4629      	mov	r1, r5
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	014b      	lsls	r3, r1, #5
 8003638:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800363c:	0142      	lsls	r2, r0, #5
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	1b00      	subs	r0, r0, r4
 8003644:	eb61 0105 	sbc.w	r1, r1, r5
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	018b      	lsls	r3, r1, #6
 8003652:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003656:	0182      	lsls	r2, r0, #6
 8003658:	1a12      	subs	r2, r2, r0
 800365a:	eb63 0301 	sbc.w	r3, r3, r1
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	00d9      	lsls	r1, r3, #3
 8003668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800366c:	00d0      	lsls	r0, r2, #3
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	1912      	adds	r2, r2, r4
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0299      	lsls	r1, r3, #10
 8003682:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003686:	0290      	lsls	r0, r2, #10
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	f7fd f8cc 	bl	8000834 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036c2:	60bb      	str	r3, [r7, #8]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	68bb      	ldr	r3, [r7, #8]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	007a1200 	.word	0x007a1200

080036e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07b      	b.n	80037ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003702:	d009      	beq.n	8003718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
 800370a:	e005      	b.n	8003718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe ff46 	bl	80025c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	ea42 0103 	orr.w	r1, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0104 	and.w	r1, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0210 	and.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_SPI_Transmit+0x22>
 8003810:	2302      	movs	r3, #2
 8003812:	e126      	b.n	8003a62 <HAL_SPI_Transmit+0x270>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800381c:	f7fe fff0 	bl	8002800 <HAL_GetTick>
 8003820:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003836:	e10b      	b.n	8003a50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_SPI_Transmit+0x52>
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003848:	e102      	b.n	8003a50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003890:	d10f      	bne.n	80038b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d007      	beq.n	80038d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d8:	d14b      	bne.n	8003972 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_SPI_Transmit+0xf6>
 80038e2:	8afb      	ldrh	r3, [r7, #22]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d13e      	bne.n	8003966 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800390c:	e02b      	b.n	8003966 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d112      	bne.n	8003942 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003940:	e011      	b.n	8003966 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003942:	f7fe ff5d 	bl	8002800 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d803      	bhi.n	800395a <HAL_SPI_Transmit+0x168>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d102      	bne.n	8003960 <HAL_SPI_Transmit+0x16e>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003964:	e074      	b.n	8003a50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ce      	bne.n	800390e <HAL_SPI_Transmit+0x11c>
 8003970:	e04c      	b.n	8003a0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_SPI_Transmit+0x18e>
 800397a:	8afb      	ldrh	r3, [r7, #22]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d140      	bne.n	8003a02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039a6:	e02c      	b.n	8003a02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d113      	bne.n	80039de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	86da      	strh	r2, [r3, #54]	; 0x36
 80039dc:	e011      	b.n	8003a02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039de:	f7fe ff0f 	bl	8002800 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d803      	bhi.n	80039f6 <HAL_SPI_Transmit+0x204>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d102      	bne.n	80039fc <HAL_SPI_Transmit+0x20a>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a00:	e026      	b.n	8003a50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1cd      	bne.n	80039a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fbcb 	bl	80041ac <SPI_EndRxTxTransaction>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e000      	b.n	8003a50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af02      	add	r7, sp, #8
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a86:	d112      	bne.n	8003aae <HAL_SPI_Receive+0x44>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10e      	bne.n	8003aae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2204      	movs	r2, #4
 8003a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f8f1 	bl	8003c8c <HAL_SPI_TransmitReceive>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	e0ea      	b.n	8003c84 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_SPI_Receive+0x52>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0e3      	b.n	8003c84 <HAL_SPI_Receive+0x21a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac4:	f7fe fe9c 	bl	8002800 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ada:	e0ca      	b.n	8003c72 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_Receive+0x7e>
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003aec:	e0c1      	b.n	8003c72 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2204      	movs	r2, #4
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	d10f      	bne.n	8003b56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d007      	beq.n	8003b74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d162      	bne.n	8003c42 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b7c:	e02e      	b.n	8003bdc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d115      	bne.n	8003bb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f103 020c 	add.w	r2, r3, #12
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bb6:	e011      	b.n	8003bdc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb8:	f7fe fe22 	bl	8002800 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d803      	bhi.n	8003bd0 <HAL_SPI_Receive+0x166>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d102      	bne.n	8003bd6 <HAL_SPI_Receive+0x16c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bda:	e04a      	b.n	8003c72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1cb      	bne.n	8003b7e <HAL_SPI_Receive+0x114>
 8003be6:	e031      	b.n	8003c4c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d113      	bne.n	8003c1e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	b292      	uxth	r2, r2
 8003c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c1c:	e011      	b.n	8003c42 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1e:	f7fe fdef 	bl	8002800 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d803      	bhi.n	8003c36 <HAL_SPI_Receive+0x1cc>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d102      	bne.n	8003c3c <HAL_SPI_Receive+0x1d2>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c40:	e017      	b.n	8003c72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1cd      	bne.n	8003be8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fa45 	bl	80040e0 <SPI_EndRxTransaction>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
 8003c6e:	e000      	b.n	8003c72 <HAL_SPI_Receive+0x208>
  }

error :
 8003c70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08c      	sub	sp, #48	; 0x30
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x26>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e18a      	b.n	8003fc8 <HAL_SPI_TransmitReceive+0x33c>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cba:	f7fe fda1 	bl	8002800 <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d00f      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x70>
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce2:	d107      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x68>
 8003cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d003      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cfa:	e15b      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x82>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x82>
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d14:	e14e      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d003      	beq.n	8003d2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2205      	movs	r2, #5
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	887a      	ldrh	r2, [r7, #2]
 8003d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d007      	beq.n	8003d7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d178      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_TransmitReceive+0x10a>
 8003d90:	8b7b      	ldrh	r3, [r7, #26]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d166      	bne.n	8003e64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	881a      	ldrh	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	1c9a      	adds	r2, r3, #2
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dba:	e053      	b.n	8003e64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d11b      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x176>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d016      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x176>
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d113      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d119      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1b8>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d014      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	b292      	uxth	r2, r2
 8003e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e40:	2301      	movs	r3, #1
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e44:	f7fe fcdc 	bl	8002800 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d807      	bhi.n	8003e64 <HAL_SPI_TransmitReceive+0x1d8>
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d003      	beq.n	8003e64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e62:	e0a7      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1a6      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x130>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1a1      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x130>
 8003e78:	e07c      	b.n	8003f74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x1fc>
 8003e82:	8b7b      	ldrh	r3, [r7, #26]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d16b      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eae:	e057      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d11c      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x26c>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d017      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x26c>
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d114      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d119      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x2ae>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d014      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f36:	2301      	movs	r3, #1
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f3a:	f7fe fc61 	bl	8002800 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d803      	bhi.n	8003f52 <HAL_SPI_TransmitReceive+0x2c6>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d102      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x2cc>
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f5e:	e029      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1a2      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x224>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d19d      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f917 	bl	80041ac <SPI_EndRxTxTransaction>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f90:	e010      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e000      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe0:	f7fe fc0e 	bl	8002800 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff0:	f7fe fc06 	bl	8002800 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e054      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d050      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004010:	f7fe fbf6 	bl	8002800 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e017      	b.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19b      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000018 	.word	0x20000018

080040e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f4:	d111      	bne.n	800411a <SPI_EndRxTransaction+0x3a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fe:	d004      	beq.n	800410a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d107      	bne.n	800411a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004122:	d12a      	bne.n	800417a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d012      	beq.n	8004154 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2200      	movs	r2, #0
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff ff49 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02d      	beq.n	80041a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e026      	b.n	80041a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	2101      	movs	r1, #1
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff ff36 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01a      	beq.n	80041a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e013      	b.n	80041a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	2101      	movs	r1, #1
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff ff23 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e000      	b.n	80041a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <SPI_EndRxTxTransaction+0x7c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <SPI_EndRxTxTransaction+0x80>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	0d5b      	lsrs	r3, r3, #21
 80041c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d112      	bne.n	80041fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff fef4 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e00f      	b.n	800421e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3b01      	subs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d0f2      	beq.n	80041fe <SPI_EndRxTxTransaction+0x52>
 8004218:	e000      	b.n	800421c <SPI_EndRxTxTransaction+0x70>
        break;
 800421a:	bf00      	nop
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000018 	.word	0x20000018
 800422c:	165e9f81 	.word	0x165e9f81

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4d0d      	ldr	r5, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2600      	movs	r6, #0
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4d0b      	ldr	r5, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f820 	bl	8004288 <_init>
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2600      	movs	r6, #0
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f855 3b04 	ldr.w	r3, [r5], #4
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	080042b8 	.word	0x080042b8
 800426c:	080042b8 	.word	0x080042b8
 8004270:	080042b8 	.word	0x080042b8
 8004274:	080042bc 	.word	0x080042bc

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
