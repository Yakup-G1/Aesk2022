
nRF_OnFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c0  080040c0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080040c0  080040c0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040c0  080040c0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080040c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000028  080040ec  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080040ec  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090d9  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001943  00000000  00000000  00029126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d62  00000000  00000000  0002bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c35  00000000  00000000  0004291a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008204f  00000000  00000000  0004b54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd59e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002530  00000000  00000000  000cd5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08004088 	.word	0x08004088

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08004088 	.word	0x08004088

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <AESK_UINT16toUINT8_LE>:
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	7852      	ldrb	r2, [r2, #1]
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <AESK_FLOAT32toUINT8_LE>:
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4413      	add	r3, r2
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	4413      	add	r3, r2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	7852      	ldrb	r2, [r2, #1]
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	3302      	adds	r3, #2
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	7892      	ldrb	r2, [r2, #2]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	78d2      	ldrb	r2, [r2, #3]
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <AESK_UINT8toUINT24_LE>:
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	4413      	add	r3, r2
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	441a      	add	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	441a      	add	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3302      	adds	r3, #2
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3303      	adds	r3, #3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	3303      	adds	r3, #3
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	801a      	strh	r2, [r3, #0]
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <HAL_SYSTICK_Callback>:
		((uint8_t*)aesk_gl)[i] = 0;
	}
}

void HAL_SYSTICK_Callback(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	aesk_gl.system_clock_counter_1ms++;
 8000d80:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a40      	ldr	r2, [pc, #256]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000d88:	6013      	str	r3, [r2, #0]

		if(aesk_gl.system_clock_counter_1ms % 5 == 0)
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_SYSTICK_Callback+0x110>)
 8000d90:	fba3 2301 	umull	r2, r3, r3, r1
 8000d94:	089a      	lsrs	r2, r3, #2
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	1aca      	subs	r2, r1, r3
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d104      	bne.n	8000dac <HAL_SYSTICK_Callback+0x30>
		{
			tt.time_task_t.task_200_Hz = 1;
 8000da2:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000da4:	7813      	ldrb	r3, [r2, #0]
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	7013      	strb	r3, [r2, #0]
		}

		if(aesk_gl.system_clock_counter_1ms % 10 == 0)
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <HAL_SYSTICK_Callback+0x110>)
 8000db2:	fba3 2301 	umull	r2, r3, r3, r1
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	1aca      	subs	r2, r1, r3
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d104      	bne.n	8000dd0 <HAL_SYSTICK_Callback+0x54>
		{
			tt.time_task_t.task_100_Hz = 1;
 8000dc6:	4a32      	ldr	r2, [pc, #200]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000dc8:	7813      	ldrb	r3, [r2, #0]
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	7013      	strb	r3, [r2, #0]
		}

		if(aesk_gl.system_clock_counter_1ms % 20 == 0)
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_SYSTICK_Callback+0x110>)
 8000dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8000dda:	091a      	lsrs	r2, r3, #4
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	1aca      	subs	r2, r1, r3
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d104      	bne.n	8000df4 <HAL_SYSTICK_Callback+0x78>
		{
			tt.time_task_t.task_50_Hz = 1;
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000dec:	7813      	ldrb	r3, [r2, #0]
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	7013      	strb	r3, [r2, #0]
		}

		if(aesk_gl.system_clock_counter_1ms % 50 == 0)
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_SYSTICK_Callback+0x118>)
 8000dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	2132      	movs	r1, #50	; 0x32
 8000e02:	fb01 f303 	mul.w	r3, r1, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d104      	bne.n	8000e16 <HAL_SYSTICK_Callback+0x9a>
		{
			tt.time_task_t.task_20_Hz = 1;
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000e0e:	7813      	ldrb	r3, [r2, #0]
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	7013      	strb	r3, [r2, #0]
		}
		if(aesk_gl.system_clock_counter_1ms % 100 == 0)
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_SYSTICK_Callback+0x118>)
 8000e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e20:	095b      	lsrs	r3, r3, #5
 8000e22:	2164      	movs	r1, #100	; 0x64
 8000e24:	fb01 f303 	mul.w	r3, r1, r3
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <HAL_SYSTICK_Callback+0xbc>
		{
			tt.time_task_t.task_10_Hz = 1;
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000e30:	7813      	ldrb	r3, [r2, #0]
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	7013      	strb	r3, [r2, #0]
		}
		if(aesk_gl.system_clock_counter_1ms % 500 == 0)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_SYSTICK_Callback+0x11c>)
 8000e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e48:	fb01 f303 	mul.w	r3, r1, r3
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <HAL_SYSTICK_Callback+0xe0>
		{
			tt.time_task_t.task_2_Hz = 1;
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000e54:	7813      	ldrb	r3, [r2, #0]
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	7013      	strb	r3, [r2, #0]
		}
		if(aesk_gl.system_clock_counter_1ms % 1000 == 0)
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_SYSTICK_Callback+0x10c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_SYSTICK_Callback+0x11c>)
 8000e62:	fba3 1302 	umull	r1, r3, r3, r2
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <HAL_SYSTICK_Callback+0x104>
		{
			tt.time_task_t.task_1_Hz = 1;
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_SYSTICK_Callback+0x114>)
 8000e78:	7813      	ldrb	r3, [r2, #0]
 8000e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7e:	7013      	strb	r3, [r2, #0]
		}

}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	20000068 	.word	0x20000068
 8000e8c:	cccccccd 	.word	0xcccccccd
 8000e90:	2000006c 	.word	0x2000006c
 8000e94:	51eb851f 	.word	0x51eb851f
 8000e98:	10624dd3 	.word	0x10624dd3

08000e9c <AESK_NRF24_Init>:
static uint16_t nrf24_CSN_PIN;
static uint16_t nrf24_CE_PIN;
//SPI handle
static SPI_HandleTypeDef * nrf24_hspi;
void AESK_NRF24_Init(SPI_HandleTypeDef * hspi,GPIO_TypeDef * CSN_CE_Port, uint16_t CSN_Pin, uint16_t CE_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	80bb      	strh	r3, [r7, #4]
	AESK_NRF24_begin(CSN_CE_Port, CSN_Pin, CE_Pin, hspi);
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	88f9      	ldrh	r1, [r7, #6]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f000 f9cb 	bl	8001254 <AESK_NRF24_begin>
	AESK_NRF24_startListening();
 8000ebe:	f000 fa9d 	bl	80013fc <AESK_NRF24_startListening>
	AESK_NRF24_SetPayloadSize();
 8000ec2:	f000 fb61 	bl	8001588 <AESK_NRF24_SetPayloadSize>
	AESK_NRF24_openReadingPipe(aesk_nrf24_data.RxpipeAddrs);
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <AESK_NRF24_Init+0x68>)
 8000ec8:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 fb3c 	bl	800154c <AESK_NRF24_openReadingPipe>
	AESK_NRF24_openWritingPipe(aesk_nrf24_data.TxpipeAddrs);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <AESK_NRF24_Init+0x68>)
 8000ed6:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f000 fb44 	bl	800156a <AESK_NRF24_openWritingPipe>
	AESK_NRF24_setChannel(aesk_nrf24_data.Channel);
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <AESK_NRF24_Init+0x68>)
 8000ee4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fb7e 	bl	80015ea <AESK_NRF24_setChannel>
	AESK_NRF24_setAutoAck(false);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 fbd0 	bl	8001694 <AESK_NRF24_setAutoAck>
	AESK_NRF24_setPayloadSize(32);
 8000ef4:	2020      	movs	r0, #32
 8000ef6:	f000 fb8d 	bl	8001614 <AESK_NRF24_setPayloadSize>

}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000070 	.word	0x20000070

08000f08 <AESK_NRF24_DATA_Init>:
void AESK_NRF24_DATA_Init(uint8_t Channel, uint64_t RxpipeAddrs, void (*OnReceive)(uint8_t * pack, uint16_t len))
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4601      	mov	r1, r0
 8000f10:	e9c7 2300 	strd	r2, r3, [r7]
 8000f14:	460b      	mov	r3, r1
 8000f16:	73fb      	strb	r3, [r7, #15]
	aesk_nrf24_data.ReadByte = 0;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	aesk_nrf24_data.WrittenByte = 0;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	aesk_nrf24_data.Channel = Channel;
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	aesk_nrf24_data.RxpipeAddrs = RxpipeAddrs;
 8000f30:	490b      	ldr	r1, [pc, #44]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f36:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
	aesk_nrf24_data.TxpipeAddrs = 0x1122112211;
 8000f3a:	4909      	ldr	r1, [pc, #36]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f3c:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <AESK_NRF24_DATA_Init+0x5c>)
 8000f3e:	f04f 0311 	mov.w	r3, #17
 8000f42:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
	aesk_nrf24_data.lastPackCount = 0;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	aesk_nrf24_data.onReceive = OnReceive;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <AESK_NRF24_DATA_Init+0x58>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000070 	.word	0x20000070
 8000f64:	22112211 	.word	0x22112211

08000f68 <AESK_NRF24_DelayMicroSeconds>:
//Microsecond delay function
void AESK_NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <AESK_NRF24_DelayMicroSeconds+0x38>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <AESK_NRF24_DelayMicroSeconds+0x3c>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0c9a      	lsrs	r2, r3, #18
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	60fb      	str	r3, [r7, #12]
	while (uSecVar--);
 8000f88:	bf00      	nop
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	60fa      	str	r2, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1fa      	bne.n	8000f8a <AESK_NRF24_DelayMicroSeconds+0x22>
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000018 	.word	0x20000018
 8000fa4:	165e9f81 	.word	0x165e9f81

08000fa8 <AESK_NRF24_csn>:

//1. Chip Select function
void AESK_NRF24_csn(int state)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if (state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d008      	beq.n	8000fc8 <AESK_NRF24_csn+0x20>
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <AESK_NRF24_csn+0x38>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <AESK_NRF24_csn+0x3c>)
 8000fbc:	8811      	ldrh	r1, [r2, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fe97 	bl	8002cf4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000fc6:	e007      	b.n	8000fd8 <AESK_NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <AESK_NRF24_csn+0x38>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <AESK_NRF24_csn+0x3c>)
 8000fce:	8811      	ldrh	r1, [r2, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fe8e 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000058 	.word	0x20000058
 8000fe4:	2000005c 	.word	0x2000005c

08000fe8 <AESK_NRF24_ce>:
//2. Chip Enable
void AESK_NRF24_ce(int state)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if (state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <AESK_NRF24_ce+0x20>
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <AESK_NRF24_ce+0x38>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <AESK_NRF24_ce+0x3c>)
 8000ffc:	8811      	ldrh	r1, [r2, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fe77 	bl	8002cf4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001006:	e007      	b.n	8001018 <AESK_NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <AESK_NRF24_ce+0x38>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a05      	ldr	r2, [pc, #20]	; (8001024 <AESK_NRF24_ce+0x3c>)
 800100e:	8811      	ldrh	r1, [r2, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fe6e 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000058 	.word	0x20000058
 8001024:	2000005e 	.word	0x2000005e

08001028 <AESK_NRF24_read_register>:
//3. Read single byte from a register
uint8_t AESK_NRF24_read_register(uint8_t reg)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	AESK_NRF24_csn(0);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ffb8 	bl	8000fa8 <AESK_NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <AESK_NRF24_read_register+0x50>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	2201      	movs	r2, #1
 800104e:	f002 fb07 	bl	8003660 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(nrf24_hspi, &spiBuf[1], 1, 100);
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <AESK_NRF24_read_register+0x50>)
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	1c59      	adds	r1, r3, #1
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	2201      	movs	r2, #1
 8001060:	f002 fc3a 	bl	80038d8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff9d 	bl	8000fa8 <AESK_NRF24_csn>
	return retData;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000060 	.word	0x20000060

0800107c <AESK_NRF24_read_registerN>:
//4. Read multiple bytes register
void AESK_NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ff8b 	bl	8000fa8 <AESK_NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 031f 	and.w	r3, r3, #31
 8001098:	b2db      	uxtb	r3, r3
 800109a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <AESK_NRF24_read_registerN+0x50>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2201      	movs	r2, #1
 80010a8:	f002 fada 	bl	8003660 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(nrf24_hspi, buf, len, 100);
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <AESK_NRF24_read_registerN+0x50>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	f002 fc0e 	bl	80038d8 <HAL_SPI_Receive>
	//Bring CSN high
	AESK_NRF24_csn(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff ff73 	bl	8000fa8 <AESK_NRF24_csn>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000060 	.word	0x20000060

080010d0 <AESK_NRF24_write_register>:
//5. Write single byte register
void AESK_NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ff61 	bl	8000fa8 <AESK_NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 2, 100);
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <AESK_NRF24_write_register+0x44>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	f107 010c 	add.w	r1, r7, #12
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	2202      	movs	r2, #2
 8001100:	f002 faae 	bl	8003660 <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff ff4f 	bl	8000fa8 <AESK_NRF24_csn>
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000060 	.word	0x20000060

08001118 <AESK_NRF24_write_registerN>:
//6. Write multipl bytes register
void AESK_NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff ff3d 	bl	8000fa8 <AESK_NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	b2db      	uxtb	r3, r3
 8001136:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <AESK_NRF24_write_registerN+0x50>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	f107 010c 	add.w	r1, r7, #12
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	2201      	movs	r2, #1
 8001144:	f002 fa8c 	bl	8003660 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*) buf, len, 100);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <AESK_NRF24_write_registerN+0x50>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	b29a      	uxth	r2, r3
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	f002 fa84 	bl	8003660 <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff ff25 	bl	8000fa8 <AESK_NRF24_csn>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000060 	.word	0x20000060

0800116c <AESK_NRF24_write_payload>:
//7. Write transmit payload
void AESK_NRF24_write_payload(const void *buf, uint8_t len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	AESK_NRF24_csn(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff15 	bl	8000fa8 <AESK_NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <AESK_NRF24_write_payload+0x44>)
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f107 010f 	add.w	r1, r7, #15
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	2201      	movs	r2, #1
 800118e:	f002 fa67 	bl	8003660 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*) buf, len, 100);
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <AESK_NRF24_write_payload+0x44>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	b29a      	uxth	r2, r3
 800119a:	2364      	movs	r3, #100	; 0x64
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	f002 fa5f 	bl	8003660 <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ff00 	bl	8000fa8 <AESK_NRF24_csn>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000060 	.word	0x20000060

080011b4 <AESK_NRF24_read_payload>:
//8. Read receive payload
void AESK_NRF24_read_payload(void *buf, uint8_t len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, AESK_NRF24_getPayloadSize());
 80011c0:	f000 fa3e 	bl	8001640 <AESK_NRF24_getPayloadSize>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d303      	bcc.n	80011d6 <AESK_NRF24_read_payload+0x22>
 80011ce:	f000 fa37 	bl	8001640 <AESK_NRF24_getPayloadSize>
 80011d2:	4603      	mov	r3, r0
 80011d4:	e000      	b.n	80011d8 <AESK_NRF24_read_payload+0x24>
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	AESK_NRF24_csn(0);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fee4 	bl	8000fa8 <AESK_NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80011e0:	2361      	movs	r3, #97	; 0x61
 80011e2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(nrf24_hspi, &cmdRxBuf, 1, 100);
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <AESK_NRF24_read_payload+0x60>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f107 010e 	add.w	r1, r7, #14
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	f002 fa36 	bl	8003660 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf24_hspi, buf, data_len, 100);
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <AESK_NRF24_read_payload+0x60>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f002 fb6a 	bl	80038d8 <HAL_SPI_Receive>
	AESK_NRF24_csn(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fecf 	bl	8000fa8 <AESK_NRF24_csn>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000060 	.word	0x20000060

08001218 <AESK_NRF24_flush_tx>:

//9. Flush Tx buffer
void AESK_NRF24_flush_tx(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800121c:	21ff      	movs	r1, #255	; 0xff
 800121e:	20e1      	movs	r0, #225	; 0xe1
 8001220:	f7ff ff56 	bl	80010d0 <AESK_NRF24_write_register>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <AESK_NRF24_flush_rx>:
//10. Flush Rx buffer
void AESK_NRF24_flush_rx(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800122c:	21ff      	movs	r1, #255	; 0xff
 800122e:	20e2      	movs	r0, #226	; 0xe2
 8001230:	f7ff ff4e 	bl	80010d0 <AESK_NRF24_write_register>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <AESK_NRF24_get_status>:
//11. Get status register value
uint8_t AESK_NRF24_get_status(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = AESK_NRF24_read_register(REG_STATUS);
 800123e:	2007      	movs	r0, #7
 8001240:	f7ff fef2 	bl	8001028 <AESK_NRF24_read_register>
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001248:	79fb      	ldrb	r3, [r7, #7]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <AESK_NRF24_begin>:

//12. Begin function
void AESK_NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef * nrfSPI)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	817b      	strh	r3, [r7, #10]
 8001262:	4613      	mov	r3, r2
 8001264:	813b      	strh	r3, [r7, #8]
	nrf24_hspi = nrfSPI;
 8001266:	4a61      	ldr	r2, [pc, #388]	; (80013ec <AESK_NRF24_begin+0x198>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800126c:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <AESK_NRF24_begin+0x19c>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001272:	4a60      	ldr	r2, [pc, #384]	; (80013f4 <AESK_NRF24_begin+0x1a0>)
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001278:	4a5f      	ldr	r2, [pc, #380]	; (80013f8 <AESK_NRF24_begin+0x1a4>)
 800127a:	893b      	ldrh	r3, [r7, #8]
 800127c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	AESK_NRF24_csn(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fe92 	bl	8000fa8 <AESK_NRF24_csn>
	AESK_NRF24_ce(0);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff feaf 	bl	8000fe8 <AESK_NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800128a:	2005      	movs	r0, #5
 800128c:	f001 fa7c 	bl	8002788 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	AESK_NRF24_write_register(0x00, 0x08);
 8001290:	2108      	movs	r1, #8
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff ff1c 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x01, 0x3f);
 8001298:	213f      	movs	r1, #63	; 0x3f
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff ff18 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x02, 0x03);
 80012a0:	2103      	movs	r1, #3
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff ff14 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x03, 0x03);
 80012a8:	2103      	movs	r1, #3
 80012aa:	2003      	movs	r0, #3
 80012ac:	f7ff ff10 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x04, 0x03);
 80012b0:	2103      	movs	r1, #3
 80012b2:	2004      	movs	r0, #4
 80012b4:	f7ff ff0c 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x05, 0x02);
 80012b8:	2102      	movs	r1, #2
 80012ba:	2005      	movs	r0, #5
 80012bc:	f7ff ff08 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x06, 0x0f);
 80012c0:	210f      	movs	r1, #15
 80012c2:	2006      	movs	r0, #6
 80012c4:	f7ff ff04 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x07, 0x0e);
 80012c8:	210e      	movs	r1, #14
 80012ca:	2007      	movs	r0, #7
 80012cc:	f7ff ff00 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x08, 0x00);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2008      	movs	r0, #8
 80012d4:	f7ff fefc 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x09, 0x00);
 80012d8:	2100      	movs	r1, #0
 80012da:	2009      	movs	r0, #9
 80012dc:	f7ff fef8 	bl	80010d0 <AESK_NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 80012e0:	23e7      	movs	r3, #231	; 0xe7
 80012e2:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 80012e4:	23e7      	movs	r3, #231	; 0xe7
 80012e6:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 80012e8:	23e7      	movs	r3, #231	; 0xe7
 80012ea:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 80012ec:	23e7      	movs	r3, #231	; 0xe7
 80012ee:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 80012f0:	23e7      	movs	r3, #231	; 0xe7
 80012f2:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2205      	movs	r2, #5
 80012fa:	4619      	mov	r1, r3
 80012fc:	200a      	movs	r0, #10
 80012fe:	f7ff ff0b 	bl	8001118 <AESK_NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 8001302:	23c2      	movs	r3, #194	; 0xc2
 8001304:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xC2;
 8001306:	23c2      	movs	r3, #194	; 0xc2
 8001308:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xC2;
 800130a:	23c2      	movs	r3, #194	; 0xc2
 800130c:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xC2;
 800130e:	23c2      	movs	r3, #194	; 0xc2
 8001310:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xC2;
 8001312:	23c2      	movs	r3, #194	; 0xc2
 8001314:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	2205      	movs	r2, #5
 800131c:	4619      	mov	r1, r3
 800131e:	200b      	movs	r0, #11
 8001320:	f7ff fefa 	bl	8001118 <AESK_NRF24_write_registerN>
	AESK_NRF24_write_register(0x0C, 0xC3);
 8001324:	21c3      	movs	r1, #195	; 0xc3
 8001326:	200c      	movs	r0, #12
 8001328:	f7ff fed2 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0D, 0xC4);
 800132c:	21c4      	movs	r1, #196	; 0xc4
 800132e:	200d      	movs	r0, #13
 8001330:	f7ff fece 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0E, 0xC5);
 8001334:	21c5      	movs	r1, #197	; 0xc5
 8001336:	200e      	movs	r0, #14
 8001338:	f7ff feca 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0F, 0xC6);
 800133c:	21c6      	movs	r1, #198	; 0xc6
 800133e:	200f      	movs	r0, #15
 8001340:	f7ff fec6 	bl	80010d0 <AESK_NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 8001344:	23e7      	movs	r3, #231	; 0xe7
 8001346:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 8001348:	23e7      	movs	r3, #231	; 0xe7
 800134a:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 800134c:	23e7      	movs	r3, #231	; 0xe7
 800134e:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 8001350:	23e7      	movs	r3, #231	; 0xe7
 8001352:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 8001354:	23e7      	movs	r3, #231	; 0xe7
 8001356:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2205      	movs	r2, #5
 800135e:	4619      	mov	r1, r3
 8001360:	2010      	movs	r0, #16
 8001362:	f7ff fed9 	bl	8001118 <AESK_NRF24_write_registerN>
	AESK_NRF24_write_register(0x11, 0);
 8001366:	2100      	movs	r1, #0
 8001368:	2011      	movs	r0, #17
 800136a:	f7ff feb1 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x12, 0);
 800136e:	2100      	movs	r1, #0
 8001370:	2012      	movs	r0, #18
 8001372:	f7ff fead 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x13, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2013      	movs	r0, #19
 800137a:	f7ff fea9 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x14, 0);
 800137e:	2100      	movs	r1, #0
 8001380:	2014      	movs	r0, #20
 8001382:	f7ff fea5 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x15, 0);
 8001386:	2100      	movs	r1, #0
 8001388:	2015      	movs	r0, #21
 800138a:	f7ff fea1 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x16, 0);
 800138e:	2100      	movs	r1, #0
 8001390:	2016      	movs	r0, #22
 8001392:	f7ff fe9d 	bl	80010d0 <AESK_NRF24_write_register>

	AESK_NRF24_ACTIVATE_cmd();
 8001396:	f000 fae1 	bl	800195c <AESK_NRF24_ACTIVATE_cmd>
	AESK_NRF24_write_register(0x1c, 0);
 800139a:	2100      	movs	r1, #0
 800139c:	201c      	movs	r0, #28
 800139e:	f7ff fe97 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x1d, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	201d      	movs	r0, #29
 80013a6:	f7ff fe93 	bl	80010d0 <AESK_NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	AESK_NRF24_setRetries(15, 15);
 80013aa:	210f      	movs	r1, #15
 80013ac:	200f      	movs	r0, #15
 80013ae:	f000 f901 	bl	80015b4 <AESK_NRF24_setRetries>
	//Initialise PA level to max (0dB)
	AESK_NRF24_setPALevel(RF24_PA_0dB);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f983 	bl	80016be <AESK_NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	AESK_NRF24_setDataRate(RF24_250KBPS);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f000 f9b7 	bl	800172c <AESK_NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	AESK_NRF24_setCRCLength(RF24_CRC_16);
 80013be:	2002      	movs	r0, #2
 80013c0:	f000 f9fa 	bl	80017b8 <AESK_NRF24_setCRCLength>
	//Disable dynamic payload
	AESK_NRF24_disableDynamicPayloads();
 80013c4:	f000 f94e 	bl	8001664 <AESK_NRF24_disableDynamicPayloads>
	//Set payload size
	AESK_NRF24_setPayloadSize(32);
 80013c8:	2020      	movs	r0, #32
 80013ca:	f000 f923 	bl	8001614 <AESK_NRF24_setPayloadSize>

	//Reset status register
	AESK_NRF24_resetStatus();
 80013ce:	f000 fabc 	bl	800194a <AESK_NRF24_resetStatus>
	//Initialise channel to 76
	AESK_NRF24_setChannel(76);
 80013d2:	204c      	movs	r0, #76	; 0x4c
 80013d4:	f000 f909 	bl	80015ea <AESK_NRF24_setChannel>
	//Flush buffers
	AESK_NRF24_flush_tx();
 80013d8:	f7ff ff1e 	bl	8001218 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 80013dc:	f7ff ff24 	bl	8001228 <AESK_NRF24_flush_rx>

	AESK_NRF24_powerDown();
 80013e0:	f000 fa12 	bl	8001808 <AESK_NRF24_powerDown>

}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000060 	.word	0x20000060
 80013f0:	20000058 	.word	0x20000058
 80013f4:	2000005c 	.word	0x2000005c
 80013f8:	2000005e 	.word	0x2000005e

080013fc <AESK_NRF24_startListening>:
//13. Listen on open pipes for reading (Must call AESK_NRF24_openReadingPipe() first)
void AESK_NRF24_startListening(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fe11 	bl	8001028 <AESK_NRF24_read_register>
 8001406:	4603      	mov	r3, r0
 8001408:	f043 0303 	orr.w	r3, r3, #3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fe5d 	bl	80010d0 <AESK_NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address) AESK_NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&pipe0_reading_address), 5);
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <AESK_NRF24_startListening+0x48>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	4313      	orrs	r3, r2
 800141e:	d004      	beq.n	800142a <AESK_NRF24_startListening+0x2e>
 8001420:	2205      	movs	r2, #5
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <AESK_NRF24_startListening+0x48>)
 8001424:	200a      	movs	r0, #10
 8001426:	f7ff fe77 	bl	8001118 <AESK_NRF24_write_registerN>

	//Flush buffers
	AESK_NRF24_flush_tx();
 800142a:	f7ff fef5 	bl	8001218 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 800142e:	f7ff fefb 	bl	8001228 <AESK_NRF24_flush_rx>
	//Set CE HIGH to start listenning
	AESK_NRF24_ce(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fdd8 	bl	8000fe8 <AESK_NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	AESK_NRF24_DelayMicroSeconds(150);
 8001438:	2096      	movs	r0, #150	; 0x96
 800143a:	f7ff fd95 	bl	8000f68 <AESK_NRF24_DelayMicroSeconds>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000048 	.word	0x20000048

08001448 <AESK_NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void AESK_NRF24_stopListening(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	AESK_NRF24_ce(0);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fdcb 	bl	8000fe8 <AESK_NRF24_ce>
	AESK_NRF24_flush_tx();
 8001452:	f7ff fee1 	bl	8001218 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 8001456:	f7ff fee7 	bl	8001228 <AESK_NRF24_flush_rx>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <AESK_NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool AESK_NRF24_write(const void *buf, uint8_t len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	AESK_NRF24_resetStatus();
 800146c:	f000 fa6d 	bl	800194a <AESK_NRF24_resetStatus>
	AESK_NRF24_startWrite(buf, len);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	4619      	mov	r1, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fa06 	bl	8001886 <AESK_NRF24_startWrite>

	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 800147a:	f001 f97b 	bl	8002774 <HAL_GetTick>
 800147e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001480:	230a      	movs	r3, #10
 8001482:	613b      	str	r3, [r7, #16]
	do {
		AESK_NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 8001484:	f107 030d 	add.w	r3, r7, #13
 8001488:	2201      	movs	r2, #1
 800148a:	4619      	mov	r1, r3
 800148c:	2008      	movs	r0, #8
 800148e:	f7ff fdf5 	bl	800107c <AESK_NRF24_read_registerN>
		//Get status register
		status = AESK_NRF24_get_status();
 8001492:	f7ff fed1 	bl	8001238 <AESK_NRF24_get_status>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT))) && (HAL_GetTick() - sent_at < timeout));
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <AESK_NRF24_write+0x54>
 80014a4:	f001 f966 	bl	8002774 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8e7      	bhi.n	8001484 <AESK_NRF24_write+0x24>

	bool tx_ok, tx_fail;
	AESK_NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 80014b4:	f107 010b 	add.w	r1, r7, #11
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <AESK_NRF24_write+0x90>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fa10 	bl	80018e4 <AESK_NRF24_whatHappened>
	retStatus = tx_ok;
 80014c4:	7b3b      	ldrb	r3, [r7, #12]
 80014c6:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available)
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <AESK_NRF24_write+0x90>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <AESK_NRF24_write+0x7c>
	{
		ack_payload_length = AESK_NRF24_getDynamicPayloadSize();
 80014d0:	f000 f8c0 	bl	8001654 <AESK_NRF24_getDynamicPayloadSize>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <AESK_NRF24_write+0x94>)
 80014da:	701a      	strb	r2, [r3, #0]
	}
	//Power down
	AESK_NRF24_available();
 80014dc:	f000 f80c 	bl	80014f8 <AESK_NRF24_available>
	AESK_NRF24_flush_tx();
 80014e0:	f7ff fe9a 	bl	8001218 <AESK_NRF24_flush_tx>

	return retStatus;
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000050 	.word	0x20000050
 80014f4:	20000051 	.word	0x20000051

080014f8 <AESK_NRF24_available>:
//16. Check for available data to read
bool AESK_NRF24_available(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	return AESK_NRF24_availablePipe(NULL);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f992 	bl	8001826 <AESK_NRF24_availablePipe>
 8001502:	4603      	mov	r3, r0
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}

08001508 <AESK_NRF24_read>:
//17. Read received data
bool AESK_NRF24_read(void *buf, uint8_t len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
	AESK_NRF24_read_payload(buf, len);
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fe4b 	bl	80011b4 <AESK_NRF24_read_payload>
	uint8_t rxStatus = AESK_NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800151e:	2017      	movs	r0, #23
 8001520:	f7ff fd82 	bl	8001028 <AESK_NRF24_read_register>
 8001524:	4603      	mov	r3, r0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
	AESK_NRF24_flush_rx();
 800152c:	f7ff fe7c 	bl	8001228 <AESK_NRF24_flush_rx>
	AESK_NRF24_getDynamicPayloadSize();
 8001530:	f000 f890 	bl	8001654 <AESK_NRF24_getDynamicPayloadSize>
	AESK_NRF24_resetStatus();
 8001534:	f000 fa09 	bl	800194a <AESK_NRF24_resetStatus>
	return rxStatus;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <AESK_NRF24_openReadingPipe>:
void AESK_NRF24_openReadingPipe(uint64_t address)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	e9c7 0100 	strd	r0, r1, [r7]
	AESK_NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 8001556:	463b      	mov	r3, r7
 8001558:	2205      	movs	r2, #5
 800155a:	4619      	mov	r1, r3
 800155c:	200a      	movs	r0, #10
 800155e:	f7ff fddb 	bl	8001118 <AESK_NRF24_write_registerN>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <AESK_NRF24_openWritingPipe>:
void AESK_NRF24_openWritingPipe(uint64_t address)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	e9c7 0100 	strd	r0, r1, [r7]
	AESK_NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 8001574:	463b      	mov	r3, r7
 8001576:	2205      	movs	r2, #5
 8001578:	4619      	mov	r1, r3
 800157a:	2010      	movs	r0, #16
 800157c:	f7ff fdcc 	bl	8001118 <AESK_NRF24_write_registerN>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <AESK_NRF24_SetPayloadSize>:
void AESK_NRF24_SetPayloadSize()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	const uint8_t max_payload_size = 32;
 800158e:	2320      	movs	r3, #32
 8001590:	71fb      	strb	r3, [r7, #7]
	AESK_NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <AESK_NRF24_SetPayloadSize+0x28>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	4293      	cmp	r3, r2
 800159a:	bf28      	it	cs
 800159c:	4613      	movcs	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	2011      	movs	r0, #17
 80015a4:	f7ff fd94 	bl	80010d0 <AESK_NRF24_write_register>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000052 	.word	0x20000052

080015b4 <AESK_NRF24_setRetries>:
//	}
//
//}
//20 set transmit retries (rf24_Retries_e) and delay
void AESK_NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
	AESK_NRF24_write_register(REG_SETUP_RETR, (delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	b25a      	sxtb	r2, r3
 80015ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	2004      	movs	r0, #4
 80015de:	f7ff fd77 	bl	80010d0 <AESK_NRF24_write_register>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <AESK_NRF24_setChannel>:

//21. Set RF channel frequency
void AESK_NRF24_setChannel(uint8_t channel)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80015f4:	237f      	movs	r3, #127	; 0x7f
 80015f6:	73fb      	strb	r3, [r7, #15]
	AESK_NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf28      	it	cs
 8001600:	4613      	movcs	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	2005      	movs	r0, #5
 8001608:	f7ff fd62 	bl	80010d0 <AESK_NRF24_write_register>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <AESK_NRF24_setPayloadSize>:
//22. Set payload size
void AESK_NRF24_setPayloadSize(uint8_t size)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800161e:	2320      	movs	r3, #32
 8001620:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4293      	cmp	r3, r2
 8001628:	bf28      	it	cs
 800162a:	4613      	movcs	r3, r2
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b03      	ldr	r3, [pc, #12]	; (800163c <AESK_NRF24_setPayloadSize+0x28>)
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000052 	.word	0x20000052

08001640 <AESK_NRF24_getPayloadSize>:
//23. Get payload size
uint8_t AESK_NRF24_getPayloadSize(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	return payload_size;
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <AESK_NRF24_getPayloadSize+0x10>)
 8001646:	781b      	ldrb	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000052 	.word	0x20000052

08001654 <AESK_NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t AESK_NRF24_getDynamicPayloadSize(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	return AESK_NRF24_read_register(CMD_R_RX_PL_WID);
 8001658:	2060      	movs	r0, #96	; 0x60
 800165a:	f7ff fce5 	bl	8001028 <AESK_NRF24_read_register>
 800165e:	4603      	mov	r3, r0
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}

08001664 <AESK_NRF24_disableDynamicPayloads>:
	AESK_NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void AESK_NRF24_disableDynamicPayloads(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_FEATURE, AESK_NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8001668:	201d      	movs	r0, #29
 800166a:	f7ff fcdd 	bl	8001028 <AESK_NRF24_read_register>
 800166e:	4603      	mov	r3, r0
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4619      	mov	r1, r3
 8001678:	201d      	movs	r0, #29
 800167a:	f7ff fd29 	bl	80010d0 <AESK_NRF24_write_register>
	//Disable for all pipes 
	AESK_NRF24_write_register(REG_DYNPD, 0);
 800167e:	2100      	movs	r1, #0
 8001680:	201c      	movs	r0, #28
 8001682:	f7ff fd25 	bl	80010d0 <AESK_NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001686:	4b02      	ldr	r3, [pc, #8]	; (8001690 <AESK_NRF24_disableDynamicPayloads+0x2c>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000053 	.word	0x20000053

08001694 <AESK_NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void AESK_NRF24_setAutoAck(bool enable)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	if (enable) AESK_NRF24_write_register(REG_EN_AA, 0x3F);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <AESK_NRF24_setAutoAck+0x1a>
 80016a4:	213f      	movs	r1, #63	; 0x3f
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fd12 	bl	80010d0 <AESK_NRF24_write_register>
	else 		AESK_NRF24_write_register(REG_EN_AA, 0x00);
}
 80016ac:	e003      	b.n	80016b6 <AESK_NRF24_setAutoAck+0x22>
	else 		AESK_NRF24_write_register(REG_EN_AA, 0x00);
 80016ae:	2100      	movs	r1, #0
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fd0d 	bl	80010d0 <AESK_NRF24_write_register>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <AESK_NRF24_setPALevel>:
		AESK_NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void AESK_NRF24_setPALevel(rf24_pa_dbm_e level)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = AESK_NRF24_read_register(REG_RF_SETUP);
 80016c8:	2006      	movs	r0, #6
 80016ca:	f7ff fcad 	bl	8001028 <AESK_NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	f023 0306 	bic.w	r3, r3, #6
 80016d8:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) 		 setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d104      	bne.n	80016ea <AESK_NRF24_setPALevel+0x2c>
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	f043 0306 	orr.w	r3, r3, #6
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e016      	b.n	8001718 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_m6dB)  setup |= _BV(RF_PWR_HIGH);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d104      	bne.n	80016fa <AESK_NRF24_setPALevel+0x3c>
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e00e      	b.n	8001718 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_m12dB) setup |= _BV(RF_PWR_LOW);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d104      	bne.n	800170a <AESK_NRF24_setPALevel+0x4c>
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e006      	b.n	8001718 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_ERROR) setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b04      	cmp	r3, #4
 800170e:	d103      	bne.n	8001718 <AESK_NRF24_setPALevel+0x5a>
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	f043 0306 	orr.w	r3, r3, #6
 8001716:	73fb      	strb	r3, [r7, #15]


	AESK_NRF24_write_register( REG_RF_SETUP, setup);
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4619      	mov	r1, r3
 800171c:	2006      	movs	r0, #6
 800171e:	f7ff fcd7 	bl	80010d0 <AESK_NRF24_write_register>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <AESK_NRF24_setDataRate>:

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool AESK_NRF24_setDataRate(rf24_datarate_e speed)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = AESK_NRF24_read_register(REG_RF_SETUP);
 800173a:	2006      	movs	r0, #6
 800173c:	f7ff fc74 	bl	8001028 <AESK_NRF24_read_register>
 8001740:	4603      	mov	r3, r0
 8001742:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <AESK_NRF24_setDataRate+0x88>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001750:	73bb      	strb	r3, [r7, #14]
	if (speed == RF24_250KBPS)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d107      	bne.n	8001768 <AESK_NRF24_setDataRate+0x3c>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <AESK_NRF24_setDataRate+0x88>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	73bb      	strb	r3, [r7, #14]
 8001766:	e00d      	b.n	8001784 <AESK_NRF24_setDataRate+0x58>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <AESK_NRF24_setDataRate+0x52>
		{
			wide_band = true;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <AESK_NRF24_setDataRate+0x88>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	73bb      	strb	r3, [r7, #14]
 800177c:	e002      	b.n	8001784 <AESK_NRF24_setDataRate+0x58>
		}
		else
		{
			// 1Mbs
			wide_band = false;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <AESK_NRF24_setDataRate+0x88>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
		}
	}
	AESK_NRF24_write_register(REG_RF_SETUP, setup);
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	4619      	mov	r1, r3
 8001788:	2006      	movs	r0, #6
 800178a:	f7ff fca1 	bl	80010d0 <AESK_NRF24_write_register>

	// Verify our result
	if (AESK_NRF24_read_register(REG_RF_SETUP) == setup) result = true;
 800178e:	2006      	movs	r0, #6
 8001790:	f7ff fc4a 	bl	8001028 <AESK_NRF24_read_register>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	4293      	cmp	r3, r2
 800179c:	d102      	bne.n	80017a4 <AESK_NRF24_setDataRate+0x78>
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e002      	b.n	80017aa <AESK_NRF24_setDataRate+0x7e>
	else wide_band = false;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <AESK_NRF24_setDataRate+0x88>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	return result;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000054 	.word	0x20000054

080017b8 <AESK_NRF24_setCRCLength>:

	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void AESK_NRF24_setCRCLength(rf24_crclength_e length)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = AESK_NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fc30 	bl	8001028 <AESK_NRF24_read_register>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f023 030c 	bic.w	r3, r3, #12
 80017ce:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM
	if (length == RF24_CRC_DISABLED)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00f      	beq.n	80017f6 <AESK_NRF24_setCRCLength+0x3e>
	{
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8)
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d104      	bne.n	80017e6 <AESK_NRF24_setCRCLength+0x2e>
	{
		config |= _BV(BIT_EN_CRC);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e007      	b.n	80017f6 <AESK_NRF24_setCRCLength+0x3e>
	} else
	{
		config |= _BV(BIT_EN_CRC);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	73fb      	strb	r3, [r7, #15]
	}
	AESK_NRF24_write_register( REG_CONFIG, config);
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	4619      	mov	r1, r3
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff fc68 	bl	80010d0 <AESK_NRF24_write_register>
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <AESK_NRF24_powerDown>:
{
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void AESK_NRF24_powerDown(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fc0b 	bl	8001028 <AESK_NRF24_read_register>
 8001812:	4603      	mov	r3, r0
 8001814:	f023 0302 	bic.w	r3, r3, #2
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4619      	mov	r1, r3
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fc57 	bl	80010d0 <AESK_NRF24_write_register>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <AESK_NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool AESK_NRF24_availablePipe(uint8_t *pipe_num)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	uint8_t status = AESK_NRF24_get_status();
 800182e:	f7ff fd03 	bl	8001238 <AESK_NRF24_get_status>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]

	bool result = (status & _BV(BIT_RX_DR));
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	73bb      	strb	r3, [r7, #14]

	if (result)
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d017      	beq.n	800187c <AESK_NRF24_availablePipe+0x56>
	{
		// If the caller wants the pipe number, include that
		if (pipe_num) *pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <AESK_NRF24_availablePipe+0x3c>
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	b2da      	uxtb	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	701a      	strb	r2, [r3, #0]
		// Clear the status bit
		AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	2007      	movs	r0, #7
 8001866:	f7ff fc33 	bl	80010d0 <AESK_NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS))
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <AESK_NRF24_availablePipe+0x56>
		{
			AESK_NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8001874:	2120      	movs	r1, #32
 8001876:	2007      	movs	r0, #7
 8001878:	f7ff fc2a 	bl	80010d0 <AESK_NRF24_write_register>
		}
	}
	return result;
 800187c:	7bbb      	ldrb	r3, [r7, #14]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <AESK_NRF24_startWrite>:
//40. Start write (for IRQ mode)
void AESK_NRF24_startWrite(const void *buf, uint8_t len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	AESK_NRF24_ce(0);
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fba8 	bl	8000fe8 <AESK_NRF24_ce>
	AESK_NRF24_write_register(REG_CONFIG, (AESK_NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP)) & ~_BV(BIT_PRIM_RX));
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fbc5 	bl	8001028 <AESK_NRF24_read_register>
 800189e:	4603      	mov	r3, r0
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fc0e 	bl	80010d0 <AESK_NRF24_write_register>
	AESK_NRF24_ce(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff fb97 	bl	8000fe8 <AESK_NRF24_ce>
	AESK_NRF24_DelayMicroSeconds(150);
 80018ba:	2096      	movs	r0, #150	; 0x96
 80018bc:	f7ff fb54 	bl	8000f68 <AESK_NRF24_DelayMicroSeconds>

	// Send the payload
	AESK_NRF24_write_payload(buf, len);
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fc51 	bl	800116c <AESK_NRF24_write_payload>

	// Enable Tx for 15usec
	AESK_NRF24_ce(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff fb8c 	bl	8000fe8 <AESK_NRF24_ce>
	AESK_NRF24_DelayMicroSeconds(15);
 80018d0:	200f      	movs	r0, #15
 80018d2:	f7ff fb49 	bl	8000f68 <AESK_NRF24_DelayMicroSeconds>
	AESK_NRF24_ce(0);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fb86 	bl	8000fe8 <AESK_NRF24_ce>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <AESK_NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void AESK_NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	uint8_t status = AESK_NRF24_get_status();
 80018f0:	f7ff fca2 	bl	8001238 <AESK_NRF24_get_status>
 80018f4:	4603      	mov	r3, r0
 80018f6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
	AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
 80018fe:	2170      	movs	r1, #112	; 0x70
 8001900:	2007      	movs	r0, #7
 8001902:	f7ff fbe5 	bl	80010d0 <AESK_NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	701a      	strb	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <AESK_NRF24_resetStatus>:
	return AESK_NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void AESK_NRF24_resetStatus(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
 800194e:	2170      	movs	r1, #112	; 0x70
 8001950:	2007      	movs	r0, #7
 8001952:	f7ff fbbd 	bl	80010d0 <AESK_NRF24_write_register>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <AESK_NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void AESK_NRF24_ACTIVATE_cmd(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	AESK_NRF24_csn(0);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fb20 	bl	8000fa8 <AESK_NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001968:	2350      	movs	r3, #80	; 0x50
 800196a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800196c:	2373      	movs	r3, #115	; 0x73
 800196e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(nrf24_hspi, cmdRxBuf, 2, 100);
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <AESK_NRF24_ACTIVATE_cmd+0x30>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	1d39      	adds	r1, r7, #4
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	2202      	movs	r2, #2
 800197a:	f001 fe71 	bl	8003660 <HAL_SPI_Transmit>
	AESK_NRF24_csn(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fb12 	bl	8000fa8 <AESK_NRF24_csn>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000060 	.word	0x20000060

08001990 <AESK_NRF24_Set_PipeAdress>:
{
	return ack_payload_length;
}

void AESK_NRF24_Set_PipeAdress(uint64_t TxpipeAddrs)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	e9c7 0100 	strd	r0, r1, [r7]
	aesk_nrf24_data.TxpipeAddrs = TxpipeAddrs;
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <AESK_NRF24_Set_PipeAdress+0x2c>)
 800199c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019a0:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
	AESK_NRF24_openWritingPipe(aesk_nrf24_data.TxpipeAddrs);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <AESK_NRF24_Set_PipeAdress+0x2c>)
 80019a6:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff fddc 	bl	800156a <AESK_NRF24_openWritingPipe>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000070 	.word	0x20000070

080019c0 <AESK_NRF24_ReadPack>:

void AESK_NRF24_ReadPack()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0

	if(AESK_NRF24_available())
 80019c6:	f7ff fd97 	bl	80014f8 <AESK_NRF24_available>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05a      	beq.n	8001a86 <AESK_NRF24_ReadPack+0xc6>
	{
		uint8_t tempBuf[32];
		int i;

		AESK_NRF24_read(tempBuf, payload_size);
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <AESK_NRF24_ReadPack+0xd0>)
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fd95 	bl	8001508 <AESK_NRF24_read>
		for (i = 0; i < payload_size-1; i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e011      	b.n	8001a08 <AESK_NRF24_ReadPack+0x48>
		{
			aesk_nrf24_data.RxBuffer[aesk_nrf24_data.ReadByte++] = tempBuf[i];
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 80019e6:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	b291      	uxth	r1, r2
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 80019f0:	f8a2 11fe 	strh.w	r1, [r2, #510]	; 0x1fe
 80019f4:	4619      	mov	r1, r3
 80019f6:	1d3a      	adds	r2, r7, #4
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	4413      	add	r3, r2
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a00:	545a      	strb	r2, [r3, r1]
		for (i = 0; i < payload_size-1; i++)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3301      	adds	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <AESK_NRF24_ReadPack+0xd0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbe7      	blt.n	80019e4 <AESK_NRF24_ReadPack+0x24>
		}
		aesk_nrf24_data.packCount = tempBuf[i];
 8001a14:	1d3a      	adds	r2, r7, #4
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	4413      	add	r3, r2
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a1e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
		if((aesk_nrf24_data.packCount - aesk_nrf24_data.lastPackCount == 1))
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a24:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a2c:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d106      	bne.n	8001a44 <AESK_NRF24_ReadPack+0x84>
		{
			aesk_nrf24_data.lastPackCount = aesk_nrf24_data.packCount;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a38:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a3e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8001a42:	e007      	b.n	8001a54 <AESK_NRF24_ReadPack+0x94>
		}
		else
		{
			aesk_nrf24_data.ReadByte = 0;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
			aesk_nrf24_data.lastPackCount = 0;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
		}
		if(aesk_nrf24_data.ReadByte >= aesk_nrf24_data.RxBuffer[1])
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a56:	f8b3 21fe 	ldrh.w	r2, [r3, #510]	; 0x1fe
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d310      	bcc.n	8001a86 <AESK_NRF24_ReadPack+0xc6>
		{
			aesk_nrf24_data.ReadByte = 0;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
			aesk_nrf24_data.lastPackCount = 0;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219

			aesk_nrf24_data.onReceive(aesk_nrf24_data.RxBuffer, aesk_nrf24_data.RxBuffer[1]);
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a76:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a7c:	7852      	ldrb	r2, [r2, #1]
 8001a7e:	b292      	uxth	r2, r2
 8001a80:	4611      	mov	r1, r2
 8001a82:	4804      	ldr	r0, [pc, #16]	; (8001a94 <AESK_NRF24_ReadPack+0xd4>)
 8001a84:	4798      	blx	r3
	}
//	else
//	{
//		CDC_Transmit_FS(aesk_nrf24_data.ErrorBuffer, 2);
//	}
}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000052 	.word	0x20000052
 8001a94:	20000070 	.word	0x20000070

08001a98 <AESK_NRF24_WritePack>:
bool AESK_NRF24_WritePack(uint8_t * pack, uint16_t len, uint64_t TxpipeAddrs)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	e9c7 2300 	strd	r2, r3, [r7]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	817b      	strh	r3, [r7, #10]
	AESK_NRF24_stopListening();
 8001aa8:	f7ff fcce 	bl	8001448 <AESK_NRF24_stopListening>

	AESK_NRF24_Set_PipeAdress(TxpipeAddrs);
 8001aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab0:	f7ff ff6e 	bl	8001990 <AESK_NRF24_Set_PipeAdress>

	bool status;
	int i;
	aesk_nrf24_data.packCounter = 1;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b

	while(aesk_nrf24_data.WrittenByte < len)
 8001abc:	e041      	b.n	8001b42 <AESK_NRF24_WritePack+0xaa>
	{
		uint8_t tempBuf[32] = {0};
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	619a      	str	r2, [r3, #24]
		for (i = 0; i < payload_size-1; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8001ada:	e014      	b.n	8001b06 <AESK_NRF24_WritePack+0x6e>
		{
			tempBuf[i] = pack[aesk_nrf24_data.WrittenByte++];
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001ade:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	b291      	uxth	r1, r2
 8001ae6:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001ae8:	f8a2 1200 	strh.w	r1, [r2, #512]	; 0x200
 8001aec:	461a      	mov	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	7819      	ldrb	r1, [r3, #0]
 8001af4:	f107 0210 	add.w	r2, r7, #16
 8001af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afa:	4413      	add	r3, r2
 8001afc:	460a      	mov	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < payload_size-1; i++)
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	3301      	adds	r3, #1
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <AESK_NRF24_WritePack+0xe4>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbe4      	blt.n	8001adc <AESK_NRF24_WritePack+0x44>
		}
		tempBuf[i] = aesk_nrf24_data.packCounter++;
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001b14:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	b2d1      	uxtb	r1, r2
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001b1e:	f882 121b 	strb.w	r1, [r2, #539]	; 0x21b
 8001b22:	f107 0110 	add.w	r1, r7, #16
 8001b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b28:	440a      	add	r2, r1
 8001b2a:	7013      	strb	r3, [r2, #0]
		status = AESK_NRF24_write(tempBuf, payload_size);
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <AESK_NRF24_WritePack+0xe4>)
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc92 	bl	8001460 <AESK_NRF24_write>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(aesk_nrf24_data.WrittenByte < len)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001b44:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001b48:	897a      	ldrh	r2, [r7, #10]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d8b7      	bhi.n	8001abe <AESK_NRF24_WritePack+0x26>
	}

	if(status)
 8001b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <AESK_NRF24_WritePack+0xc8>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <AESK_NRF24_WritePack+0xe8>)
 8001b5c:	f001 f8e2 	bl	8002d24 <HAL_GPIO_TogglePin>

	aesk_nrf24_data.WrittenByte = 0;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <AESK_NRF24_WritePack+0xe0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	AESK_NRF24_startListening();
 8001b68:	f7ff fc48 	bl	80013fc <AESK_NRF24_startListening>
	return status;
 8001b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3738      	adds	r7, #56	; 0x38
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000070 	.word	0x20000070
 8001b7c:	20000052 	.word	0x20000052
 8001b80:	40011000 	.word	0x40011000
 8001b84:	00000000 	.word	0x00000000

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8e:	f000 fd99 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b92:	f000 f9c3 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b96:	f000 fa3d 	bl	8002014 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b9a:	f000 fa05 	bl	8001fa8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  AESK_NRF24_DATA_Init(48, thisNode, &onReceive);
 8001b9e:	4bae      	ldr	r3, [pc, #696]	; (8001e58 <main+0x2d0>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	49ad      	ldr	r1, [pc, #692]	; (8001e5c <main+0x2d4>)
 8001ba6:	9100      	str	r1, [sp, #0]
 8001ba8:	2030      	movs	r0, #48	; 0x30
 8001baa:	f7ff f9ad 	bl	8000f08 <AESK_NRF24_DATA_Init>
  AESK_NRF24_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_Pin);
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	49ab      	ldr	r1, [pc, #684]	; (8001e60 <main+0x2d8>)
 8001bb4:	48ab      	ldr	r0, [pc, #684]	; (8001e64 <main+0x2dc>)
 8001bb6:	f7ff f971 	bl	8000e9c <AESK_NRF24_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tt.time_task_t.task_50_Hz == 1 && onReceiveFlag == 1)
 8001bba:	4bab      	ldr	r3, [pc, #684]	; (8001e68 <main+0x2e0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f8      	beq.n	8001bba <main+0x32>
 8001bc8:	4ba8      	ldr	r3, [pc, #672]	; (8001e6c <main+0x2e4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f4      	beq.n	8001bba <main+0x32>
	  {
		  counter += 1;
 8001bd0:	4ba7      	ldr	r3, [pc, #668]	; (8001e70 <main+0x2e8>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4ba5      	ldr	r3, [pc, #660]	; (8001e70 <main+0x2e8>)
 8001bda:	801a      	strh	r2, [r3, #0]
		  indexTx = 2;
 8001bdc:	4ba5      	ldr	r3, [pc, #660]	; (8001e74 <main+0x2ec>)
 8001bde:	2202      	movs	r2, #2
 8001be0:	801a      	strh	r2, [r3, #0]
//		  AESK_UINT16toUINT8_LE(&adc7, aesk_nrf24_data.TxBuffer,&indexTx);
//		  AESK_UINT16toUINT8_LE(&adc8, aesk_nrf24_data.TxBuffer,&indexTx);
//		  AESK_UINT16toUINT8_LE(&adc9, aesk_nrf24_data.TxBuffer,&indexTx);
//		  AESK_UINT16toUINT8_LE(&adc10, aesk_nrf24_data.TxBuffer,&indexTx);

		  yaw = counter*255/500;
 8001be2:	4ba3      	ldr	r3, [pc, #652]	; (8001e70 <main+0x2e8>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	4613      	mov	r3, r2
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	4aa2      	ldr	r2, [pc, #648]	; (8001e78 <main+0x2f0>)
 8001bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf4:	1152      	asrs	r2, r2, #5
 8001bf6:	17db      	asrs	r3, r3, #31
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fe98 	bl	8000930 <__aeabi_i2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a9e      	ldr	r2, [pc, #632]	; (8001e7c <main+0x2f4>)
 8001c04:	6013      	str	r3, [r2, #0]
		  roll = counter*180/500;
 8001c06:	4b9a      	ldr	r3, [pc, #616]	; (8001e70 <main+0x2e8>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	23b4      	movs	r3, #180	; 0xb4
 8001c0e:	fb03 f302 	mul.w	r3, r3, r2
 8001c12:	4a99      	ldr	r2, [pc, #612]	; (8001e78 <main+0x2f0>)
 8001c14:	fb82 1203 	smull	r1, r2, r2, r3
 8001c18:	1152      	asrs	r2, r2, #5
 8001c1a:	17db      	asrs	r3, r3, #31
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fe86 	bl	8000930 <__aeabi_i2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a96      	ldr	r2, [pc, #600]	; (8001e80 <main+0x2f8>)
 8001c28:	6013      	str	r3, [r2, #0]
		  pitch = counter*180/500;
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <main+0x2e8>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	23b4      	movs	r3, #180	; 0xb4
 8001c32:	fb03 f302 	mul.w	r3, r3, r2
 8001c36:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <main+0x2f0>)
 8001c38:	fb82 1203 	smull	r1, r2, r2, r3
 8001c3c:	1152      	asrs	r2, r2, #5
 8001c3e:	17db      	asrs	r3, r3, #31
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fe74 	bl	8000930 <__aeabi_i2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a8e      	ldr	r2, [pc, #568]	; (8001e84 <main+0x2fc>)
 8001c4c:	6013      	str	r3, [r2, #0]
		  altitude = counter;
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <main+0x2e8>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fe68 	bl	8000928 <__aeabi_ui2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a8b      	ldr	r2, [pc, #556]	; (8001e88 <main+0x300>)
 8001c5c:	6013      	str	r3, [r2, #0]
		  motor1 = 1000 + counter*700/500;
 8001c5e:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <main+0x2e8>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001c68:	fb03 f302 	mul.w	r3, r3, r2
 8001c6c:	4a82      	ldr	r2, [pc, #520]	; (8001e78 <main+0x2f0>)
 8001c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c72:	1152      	asrs	r2, r2, #5
 8001c74:	17db      	asrs	r3, r3, #31
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <main+0x304>)
 8001c82:	801a      	strh	r2, [r3, #0]
		  motor2 = 1000 + counter*700/500;
 8001c84:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <main+0x2e8>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001c8e:	fb03 f302 	mul.w	r3, r3, r2
 8001c92:	4a79      	ldr	r2, [pc, #484]	; (8001e78 <main+0x2f0>)
 8001c94:	fb82 1203 	smull	r1, r2, r2, r3
 8001c98:	1152      	asrs	r2, r2, #5
 8001c9a:	17db      	asrs	r3, r3, #31
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <main+0x308>)
 8001ca8:	801a      	strh	r2, [r3, #0]
		  motor3 = 1000 + counter*700/500;
 8001caa:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <main+0x2e8>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001cb4:	fb03 f302 	mul.w	r3, r3, r2
 8001cb8:	4a6f      	ldr	r2, [pc, #444]	; (8001e78 <main+0x2f0>)
 8001cba:	fb82 1203 	smull	r1, r2, r2, r3
 8001cbe:	1152      	asrs	r2, r2, #5
 8001cc0:	17db      	asrs	r3, r3, #31
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <main+0x30c>)
 8001cce:	801a      	strh	r2, [r3, #0]
		  motor4 = 1000 + counter*700/500;
 8001cd0:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <main+0x2e8>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001cda:	fb03 f302 	mul.w	r3, r3, r2
 8001cde:	4a66      	ldr	r2, [pc, #408]	; (8001e78 <main+0x2f0>)
 8001ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce4:	1152      	asrs	r2, r2, #5
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b69      	ldr	r3, [pc, #420]	; (8001e98 <main+0x310>)
 8001cf4:	801a      	strh	r2, [r3, #0]
		  yawError = yaw - 55;
 8001cf6:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <main+0x2f4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4968      	ldr	r1, [pc, #416]	; (8001e9c <main+0x314>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fd61 	bl	80007c4 <__aeabi_fsub>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <main+0x318>)
 8001d08:	601a      	str	r2, [r3, #0]
		  rollError = roll - 45;
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <main+0x2f8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4965      	ldr	r1, [pc, #404]	; (8001ea4 <main+0x31c>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fd57 	bl	80007c4 <__aeabi_fsub>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <main+0x320>)
 8001d1c:	601a      	str	r2, [r3, #0]
		  pitchError = pitch - 45;
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <main+0x2fc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4960      	ldr	r1, [pc, #384]	; (8001ea4 <main+0x31c>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fd4d 	bl	80007c4 <__aeabi_fsub>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <main+0x324>)
 8001d30:	601a      	str	r2, [r3, #0]
		  altitudeError = altitude - 3;
 8001d32:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <main+0x300>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	495e      	ldr	r1, [pc, #376]	; (8001eb0 <main+0x328>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fd43 	bl	80007c4 <__aeabi_fsub>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <main+0x32c>)
 8001d44:	601a      	str	r2, [r3, #0]
		  latitude_f32 = 41.02539 - counter*0.0001;
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <main+0x2e8>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc7c 	bl	8000648 <__aeabi_i2d>
 8001d50:	a33b      	add	r3, pc, #236	; (adr r3, 8001e40 <main+0x2b8>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe f9fb 	bl	8000150 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	a13a      	add	r1, pc, #232	; (adr r1, 8001e48 <main+0x2c0>)
 8001d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d64:	f7fe fb22 	bl	80003ac <__aeabi_dsub>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe fcd4 	bl	800071c <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a50      	ldr	r2, [pc, #320]	; (8001eb8 <main+0x330>)
 8001d78:	6013      	str	r3, [r2, #0]
		  longtitude_f32 = 28.88818 - counter*0.0001;
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <main+0x2e8>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fc62 	bl	8000648 <__aeabi_i2d>
 8001d84:	a32e      	add	r3, pc, #184	; (adr r3, 8001e40 <main+0x2b8>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe f9e1 	bl	8000150 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	a12f      	add	r1, pc, #188	; (adr r1, 8001e50 <main+0x2c8>)
 8001d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d98:	f7fe fb08 	bl	80003ac <__aeabi_dsub>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe fcba 	bl	800071c <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a44      	ldr	r2, [pc, #272]	; (8001ebc <main+0x334>)
 8001dac:	6013      	str	r3, [r2, #0]

		  AESK_FLOAT32toUINT8_LE(&yaw,aesk_nrf24_data.TxBuffer,&indexTx);
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <main+0x2ec>)
 8001db0:	4943      	ldr	r1, [pc, #268]	; (8001ec0 <main+0x338>)
 8001db2:	4832      	ldr	r0, [pc, #200]	; (8001e7c <main+0x2f4>)
 8001db4:	f7fe ff81 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&roll,aesk_nrf24_data.TxBuffer,&indexTx);
 8001db8:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <main+0x2ec>)
 8001dba:	4941      	ldr	r1, [pc, #260]	; (8001ec0 <main+0x338>)
 8001dbc:	4830      	ldr	r0, [pc, #192]	; (8001e80 <main+0x2f8>)
 8001dbe:	f7fe ff7c 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&pitch,aesk_nrf24_data.TxBuffer,&indexTx);
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <main+0x2ec>)
 8001dc4:	493e      	ldr	r1, [pc, #248]	; (8001ec0 <main+0x338>)
 8001dc6:	482f      	ldr	r0, [pc, #188]	; (8001e84 <main+0x2fc>)
 8001dc8:	f7fe ff77 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&altitude, aesk_nrf24_data.TxBuffer,&indexTx);
 8001dcc:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <main+0x2ec>)
 8001dce:	493c      	ldr	r1, [pc, #240]	; (8001ec0 <main+0x338>)
 8001dd0:	482d      	ldr	r0, [pc, #180]	; (8001e88 <main+0x300>)
 8001dd2:	f7fe ff72 	bl	8000cba <AESK_FLOAT32toUINT8_LE>

		  AESK_UINT16toUINT8_LE(&motor1,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <main+0x2ec>)
 8001dd8:	4939      	ldr	r1, [pc, #228]	; (8001ec0 <main+0x338>)
 8001dda:	482c      	ldr	r0, [pc, #176]	; (8001e8c <main+0x304>)
 8001ddc:	f7fe ff4c 	bl	8000c78 <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&motor2,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <main+0x2ec>)
 8001de2:	4937      	ldr	r1, [pc, #220]	; (8001ec0 <main+0x338>)
 8001de4:	482a      	ldr	r0, [pc, #168]	; (8001e90 <main+0x308>)
 8001de6:	f7fe ff47 	bl	8000c78 <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&motor3,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001dea:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <main+0x2ec>)
 8001dec:	4934      	ldr	r1, [pc, #208]	; (8001ec0 <main+0x338>)
 8001dee:	4829      	ldr	r0, [pc, #164]	; (8001e94 <main+0x30c>)
 8001df0:	f7fe ff42 	bl	8000c78 <AESK_UINT16toUINT8_LE>
		  AESK_UINT16toUINT8_LE(&motor4,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001df4:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <main+0x2ec>)
 8001df6:	4932      	ldr	r1, [pc, #200]	; (8001ec0 <main+0x338>)
 8001df8:	4827      	ldr	r0, [pc, #156]	; (8001e98 <main+0x310>)
 8001dfa:	f7fe ff3d 	bl	8000c78 <AESK_UINT16toUINT8_LE>

		  AESK_FLOAT32toUINT8_LE(&yawError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <main+0x2ec>)
 8001e00:	492f      	ldr	r1, [pc, #188]	; (8001ec0 <main+0x338>)
 8001e02:	4827      	ldr	r0, [pc, #156]	; (8001ea0 <main+0x318>)
 8001e04:	f7fe ff59 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&rollError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <main+0x2ec>)
 8001e0a:	492d      	ldr	r1, [pc, #180]	; (8001ec0 <main+0x338>)
 8001e0c:	4826      	ldr	r0, [pc, #152]	; (8001ea8 <main+0x320>)
 8001e0e:	f7fe ff54 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&pitchError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <main+0x2ec>)
 8001e14:	492a      	ldr	r1, [pc, #168]	; (8001ec0 <main+0x338>)
 8001e16:	4825      	ldr	r0, [pc, #148]	; (8001eac <main+0x324>)
 8001e18:	f7fe ff4f 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&altitudeError,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <main+0x2ec>)
 8001e1e:	4928      	ldr	r1, [pc, #160]	; (8001ec0 <main+0x338>)
 8001e20:	4824      	ldr	r0, [pc, #144]	; (8001eb4 <main+0x32c>)
 8001e22:	f7fe ff4a 	bl	8000cba <AESK_FLOAT32toUINT8_LE>

		  AESK_FLOAT32toUINT8_LE(&latitude_f32,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <main+0x2ec>)
 8001e28:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <main+0x338>)
 8001e2a:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <main+0x330>)
 8001e2c:	f7fe ff45 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
		  AESK_FLOAT32toUINT8_LE(&longtitude_f32,aesk_nrf24_data.TxBuffer ,&indexTx);
 8001e30:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <main+0x2ec>)
 8001e32:	4923      	ldr	r1, [pc, #140]	; (8001ec0 <main+0x338>)
 8001e34:	4821      	ldr	r0, [pc, #132]	; (8001ebc <main+0x334>)
 8001e36:	f7fe ff40 	bl	8000cba <AESK_FLOAT32toUINT8_LE>
 8001e3a:	e043      	b.n	8001ec4 <main+0x33c>
 8001e3c:	f3af 8000 	nop.w
 8001e40:	eb1c432d 	.word	0xeb1c432d
 8001e44:	3f1a36e2 	.word	0x3f1a36e2
 8001e48:	fac1d29e 	.word	0xfac1d29e
 8001e4c:	4044833f 	.word	0x4044833f
 8001e50:	c3b4f616 	.word	0xc3b4f616
 8001e54:	403ce35f 	.word	0x403ce35f
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	08002145 	.word	0x08002145
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	200002b8 	.word	0x200002b8
 8001e68:	2000006c 	.word	0x2000006c
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000064 	.word	0x20000064
 8001e74:	2000037a 	.word	0x2000037a
 8001e78:	10624dd3 	.word	0x10624dd3
 8001e7c:	20000310 	.word	0x20000310
 8001e80:	20000374 	.word	0x20000374
 8001e84:	20000370 	.word	0x20000370
 8001e88:	200002b0 	.word	0x200002b0
 8001e8c:	200002b4 	.word	0x200002b4
 8001e90:	20000290 	.word	0x20000290
 8001e94:	20000378 	.word	0x20000378
 8001e98:	200002a0 	.word	0x200002a0
 8001e9c:	425c0000 	.word	0x425c0000
 8001ea0:	2000029c 	.word	0x2000029c
 8001ea4:	42340000 	.word	0x42340000
 8001ea8:	20000298 	.word	0x20000298
 8001eac:	200002a4 	.word	0x200002a4
 8001eb0:	40400000 	.word	0x40400000
 8001eb4:	200002ac 	.word	0x200002ac
 8001eb8:	20000294 	.word	0x20000294
 8001ebc:	200002a8 	.word	0x200002a8
 8001ec0:	2000016f 	.word	0x2000016f

		  aesk_nrf24_data.TxBuffer[0] = 'A';
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <main+0x37c>)
 8001ec6:	2241      	movs	r2, #65	; 0x41
 8001ec8:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		  aesk_nrf24_data.TxBuffer[1] = indexTx;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <main+0x380>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <main+0x37c>)
 8001ed4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

		  AESK_NRF24_WritePack(aesk_nrf24_data.TxBuffer, indexTx, node);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <main+0x380>)
 8001eda:	8819      	ldrh	r1, [r3, #0]
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <main+0x384>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	480b      	ldr	r0, [pc, #44]	; (8001f10 <main+0x388>)
 8001ee4:	f7ff fdd8 	bl	8001a98 <AESK_NRF24_WritePack>

		  if(counter == 500)
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <main+0x38c>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ef0:	d102      	bne.n	8001ef8 <main+0x370>
			  counter = 0;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <main+0x38c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	801a      	strh	r2, [r3, #0]

		  tt.time_task_t.task_50_Hz = 0;
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <main+0x390>)
 8001efa:	7813      	ldrb	r3, [r2, #0]
 8001efc:	f36f 03c3 	bfc	r3, #3, #1
 8001f00:	7013      	strb	r3, [r2, #0]
	  if(tt.time_task_t.task_50_Hz == 1 && onReceiveFlag == 1)
 8001f02:	e65a      	b.n	8001bba <main+0x32>
 8001f04:	20000070 	.word	0x20000070
 8001f08:	2000037a 	.word	0x2000037a
 8001f0c:	20000010 	.word	0x20000010
 8001f10:	2000016f 	.word	0x2000016f
 8001f14:	20000064 	.word	0x20000064
 8001f18:	2000006c 	.word	0x2000006c

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b090      	sub	sp, #64	; 0x40
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	2228      	movs	r2, #40	; 0x28
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 f8a4 	bl	8004078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f50:	2302      	movs	r3, #2
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 ff0f 	bl	8002d88 <HAL_RCC_OscConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f70:	f000 fac8 	bl	8002504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f74:	230f      	movs	r3, #15
 8001f76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f97a 	bl	8003288 <HAL_RCC_ClockConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f9a:	f000 fab3 	bl	8002504 <Error_Handler>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3740      	adds	r7, #64	; 0x40
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <MX_SPI1_Init+0x64>)
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <MX_SPI1_Init+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <MX_SPI1_Init+0x64>)
 8001fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <MX_SPI1_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_SPI1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_SPI1_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_SPI1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_SPI1_Init+0x64>)
 8001fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_SPI1_Init+0x64>)
 8001fdc:	2210      	movs	r2, #16
 8001fde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_SPI1_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_SPI1_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_SPI1_Init+0x64>)
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <MX_SPI1_Init+0x64>)
 8001ffa:	f001 faad 	bl	8003558 <HAL_SPI_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002004:	f000 fa7e 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200002b8 	.word	0x200002b8
 8002010:	40013000 	.word	0x40013000

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002028:	4b38      	ldr	r3, [pc, #224]	; (800210c <MX_GPIO_Init+0xf8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a37      	ldr	r2, [pc, #220]	; (800210c <MX_GPIO_Init+0xf8>)
 800202e:	f043 0310 	orr.w	r3, r3, #16
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <MX_GPIO_Init+0xf8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <MX_GPIO_Init+0xf8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a31      	ldr	r2, [pc, #196]	; (800210c <MX_GPIO_Init+0xf8>)
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <MX_GPIO_Init+0xf8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <MX_GPIO_Init+0xf8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a2b      	ldr	r2, [pc, #172]	; (800210c <MX_GPIO_Init+0xf8>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <MX_GPIO_Init+0xf8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <MX_GPIO_Init+0xf8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <MX_GPIO_Init+0xf8>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <MX_GPIO_Init+0xf8>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208e:	4820      	ldr	r0, [pc, #128]	; (8002110 <MX_GPIO_Init+0xfc>)
 8002090:	f000 fe30 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2103      	movs	r1, #3
 8002098:	481e      	ldr	r0, [pc, #120]	; (8002114 <MX_GPIO_Init+0x100>)
 800209a:	f000 fe2b 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800209e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4619      	mov	r1, r3
 80020b6:	4816      	ldr	r0, [pc, #88]	; (8002110 <MX_GPIO_Init+0xfc>)
 80020b8:	f000 fc98 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80020bc:	2303      	movs	r3, #3
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4810      	ldr	r0, [pc, #64]	; (8002114 <MX_GPIO_Init+0x100>)
 80020d4:	f000 fc8a 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80020d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_GPIO_Init+0x104>)
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	4809      	ldr	r0, [pc, #36]	; (8002114 <MX_GPIO_Init+0x100>)
 80020ee:	f000 fc7d 	bl	80029ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2028      	movs	r0, #40	; 0x28
 80020f8:	f000 fc41 	bl	800297e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020fc:	2028      	movs	r0, #40	; 0x28
 80020fe:	f000 fc5a 	bl	80029b6 <HAL_NVIC_EnableIRQ>

}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	40011000 	.word	0x40011000
 8002114:	40010c00 	.word	0x40010c00
 8002118:	10210000 	.word	0x10210000

0800211c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
	onReceiveFlag = 0;
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_GPIO_EXTI_Callback+0x24>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

	AESK_NRF24_ReadPack();
 800212c:	f7ff fc48 	bl	80019c0 <AESK_NRF24_ReadPack>

	onReceiveFlag = 1;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_GPIO_EXTI_Callback+0x24>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <onReceive>:
void onReceive(uint8_t * pack, uint16_t len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
	if(*pack == 'P' || *pack == 'G')
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b50      	cmp	r3, #80	; 0x50
 8002156:	d003      	beq.n	8002160 <onReceive+0x1c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b47      	cmp	r3, #71	; 0x47
 800215e:	d106      	bne.n	800216e <onReceive+0x2a>
		AESK_NRF24_WritePack(pack, len, node);
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <onReceive+0x40>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	8879      	ldrh	r1, [r7, #2]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fc95 	bl	8001a98 <AESK_NRF24_WritePack>

	parseBuffer(pack);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f80c 	bl	800218c <parseBuffer>

	onReceiveFlag = 1;
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <onReceive+0x44>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000010 	.word	0x20000010
 8002188:	20000000 	.word	0x20000000

0800218c <parseBuffer>:

void parseBuffer(uint8_t * buffer)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t index = 2;
 8002194:	2302      	movs	r3, #2
 8002196:	81fb      	strh	r3, [r7, #14]

	if(aesk_nrf24_data.RxBuffer[0] == 'P')
 8002198:	4ba9      	ldr	r3, [pc, #676]	; (8002440 <parseBuffer+0x2b4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b50      	cmp	r3, #80	; 0x50
 800219e:	f040 81a6 	bne.w	80024ee <parseBuffer+0x362>
	{
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKp,buffer,&index);
 80021a2:	f107 030e 	add.w	r3, r7, #14
 80021a6:	461a      	mov	r2, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	48a6      	ldr	r0, [pc, #664]	; (8002444 <parseBuffer+0x2b8>)
 80021ac:	f7fe fdb6 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKi,buffer,&index);
 80021b0:	f107 030e 	add.w	r3, r7, #14
 80021b4:	461a      	mov	r2, r3
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	48a3      	ldr	r0, [pc, #652]	; (8002448 <parseBuffer+0x2bc>)
 80021ba:	f7fe fdaf 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKd,buffer,&index);
 80021be:	f107 030e 	add.w	r3, r7, #14
 80021c2:	461a      	mov	r2, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	48a1      	ldr	r0, [pc, #644]	; (800244c <parseBuffer+0x2c0>)
 80021c8:	f7fe fda8 	bl	8000d1c <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKp,buffer,&index);
 80021cc:	f107 030e 	add.w	r3, r7, #14
 80021d0:	461a      	mov	r2, r3
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	489e      	ldr	r0, [pc, #632]	; (8002450 <parseBuffer+0x2c4>)
 80021d6:	f7fe fda1 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKi,buffer,&index);
 80021da:	f107 030e 	add.w	r3, r7, #14
 80021de:	461a      	mov	r2, r3
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	489c      	ldr	r0, [pc, #624]	; (8002454 <parseBuffer+0x2c8>)
 80021e4:	f7fe fd9a 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKd,buffer,&index);
 80021e8:	f107 030e 	add.w	r3, r7, #14
 80021ec:	461a      	mov	r2, r3
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4899      	ldr	r0, [pc, #612]	; (8002458 <parseBuffer+0x2cc>)
 80021f2:	f7fe fd93 	bl	8000d1c <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKp,buffer,&index);
 80021f6:	f107 030e 	add.w	r3, r7, #14
 80021fa:	461a      	mov	r2, r3
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4897      	ldr	r0, [pc, #604]	; (800245c <parseBuffer+0x2d0>)
 8002200:	f7fe fd8c 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKi,buffer,&index);
 8002204:	f107 030e 	add.w	r3, r7, #14
 8002208:	461a      	mov	r2, r3
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4894      	ldr	r0, [pc, #592]	; (8002460 <parseBuffer+0x2d4>)
 800220e:	f7fe fd85 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKd,buffer,&index);
 8002212:	f107 030e 	add.w	r3, r7, #14
 8002216:	461a      	mov	r2, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4892      	ldr	r0, [pc, #584]	; (8002464 <parseBuffer+0x2d8>)
 800221c:	f7fe fd7e 	bl	8000d1c <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKp,buffer,&index);
 8002220:	f107 030e 	add.w	r3, r7, #14
 8002224:	461a      	mov	r2, r3
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	488f      	ldr	r0, [pc, #572]	; (8002468 <parseBuffer+0x2dc>)
 800222a:	f7fe fd77 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKi,buffer,&index);
 800222e:	f107 030e 	add.w	r3, r7, #14
 8002232:	461a      	mov	r2, r3
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	488d      	ldr	r0, [pc, #564]	; (800246c <parseBuffer+0x2e0>)
 8002238:	f7fe fd70 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKd,buffer,&index);
 800223c:	f107 030e 	add.w	r3, r7, #14
 8002240:	461a      	mov	r2, r3
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	488a      	ldr	r0, [pc, #552]	; (8002470 <parseBuffer+0x2e4>)
 8002246:	f7fe fd69 	bl	8000d1c <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kp,buffer,&index);
 800224a:	f107 030e 	add.w	r3, r7, #14
 800224e:	461a      	mov	r2, r3
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4888      	ldr	r0, [pc, #544]	; (8002474 <parseBuffer+0x2e8>)
 8002254:	f7fe fd62 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Ki,buffer,&index);
 8002258:	f107 030e 	add.w	r3, r7, #14
 800225c:	461a      	mov	r2, r3
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4885      	ldr	r0, [pc, #532]	; (8002478 <parseBuffer+0x2ec>)
 8002262:	f7fe fd5b 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kd,buffer,&index);
 8002266:	f107 030e 	add.w	r3, r7, #14
 800226a:	461a      	mov	r2, r3
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4883      	ldr	r0, [pc, #524]	; (800247c <parseBuffer+0x2f0>)
 8002270:	f7fe fd54 	bl	8000d1c <AESK_UINT8toUINT24_LE>

		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kp,buffer,&index);
 8002274:	f107 030e 	add.w	r3, r7, #14
 8002278:	461a      	mov	r2, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4880      	ldr	r0, [pc, #512]	; (8002480 <parseBuffer+0x2f4>)
 800227e:	f7fe fd4d 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Ki,buffer,&index);
 8002282:	f107 030e 	add.w	r3, r7, #14
 8002286:	461a      	mov	r2, r3
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	487e      	ldr	r0, [pc, #504]	; (8002484 <parseBuffer+0x2f8>)
 800228c:	f7fe fd46 	bl	8000d1c <AESK_UINT8toUINT24_LE>
		AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kd,buffer,&index);
 8002290:	f107 030e 	add.w	r3, r7, #14
 8002294:	461a      	mov	r2, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	487b      	ldr	r0, [pc, #492]	; (8002488 <parseBuffer+0x2fc>)
 800229a:	f7fe fd3f 	bl	8000d1c <AESK_UINT8toUINT24_LE>


		aesk_Rx_Datas_Float.floatRollPitchKp = (float)aesk_Rx_Datas_Int.RollPitchKp/100000;
 800229e:	4b69      	ldr	r3, [pc, #420]	; (8002444 <parseBuffer+0x2b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fb40 	bl	8000928 <__aeabi_ui2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4978      	ldr	r1, [pc, #480]	; (800248c <parseBuffer+0x300>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fc47 	bl	8000b40 <__aeabi_fdiv>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <parseBuffer+0x304>)
 80022b8:	601a      	str	r2, [r3, #0]
		aesk_Rx_Datas_Float.floatRollPitchKi = (float)aesk_Rx_Datas_Int.RollPitchKi/100000;
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <parseBuffer+0x2b8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fb32 	bl	8000928 <__aeabi_ui2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4971      	ldr	r1, [pc, #452]	; (800248c <parseBuffer+0x300>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fc39 	bl	8000b40 <__aeabi_fdiv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <parseBuffer+0x304>)
 80022d4:	605a      	str	r2, [r3, #4]
		aesk_Rx_Datas_Float.floatRollPitchKd = (float)aesk_Rx_Datas_Int.RollPitchKd/100000;
 80022d6:	4b5b      	ldr	r3, [pc, #364]	; (8002444 <parseBuffer+0x2b8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fb24 	bl	8000928 <__aeabi_ui2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	496a      	ldr	r1, [pc, #424]	; (800248c <parseBuffer+0x300>)
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fc2b 	bl	8000b40 <__aeabi_fdiv>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b68      	ldr	r3, [pc, #416]	; (8002490 <parseBuffer+0x304>)
 80022f0:	609a      	str	r2, [r3, #8]

		aesk_Rx_Datas_Float.floatYawKp = (float)aesk_Rx_Datas_Int.YawKp/100000;
 80022f2:	4b54      	ldr	r3, [pc, #336]	; (8002444 <parseBuffer+0x2b8>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fb16 	bl	8000928 <__aeabi_ui2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4963      	ldr	r1, [pc, #396]	; (800248c <parseBuffer+0x300>)
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fc1d 	bl	8000b40 <__aeabi_fdiv>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <parseBuffer+0x304>)
 800230c:	60da      	str	r2, [r3, #12]
		aesk_Rx_Datas_Float.floatYawKi = (float)aesk_Rx_Datas_Int.YawKi/100000;
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <parseBuffer+0x2b8>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fb08 	bl	8000928 <__aeabi_ui2f>
 8002318:	4603      	mov	r3, r0
 800231a:	495c      	ldr	r1, [pc, #368]	; (800248c <parseBuffer+0x300>)
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fc0f 	bl	8000b40 <__aeabi_fdiv>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <parseBuffer+0x304>)
 8002328:	611a      	str	r2, [r3, #16]
		aesk_Rx_Datas_Float.floatYawKd = (float)aesk_Rx_Datas_Int.YawKd/100000;
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <parseBuffer+0x2b8>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fafa 	bl	8000928 <__aeabi_ui2f>
 8002334:	4603      	mov	r3, r0
 8002336:	4955      	ldr	r1, [pc, #340]	; (800248c <parseBuffer+0x300>)
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fc01 	bl	8000b40 <__aeabi_fdiv>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <parseBuffer+0x304>)
 8002344:	615a      	str	r2, [r3, #20]

		aesk_Rx_Datas_Float.floatAltitudeKp = (float)aesk_Rx_Datas_Int.AltitudeKp/100000;
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <parseBuffer+0x2b8>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe faec 	bl	8000928 <__aeabi_ui2f>
 8002350:	4603      	mov	r3, r0
 8002352:	494e      	ldr	r1, [pc, #312]	; (800248c <parseBuffer+0x300>)
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fbf3 	bl	8000b40 <__aeabi_fdiv>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <parseBuffer+0x304>)
 8002360:	619a      	str	r2, [r3, #24]
		aesk_Rx_Datas_Float.floatAltitudeKi = (float)aesk_Rx_Datas_Int.AltitudeKi/100000;
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <parseBuffer+0x2b8>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fade 	bl	8000928 <__aeabi_ui2f>
 800236c:	4603      	mov	r3, r0
 800236e:	4947      	ldr	r1, [pc, #284]	; (800248c <parseBuffer+0x300>)
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fbe5 	bl	8000b40 <__aeabi_fdiv>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4b45      	ldr	r3, [pc, #276]	; (8002490 <parseBuffer+0x304>)
 800237c:	61da      	str	r2, [r3, #28]
		aesk_Rx_Datas_Float.floatAltitudeKd = (float)aesk_Rx_Datas_Int.AltitudeKd/100000;
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <parseBuffer+0x2b8>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fad0 	bl	8000928 <__aeabi_ui2f>
 8002388:	4603      	mov	r3, r0
 800238a:	4940      	ldr	r1, [pc, #256]	; (800248c <parseBuffer+0x300>)
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fbd7 	bl	8000b40 <__aeabi_fdiv>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <parseBuffer+0x304>)
 8002398:	621a      	str	r2, [r3, #32]

		aesk_Rx_Datas_Float.floatGpsKp = (float)aesk_Rx_Datas_Int.GpsKp/100000;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <parseBuffer+0x2b8>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fac2 	bl	8000928 <__aeabi_ui2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4939      	ldr	r1, [pc, #228]	; (800248c <parseBuffer+0x300>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fbc9 	bl	8000b40 <__aeabi_fdiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <parseBuffer+0x304>)
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
		aesk_Rx_Datas_Float.floatGpsKi = (float)aesk_Rx_Datas_Int.GpsKi/100000;
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <parseBuffer+0x2b8>)
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fab4 	bl	8000928 <__aeabi_ui2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4932      	ldr	r1, [pc, #200]	; (800248c <parseBuffer+0x300>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fbbb 	bl	8000b40 <__aeabi_fdiv>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b30      	ldr	r3, [pc, #192]	; (8002490 <parseBuffer+0x304>)
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
		aesk_Rx_Datas_Float.floatGpsKd = (float)aesk_Rx_Datas_Int.GpsKd/100000;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <parseBuffer+0x2b8>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe faa6 	bl	8000928 <__aeabi_ui2f>
 80023dc:	4603      	mov	r3, r0
 80023de:	492b      	ldr	r1, [pc, #172]	; (800248c <parseBuffer+0x300>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fbad 	bl	8000b40 <__aeabi_fdiv>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <parseBuffer+0x304>)
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c

		aesk_Rx_Datas_Float.floatExt1Kp = (float)aesk_Rx_Datas_Int.Ext1Kp/100000;
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <parseBuffer+0x2b8>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fa98 	bl	8000928 <__aeabi_ui2f>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4924      	ldr	r1, [pc, #144]	; (800248c <parseBuffer+0x300>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fb9f 	bl	8000b40 <__aeabi_fdiv>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <parseBuffer+0x304>)
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
		aesk_Rx_Datas_Float.floatExt1Ki = (float)aesk_Rx_Datas_Int.Ext1Ki/100000;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <parseBuffer+0x2b8>)
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fa8a 	bl	8000928 <__aeabi_ui2f>
 8002414:	4603      	mov	r3, r0
 8002416:	491d      	ldr	r1, [pc, #116]	; (800248c <parseBuffer+0x300>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fb91 	bl	8000b40 <__aeabi_fdiv>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <parseBuffer+0x304>)
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
		aesk_Rx_Datas_Float.floatExt1Kd = (float)aesk_Rx_Datas_Int.Ext1Kd/100000;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <parseBuffer+0x2b8>)
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fa7c 	bl	8000928 <__aeabi_ui2f>
 8002430:	4603      	mov	r3, r0
 8002432:	4916      	ldr	r1, [pc, #88]	; (800248c <parseBuffer+0x300>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fb83 	bl	8000b40 <__aeabi_fdiv>
 800243a:	4603      	mov	r3, r0
 800243c:	e02a      	b.n	8002494 <parseBuffer+0x308>
 800243e:	bf00      	nop
 8002440:	20000070 	.word	0x20000070
 8002444:	20000314 	.word	0x20000314
 8002448:	20000318 	.word	0x20000318
 800244c:	2000031c 	.word	0x2000031c
 8002450:	20000320 	.word	0x20000320
 8002454:	20000324 	.word	0x20000324
 8002458:	20000328 	.word	0x20000328
 800245c:	2000032c 	.word	0x2000032c
 8002460:	20000330 	.word	0x20000330
 8002464:	20000334 	.word	0x20000334
 8002468:	20000338 	.word	0x20000338
 800246c:	2000033c 	.word	0x2000033c
 8002470:	20000340 	.word	0x20000340
 8002474:	20000344 	.word	0x20000344
 8002478:	20000348 	.word	0x20000348
 800247c:	2000034c 	.word	0x2000034c
 8002480:	20000350 	.word	0x20000350
 8002484:	20000354 	.word	0x20000354
 8002488:	20000358 	.word	0x20000358
 800248c:	47c35000 	.word	0x47c35000
 8002490:	2000037c 	.word	0x2000037c
 8002494:	461a      	mov	r2, r3
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <parseBuffer+0x36c>)
 8002498:	639a      	str	r2, [r3, #56]	; 0x38

		aesk_Rx_Datas_Float.floatExt2Kp = (float)aesk_Rx_Datas_Int.Ext2Kp/100000;
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <parseBuffer+0x370>)
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fa42 	bl	8000928 <__aeabi_ui2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4916      	ldr	r1, [pc, #88]	; (8002500 <parseBuffer+0x374>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fb49 	bl	8000b40 <__aeabi_fdiv>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <parseBuffer+0x36c>)
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c
		aesk_Rx_Datas_Float.floatExt2Ki = (float)aesk_Rx_Datas_Int.Ext2Ki/100000;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <parseBuffer+0x370>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fa34 	bl	8000928 <__aeabi_ui2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	490f      	ldr	r1, [pc, #60]	; (8002500 <parseBuffer+0x374>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fb3b 	bl	8000b40 <__aeabi_fdiv>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <parseBuffer+0x36c>)
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
		aesk_Rx_Datas_Float.floatExt2Kd = (float)aesk_Rx_Datas_Int.Ext2Kd/100000;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <parseBuffer+0x370>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fa26 	bl	8000928 <__aeabi_ui2f>
 80024dc:	4603      	mov	r3, r0
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <parseBuffer+0x374>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fb2d 	bl	8000b40 <__aeabi_fdiv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <parseBuffer+0x36c>)
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
	}

}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000037c 	.word	0x2000037c
 80024fc:	20000314 	.word	0x20000314
 8002500:	47c35000 	.word	0x47c35000

08002504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800250c:	e7fe      	b.n	800250c <Error_Handler+0x8>
	...

08002510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_MspInit+0x5c>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_MspInit+0x5c>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6193      	str	r3, [r2, #24]
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_MspInit+0x5c>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_MspInit+0x5c>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_MspInit+0x5c>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_MspInit+0x5c>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_MspInit+0x60>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_MspInit+0x60>)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	40021000 	.word	0x40021000
 8002570:	40010000 	.word	0x40010000

08002574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_SPI_MspInit+0x88>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d12f      	bne.n	80025f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_SPI_MspInit+0x8c>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_SPI_MspInit+0x8c>)
 800259a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_SPI_MspInit+0x8c>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_SPI_MspInit+0x8c>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_SPI_MspInit+0x8c>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_SPI_MspInit+0x8c>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025c4:	23a0      	movs	r3, #160	; 0xa0
 80025c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4619      	mov	r1, r3
 80025d6:	480b      	ldr	r0, [pc, #44]	; (8002604 <HAL_SPI_MspInit+0x90>)
 80025d8:	f000 fa08 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025dc:	2340      	movs	r3, #64	; 0x40
 80025de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4619      	mov	r1, r3
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <HAL_SPI_MspInit+0x90>)
 80025f0:	f000 f9fc 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40013000 	.word	0x40013000
 8002600:	40021000 	.word	0x40021000
 8002604:	40010800 	.word	0x40010800

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800260c:	e7fe      	b.n	800260c <NMI_Handler+0x4>

0800260e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler+0x4>

08002614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <MemManage_Handler+0x4>

0800261a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <UsageFault_Handler+0x4>

08002626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264e:	f000 f87f 	bl	8002750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8002652:	f7fe fb93 	bl	8000d7c <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}

0800265a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 800265e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002662:	f000 fb79 	bl	8002d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}

0800266a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <Reset_Handler>:
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <LoopFillZerobss+0x12>)
 800267a:	490d      	ldr	r1, [pc, #52]	; (80026b0 <LoopFillZerobss+0x16>)
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <LoopFillZerobss+0x1a>)
 800267e:	2300      	movs	r3, #0
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:
 8002682:	58d4      	ldr	r4, [r2, r3]
 8002684:	50c4      	str	r4, [r0, r3]
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:
 8002688:	18c4      	adds	r4, r0, r3
 800268a:	428c      	cmp	r4, r1
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <LoopFillZerobss+0x1e>)
 8002690:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <LoopFillZerobss+0x22>)
 8002692:	2300      	movs	r3, #0
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:
 800269a:	42a2      	cmp	r2, r4
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>
 800269e:	f7ff ffe4 	bl	800266a <SystemInit>
 80026a2:	f001 fcc5 	bl	8004030 <__libc_init_array>
 80026a6:	f7ff fa6f 	bl	8001b88 <main>
 80026aa:	4770      	bx	lr
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000024 	.word	0x20000024
 80026b4:	080040c8 	.word	0x080040c8
 80026b8:	20000028 	.word	0x20000028
 80026bc:	200003c8 	.word	0x200003c8

080026c0 <ADC1_2_IRQHandler>:
 80026c0:	e7fe      	b.n	80026c0 <ADC1_2_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_Init+0x28>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_Init+0x28>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f000 f947 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026da:	200f      	movs	r0, #15
 80026dc:	f000 f808 	bl	80026f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e0:	f7ff ff16 	bl	8002510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x54>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_InitTick+0x58>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	fbb3 f3f1 	udiv	r3, r3, r1
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f95f 	bl	80029d2 <HAL_SYSTICK_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00e      	b.n	800273c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d80a      	bhi.n	800273a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f000 f927 	bl	800297e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <HAL_InitTick+0x5c>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000018 	.word	0x20000018
 8002748:	20000020 	.word	0x20000020
 800274c:	2000001c 	.word	0x2000001c

08002750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_IncTick+0x1c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_IncTick+0x20>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_IncTick+0x20>)
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	20000020 	.word	0x20000020
 8002770:	200003c4 	.word	0x200003c4

08002774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b02      	ldr	r3, [pc, #8]	; (8002784 <HAL_GetTick+0x10>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	200003c4 	.word	0x200003c4

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fff0 	bl	8002774 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffe0 	bl	8002774 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000020 	.word	0x20000020

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4906      	ldr	r1, [pc, #24]	; (8002868 <__NVIC_EnableIRQ+0x34>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff90 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff2d 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff42 	bl	8002818 <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff90 	bl	80028c0 <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5f 	bl	800286c <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff35 	bl	8002834 <__NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffa2 	bl	8002924 <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b08b      	sub	sp, #44	; 0x2c
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	e169      	b.n	8002cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a00:	2201      	movs	r2, #1
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8158 	bne.w	8002cce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a9a      	ldr	r2, [pc, #616]	; (8002c8c <HAL_GPIO_Init+0x2a0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d05e      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a28:	4a98      	ldr	r2, [pc, #608]	; (8002c8c <HAL_GPIO_Init+0x2a0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d875      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a2e:	4a98      	ldr	r2, [pc, #608]	; (8002c90 <HAL_GPIO_Init+0x2a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d058      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a34:	4a96      	ldr	r2, [pc, #600]	; (8002c90 <HAL_GPIO_Init+0x2a4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d86f      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a3a:	4a96      	ldr	r2, [pc, #600]	; (8002c94 <HAL_GPIO_Init+0x2a8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d052      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a40:	4a94      	ldr	r2, [pc, #592]	; (8002c94 <HAL_GPIO_Init+0x2a8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d869      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a46:	4a94      	ldr	r2, [pc, #592]	; (8002c98 <HAL_GPIO_Init+0x2ac>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04c      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a4c:	4a92      	ldr	r2, [pc, #584]	; (8002c98 <HAL_GPIO_Init+0x2ac>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d863      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a52:	4a92      	ldr	r2, [pc, #584]	; (8002c9c <HAL_GPIO_Init+0x2b0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d046      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a58:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <HAL_GPIO_Init+0x2b0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d85d      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a5e:	2b12      	cmp	r3, #18
 8002a60:	d82a      	bhi.n	8002ab8 <HAL_GPIO_Init+0xcc>
 8002a62:	2b12      	cmp	r3, #18
 8002a64:	d859      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <HAL_GPIO_Init+0x80>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002ae7 	.word	0x08002ae7
 8002a70:	08002ac1 	.word	0x08002ac1
 8002a74:	08002ad3 	.word	0x08002ad3
 8002a78:	08002b15 	.word	0x08002b15
 8002a7c:	08002b1b 	.word	0x08002b1b
 8002a80:	08002b1b 	.word	0x08002b1b
 8002a84:	08002b1b 	.word	0x08002b1b
 8002a88:	08002b1b 	.word	0x08002b1b
 8002a8c:	08002b1b 	.word	0x08002b1b
 8002a90:	08002b1b 	.word	0x08002b1b
 8002a94:	08002b1b 	.word	0x08002b1b
 8002a98:	08002b1b 	.word	0x08002b1b
 8002a9c:	08002b1b 	.word	0x08002b1b
 8002aa0:	08002b1b 	.word	0x08002b1b
 8002aa4:	08002b1b 	.word	0x08002b1b
 8002aa8:	08002b1b 	.word	0x08002b1b
 8002aac:	08002b1b 	.word	0x08002b1b
 8002ab0:	08002ac9 	.word	0x08002ac9
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	4a79      	ldr	r2, [pc, #484]	; (8002ca0 <HAL_GPIO_Init+0x2b4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002abe:	e02c      	b.n	8002b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	623b      	str	r3, [r7, #32]
          break;
 8002ac6:	e029      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	3304      	adds	r3, #4
 8002ace:	623b      	str	r3, [r7, #32]
          break;
 8002ad0:	e024      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	623b      	str	r3, [r7, #32]
          break;
 8002ada:	e01f      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	623b      	str	r3, [r7, #32]
          break;
 8002ae4:	e01a      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aee:	2304      	movs	r3, #4
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e013      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002afc:	2308      	movs	r3, #8
 8002afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	611a      	str	r2, [r3, #16]
          break;
 8002b06:	e009      	b.n	8002b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b08:	2308      	movs	r3, #8
 8002b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	615a      	str	r2, [r3, #20]
          break;
 8002b12:	e003      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
          break;
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          break;
 8002b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2bff      	cmp	r3, #255	; 0xff
 8002b20:	d801      	bhi.n	8002b26 <HAL_GPIO_Init+0x13a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	e001      	b.n	8002b2a <HAL_GPIO_Init+0x13e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2bff      	cmp	r3, #255	; 0xff
 8002b30:	d802      	bhi.n	8002b38 <HAL_GPIO_Init+0x14c>
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	e002      	b.n	8002b3e <HAL_GPIO_Init+0x152>
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	3b08      	subs	r3, #8
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	210f      	movs	r1, #15
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80b1 	beq.w	8002cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a4c      	ldr	r2, [pc, #304]	; (8002ca4 <HAL_GPIO_Init+0x2b8>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_GPIO_Init+0x2b8>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2bc>)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a40      	ldr	r2, [pc, #256]	; (8002cac <HAL_GPIO_Init+0x2c0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_GPIO_Init+0x1ec>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3f      	ldr	r2, [pc, #252]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_GPIO_Init+0x1e8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3e      	ldr	r2, [pc, #248]	; (8002cb4 <HAL_GPIO_Init+0x2c8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <HAL_GPIO_Init+0x1e4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_GPIO_Init+0x2cc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_GPIO_Init+0x1e0>
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e006      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e004      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e002      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	f002 0203 	and.w	r2, r2, #3
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	4093      	lsls	r3, r2
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bea:	492f      	ldr	r1, [pc, #188]	; (8002ca8 <HAL_GPIO_Init+0x2bc>)
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d006      	beq.n	8002c12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	492c      	ldr	r1, [pc, #176]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c12:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	4928      	ldr	r1, [pc, #160]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4922      	ldr	r1, [pc, #136]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	491e      	ldr	r1, [pc, #120]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	4918      	ldr	r1, [pc, #96]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4914      	ldr	r1, [pc, #80]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d021      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e021      	b.n	8002cce <HAL_GPIO_Init+0x2e2>
 8002c8a:	bf00      	nop
 8002c8c:	10320000 	.word	0x10320000
 8002c90:	10310000 	.word	0x10310000
 8002c94:	10220000 	.word	0x10220000
 8002c98:	10210000 	.word	0x10210000
 8002c9c:	10120000 	.word	0x10120000
 8002ca0:	10110000 	.word	0x10110000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40010800 	.word	0x40010800
 8002cb0:	40010c00 	.word	0x40010c00
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	40011400 	.word	0x40011400
 8002cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_GPIO_Init+0x304>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <HAL_GPIO_Init+0x304>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f ae8e 	bne.w	8002a00 <HAL_GPIO_Init+0x14>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	372c      	adds	r7, #44	; 0x2c
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
 8002d00:	4613      	mov	r3, r2
 8002d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d10:	e003      	b.n	8002d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	041a      	lsls	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	041a      	lsls	r2, r3, #16
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43d9      	mvns	r1, r3
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	400b      	ands	r3, r1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f9d0 	bl	800211c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010400 	.word	0x40010400

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e26c      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da8:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d00c      	beq.n	8002dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db4:	4b8f      	ldr	r3, [pc, #572]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d112      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
 8002dc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	4b89      	ldr	r3, [pc, #548]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d168      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e246      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x76>
 8002df0:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7f      	ldr	r2, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e02e      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b78      	ldr	r3, [pc, #480]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a77      	ldr	r2, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0xbc>
 8002e2a:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fc86 	bl	8002774 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7ff fc82 	bl	8002774 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1fa      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe4>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff fc72 	bl	8002774 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7ff fc6e 	bl	8002774 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1e6      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x10c>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1ba      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4939      	ldr	r1, [pc, #228]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7ff fc27 	bl	8002774 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7ff fc23 	bl	8002774 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e19b      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff fc06 	bl	8002774 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7ff fc02 	bl	8002774 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e17a      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03a      	beq.n	800300c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7ff fbe6 	bl	8002774 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7ff fbe2 	bl	8002774 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e15a      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 faa6 	bl	800351c <RCC_Delay>
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7ff fbcc 	bl	8002774 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fde:	e00f      	b.n	8003000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7ff fbc8 	bl	8002774 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d908      	bls.n	8003000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e140      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	42420000 	.word	0x42420000
 8002ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	4b9e      	ldr	r3, [pc, #632]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e9      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a6 	beq.w	8003166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b97      	ldr	r3, [pc, #604]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10d      	bne.n	8003046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b94      	ldr	r3, [pc, #592]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a93      	ldr	r2, [pc, #588]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b91      	ldr	r3, [pc, #580]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b8e      	ldr	r3, [pc, #568]	; (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b8b      	ldr	r3, [pc, #556]	; (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a8a      	ldr	r2, [pc, #552]	; (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7ff fb89 	bl	8002774 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7ff fb85 	bl	8002774 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0fd      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x312>
 800308c:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a7a      	ldr	r2, [pc, #488]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e02d      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030a2:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a75      	ldr	r2, [pc, #468]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a72      	ldr	r2, [pc, #456]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6213      	str	r3, [r2, #32]
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x356>
 80030c4:	4b6d      	ldr	r3, [pc, #436]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a6c      	ldr	r2, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a69      	ldr	r2, [pc, #420]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030de:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a66      	ldr	r2, [pc, #408]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b64      	ldr	r3, [pc, #400]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a63      	ldr	r2, [pc, #396]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7ff fb39 	bl	8002774 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7ff fb35 	bl	8002774 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0ab      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b57      	ldr	r3, [pc, #348]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x37e>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7ff fb23 	bl	8002774 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7ff fb1f 	bl	8002774 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e095      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b48      	ldr	r3, [pc, #288]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a47      	ldr	r2, [pc, #284]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8081 	beq.w	8003272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	4b42      	ldr	r3, [pc, #264]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d061      	beq.n	8003240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d146      	bne.n	8003212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x4fc>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7ff faf3 	bl	8002774 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7ff faef 	bl	8002774 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e067      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	4b35      	ldr	r3, [pc, #212]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d108      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ba:	4b30      	ldr	r3, [pc, #192]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	492d      	ldr	r1, [pc, #180]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a19      	ldr	r1, [r3, #32]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	430b      	orrs	r3, r1
 80031de:	4927      	ldr	r1, [pc, #156]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <HAL_RCC_OscConfig+0x4fc>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7ff fac3 	bl	8002774 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7ff fabf 	bl	8002774 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e037      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46a>
 8003210:	e02f      	b.n	8003272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_RCC_OscConfig+0x4fc>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7ff faac 	bl	8002774 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7ff faa8 	bl	8002774 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e020      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x498>
 800323e:	e018      	b.n	8003272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e013      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_OscConfig+0x4f4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	429a      	cmp	r2, r3
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	40007000 	.word	0x40007000
 8003284:	42420060 	.word	0x42420060

08003288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0d0      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b6a      	ldr	r3, [pc, #424]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d910      	bls.n	80032cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 0207 	bic.w	r2, r3, #7
 80032b2:	4965      	ldr	r1, [pc, #404]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b8      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a58      	ldr	r2, [pc, #352]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	494d      	ldr	r1, [pc, #308]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d040      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d115      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e073      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06b      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4936      	ldr	r1, [pc, #216]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7ff f9fc 	bl	8002774 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7ff f9f8 	bl	8002774 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e053      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d210      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4922      	ldr	r1, [pc, #136]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4916      	ldr	r1, [pc, #88]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003416:	f000 f821 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	490a      	ldr	r1, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1cc>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1d0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f95a 	bl	80026f0 <HAL_InitTick>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40022000 	.word	0x40022000
 800344c:	40021000 	.word	0x40021000
 8003450:	080040b0 	.word	0x080040b0
 8003454:	20000018 	.word	0x20000018
 8003458:	2000001c 	.word	0x2000001c

0800345c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	b490      	push	{r4, r7}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003464:	1d3c      	adds	r4, r7, #4
 8003466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800346c:	f240 2301 	movw	r3, #513	; 0x201
 8003470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b04      	cmp	r3, #4
 8003494:	d002      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003496:	2b08      	cmp	r3, #8
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x46>
 800349a:	e02d      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349e:	623b      	str	r3, [r7, #32]
      break;
 80034a0:	e02d      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	0c9b      	lsrs	r3, r3, #18
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034ae:	4413      	add	r3, r2
 80034b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	0c5b      	lsrs	r3, r3, #17
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034ce:	4413      	add	r3, r2
 80034d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034da:	fb02 f203 	mul.w	r2, r2, r3
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e004      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	623b      	str	r3, [r7, #32]
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fa:	623b      	str	r3, [r7, #32]
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc90      	pop	{r4, r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	080040a0 	.word	0x080040a0
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200
 8003518:	003d0900 	.word	0x003d0900

0800351c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <RCC_Delay+0x34>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <RCC_Delay+0x38>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003538:	bf00      	nop
  }
  while (Delay --);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	60fa      	str	r2, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f9      	bne.n	8003538 <RCC_Delay+0x1c>
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	20000018 	.word	0x20000018
 8003554:	10624dd3 	.word	0x10624dd3

08003558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e076      	b.n	8003658 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d009      	beq.n	8003590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	e005      	b.n	8003590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe ffe2 	bl	8002574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	0c1a      	lsrs	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 0204 	and.w	r2, r2, #4
 8003636:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_SPI_Transmit+0x22>
 800367e:	2302      	movs	r3, #2
 8003680:	e126      	b.n	80038d0 <HAL_SPI_Transmit+0x270>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368a:	f7ff f873 	bl	8002774 <HAL_GetTick>
 800368e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a4:	e10b      	b.n	80038be <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_SPI_Transmit+0x52>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036b6:	e102      	b.n	80038be <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d10f      	bne.n	8003720 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003746:	d14b      	bne.n	80037e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Transmit+0xf6>
 8003750:	8afb      	ldrh	r3, [r7, #22]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d13e      	bne.n	80037d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800377a:	e02b      	b.n	80037d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ae:	e011      	b.n	80037d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b0:	f7fe ffe0 	bl	8002774 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d803      	bhi.n	80037c8 <HAL_SPI_Transmit+0x168>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Transmit+0x16e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037d2:	e074      	b.n	80038be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ce      	bne.n	800377c <HAL_SPI_Transmit+0x11c>
 80037de:	e04c      	b.n	800387a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_Transmit+0x18e>
 80037e8:	8afb      	ldrh	r3, [r7, #22]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d140      	bne.n	8003870 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003814:	e02c      	b.n	8003870 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d113      	bne.n	800384c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	86da      	strh	r2, [r3, #54]	; 0x36
 800384a:	e011      	b.n	8003870 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384c:	f7fe ff92 	bl	8002774 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d803      	bhi.n	8003864 <HAL_SPI_Transmit+0x204>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d102      	bne.n	800386a <HAL_SPI_Transmit+0x20a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800386e:	e026      	b.n	80038be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cd      	bne.n	8003816 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fbb8 	bl	8003ff4 <SPI_EndRxTxTransaction>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e000      	b.n	80038be <HAL_SPI_Transmit+0x25e>
  }

error:
 80038bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038f4:	d112      	bne.n	800391c <HAL_SPI_Receive+0x44>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10e      	bne.n	800391c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2204      	movs	r2, #4
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f8f1 	bl	8003afa <HAL_SPI_TransmitReceive>
 8003918:	4603      	mov	r3, r0
 800391a:	e0ea      	b.n	8003af2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_SPI_Receive+0x52>
 8003926:	2302      	movs	r3, #2
 8003928:	e0e3      	b.n	8003af2 <HAL_SPI_Receive+0x21a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003932:	f7fe ff1f 	bl	8002774 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d002      	beq.n	800394a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003944:	2302      	movs	r3, #2
 8003946:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003948:	e0ca      	b.n	8003ae0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_Receive+0x7e>
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    goto error;
 800395a:	e0c1      	b.n	8003ae0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2204      	movs	r2, #4
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a2:	d10f      	bne.n	80039c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d007      	beq.n	80039e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d162      	bne.n	8003ab0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039ea:	e02e      	b.n	8003a4a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d115      	bne.n	8003a26 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f103 020c 	add.w	r2, r3, #12
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a24:	e011      	b.n	8003a4a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a26:	f7fe fea5 	bl	8002774 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d803      	bhi.n	8003a3e <HAL_SPI_Receive+0x166>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Receive+0x16c>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a48:	e04a      	b.n	8003ae0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1cb      	bne.n	80039ec <HAL_SPI_Receive+0x114>
 8003a54:	e031      	b.n	8003aba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d113      	bne.n	8003a8c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a8a:	e011      	b.n	8003ab0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8c:	f7fe fe72 	bl	8002774 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d803      	bhi.n	8003aa4 <HAL_SPI_Receive+0x1cc>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d102      	bne.n	8003aaa <HAL_SPI_Receive+0x1d2>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003aae:	e017      	b.n	8003ae0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cd      	bne.n	8003a56 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fa46 	bl	8003f50 <SPI_EndRxTransaction>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
 8003adc:	e000      	b.n	8003ae0 <HAL_SPI_Receive+0x208>
  }

error :
 8003ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08c      	sub	sp, #48	; 0x30
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x26>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e18a      	b.n	8003e36 <HAL_SPI_TransmitReceive+0x33c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b28:	f7fe fe24 	bl	8002774 <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d00f      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x70>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b50:	d107      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x68>
 8003b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d003      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b68:	e15b      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x82>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x82>
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b82:	e14e      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d003      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2205      	movs	r2, #5
 8003b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	887a      	ldrh	r2, [r7, #2]
 8003bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	887a      	ldrh	r2, [r7, #2]
 8003bba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d007      	beq.n	8003bec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	d178      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x10a>
 8003bfe:	8b7b      	ldrh	r3, [r7, #26]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d166      	bne.n	8003cd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	1c9a      	adds	r2, r3, #2
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c28:	e053      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d11b      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x176>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x176>
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d113      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	881a      	ldrh	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d119      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x1b8>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	b292      	uxth	r2, r2
 8003c94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cb2:	f7fe fd5f 	bl	8002774 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d807      	bhi.n	8003cd2 <HAL_SPI_TransmitReceive+0x1d8>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d003      	beq.n	8003cd2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd0:	e0a7      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1a6      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x130>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1a1      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x130>
 8003ce6:	e07c      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x1fc>
 8003cf0:	8b7b      	ldrh	r3, [r7, #26]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d16b      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1c:	e057      	b.n	8003dce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d11c      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x26c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d017      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x26c>
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d114      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d119      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x2ae>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d014      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003da8:	f7fe fce4 	bl	8002774 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d803      	bhi.n	8003dc0 <HAL_SPI_TransmitReceive+0x2c6>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d102      	bne.n	8003dc6 <HAL_SPI_TransmitReceive+0x2cc>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dcc:	e029      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1a2      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x224>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d19d      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f904 	bl	8003ff4 <SPI_EndRxTxTransaction>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dfe:	e010      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	e000      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3730      	adds	r7, #48	; 0x30
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e50:	f7fe fc90 	bl	8002774 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e60:	f7fe fc88 	bl	8002774 <HAL_GetTick>
 8003e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e66:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	015b      	lsls	r3, r3, #5
 8003e6c:	0d1b      	lsrs	r3, r3, #20
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e76:	e054      	b.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d050      	beq.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e80:	f7fe fc78 	bl	8002774 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d902      	bls.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d13d      	bne.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eae:	d111      	bne.n	8003ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb8:	d004      	beq.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d107      	bne.n	8003ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003edc:	d10f      	bne.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e017      	b.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d19b      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000018 	.word	0x20000018

08003f50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f64:	d111      	bne.n	8003f8a <SPI_EndRxTransaction+0x3a>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6e:	d004      	beq.n	8003f7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d107      	bne.n	8003f8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f92:	d117      	bne.n	8003fc4 <SPI_EndRxTransaction+0x74>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9c:	d112      	bne.n	8003fc4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ff49 	bl	8003e40 <SPI_WaitFlagStateUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e013      	b.n	8003fec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7ff ff36 	bl	8003e40 <SPI_WaitFlagStateUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e000      	b.n	8003fec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff ff18 	bl	8003e40 <SPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e000      	b.n	8004028 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <__libc_init_array>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	2600      	movs	r6, #0
 8004034:	4d0c      	ldr	r5, [pc, #48]	; (8004068 <__libc_init_array+0x38>)
 8004036:	4c0d      	ldr	r4, [pc, #52]	; (800406c <__libc_init_array+0x3c>)
 8004038:	1b64      	subs	r4, r4, r5
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	42a6      	cmp	r6, r4
 800403e:	d109      	bne.n	8004054 <__libc_init_array+0x24>
 8004040:	f000 f822 	bl	8004088 <_init>
 8004044:	2600      	movs	r6, #0
 8004046:	4d0a      	ldr	r5, [pc, #40]	; (8004070 <__libc_init_array+0x40>)
 8004048:	4c0a      	ldr	r4, [pc, #40]	; (8004074 <__libc_init_array+0x44>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	42a6      	cmp	r6, r4
 8004050:	d105      	bne.n	800405e <__libc_init_array+0x2e>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	f855 3b04 	ldr.w	r3, [r5], #4
 8004058:	4798      	blx	r3
 800405a:	3601      	adds	r6, #1
 800405c:	e7ee      	b.n	800403c <__libc_init_array+0xc>
 800405e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004062:	4798      	blx	r3
 8004064:	3601      	adds	r6, #1
 8004066:	e7f2      	b.n	800404e <__libc_init_array+0x1e>
 8004068:	080040c0 	.word	0x080040c0
 800406c:	080040c0 	.word	0x080040c0
 8004070:	080040c0 	.word	0x080040c0
 8004074:	080040c4 	.word	0x080040c4

08004078 <memset>:
 8004078:	4603      	mov	r3, r0
 800407a:	4402      	add	r2, r0
 800407c:	4293      	cmp	r3, r2
 800407e:	d100      	bne.n	8004082 <memset+0xa>
 8004080:	4770      	bx	lr
 8004082:	f803 1b01 	strb.w	r1, [r3], #1
 8004086:	e7f9      	b.n	800407c <memset+0x4>

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
