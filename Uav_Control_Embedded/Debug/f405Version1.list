
f405Version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a384  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c58  0801a518  0801a518  0002a518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b170  0801b170  00030304  2**0
                  CONTENTS
  4 .ARM          00000008  0801b170  0801b170  0002b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b178  0801b178  00030304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b178  0801b178  0002b178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b17c  0801b17c  0002b17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  20000000  0801b180  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030304  2**0
                  CONTENTS
 10 .bss          000032c0  20000308  20000308  00030308  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200035c8  200035c8  00030308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000489c0  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e2d  00000000  00000000  00078cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002230  00000000  00000000  0007fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fb0  00000000  00000000  00081d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c529  00000000  00000000  00083d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f837  00000000  00000000  00090231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de7fe  00000000  00000000  000bfa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019e266  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a85c  00000000  00000000  0019e2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a4fc 	.word	0x0801a4fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	0801a4fc 	.word	0x0801a4fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <AESK_UINT16toUINT8_LE>:
 *  		dizi[0] = 0x55;
 *  		dizi[1] = 0x45;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT16toUINT8_LE(uint16_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4413      	add	r3, r2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4413      	add	r3, r2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	7852      	ldrb	r2, [r2, #1]
 8001016:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint16_t);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	3302      	adds	r3, #2
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	801a      	strh	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <AESK_UINT32toUINT8_LE>:
 *  		dizi[2] = 0x55;
 *  		dizi[3] = 0x45;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT32toUINT8_LE(uint32_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	7852      	ldrb	r2, [r2, #1]
 800105a:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 2] = ((uint8_t*)packData)[2];
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	3302      	adds	r3, #2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	7892      	ldrb	r2, [r2, #2]
 800106a:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 3] = ((uint8_t*)packData)[3];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	3303      	adds	r3, #3
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	78d2      	ldrb	r2, [r2, #3]
 800107a:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint32_t);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	3304      	adds	r3, #4
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	801a      	strh	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <AESK_INT32toUINT8_LE>:
 *  		dizi[2] = 0x55;
 *  		dizi[3] = 0x45;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_INT32toUINT8_LE(int32_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	4413      	add	r3, r2
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7852      	ldrb	r2, [r2, #1]
 80010be:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 2] = ((uint8_t*)packData)[2];
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	7892      	ldrb	r2, [r2, #2]
 80010ce:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 3] = ((uint8_t*)packData)[3];
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3303      	adds	r3, #3
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4413      	add	r3, r2
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	78d2      	ldrb	r2, [r2, #3]
 80010de:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(int32_t);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	801a      	strh	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <AESK_FLOAT32toUINT8_LE>:
/***************************************  INT32 PACKAGE END *********************************************************/

/***************************************  FLOAT32 PACKAGE START *********************************************************/

void AESK_FLOAT32toUINT8_LE(float *packData, uint8_t *packBuf, uint16_t *index)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	7852      	ldrb	r2, [r2, #1]
 8001122:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 2] = ((uint8_t*)packData)[2];
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3302      	adds	r3, #2
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	7892      	ldrb	r2, [r2, #2]
 8001132:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 3] = ((uint8_t*)packData)[3];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	3303      	adds	r3, #3
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	4413      	add	r3, r2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	78d2      	ldrb	r2, [r2, #3]
 8001142:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(float);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	801a      	strh	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <AESK_UINT8toUINT8CODE>:

/***************************************  FLOAT64(DOUBLE) PACKAGE END *********************************************************/
/***************************************  UINT8 PACKAGE START *********************************************************/

void AESK_UINT8toUINT8CODE(uint8_t *packData, uint8_t *packBuf, uint16_t *index)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4413      	add	r3, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint8_t);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	801a      	strh	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <AESK_UINT8toUINT16_LE>:
 *  		dizi[3] = 0x12
 *  		yemre = 0x1200;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT8toUINT16_LE(uint16_t *packData, uint8_t* packBuf, uint16_t *index)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
	((uint8_t *)packData)[0] = packBuf[*index];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	4413      	add	r3, r2
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	701a      	strb	r2, [r3, #0]
	((uint8_t *)packData)[1] = packBuf[(*index) + 1];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	441a      	add	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(int16_t);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	3302      	adds	r3, #2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	801a      	strh	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <AESK_UINT8toUINT24_LE>:

	*index = *index + sizeof(uint32_t);
}

void AESK_UINT8toUINT24_LE(uint32_t *packData, uint8_t *packBuf, uint16_t *index)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
	((uint8_t*) packData)[0] = packBuf[(*index)];
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	701a      	strb	r2, [r3, #0]
	((uint8_t*) packData)[1] = packBuf[(*index) + 1];
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	441a      	add	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	701a      	strb	r2, [r3, #0]
	((uint8_t*) packData)[2] = packBuf[(*index) + 2];
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3302      	adds	r3, #2
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	441a      	add	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3302      	adds	r3, #2
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	701a      	strb	r2, [r3, #0]
	((uint8_t*) packData)[3] = 0;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3303      	adds	r3, #3
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]

	*index = *index + 3;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	3303      	adds	r3, #3
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	801a      	strh	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <vars_to_str>:

#include "AESK_Log_System.h"
#include "Uav_Global.h"

void vars_to_str(char *buffer, const char *format, ...)
{
 8001236:	b40e      	push	{r1, r2, r3}
 8001238:	b580      	push	{r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	60fb      	str	r3, [r7, #12]
	vsprintf(buffer, format, args);
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	69f9      	ldr	r1, [r7, #28]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f013 fe04 	bl	8014e58 <vsiprintf>
	va_end(args);
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800125a:	b003      	add	sp, #12
 800125c:	4770      	bx	lr
	...

08001260 <LogStart>:
		"AltitudeKp\t"				//birimsiz
		"AltitudeKi\t"				//birimsiz
		"AltitudeKd\t\n";				//birimsiz

void LogStart(Sd_Card_Data *sdcard_data)
{
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
	sdcard_data->result = f_mount(&sdcard_data->myFATAFS, (TCHAR const*) SDPath, 1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800126e:	2201      	movs	r2, #1
 8001270:	4923      	ldr	r1, [pc, #140]	; (8001300 <LogStart+0xa0>)
 8001272:	4618      	mov	r0, r3
 8001274:	f011 fbba 	bl	80129ec <f_mount>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
	if (sdcard_data->result == FR_OK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3454 	ldrb.w	r3, [r3, #1108]	; 0x454
 8001288:	2b00      	cmp	r3, #0
 800128a:	d134      	bne.n	80012f6 <LogStart+0x96>
	{

		vars_to_str(sdcard_data->path, "%02d-%02d-%02d.txt", 8,8,98);// buraya utc zaman vb eklenecek kart acılırken burası yapılıyor
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8001292:	2362      	movs	r3, #98	; 0x62
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2308      	movs	r3, #8
 8001298:	2208      	movs	r2, #8
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <LogStart+0xa4>)
 800129c:	f7ff ffcb 	bl	8001236 <vars_to_str>

		sdcard_data->result_open = f_open(&sdcard_data->myFile, sdcard_data->path, FA_WRITE | FA_OPEN_APPEND);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 60d2 	add.w	r0, r3, #1680	; 0x690
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80012ac:	2232      	movs	r2, #50	; 0x32
 80012ae:	4619      	mov	r1, r3
 80012b0:	f011 fbe2 	bl	8012a78 <f_open>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
		f_write(&sdcard_data->myFile, SDHeader, strlen(SDHeader), (void*) &sdcard_data->writtenbyte);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <LogStart+0xa8>)
 80012c6:	681d      	ldr	r5, [r3, #0]
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <LogStart+0xa8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ff7f 	bl	80001d0 <strlen>
 80012d2:	4602      	mov	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80012da:	4629      	mov	r1, r5
 80012dc:	4620      	mov	r0, r4
 80012de:	f011 fd89 	bl	8012df4 <f_write>
		sdcard_data->state = SD_Card_Detect;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc
		f_close(&sdcard_data->myFile);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80012f0:	4618      	mov	r0, r3
 80012f2:	f011 ff72 	bl	80131da <f_close>
	}
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20003154 	.word	0x20003154
 8001304:	0801a818 	.word	0x0801a818
 8001308:	20000000 	.word	0x20000000

0800130c <LogDataInit>:
void LogDataInit()
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	GyroRollFiltered.NotchFilterOut  = 1;
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <LogDataInit+0x158>)
 8001312:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001316:	615a      	str	r2, [r3, #20]
	GyroPitchFiltered.NotchFilterOut = 1;
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <LogDataInit+0x15c>)
 800131a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800131e:	615a      	str	r2, [r3, #20]
	GyroYawFiltered.NotchFilterOut   = 1;
 8001320:	4b52      	ldr	r3, [pc, #328]	; (800146c <LogDataInit+0x160>)
 8001322:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001326:	615a      	str	r2, [r3, #20]

	AccelRollFiltered.NotchFilterOut = 1;
 8001328:	4b51      	ldr	r3, [pc, #324]	; (8001470 <LogDataInit+0x164>)
 800132a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800132e:	615a      	str	r2, [r3, #20]
	AccelPitchFiltered.NotchFilterOut= 1;
 8001330:	4b50      	ldr	r3, [pc, #320]	; (8001474 <LogDataInit+0x168>)
 8001332:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001336:	615a      	str	r2, [r3, #20]
	AccelYawFiltered.NotchFilterOut  = 1;
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <LogDataInit+0x16c>)
 800133a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800133e:	615a      	str	r2, [r3, #20]

	MagRollFiltered.NotchFilterOut   = 1;
 8001340:	4b4e      	ldr	r3, [pc, #312]	; (800147c <LogDataInit+0x170>)
 8001342:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001346:	615a      	str	r2, [r3, #20]
	MagPitchFiltered.NotchFilterOut  = 1;
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <LogDataInit+0x174>)
 800134a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800134e:	615a      	str	r2, [r3, #20]
	MagYawFiltered.NotchFilterOut    = 1;
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <LogDataInit+0x178>)
 8001352:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001356:	615a      	str	r2, [r3, #20]

	magno_bearing                    = 1;
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <LogDataInit+0x17c>)
 800135a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800135e:	601a      	str	r2, [r3, #0]

	Ahrs_ROLL                        = 1;
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <LogDataInit+0x180>)
 8001362:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001366:	601a      	str	r2, [r3, #0]
	Ahrs_PITCH                       = 1;
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <LogDataInit+0x184>)
 800136a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800136e:	601a      	str	r2, [r3, #0]
	Ahrs_YAW                         = 1;
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <LogDataInit+0x188>)
 8001372:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001376:	601a      	str	r2, [r3, #0]

	RemoteRoll.Raw                   = 1;
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <LogDataInit+0x18c>)
 800137a:	2201      	movs	r2, #1
 800137c:	801a      	strh	r2, [r3, #0]
	RemotePitch.Raw                  = 1;
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <LogDataInit+0x190>)
 8001380:	2201      	movs	r2, #1
 8001382:	801a      	strh	r2, [r3, #0]
	RemoteYaw.Raw                    = 1;
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <LogDataInit+0x194>)
 8001386:	2201      	movs	r2, #1
 8001388:	801a      	strh	r2, [r3, #0]
	RemoteThrottle.Raw				 = 1;
 800138a:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <LogDataInit+0x198>)
 800138c:	2201      	movs	r2, #1
 800138e:	801a      	strh	r2, [r3, #0]

	RemoteRoll.Setpoint              = 1;
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <LogDataInit+0x18c>)
 8001392:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001396:	609a      	str	r2, [r3, #8]
	RemotePitch.Setpoint             = 1;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <LogDataInit+0x190>)
 800139a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800139e:	609a      	str	r2, [r3, #8]
	RemoteYaw.Setpoint               = 1;
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <LogDataInit+0x194>)
 80013a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013a6:	609a      	str	r2, [r3, #8]
	RemoteThrottle.Setpoint          = 1;
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <LogDataInit+0x198>)
 80013aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ae:	609a      	str	r2, [r3, #8]

	RemoteRoll.Velocity              = 1;
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <LogDataInit+0x18c>)
 80013b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013b6:	605a      	str	r2, [r3, #4]
	RemotePitch.Velocity             = 1;
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <LogDataInit+0x190>)
 80013ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013be:	605a      	str	r2, [r3, #4]
	RemoteYaw.Velocity               = 1;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <LogDataInit+0x194>)
 80013c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c6:	605a      	str	r2, [r3, #4]
	RemoteThrottle.Velocity          = 1;
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <LogDataInit+0x198>)
 80013ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ce:	605a      	str	r2, [r3, #4]

	Motor.Sag_On                     = 1;
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <LogDataInit+0x19c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	805a      	strh	r2, [r3, #2]
	Motor.Sag_Arka                   = 1;
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <LogDataInit+0x19c>)
 80013d8:	2201      	movs	r2, #1
 80013da:	80da      	strh	r2, [r3, #6]
	Motor.Sol_On                     = 1;
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <LogDataInit+0x19c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	801a      	strh	r2, [r3, #0]
	Motor.Sol_Arka                   = 1;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <LogDataInit+0x19c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	809a      	strh	r2, [r3, #4]

	RollControlSignal                = 1;
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <LogDataInit+0x1a0>)
 80013ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ee:	601a      	str	r2, [r3, #0]
	PitchControlSignal               = 1;
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <LogDataInit+0x1a4>)
 80013f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f6:	601a      	str	r2, [r3, #0]
	YawControlSignal                 = 1;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <LogDataInit+0x1a8>)
 80013fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013fe:	601a      	str	r2, [r3, #0]
	AltitudeControlSignal            = 1;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <LogDataInit+0x1ac>)
 8001402:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001406:	601a      	str	r2, [r3, #0]

	Battery.Voltage                  = 1;
 8001408:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <LogDataInit+0x1b0>)
 800140a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800140e:	61da      	str	r2, [r3, #28]

	Roll.Kp                          = 1;
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <LogDataInit+0x1b4>)
 8001412:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001416:	601a      	str	r2, [r3, #0]
	Roll.Ki                          = 1;
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <LogDataInit+0x1b4>)
 800141a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800141e:	605a      	str	r2, [r3, #4]
	Roll.Kd                          = 1;
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <LogDataInit+0x1b4>)
 8001422:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001426:	609a      	str	r2, [r3, #8]

	Yaw.Kp                           = 1;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <LogDataInit+0x1b8>)
 800142a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800142e:	601a      	str	r2, [r3, #0]
	Yaw.Ki                           = 1;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <LogDataInit+0x1b8>)
 8001432:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001436:	605a      	str	r2, [r3, #4]
	Yaw.Kd                           = 1;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <LogDataInit+0x1b8>)
 800143a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800143e:	609a      	str	r2, [r3, #8]

	Altitude.Kp                      = 1;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <LogDataInit+0x1bc>)
 8001442:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001446:	601a      	str	r2, [r3, #0]
	Altitude.Ki                      = 1;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <LogDataInit+0x1bc>)
 800144a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800144e:	605a      	str	r2, [r3, #4]
	Altitude.Kd                      = 1;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <LogDataInit+0x1bc>)
 8001452:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001456:	609a      	str	r2, [r3, #8]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200010f4 	.word	0x200010f4
 8001468:	20000c80 	.word	0x20000c80
 800146c:	2000130c 	.word	0x2000130c
 8001470:	200016e8 	.word	0x200016e8
 8001474:	20000cd4 	.word	0x20000cd4
 8001478:	200013f0 	.word	0x200013f0
 800147c:	20001150 	.word	0x20001150
 8001480:	20001390 	.word	0x20001390
 8001484:	20001168 	.word	0x20001168
 8001488:	200017b8 	.word	0x200017b8
 800148c:	20000c40 	.word	0x20000c40
 8001490:	20001220 	.word	0x20001220
 8001494:	20001498 	.word	0x20001498
 8001498:	20001228 	.word	0x20001228
 800149c:	2000174c 	.word	0x2000174c
 80014a0:	200012f4 	.word	0x200012f4
 80014a4:	20000d50 	.word	0x20000d50
 80014a8:	20001620 	.word	0x20001620
 80014ac:	2000176c 	.word	0x2000176c
 80014b0:	20000d4c 	.word	0x20000d4c
 80014b4:	20001258 	.word	0x20001258
 80014b8:	20001488 	.word	0x20001488
 80014bc:	20001444 	.word	0x20001444
 80014c0:	20001268 	.word	0x20001268
 80014c4:	20000c44 	.word	0x20000c44
 80014c8:	20001350 	.word	0x20001350

080014cc <LogAsString>:
void LogAsString( Sd_Card_Data *sd_card_data,UBX_Handle *gpsDatas)
{
 80014cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d0:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
 80014d4:	af5c      	add	r7, sp, #368	; 0x170
 80014d6:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 80014da:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158

	vars_to_str((char*) sd_card_data->transmitBuf,
 80014de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

			"%.2f\t"	//altitude
			"%.2f\t"
			"%.2f\n",

			gpsDatas->ubx_PVT.year,
 80014e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014ea:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
	vars_to_str((char*) sd_card_data->transmitBuf,
 80014ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			gpsDatas->ubx_PVT.month,
 80014f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014f6:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
	vars_to_str((char*) sd_card_data->transmitBuf,
 80014fa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			gpsDatas->ubx_PVT.day,
 80014fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001502:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001506:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			gpsDatas->ubx_PVT.hour,
 800150a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800150e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001512:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			gpsDatas->ubx_PVT.min,
 8001516:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800151a:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
	vars_to_str((char*) sd_card_data->transmitBuf,
 800151e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001522:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001526:	f8d3 1444 	ldr.w	r1, [r3, #1092]	; 0x444
 800152a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800152e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001532:	f8d3 4448 	ldr.w	r4, [r3, #1096]	; 0x448
 8001536:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800153a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800153e:	f8d3 544c 	ldr.w	r5, [r3, #1100]	; 0x44c
 8001542:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134

			gpsDatas->ubx_PVT.velN,
			gpsDatas->ubx_PVT.velE,
			gpsDatas->ubx_PVT.velD,

			gpsDatas->ubx_PVT.longitude,
 8001546:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800154a:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800154e:	681b      	ldr	r3, [r3, #0]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fff9 	bl	8000548 <__aeabi_f2d>
 8001556:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128
			gpsDatas->ubx_PVT.latitude,
 800155a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800155e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8001562:	681b      	ldr	r3, [r3, #0]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffef 	bl	8000548 <__aeabi_f2d>
 800156a:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120
 800156e:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <LogAsString+0x30c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
 800157c:	4b97      	ldr	r3, [pc, #604]	; (80017dc <LogAsString+0x310>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_f2d>
 8001586:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110

			Barometer_Altitude,
			actual_Pressure,

			GyroRollFiltered.NotchFilterOut,
 800158a:	4b95      	ldr	r3, [pc, #596]	; (80017e0 <LogAsString+0x314>)
 800158c:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffda 	bl	8000548 <__aeabi_f2d>
 8001594:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108
			GyroPitchFiltered.NotchFilterOut,
 8001598:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <LogAsString+0x318>)
 800159a:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	e9c7 0140 	strd	r0, r1, [r7, #256]	; 0x100
			GyroYawFiltered.NotchFilterOut,
 80015a6:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <LogAsString+0x31c>)
 80015a8:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffcc 	bl	8000548 <__aeabi_f2d>
 80015b0:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8

			AccelRollFiltered.NotchFilterOut,
 80015b4:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <LogAsString+0x320>)
 80015b6:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffc5 	bl	8000548 <__aeabi_f2d>
 80015be:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
			AccelPitchFiltered.NotchFilterOut,
 80015c2:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <LogAsString+0x324>)
 80015c4:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffbe 	bl	8000548 <__aeabi_f2d>
 80015cc:	e9c7 013a 	strd	r0, r1, [r7, #232]	; 0xe8
			AccelYawFiltered.NotchFilterOut,
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <LogAsString+0x328>)
 80015d2:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0

			MagRollFiltered.NotchFilterOut,
 80015de:	4b86      	ldr	r3, [pc, #536]	; (80017f8 <LogAsString+0x32c>)
 80015e0:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb0 	bl	8000548 <__aeabi_f2d>
 80015e8:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
			MagPitchFiltered.NotchFilterOut,
 80015ec:	4b83      	ldr	r3, [pc, #524]	; (80017fc <LogAsString+0x330>)
 80015ee:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa9 	bl	8000548 <__aeabi_f2d>
 80015f6:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
			MagYawFiltered.NotchFilterOut,
 80015fa:	4b81      	ldr	r3, [pc, #516]	; (8001800 <LogAsString+0x334>)
 80015fc:	695b      	ldr	r3, [r3, #20]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa2 	bl	8000548 <__aeabi_f2d>
 8001604:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 8001608:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <LogAsString+0x338>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8001616:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <LogAsString+0x33c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <LogAsString+0x340>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <LogAsString+0x344>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8

			Ahrs_ROLL,
			Ahrs_PITCH,
			Ahrs_YAW,

			RemoteRoll.Raw,
 8001640:	4b74      	ldr	r3, [pc, #464]	; (8001814 <LogAsString+0x348>)
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001646:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			RemotePitch.Raw,
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <LogAsString+0x34c>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			RemoteYaw.Raw,
 8001654:	4b71      	ldr	r3, [pc, #452]	; (800181c <LogAsString+0x350>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800165a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			RemoteThrottle.Raw,
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <LogAsString+0x354>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			RemoteRoll.Setpoint,
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <LogAsString+0x348>)
 800166a:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff6b 	bl	8000548 <__aeabi_f2d>
 8001672:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
			RemotePitch.Setpoint,
 8001676:	4b68      	ldr	r3, [pc, #416]	; (8001818 <LogAsString+0x34c>)
 8001678:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff64 	bl	8000548 <__aeabi_f2d>
 8001680:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
			RemoteYaw.Setpoint,
 8001684:	4b65      	ldr	r3, [pc, #404]	; (800181c <LogAsString+0x350>)
 8001686:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff5d 	bl	8000548 <__aeabi_f2d>
 800168e:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
			RemoteThrottle.Setpoint,
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <LogAsString+0x354>)
 8001694:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_f2d>
 800169c:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78

			RemoteRoll.Velocity,
 80016a0:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <LogAsString+0x348>)
 80016a2:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff4f 	bl	8000548 <__aeabi_f2d>
 80016aa:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
			RemotePitch.Velocity,
 80016ae:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <LogAsString+0x34c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff48 	bl	8000548 <__aeabi_f2d>
 80016b8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
			RemoteYaw.Velocity,
 80016bc:	4b57      	ldr	r3, [pc, #348]	; (800181c <LogAsString+0x350>)
 80016be:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff41 	bl	8000548 <__aeabi_f2d>
 80016c6:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
			RemoteThrottle.Velocity,
 80016ca:	4b55      	ldr	r3, [pc, #340]	; (8001820 <LogAsString+0x354>)
 80016cc:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff3a 	bl	8000548 <__aeabi_f2d>
 80016d4:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

			Motor.Sag_On,
 80016d8:	4b52      	ldr	r3, [pc, #328]	; (8001824 <LogAsString+0x358>)
 80016da:	885b      	ldrh	r3, [r3, #2]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			Motor.Sag_Arka,
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <LogAsString+0x358>)
 80016e2:	88db      	ldrh	r3, [r3, #6]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016e4:	657b      	str	r3, [r7, #84]	; 0x54
			Motor.Sol_On,
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <LogAsString+0x358>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016ea:	653b      	str	r3, [r7, #80]	; 0x50
			Motor.Sol_Arka,
 80016ec:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <LogAsString+0x358>)
 80016ee:	889b      	ldrh	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80016f0:	461e      	mov	r6, r3
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <LogAsString+0x35c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001700:	4b4a      	ldr	r3, [pc, #296]	; (800182c <LogAsString+0x360>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff1f 	bl	8000548 <__aeabi_f2d>
 800170a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <LogAsString+0x364>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff18 	bl	8000548 <__aeabi_f2d>
 8001718:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <LogAsString+0x368>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			RollControlSignal,
			PitchControlSignal,
			YawControlSignal,
			AltitudeControlSignal,

			Battery.Voltage,
 800172a:	4b43      	ldr	r3, [pc, #268]	; (8001838 <LogAsString+0x36c>)
 800172c:	69db      	ldr	r3, [r3, #28]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

			Roll.Kp,
 8001738:	4b40      	ldr	r3, [pc, #256]	; (800183c <LogAsString+0x370>)
 800173a:	681b      	ldr	r3, [r3, #0]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff03 	bl	8000548 <__aeabi_f2d>
 8001742:	e9c7 0108 	strd	r0, r1, [r7, #32]
			Roll.Ki,
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <LogAsString+0x370>)
 8001748:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	e9c7 0106 	strd	r0, r1, [r7, #24]
			Roll.Kd,
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <LogAsString+0x370>)
 8001756:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	e9c7 0104 	strd	r0, r1, [r7, #16]

			Yaw.Kp,
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <LogAsString+0x374>)
 8001764:	681b      	ldr	r3, [r3, #0]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	e9c7 0102 	strd	r0, r1, [r7, #8]
			Yaw.Ki,
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <LogAsString+0x374>)
 8001772:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	e9c7 0100 	strd	r0, r1, [r7]
			Yaw.Kd,
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <LogAsString+0x374>)
 8001780:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fee0 	bl	8000548 <__aeabi_f2d>
 8001788:	4682      	mov	sl, r0
 800178a:	468b      	mov	fp, r1

			Altitude.Kp,
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <LogAsString+0x378>)
 800178e:	681b      	ldr	r3, [r3, #0]
	vars_to_str((char*) sd_card_data->transmitBuf,
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	4680      	mov	r8, r0
 8001798:	4689      	mov	r9, r1
			Altitude.Ki,
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <LogAsString+0x378>)
 800179c:	685b      	ldr	r3, [r3, #4]
	vars_to_str((char*) sd_card_data->transmitBuf,
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed2 	bl	8000548 <__aeabi_f2d>
 80017a4:	4604      	mov	r4, r0
 80017a6:	460d      	mov	r5, r1
			Altitude.Kd
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <LogAsString+0x378>)
 80017aa:	689b      	ldr	r3, [r3, #8]
	vars_to_str((char*) sd_card_data->transmitBuf,
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9cd 235a 	strd	r2, r3, [sp, #360]	; 0x168
 80017ba:	e9cd 4558 	strd	r4, r5, [sp, #352]	; 0x160
 80017be:	e9cd 8956 	strd	r8, r9, [sp, #344]	; 0x158
 80017c2:	e9cd ab54 	strd	sl, fp, [sp, #336]	; 0x150
 80017c6:	ed97 7b00 	vldr	d7, [r7]
 80017ca:	ed8d 7b52 	vstr	d7, [sp, #328]	; 0x148
 80017ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80017d2:	ed8d 7b50 	vstr	d7, [sp, #320]	; 0x140
 80017d6:	e037      	b.n	8001848 <LogAsString+0x37c>
 80017d8:	2000169c 	.word	0x2000169c
 80017dc:	2000125c 	.word	0x2000125c
 80017e0:	200010f4 	.word	0x200010f4
 80017e4:	20000c80 	.word	0x20000c80
 80017e8:	2000130c 	.word	0x2000130c
 80017ec:	200016e8 	.word	0x200016e8
 80017f0:	20000cd4 	.word	0x20000cd4
 80017f4:	200013f0 	.word	0x200013f0
 80017f8:	20001150 	.word	0x20001150
 80017fc:	20001390 	.word	0x20001390
 8001800:	20001168 	.word	0x20001168
 8001804:	200017b8 	.word	0x200017b8
 8001808:	20000c40 	.word	0x20000c40
 800180c:	20001220 	.word	0x20001220
 8001810:	20001498 	.word	0x20001498
 8001814:	20001228 	.word	0x20001228
 8001818:	2000174c 	.word	0x2000174c
 800181c:	200012f4 	.word	0x200012f4
 8001820:	20000d50 	.word	0x20000d50
 8001824:	20001620 	.word	0x20001620
 8001828:	2000176c 	.word	0x2000176c
 800182c:	20000d4c 	.word	0x20000d4c
 8001830:	20001258 	.word	0x20001258
 8001834:	20001488 	.word	0x20001488
 8001838:	20001444 	.word	0x20001444
 800183c:	20001268 	.word	0x20001268
 8001840:	20000c44 	.word	0x20000c44
 8001844:	20001350 	.word	0x20001350
 8001848:	ed97 7b04 	vldr	d7, [r7, #16]
 800184c:	ed8d 7b4e 	vstr	d7, [sp, #312]	; 0x138
 8001850:	ed97 7b06 	vldr	d7, [r7, #24]
 8001854:	ed8d 7b4c 	vstr	d7, [sp, #304]	; 0x130
 8001858:	ed97 7b08 	vldr	d7, [r7, #32]
 800185c:	ed8d 7b4a 	vstr	d7, [sp, #296]	; 0x128
 8001860:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001864:	ed8d 7b48 	vstr	d7, [sp, #288]	; 0x120
 8001868:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800186c:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
 8001870:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001874:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 8001878:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800187c:	ed8d 7b42 	vstr	d7, [sp, #264]	; 0x108
 8001880:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001884:	ed8d 7b40 	vstr	d7, [sp, #256]	; 0x100
 8001888:	963f      	str	r6, [sp, #252]	; 0xfc
 800188a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800188c:	963e      	str	r6, [sp, #248]	; 0xf8
 800188e:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8001890:	963d      	str	r6, [sp, #244]	; 0xf4
 8001892:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8001896:	963c      	str	r6, [sp, #240]	; 0xf0
 8001898:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800189c:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 80018a0:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80018a4:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 80018a8:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80018ac:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 80018b0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80018b4:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 80018b8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80018bc:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 80018c0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80018c4:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 80018c8:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80018cc:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 80018d0:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 80018d4:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 80018d8:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 80018dc:	962b      	str	r6, [sp, #172]	; 0xac
 80018de:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 80018e2:	962a      	str	r6, [sp, #168]	; 0xa8
 80018e4:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80018e8:	9629      	str	r6, [sp, #164]	; 0xa4
 80018ea:	f8d7 6130 	ldr.w	r6, [r7, #304]	; 0x130
 80018ee:	9628      	str	r6, [sp, #160]	; 0xa0
 80018f0:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80018f4:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 80018f8:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80018fc:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8001900:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8001904:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8001908:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800190c:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8001910:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8001914:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8001918:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800191c:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8001920:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8001924:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8001928:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800192c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8001930:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8001934:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001938:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800193c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001940:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8001944:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001948:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 800194c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001950:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8001954:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001958:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800195c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001960:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8001964:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001968:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 800196c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001970:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8001974:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001978:	f8d7 5134 	ldr.w	r5, [r7, #308]	; 0x134
 800197c:	9505      	str	r5, [sp, #20]
 800197e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001982:	9404      	str	r4, [sp, #16]
 8001984:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001988:	9103      	str	r1, [sp, #12]
 800198a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800198e:	9102      	str	r1, [sp, #8]
 8001990:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001994:	9101      	str	r1, [sp, #4]
 8001996:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800199a:	9100      	str	r1, [sp, #0]
 800199c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80019a0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80019a4:	4966      	ldr	r1, [pc, #408]	; (8001b40 <LogAsString+0x674>)
 80019a6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80019aa:	f7ff fc44 	bl	8001236 <vars_to_str>
			);


	vars_to_str((char*) sd_card_data->total_log, "%d:%d:%d\t", 8, 8, 11);
 80019ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019b2:	f203 20bd 	addw	r0, r3, #701	; 0x2bd
 80019b6:	230b      	movs	r3, #11
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2308      	movs	r3, #8
 80019bc:	2208      	movs	r2, #8
 80019be:	4961      	ldr	r1, [pc, #388]	; (8001b44 <LogAsString+0x678>)
 80019c0:	f7ff fc39 	bl	8001236 <vars_to_str>
	strcat(sd_card_data->total_log, (const char*) sd_card_data->transmitBuf);
 80019c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019c8:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80019cc:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f012 fb68 	bl	80140a8 <strcat>
	sd_card_data->result_open = f_open(&sd_card_data->myFile, sd_card_data->path,
 80019d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019dc:	f503 60d2 	add.w	r0, r3, #1680	; 0x690
 80019e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019e8:	2232      	movs	r2, #50	; 0x32
 80019ea:	4619      	mov	r1, r3
 80019ec:	f011 f844 	bl	8012a78 <f_open>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019f8:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
			FA_WRITE | FA_OPEN_APPEND | FA_OPEN_ALWAYS);
	if(sd_card_data->result_open != FR_OK)
 80019fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a00:	f893 3455 	ldrb.w	r3, [r3, #1109]	; 0x455
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d02d      	beq.n	8001a64 <LogAsString+0x598>
	{
		sd_card_data->errorcounter_u32++;
 8001a08:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a0c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a16:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
		sd_card_data->result_close = f_close(&sd_card_data->myFile);
 8001a1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a1e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8001a22:	4618      	mov	r0, r3
 8001a24:	f011 fbd9 	bl	80131da <f_close>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a30:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
		if(sd_card_data->result_close == FR_OK)
 8001a34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a38:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <LogAsString+0x598>
		{
			sd_card_data->result_open = f_open(&sd_card_data->myFile, sd_card_data->path,
 8001a40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a44:	f503 60d2 	add.w	r0, r3, #1680	; 0x690
 8001a48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a50:	2232      	movs	r2, #50	; 0x32
 8001a52:	4619      	mov	r1, r3
 8001a54:	f011 f810 	bl	8012a78 <f_open>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a60:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
					FA_WRITE | FA_OPEN_APPEND | FA_OPEN_ALWAYS);
		}
	}
	sd_card_data->result_write = f_write(&sd_card_data->myFile, sd_card_data->total_log, strlen(sd_card_data->total_log), (void*) &sd_card_data->writtenbyte);
 8001a64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a68:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 8001a6c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a70:	f203 25bd 	addw	r5, r3, #701	; 0x2bd
 8001a74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a78:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fba7 	bl	80001d0 <strlen>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a88:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f011 f9b0 	bl	8012df4 <f_write>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a9c:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
	if ((sd_card_data->writtenbyte != 0) && (sd_card_data->result_write == FR_OK))
 8001aa0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001aa4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d026      	beq.n	8001afa <LogAsString+0x62e>
 8001aac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ab0:	f893 3456 	ldrb.w	r3, [r3, #1110]	; 0x456
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d120      	bne.n	8001afa <LogAsString+0x62e>
	{
		sd_card_data->result_close = f_close(&sd_card_data->myFile);
 8001ab8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001abc:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f011 fb8a 	bl	80131da <f_close>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ace:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
		if(sd_card_data->result_close != FR_OK)
 8001ad2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ad6:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02a      	beq.n	8001b34 <LogAsString+0x668>
		{
			sd_card_data->result_close = f_close(&sd_card_data->myFile);
 8001ade:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ae2:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f011 fb77 	bl	80131da <f_close>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001af4:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
		if(sd_card_data->result_close != FR_OK)
 8001af8:	e01c      	b.n	8001b34 <LogAsString+0x668>
		}
	}

	else
	{
		sd_card_data->result = f_mount(&sd_card_data->myFATAFS, (TCHAR const*) SDPath, 1);
 8001afa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001afe:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001b02:	2201      	movs	r2, #1
 8001b04:	4910      	ldr	r1, [pc, #64]	; (8001b48 <LogAsString+0x67c>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f010 ff70 	bl	80129ec <f_mount>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b14:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
		if(sd_card_data->result == FR_DISK_ERR)
 8001b18:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b1c:	f893 3454 	ldrb.w	r3, [r3, #1108]	; 0x454
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <LogAsString+0x668>
		{
			f_close(&sd_card_data->myFile);
 8001b24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b28:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f011 fb54 	bl	80131da <f_close>
		}
	}
}
 8001b32:	e7ff      	b.n	8001b34 <LogAsString+0x668>
 8001b34:	bf00      	nop
 8001b36:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b40:	0801a82c 	.word	0x0801a82c
 8001b44:	0801a928 	.word	0x0801a928
 8001b48:	20003154 	.word	0x20003154

08001b4c <AESK_NRF24_Init>:
static uint16_t nrf24_CSN_PIN;
static uint16_t nrf24_CE_PIN;
//SPI handle
static SPI_HandleTypeDef * nrf24_hspi;
void AESK_NRF24_Init(SPI_HandleTypeDef * hspi,GPIO_TypeDef * CSN_CE_Port, uint16_t CSN_Pin, uint16_t CE_Pin)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80bb      	strh	r3, [r7, #4]
	AESK_NRF24_begin(CSN_CE_Port, CSN_Pin, CE_Pin, hspi);
 8001b62:	88ba      	ldrh	r2, [r7, #4]
 8001b64:	88f9      	ldrh	r1, [r7, #6]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f000 f9cf 	bl	8001f0c <AESK_NRF24_begin>
	AESK_NRF24_startListening();
 8001b6e:	f000 faa1 	bl	80020b4 <AESK_NRF24_startListening>
	AESK_NRF24_SetPayloadSize();
 8001b72:	f000 fb65 	bl	8002240 <AESK_NRF24_SetPayloadSize>
	AESK_NRF24_openReadingPipe(aesk_nrf24_data.RxpipeAddrs);
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <AESK_NRF24_Init+0x68>)
 8001b78:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f000 fb40 	bl	8002204 <AESK_NRF24_openReadingPipe>
	AESK_NRF24_openWritingPipe(aesk_nrf24_data.TxpipeAddrs);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <AESK_NRF24_Init+0x68>)
 8001b86:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f000 fb48 	bl	8002222 <AESK_NRF24_openWritingPipe>
	AESK_NRF24_setChannel(aesk_nrf24_data.Channel);
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <AESK_NRF24_Init+0x68>)
 8001b94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fb82 	bl	80022a2 <AESK_NRF24_setChannel>
	AESK_NRF24_setAutoAck(false);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 fbd8 	bl	8002354 <AESK_NRF24_setAutoAck>
	AESK_NRF24_setPayloadSize(32);
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f000 fb91 	bl	80022cc <AESK_NRF24_setPayloadSize>

}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000d68 	.word	0x20000d68

08001bb8 <AESK_NRF24_DATA_Init>:
void AESK_NRF24_DATA_Init(uint8_t Channel, uint64_t RxpipeAddrs, void (*OnReceive)(uint8_t * pack, uint16_t len))
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	e9c7 2300 	strd	r2, r3, [r7]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	73fb      	strb	r3, [r7, #15]
	aesk_nrf24_data.ReadByte = 0;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	aesk_nrf24_data.WrittenByte = 0;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	aesk_nrf24_data.Channel = Channel;
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	aesk_nrf24_data.RxpipeAddrs = RxpipeAddrs;
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be6:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
	aesk_nrf24_data.TxpipeAddrs = 0x1122112211;
 8001bea:	490a      	ldr	r1, [pc, #40]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <AESK_NRF24_DATA_Init+0x60>)
 8001bee:	f04f 0311 	mov.w	r3, #17
 8001bf2:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
	aesk_nrf24_data.lastPackCount = 0;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	aesk_nrf24_data.onReceive = OnReceive;
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <AESK_NRF24_DATA_Init+0x5c>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000d68 	.word	0x20000d68
 8001c18:	22112211 	.word	0x22112211

08001c1c <AESK_NRF24_DelayMicroSeconds>:
//Microsecond delay function
void AESK_NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <AESK_NRF24_DelayMicroSeconds+0x3c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <AESK_NRF24_DelayMicroSeconds+0x40>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]

	while (uSecVar--);
 8001c3c:	bf00      	nop
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1fa      	bne.n	8001c3e <AESK_NRF24_DelayMicroSeconds+0x22>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000120 	.word	0x20000120
 8001c5c:	165e9f81 	.word	0x165e9f81

08001c60 <AESK_NRF24_csn>:

//1. Chip Select function
void AESK_NRF24_csn(int state)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if (state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <AESK_NRF24_csn+0x20>
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <AESK_NRF24_csn+0x38>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <AESK_NRF24_csn+0x3c>)
 8001c74:	8811      	ldrh	r1, [r2, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f008 ff23 	bl	800aac4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001c7e:	e007      	b.n	8001c90 <AESK_NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <AESK_NRF24_csn+0x38>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <AESK_NRF24_csn+0x3c>)
 8001c86:	8811      	ldrh	r1, [r2, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f008 ff1a 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000338 	.word	0x20000338
 8001c9c:	2000033c 	.word	0x2000033c

08001ca0 <AESK_NRF24_ce>:
//2. Chip Enable
void AESK_NRF24_ce(int state)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if (state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <AESK_NRF24_ce+0x20>
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <AESK_NRF24_ce+0x38>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <AESK_NRF24_ce+0x3c>)
 8001cb4:	8811      	ldrh	r1, [r2, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 ff03 	bl	800aac4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001cbe:	e007      	b.n	8001cd0 <AESK_NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <AESK_NRF24_ce+0x38>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <AESK_NRF24_ce+0x3c>)
 8001cc6:	8811      	ldrh	r1, [r2, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 fefa 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000338 	.word	0x20000338
 8001cdc:	2000033e 	.word	0x2000033e

08001ce0 <AESK_NRF24_read_register>:
//3. Read single byte from a register
uint8_t AESK_NRF24_read_register(uint8_t reg)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	AESK_NRF24_csn(0);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff ffb8 	bl	8001c60 <AESK_NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <AESK_NRF24_read_register+0x50>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	f107 010c 	add.w	r1, r7, #12
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	2201      	movs	r2, #1
 8001d06:	f00b fe22 	bl	800d94e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(nrf24_hspi, &spiBuf[1], 1, 100);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <AESK_NRF24_read_register+0x50>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	2364      	movs	r3, #100	; 0x64
 8001d16:	2201      	movs	r2, #1
 8001d18:	f00b ff55 	bl	800dbc6 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001d1c:	7b7b      	ldrb	r3, [r7, #13]
 8001d1e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff ff9d 	bl	8001c60 <AESK_NRF24_csn>
	return retData;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000340 	.word	0x20000340

08001d34 <AESK_NRF24_read_registerN>:
//4. Read multiple bytes register
void AESK_NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	4613      	mov	r3, r2
 8001d42:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff ff8b 	bl	8001c60 <AESK_NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <AESK_NRF24_read_registerN+0x50>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f107 010c 	add.w	r1, r7, #12
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f00b fdf5 	bl	800d94e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(nrf24_hspi, buf, len, 100);
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <AESK_NRF24_read_registerN+0x50>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	f00b ff29 	bl	800dbc6 <HAL_SPI_Receive>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff ff73 	bl	8001c60 <AESK_NRF24_csn>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000340 	.word	0x20000340

08001d88 <AESK_NRF24_write_register>:
//5. Write single byte register
void AESK_NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460a      	mov	r2, r1
 8001d92:	71fb      	strb	r3, [r7, #7]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff ff61 	bl	8001c60 <AESK_NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 2, 100);
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <AESK_NRF24_write_register+0x44>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	f107 010c 	add.w	r1, r7, #12
 8001db4:	2364      	movs	r3, #100	; 0x64
 8001db6:	2202      	movs	r2, #2
 8001db8:	f00b fdc9 	bl	800d94e <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff ff4f 	bl	8001c60 <AESK_NRF24_csn>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000340 	.word	0x20000340

08001dd0 <AESK_NRF24_write_registerN>:
//6. Write multipl bytes register
void AESK_NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	AESK_NRF24_csn(0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ff3d 	bl	8001c60 <AESK_NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, spiBuf, 1, 100);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <AESK_NRF24_write_registerN+0x50>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	f107 010c 	add.w	r1, r7, #12
 8001df8:	2364      	movs	r3, #100	; 0x64
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f00b fda7 	bl	800d94e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*) buf, len, 100);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <AESK_NRF24_write_registerN+0x50>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	2364      	movs	r3, #100	; 0x64
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	f00b fd9f 	bl	800d94e <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff ff25 	bl	8001c60 <AESK_NRF24_csn>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000340 	.word	0x20000340

08001e24 <AESK_NRF24_write_payload>:
//7. Write transmit payload
void AESK_NRF24_write_payload(const void *buf, uint8_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	AESK_NRF24_csn(0);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff ff15 	bl	8001c60 <AESK_NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001e36:	23a0      	movs	r3, #160	; 0xa0
 8001e38:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <AESK_NRF24_write_payload+0x44>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	f107 010f 	add.w	r1, r7, #15
 8001e42:	2364      	movs	r3, #100	; 0x64
 8001e44:	2201      	movs	r2, #1
 8001e46:	f00b fd82 	bl	800d94e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*) buf, len, 100);
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <AESK_NRF24_write_payload+0x44>)
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	f00b fd7a 	bl	800d94e <HAL_SPI_Transmit>
	//Bring CSN high
	AESK_NRF24_csn(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff ff00 	bl	8001c60 <AESK_NRF24_csn>
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000340 	.word	0x20000340

08001e6c <AESK_NRF24_read_payload>:
//8. Read receive payload
void AESK_NRF24_read_payload(void *buf, uint8_t len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, AESK_NRF24_getPayloadSize());
 8001e78:	f000 fa40 	bl	80022fc <AESK_NRF24_getPayloadSize>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d303      	bcc.n	8001e8e <AESK_NRF24_read_payload+0x22>
 8001e86:	f000 fa39 	bl	80022fc <AESK_NRF24_getPayloadSize>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	e000      	b.n	8001e90 <AESK_NRF24_read_payload+0x24>
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	AESK_NRF24_csn(0);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fee4 	bl	8001c60 <AESK_NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001e98:	2361      	movs	r3, #97	; 0x61
 8001e9a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(nrf24_hspi, &cmdRxBuf, 1, 100);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <AESK_NRF24_read_payload+0x60>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f107 010e 	add.w	r1, r7, #14
 8001ea4:	2364      	movs	r3, #100	; 0x64
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f00b fd51 	bl	800d94e <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf24_hspi, buf, data_len, 100);
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <AESK_NRF24_read_payload+0x60>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f00b fe85 	bl	800dbc6 <HAL_SPI_Receive>
	AESK_NRF24_csn(1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff fecf 	bl	8001c60 <AESK_NRF24_csn>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000340 	.word	0x20000340

08001ed0 <AESK_NRF24_flush_tx>:

//9. Flush Tx buffer
void AESK_NRF24_flush_tx(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001ed4:	21ff      	movs	r1, #255	; 0xff
 8001ed6:	20e1      	movs	r0, #225	; 0xe1
 8001ed8:	f7ff ff56 	bl	8001d88 <AESK_NRF24_write_register>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <AESK_NRF24_flush_rx>:
//10. Flush Rx buffer
void AESK_NRF24_flush_rx(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001ee4:	21ff      	movs	r1, #255	; 0xff
 8001ee6:	20e2      	movs	r0, #226	; 0xe2
 8001ee8:	f7ff ff4e 	bl	8001d88 <AESK_NRF24_write_register>
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <AESK_NRF24_get_status>:
//11. Get status register value
uint8_t AESK_NRF24_get_status(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = AESK_NRF24_read_register(REG_STATUS);
 8001ef6:	2007      	movs	r0, #7
 8001ef8:	f7ff fef2 	bl	8001ce0 <AESK_NRF24_read_register>
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <AESK_NRF24_begin>:

//12. Begin function
void AESK_NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef * nrfSPI)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	817b      	strh	r3, [r7, #10]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	813b      	strh	r3, [r7, #8]
	nrf24_hspi = nrfSPI;
 8001f1e:	4a61      	ldr	r2, [pc, #388]	; (80020a4 <AESK_NRF24_begin+0x198>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6013      	str	r3, [r2, #0]
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <AESK_NRF24_begin+0x19c>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001f2a:	4a60      	ldr	r2, [pc, #384]	; (80020ac <AESK_NRF24_begin+0x1a0>)
 8001f2c:	897b      	ldrh	r3, [r7, #10]
 8001f2e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001f30:	4a5f      	ldr	r2, [pc, #380]	; (80020b0 <AESK_NRF24_begin+0x1a4>)
 8001f32:	893b      	ldrh	r3, [r7, #8]
 8001f34:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	AESK_NRF24_csn(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7ff fe92 	bl	8001c60 <AESK_NRF24_csn>
	AESK_NRF24_ce(0);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff feaf 	bl	8001ca0 <AESK_NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001f42:	2005      	movs	r0, #5
 8001f44:	f006 fffe 	bl	8008f44 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	AESK_NRF24_write_register(0x00, 0x08);
 8001f48:	2108      	movs	r1, #8
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff ff1c 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x01, 0x3f);
 8001f50:	213f      	movs	r1, #63	; 0x3f
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff ff18 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x02, 0x03);
 8001f58:	2103      	movs	r1, #3
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7ff ff14 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x03, 0x03);
 8001f60:	2103      	movs	r1, #3
 8001f62:	2003      	movs	r0, #3
 8001f64:	f7ff ff10 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x04, 0x03);
 8001f68:	2103      	movs	r1, #3
 8001f6a:	2004      	movs	r0, #4
 8001f6c:	f7ff ff0c 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x05, 0x02);
 8001f70:	2102      	movs	r1, #2
 8001f72:	2005      	movs	r0, #5
 8001f74:	f7ff ff08 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x06, 0x0f);
 8001f78:	210f      	movs	r1, #15
 8001f7a:	2006      	movs	r0, #6
 8001f7c:	f7ff ff04 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x07, 0x0e);
 8001f80:	210e      	movs	r1, #14
 8001f82:	2007      	movs	r0, #7
 8001f84:	f7ff ff00 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x08, 0x00);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2008      	movs	r0, #8
 8001f8c:	f7ff fefc 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x09, 0x00);
 8001f90:	2100      	movs	r1, #0
 8001f92:	2009      	movs	r0, #9
 8001f94:	f7ff fef8 	bl	8001d88 <AESK_NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 8001f98:	23e7      	movs	r3, #231	; 0xe7
 8001f9a:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 8001f9c:	23e7      	movs	r3, #231	; 0xe7
 8001f9e:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 8001fa0:	23e7      	movs	r3, #231	; 0xe7
 8001fa2:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 8001fa4:	23e7      	movs	r3, #231	; 0xe7
 8001fa6:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 8001fa8:	23e7      	movs	r3, #231	; 0xe7
 8001faa:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	200a      	movs	r0, #10
 8001fb6:	f7ff ff0b 	bl	8001dd0 <AESK_NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 8001fba:	23c2      	movs	r3, #194	; 0xc2
 8001fbc:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xC2;
 8001fbe:	23c2      	movs	r3, #194	; 0xc2
 8001fc0:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xC2;
 8001fc2:	23c2      	movs	r3, #194	; 0xc2
 8001fc4:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xC2;
 8001fc6:	23c2      	movs	r3, #194	; 0xc2
 8001fc8:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xC2;
 8001fca:	23c2      	movs	r3, #194	; 0xc2
 8001fcc:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	200b      	movs	r0, #11
 8001fd8:	f7ff fefa 	bl	8001dd0 <AESK_NRF24_write_registerN>
	AESK_NRF24_write_register(0x0C, 0xC3);
 8001fdc:	21c3      	movs	r1, #195	; 0xc3
 8001fde:	200c      	movs	r0, #12
 8001fe0:	f7ff fed2 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0D, 0xC4);
 8001fe4:	21c4      	movs	r1, #196	; 0xc4
 8001fe6:	200d      	movs	r0, #13
 8001fe8:	f7ff fece 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0E, 0xC5);
 8001fec:	21c5      	movs	r1, #197	; 0xc5
 8001fee:	200e      	movs	r0, #14
 8001ff0:	f7ff feca 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x0F, 0xC6);
 8001ff4:	21c6      	movs	r1, #198	; 0xc6
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f7ff fec6 	bl	8001d88 <AESK_NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 8001ffc:	23e7      	movs	r3, #231	; 0xe7
 8001ffe:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 8002000:	23e7      	movs	r3, #231	; 0xe7
 8002002:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 8002004:	23e7      	movs	r3, #231	; 0xe7
 8002006:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 8002008:	23e7      	movs	r3, #231	; 0xe7
 800200a:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 800200c:	23e7      	movs	r3, #231	; 0xe7
 800200e:	743b      	strb	r3, [r7, #16]
	AESK_NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	2205      	movs	r2, #5
 8002016:	4619      	mov	r1, r3
 8002018:	2010      	movs	r0, #16
 800201a:	f7ff fed9 	bl	8001dd0 <AESK_NRF24_write_registerN>
	AESK_NRF24_write_register(0x11, 0);
 800201e:	2100      	movs	r1, #0
 8002020:	2011      	movs	r0, #17
 8002022:	f7ff feb1 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x12, 0);
 8002026:	2100      	movs	r1, #0
 8002028:	2012      	movs	r0, #18
 800202a:	f7ff fead 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x13, 0);
 800202e:	2100      	movs	r1, #0
 8002030:	2013      	movs	r0, #19
 8002032:	f7ff fea9 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x14, 0);
 8002036:	2100      	movs	r1, #0
 8002038:	2014      	movs	r0, #20
 800203a:	f7ff fea5 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x15, 0);
 800203e:	2100      	movs	r1, #0
 8002040:	2015      	movs	r0, #21
 8002042:	f7ff fea1 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x16, 0);
 8002046:	2100      	movs	r1, #0
 8002048:	2016      	movs	r0, #22
 800204a:	f7ff fe9d 	bl	8001d88 <AESK_NRF24_write_register>

	AESK_NRF24_ACTIVATE_cmd();
 800204e:	f000 fae5 	bl	800261c <AESK_NRF24_ACTIVATE_cmd>
	AESK_NRF24_write_register(0x1c, 0);
 8002052:	2100      	movs	r1, #0
 8002054:	201c      	movs	r0, #28
 8002056:	f7ff fe97 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_write_register(0x1d, 0);
 800205a:	2100      	movs	r1, #0
 800205c:	201d      	movs	r0, #29
 800205e:	f7ff fe93 	bl	8001d88 <AESK_NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	AESK_NRF24_setRetries(15, 15);
 8002062:	210f      	movs	r1, #15
 8002064:	200f      	movs	r0, #15
 8002066:	f000 f901 	bl	800226c <AESK_NRF24_setRetries>
	//Initialise PA level to max (0dB)
	AESK_NRF24_setPALevel(RF24_PA_0dB);
 800206a:	2003      	movs	r0, #3
 800206c:	f000 f987 	bl	800237e <AESK_NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	AESK_NRF24_setDataRate(RF24_250KBPS);
 8002070:	2002      	movs	r0, #2
 8002072:	f000 f9bb 	bl	80023ec <AESK_NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	AESK_NRF24_setCRCLength(RF24_CRC_16);
 8002076:	2002      	movs	r0, #2
 8002078:	f000 f9fe 	bl	8002478 <AESK_NRF24_setCRCLength>
	//Disable dynamic payload
	AESK_NRF24_disableDynamicPayloads();
 800207c:	f000 f952 	bl	8002324 <AESK_NRF24_disableDynamicPayloads>
	//Set payload size
	AESK_NRF24_setPayloadSize(32);
 8002080:	2020      	movs	r0, #32
 8002082:	f000 f923 	bl	80022cc <AESK_NRF24_setPayloadSize>

	//Reset status register
	AESK_NRF24_resetStatus();
 8002086:	f000 fac0 	bl	800260a <AESK_NRF24_resetStatus>
	//Initialise channel to 76
	AESK_NRF24_setChannel(76);
 800208a:	204c      	movs	r0, #76	; 0x4c
 800208c:	f000 f909 	bl	80022a2 <AESK_NRF24_setChannel>
	//Flush buffers
	AESK_NRF24_flush_tx();
 8002090:	f7ff ff1e 	bl	8001ed0 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 8002094:	f7ff ff24 	bl	8001ee0 <AESK_NRF24_flush_rx>

	AESK_NRF24_powerDown();
 8002098:	f000 fa16 	bl	80024c8 <AESK_NRF24_powerDown>

}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000340 	.word	0x20000340
 80020a8:	20000338 	.word	0x20000338
 80020ac:	2000033c 	.word	0x2000033c
 80020b0:	2000033e 	.word	0x2000033e

080020b4 <AESK_NRF24_startListening>:
//13. Listen on open pipes for reading (Must call AESK_NRF24_openReadingPipe() first)
void AESK_NRF24_startListening(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff fe11 	bl	8001ce0 <AESK_NRF24_read_register>
 80020be:	4603      	mov	r3, r0
 80020c0:	f043 0303 	orr.w	r3, r3, #3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fe5d 	bl	8001d88 <AESK_NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address) AESK_NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&pipe0_reading_address), 5);
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <AESK_NRF24_startListening+0x48>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	d004      	beq.n	80020e2 <AESK_NRF24_startListening+0x2e>
 80020d8:	2205      	movs	r2, #5
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <AESK_NRF24_startListening+0x48>)
 80020dc:	200a      	movs	r0, #10
 80020de:	f7ff fe77 	bl	8001dd0 <AESK_NRF24_write_registerN>

	//Flush buffers
	AESK_NRF24_flush_tx();
 80020e2:	f7ff fef5 	bl	8001ed0 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 80020e6:	f7ff fefb 	bl	8001ee0 <AESK_NRF24_flush_rx>
	//Set CE HIGH to start listenning
	AESK_NRF24_ce(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff fdd8 	bl	8001ca0 <AESK_NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	AESK_NRF24_DelayMicroSeconds(150);
 80020f0:	2096      	movs	r0, #150	; 0x96
 80020f2:	f7ff fd93 	bl	8001c1c <AESK_NRF24_DelayMicroSeconds>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000328 	.word	0x20000328

08002100 <AESK_NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void AESK_NRF24_stopListening(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	AESK_NRF24_ce(0);
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff fdcb 	bl	8001ca0 <AESK_NRF24_ce>
	AESK_NRF24_flush_tx();
 800210a:	f7ff fee1 	bl	8001ed0 <AESK_NRF24_flush_tx>
	AESK_NRF24_flush_rx();
 800210e:	f7ff fee7 	bl	8001ee0 <AESK_NRF24_flush_rx>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <AESK_NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool AESK_NRF24_write(const void *buf, uint8_t len)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	AESK_NRF24_resetStatus();
 8002124:	f000 fa71 	bl	800260a <AESK_NRF24_resetStatus>
	AESK_NRF24_startWrite(buf, len);
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fa0a 	bl	8002546 <AESK_NRF24_startWrite>

	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 8002132:	f006 fefb 	bl	8008f2c <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8002138:	230a      	movs	r3, #10
 800213a:	613b      	str	r3, [r7, #16]
	do {
		AESK_NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 800213c:	f107 030d 	add.w	r3, r7, #13
 8002140:	2201      	movs	r2, #1
 8002142:	4619      	mov	r1, r3
 8002144:	2008      	movs	r0, #8
 8002146:	f7ff fdf5 	bl	8001d34 <AESK_NRF24_read_registerN>
		//Get status register
		status = AESK_NRF24_get_status();
 800214a:	f7ff fed1 	bl	8001ef0 <AESK_NRF24_get_status>
 800214e:	4603      	mov	r3, r0
 8002150:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT))) && (HAL_GetTick() - sent_at < timeout));
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <AESK_NRF24_write+0x54>
 800215c:	f006 fee6 	bl	8008f2c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8e7      	bhi.n	800213c <AESK_NRF24_write+0x24>

	bool tx_ok, tx_fail;
	AESK_NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 800216c:	f107 010b 	add.w	r1, r7, #11
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <AESK_NRF24_write+0x90>)
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fa14 	bl	80025a4 <AESK_NRF24_whatHappened>
	retStatus = tx_ok;
 800217c:	7b3b      	ldrb	r3, [r7, #12]
 800217e:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available)
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <AESK_NRF24_write+0x90>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <AESK_NRF24_write+0x7c>
	{
		ack_payload_length = AESK_NRF24_getDynamicPayloadSize();
 8002188:	f000 f8c4 	bl	8002314 <AESK_NRF24_getDynamicPayloadSize>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <AESK_NRF24_write+0x94>)
 8002192:	701a      	strb	r2, [r3, #0]
	}
	//Power down
	AESK_NRF24_available();
 8002194:	f000 f80c 	bl	80021b0 <AESK_NRF24_available>
	AESK_NRF24_flush_tx();
 8002198:	f7ff fe9a 	bl	8001ed0 <AESK_NRF24_flush_tx>

	return retStatus;
 800219c:	7bbb      	ldrb	r3, [r7, #14]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000330 	.word	0x20000330
 80021ac:	20000331 	.word	0x20000331

080021b0 <AESK_NRF24_available>:
//16. Check for available data to read
bool AESK_NRF24_available(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	return AESK_NRF24_availablePipe(NULL);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 f996 	bl	80024e6 <AESK_NRF24_availablePipe>
 80021ba:	4603      	mov	r3, r0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}

080021c0 <AESK_NRF24_read>:
//17. Read received data
bool AESK_NRF24_read(void *buf, uint8_t len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
	AESK_NRF24_read_payload(buf, len);
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe4b 	bl	8001e6c <AESK_NRF24_read_payload>
	uint8_t rxStatus = AESK_NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80021d6:	2017      	movs	r0, #23
 80021d8:	f7ff fd82 	bl	8001ce0 <AESK_NRF24_read_register>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
	AESK_NRF24_flush_rx();
 80021e4:	f7ff fe7c 	bl	8001ee0 <AESK_NRF24_flush_rx>
	AESK_NRF24_getDynamicPayloadSize();
 80021e8:	f000 f894 	bl	8002314 <AESK_NRF24_getDynamicPayloadSize>
	AESK_NRF24_resetStatus();
 80021ec:	f000 fa0d 	bl	800260a <AESK_NRF24_resetStatus>
	return rxStatus;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <AESK_NRF24_openReadingPipe>:
void AESK_NRF24_openReadingPipe(uint64_t address)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	e9c7 0100 	strd	r0, r1, [r7]
	AESK_NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 800220e:	463b      	mov	r3, r7
 8002210:	2205      	movs	r2, #5
 8002212:	4619      	mov	r1, r3
 8002214:	200a      	movs	r0, #10
 8002216:	f7ff fddb 	bl	8001dd0 <AESK_NRF24_write_registerN>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <AESK_NRF24_openWritingPipe>:
void AESK_NRF24_openWritingPipe(uint64_t address)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	e9c7 0100 	strd	r0, r1, [r7]
	AESK_NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 800222c:	463b      	mov	r3, r7
 800222e:	2205      	movs	r2, #5
 8002230:	4619      	mov	r1, r3
 8002232:	2010      	movs	r0, #16
 8002234:	f7ff fdcc 	bl	8001dd0 <AESK_NRF24_write_registerN>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <AESK_NRF24_SetPayloadSize>:
void AESK_NRF24_SetPayloadSize()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	const uint8_t max_payload_size = 32;
 8002246:	2320      	movs	r3, #32
 8002248:	71fb      	strb	r3, [r7, #7]
	AESK_NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <AESK_NRF24_SetPayloadSize+0x28>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	4293      	cmp	r3, r2
 8002252:	bf28      	it	cs
 8002254:	4613      	movcs	r3, r2
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4619      	mov	r1, r3
 800225a:	2011      	movs	r0, #17
 800225c:	f7ff fd94 	bl	8001d88 <AESK_NRF24_write_register>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000332 	.word	0x20000332

0800226c <AESK_NRF24_setRetries>:
//	}
//
//}
//20 set transmit retries (rf24_Retries_e) and delay
void AESK_NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	4613      	mov	r3, r2
 800227a:	71bb      	strb	r3, [r7, #6]
	AESK_NRF24_write_register(REG_SETUP_RETR, (delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	b25a      	sxtb	r2, r3
 8002282:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b25b      	sxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	2004      	movs	r0, #4
 8002296:	f7ff fd77 	bl	8001d88 <AESK_NRF24_write_register>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <AESK_NRF24_setChannel>:

//21. Set RF channel frequency
void AESK_NRF24_setChannel(uint8_t channel)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80022ac:	237f      	movs	r3, #127	; 0x7f
 80022ae:	73fb      	strb	r3, [r7, #15]
	AESK_NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf28      	it	cs
 80022b8:	4613      	movcs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	2005      	movs	r0, #5
 80022c0:	f7ff fd62 	bl	8001d88 <AESK_NRF24_write_register>
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <AESK_NRF24_setPayloadSize>:
//22. Set payload size
void AESK_NRF24_setPayloadSize(uint8_t size)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80022d6:	2320      	movs	r3, #32
 80022d8:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4293      	cmp	r3, r2
 80022e0:	bf28      	it	cs
 80022e2:	4613      	movcs	r3, r2
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <AESK_NRF24_setPayloadSize+0x2c>)
 80022e8:	701a      	strb	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000332 	.word	0x20000332

080022fc <AESK_NRF24_getPayloadSize>:
//23. Get payload size
uint8_t AESK_NRF24_getPayloadSize(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	return payload_size;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <AESK_NRF24_getPayloadSize+0x14>)
 8002302:	781b      	ldrb	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000332 	.word	0x20000332

08002314 <AESK_NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t AESK_NRF24_getDynamicPayloadSize(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	return AESK_NRF24_read_register(CMD_R_RX_PL_WID);
 8002318:	2060      	movs	r0, #96	; 0x60
 800231a:	f7ff fce1 	bl	8001ce0 <AESK_NRF24_read_register>
 800231e:	4603      	mov	r3, r0
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}

08002324 <AESK_NRF24_disableDynamicPayloads>:
	AESK_NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void AESK_NRF24_disableDynamicPayloads(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_FEATURE, AESK_NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8002328:	201d      	movs	r0, #29
 800232a:	f7ff fcd9 	bl	8001ce0 <AESK_NRF24_read_register>
 800232e:	4603      	mov	r3, r0
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	201d      	movs	r0, #29
 800233a:	f7ff fd25 	bl	8001d88 <AESK_NRF24_write_register>
	//Disable for all pipes 
	AESK_NRF24_write_register(REG_DYNPD, 0);
 800233e:	2100      	movs	r1, #0
 8002340:	201c      	movs	r0, #28
 8002342:	f7ff fd21 	bl	8001d88 <AESK_NRF24_write_register>
	dynamic_payloads_enabled = false;
 8002346:	4b02      	ldr	r3, [pc, #8]	; (8002350 <AESK_NRF24_disableDynamicPayloads+0x2c>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000333 	.word	0x20000333

08002354 <AESK_NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void AESK_NRF24_setAutoAck(bool enable)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	if (enable) AESK_NRF24_write_register(REG_EN_AA, 0x3F);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <AESK_NRF24_setAutoAck+0x1a>
 8002364:	213f      	movs	r1, #63	; 0x3f
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff fd0e 	bl	8001d88 <AESK_NRF24_write_register>
	else 		AESK_NRF24_write_register(REG_EN_AA, 0x00);
}
 800236c:	e003      	b.n	8002376 <AESK_NRF24_setAutoAck+0x22>
	else 		AESK_NRF24_write_register(REG_EN_AA, 0x00);
 800236e:	2100      	movs	r1, #0
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff fd09 	bl	8001d88 <AESK_NRF24_write_register>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <AESK_NRF24_setPALevel>:
		AESK_NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void AESK_NRF24_setPALevel(rf24_pa_dbm_e level)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = AESK_NRF24_read_register(REG_RF_SETUP);
 8002388:	2006      	movs	r0, #6
 800238a:	f7ff fca9 	bl	8001ce0 <AESK_NRF24_read_register>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f023 0306 	bic.w	r3, r3, #6
 8002398:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) 		 setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d104      	bne.n	80023aa <AESK_NRF24_setPALevel+0x2c>
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	f043 0306 	orr.w	r3, r3, #6
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e016      	b.n	80023d8 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_m6dB)  setup |= _BV(RF_PWR_HIGH);
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d104      	bne.n	80023ba <AESK_NRF24_setPALevel+0x3c>
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e00e      	b.n	80023d8 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_m12dB) setup |= _BV(RF_PWR_LOW);
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d104      	bne.n	80023ca <AESK_NRF24_setPALevel+0x4c>
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e006      	b.n	80023d8 <AESK_NRF24_setPALevel+0x5a>
	else if (level == RF24_PA_ERROR) setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d103      	bne.n	80023d8 <AESK_NRF24_setPALevel+0x5a>
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	f043 0306 	orr.w	r3, r3, #6
 80023d6:	73fb      	strb	r3, [r7, #15]


	AESK_NRF24_write_register( REG_RF_SETUP, setup);
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	4619      	mov	r1, r3
 80023dc:	2006      	movs	r0, #6
 80023de:	f7ff fcd3 	bl	8001d88 <AESK_NRF24_write_register>
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <AESK_NRF24_setDataRate>:

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool AESK_NRF24_setDataRate(rf24_datarate_e speed)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = AESK_NRF24_read_register(REG_RF_SETUP);
 80023fa:	2006      	movs	r0, #6
 80023fc:	f7ff fc70 	bl	8001ce0 <AESK_NRF24_read_register>
 8002400:	4603      	mov	r3, r0
 8002402:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <AESK_NRF24_setDataRate+0x88>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002410:	73bb      	strb	r3, [r7, #14]
	if (speed == RF24_250KBPS)
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d107      	bne.n	8002428 <AESK_NRF24_setDataRate+0x3c>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <AESK_NRF24_setDataRate+0x88>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 800241e:	7bbb      	ldrb	r3, [r7, #14]
 8002420:	f043 0320 	orr.w	r3, r3, #32
 8002424:	73bb      	strb	r3, [r7, #14]
 8002426:	e00d      	b.n	8002444 <AESK_NRF24_setDataRate+0x58>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <AESK_NRF24_setDataRate+0x52>
		{
			wide_band = true;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <AESK_NRF24_setDataRate+0x88>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	73bb      	strb	r3, [r7, #14]
 800243c:	e002      	b.n	8002444 <AESK_NRF24_setDataRate+0x58>
		}
		else
		{
			// 1Mbs
			wide_band = false;
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <AESK_NRF24_setDataRate+0x88>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
		}
	}
	AESK_NRF24_write_register(REG_RF_SETUP, setup);
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	4619      	mov	r1, r3
 8002448:	2006      	movs	r0, #6
 800244a:	f7ff fc9d 	bl	8001d88 <AESK_NRF24_write_register>

	// Verify our result
	if (AESK_NRF24_read_register(REG_RF_SETUP) == setup) result = true;
 800244e:	2006      	movs	r0, #6
 8002450:	f7ff fc46 	bl	8001ce0 <AESK_NRF24_read_register>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	7bbb      	ldrb	r3, [r7, #14]
 800245a:	4293      	cmp	r3, r2
 800245c:	d102      	bne.n	8002464 <AESK_NRF24_setDataRate+0x78>
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e002      	b.n	800246a <AESK_NRF24_setDataRate+0x7e>
	else wide_band = false;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <AESK_NRF24_setDataRate+0x88>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
	return result;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000334 	.word	0x20000334

08002478 <AESK_NRF24_setCRCLength>:

	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void AESK_NRF24_setCRCLength(rf24_crclength_e length)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	uint8_t config = AESK_NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff fc2c 	bl	8001ce0 <AESK_NRF24_read_register>
 8002488:	4603      	mov	r3, r0
 800248a:	f023 030c 	bic.w	r3, r3, #12
 800248e:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM
	if (length == RF24_CRC_DISABLED)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00f      	beq.n	80024b6 <AESK_NRF24_setCRCLength+0x3e>
	{
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d104      	bne.n	80024a6 <AESK_NRF24_setCRCLength+0x2e>
	{
		config |= _BV(BIT_EN_CRC);
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e007      	b.n	80024b6 <AESK_NRF24_setCRCLength+0x3e>
	} else
	{
		config |= _BV(BIT_EN_CRC);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	73fb      	strb	r3, [r7, #15]
	}
	AESK_NRF24_write_register( REG_CONFIG, config);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4619      	mov	r1, r3
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fc64 	bl	8001d88 <AESK_NRF24_write_register>
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <AESK_NRF24_powerDown>:
{
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void AESK_NRF24_powerDown(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_CONFIG, AESK_NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7ff fc07 	bl	8001ce0 <AESK_NRF24_read_register>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f023 0302 	bic.w	r3, r3, #2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fc53 	bl	8001d88 <AESK_NRF24_write_register>
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <AESK_NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool AESK_NRF24_availablePipe(uint8_t *pipe_num)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	uint8_t status = AESK_NRF24_get_status();
 80024ee:	f7ff fcff 	bl	8001ef0 <AESK_NRF24_get_status>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]

	bool result = (status & _BV(BIT_RX_DR));
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	73bb      	strb	r3, [r7, #14]

	if (result)
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <AESK_NRF24_availablePipe+0x56>
	{
		// If the caller wants the pipe number, include that
		if (pipe_num) *pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <AESK_NRF24_availablePipe+0x3c>
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	701a      	strb	r2, [r3, #0]
		// Clear the status bit
		AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8002522:	2140      	movs	r1, #64	; 0x40
 8002524:	2007      	movs	r0, #7
 8002526:	f7ff fc2f 	bl	8001d88 <AESK_NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS))
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <AESK_NRF24_availablePipe+0x56>
		{
			AESK_NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8002534:	2120      	movs	r1, #32
 8002536:	2007      	movs	r0, #7
 8002538:	f7ff fc26 	bl	8001d88 <AESK_NRF24_write_register>
		}
	}
	return result;
 800253c:	7bbb      	ldrb	r3, [r7, #14]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <AESK_NRF24_startWrite>:
//40. Start write (for IRQ mode)
void AESK_NRF24_startWrite(const void *buf, uint8_t len)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	AESK_NRF24_ce(0);
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff fba4 	bl	8001ca0 <AESK_NRF24_ce>
	AESK_NRF24_write_register(REG_CONFIG, (AESK_NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP)) & ~_BV(BIT_PRIM_RX));
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff fbc1 	bl	8001ce0 <AESK_NRF24_read_register>
 800255e:	4603      	mov	r3, r0
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	2000      	movs	r0, #0
 8002570:	f7ff fc0a 	bl	8001d88 <AESK_NRF24_write_register>
	AESK_NRF24_ce(1);
 8002574:	2001      	movs	r0, #1
 8002576:	f7ff fb93 	bl	8001ca0 <AESK_NRF24_ce>
	AESK_NRF24_DelayMicroSeconds(150);
 800257a:	2096      	movs	r0, #150	; 0x96
 800257c:	f7ff fb4e 	bl	8001c1c <AESK_NRF24_DelayMicroSeconds>

	// Send the payload
	AESK_NRF24_write_payload(buf, len);
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fc4d 	bl	8001e24 <AESK_NRF24_write_payload>

	// Enable Tx for 15usec
	AESK_NRF24_ce(1);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fb88 	bl	8001ca0 <AESK_NRF24_ce>
	AESK_NRF24_DelayMicroSeconds(15);
 8002590:	200f      	movs	r0, #15
 8002592:	f7ff fb43 	bl	8001c1c <AESK_NRF24_DelayMicroSeconds>
	AESK_NRF24_ce(0);
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fb82 	bl	8001ca0 <AESK_NRF24_ce>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <AESK_NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void AESK_NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	uint8_t status = AESK_NRF24_get_status();
 80025b0:	f7ff fc9e 	bl	8001ef0 <AESK_NRF24_get_status>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
	AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
 80025be:	2170      	movs	r1, #112	; 0x70
 80025c0:	2007      	movs	r0, #7
 80025c2:	f7ff fbe1 	bl	8001d88 <AESK_NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <AESK_NRF24_resetStatus>:
	return AESK_NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void AESK_NRF24_resetStatus(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
	AESK_NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
 800260e:	2170      	movs	r1, #112	; 0x70
 8002610:	2007      	movs	r0, #7
 8002612:	f7ff fbb9 	bl	8001d88 <AESK_NRF24_write_register>
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <AESK_NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void AESK_NRF24_ACTIVATE_cmd(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	AESK_NRF24_csn(0);
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fb1c 	bl	8001c60 <AESK_NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002628:	2350      	movs	r3, #80	; 0x50
 800262a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800262c:	2373      	movs	r3, #115	; 0x73
 800262e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(nrf24_hspi, cmdRxBuf, 2, 100);
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <AESK_NRF24_ACTIVATE_cmd+0x30>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	1d39      	adds	r1, r7, #4
 8002636:	2364      	movs	r3, #100	; 0x64
 8002638:	2202      	movs	r2, #2
 800263a:	f00b f988 	bl	800d94e <HAL_SPI_Transmit>
	AESK_NRF24_csn(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fb0e 	bl	8001c60 <AESK_NRF24_csn>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000340 	.word	0x20000340

08002650 <AESK_NRF24_Set_PipeAdress>:
{
	return ack_payload_length;
}

void AESK_NRF24_Set_PipeAdress(uint64_t TxpipeAddrs)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	e9c7 0100 	strd	r0, r1, [r7]
	aesk_nrf24_data.TxpipeAddrs = TxpipeAddrs;
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <AESK_NRF24_Set_PipeAdress+0x2c>)
 800265c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002660:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
	AESK_NRF24_openWritingPipe(aesk_nrf24_data.TxpipeAddrs);
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <AESK_NRF24_Set_PipeAdress+0x2c>)
 8002666:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7ff fdd8 	bl	8002222 <AESK_NRF24_openWritingPipe>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000d68 	.word	0x20000d68

08002680 <AESK_NRF24_ReadPack>:

void AESK_NRF24_ReadPack()
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0

	if(AESK_NRF24_available())
 8002686:	f7ff fd93 	bl	80021b0 <AESK_NRF24_available>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05a      	beq.n	8002746 <AESK_NRF24_ReadPack+0xc6>
	{
		uint8_t tempBuf[32];
		int i;

		AESK_NRF24_read(tempBuf, payload_size);
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <AESK_NRF24_ReadPack+0xd0>)
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fd91 	bl	80021c0 <AESK_NRF24_read>
		for (i = 0; i < payload_size-1; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e011      	b.n	80026c8 <AESK_NRF24_ReadPack+0x48>
		{
			aesk_nrf24_data.RxBuffer[aesk_nrf24_data.ReadByte++] = tempBuf[i];
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026a6:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	b291      	uxth	r1, r2
 80026ae:	4a29      	ldr	r2, [pc, #164]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026b0:	f8a2 11fe 	strh.w	r1, [r2, #510]	; 0x1fe
 80026b4:	4619      	mov	r1, r3
 80026b6:	1d3a      	adds	r2, r7, #4
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	4413      	add	r3, r2
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026c0:	545a      	strb	r2, [r3, r1]
		for (i = 0; i < payload_size-1; i++)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3301      	adds	r3, #1
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <AESK_NRF24_ReadPack+0xd0>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dbe7      	blt.n	80026a4 <AESK_NRF24_ReadPack+0x24>
		}
		aesk_nrf24_data.packCount = tempBuf[i];
 80026d4:	1d3a      	adds	r2, r7, #4
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	4413      	add	r3, r2
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026de:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
		if((aesk_nrf24_data.packCount - aesk_nrf24_data.lastPackCount == 1))
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026e4:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026ec:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <AESK_NRF24_ReadPack+0x84>
		{
			aesk_nrf24_data.lastPackCount = aesk_nrf24_data.packCount;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026f8:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 80026fe:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8002702:	e007      	b.n	8002714 <AESK_NRF24_ReadPack+0x94>
		}
		else
		{
			aesk_nrf24_data.ReadByte = 0;
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 8002706:	2200      	movs	r2, #0
 8002708:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
			aesk_nrf24_data.lastPackCount = 0;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
		}
		if(aesk_nrf24_data.ReadByte >= aesk_nrf24_data.RxBuffer[1])
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 8002716:	f8b3 21fe 	ldrh.w	r2, [r3, #510]	; 0x1fe
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	b29b      	uxth	r3, r3
 8002720:	429a      	cmp	r2, r3
 8002722:	d310      	bcc.n	8002746 <AESK_NRF24_ReadPack+0xc6>
		{
			aesk_nrf24_data.ReadByte = 0;
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 8002726:	2200      	movs	r2, #0
 8002728:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
			aesk_nrf24_data.lastPackCount = 0;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219

			aesk_nrf24_data.onReceive(aesk_nrf24_data.RxBuffer, aesk_nrf24_data.RxBuffer[1]);
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 8002736:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800273a:	4a06      	ldr	r2, [pc, #24]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 800273c:	7852      	ldrb	r2, [r2, #1]
 800273e:	b292      	uxth	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4804      	ldr	r0, [pc, #16]	; (8002754 <AESK_NRF24_ReadPack+0xd4>)
 8002744:	4798      	blx	r3
	}
//	else
//	{
//		CDC_Transmit_FS(aesk_nrf24_data.ErrorBuffer, 2);
//	}
}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000332 	.word	0x20000332
 8002754:	20000d68 	.word	0x20000d68

08002758 <AESK_NRF24_WritePack>:
bool AESK_NRF24_WritePack(uint8_t * pack, uint16_t len, uint64_t TxpipeAddrs)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	; 0x38
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	e9c7 2300 	strd	r2, r3, [r7]
 8002764:	460b      	mov	r3, r1
 8002766:	817b      	strh	r3, [r7, #10]
	AESK_NRF24_stopListening();
 8002768:	f7ff fcca 	bl	8002100 <AESK_NRF24_stopListening>

	AESK_NRF24_Set_PipeAdress(TxpipeAddrs);
 800276c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002770:	f7ff ff6e 	bl	8002650 <AESK_NRF24_Set_PipeAdress>

	bool status;
	int i;
	aesk_nrf24_data.packCounter = 1;
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 8002776:	2201      	movs	r2, #1
 8002778:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b

	while(aesk_nrf24_data.WrittenByte < len)
 800277c:	e041      	b.n	8002802 <AESK_NRF24_WritePack+0xaa>
	{
		uint8_t tempBuf[32] = {0};
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	611a      	str	r2, [r3, #16]
 8002792:	615a      	str	r2, [r3, #20]
 8002794:	619a      	str	r2, [r3, #24]
		for (i = 0; i < payload_size-1; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
 800279a:	e014      	b.n	80027c6 <AESK_NRF24_WritePack+0x6e>
		{
			tempBuf[i] = pack[aesk_nrf24_data.WrittenByte++];
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 800279e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	b291      	uxth	r1, r2
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 80027a8:	f8a2 1200 	strh.w	r1, [r2, #512]	; 0x200
 80027ac:	461a      	mov	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	7819      	ldrb	r1, [r3, #0]
 80027b4:	f107 0210 	add.w	r2, r7, #16
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	4413      	add	r3, r2
 80027bc:	460a      	mov	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < payload_size-1; i++)
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	3301      	adds	r3, #1
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <AESK_NRF24_WritePack+0xe4>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ce:	429a      	cmp	r2, r3
 80027d0:	dbe4      	blt.n	800279c <AESK_NRF24_WritePack+0x44>
		}
		tempBuf[i] = aesk_nrf24_data.packCounter++;
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 80027d4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	b2d1      	uxtb	r1, r2
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 80027de:	f882 121b 	strb.w	r1, [r2, #539]	; 0x21b
 80027e2:	f107 0110 	add.w	r1, r7, #16
 80027e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e8:	440a      	add	r2, r1
 80027ea:	7013      	strb	r3, [r2, #0]
		status = AESK_NRF24_write(tempBuf, payload_size);
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <AESK_NRF24_WritePack+0xe4>)
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fc8e 	bl	8002118 <AESK_NRF24_write>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(aesk_nrf24_data.WrittenByte < len)
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 8002804:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8002808:	897a      	ldrh	r2, [r7, #10]
 800280a:	429a      	cmp	r2, r3
 800280c:	d8b7      	bhi.n	800277e <AESK_NRF24_WritePack+0x26>
	}

	if(status)
 800280e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <AESK_NRF24_WritePack+0xc6>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002816:	2108      	movs	r1, #8
 8002818:	4809      	ldr	r0, [pc, #36]	; (8002840 <AESK_NRF24_WritePack+0xe8>)
 800281a:	f008 f96c 	bl	800aaf6 <HAL_GPIO_TogglePin>

	aesk_nrf24_data.WrittenByte = 0;
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <AESK_NRF24_WritePack+0xe0>)
 8002820:	2200      	movs	r2, #0
 8002822:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	AESK_NRF24_startListening();
 8002826:	f7ff fc45 	bl	80020b4 <AESK_NRF24_startListening>
	return status;
 800282a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800282e:	4618      	mov	r0, r3
 8002830:	3738      	adds	r7, #56	; 0x38
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000d68 	.word	0x20000d68
 800283c:	20000332 	.word	0x20000332
 8002840:	40020800 	.word	0x40020800
 8002844:	00000000 	.word	0x00000000

08002848 <MadgwickAhrsFilter>:
float DCM12 = 0.0;
float DCM20 = 0.0;
float DCM21 = 0.0;
float DCM22 = 1.0;
void MadgwickAhrsFilter(float gx,float gy,float gz,float a_x,float a_y,float a_z)
{
 8002848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800284c:	b0a8      	sub	sp, #160	; 0xa0
 800284e:	af00      	add	r7, sp, #0
 8002850:	ed87 0a05 	vstr	s0, [r7, #20]
 8002854:	edc7 0a04 	vstr	s1, [r7, #16]
 8002858:	ed87 1a03 	vstr	s2, [r7, #12]
 800285c:	edc7 1a02 	vstr	s3, [r7, #8]
 8002860:	ed87 2a01 	vstr	s4, [r7, #4]
 8002864:	edc7 2a00 	vstr	s5, [r7]
	float qDot_omega_1, qDot_omega_2, qDot_omega_3, qDot_omega_4;
	float f_1, f_2, f_3;
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33;
	float qHatDot_1, qHatDot_2, qHatDot_3, qHatDot_4;

	float halfq0 = 0.5f * q0;
 8002868:	4bf3      	ldr	r3, [pc, #972]	; (8002c38 <MadgwickAhrsFilter+0x3f0>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float halfq1 = 0.5f * q1;
 800287a:	4bf0      	ldr	r3, [pc, #960]	; (8002c3c <MadgwickAhrsFilter+0x3f4>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002888:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float halfq2 = 0.5f * q2;
 800288c:	4bec      	ldr	r3, [pc, #944]	; (8002c40 <MadgwickAhrsFilter+0x3f8>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float halfq3 = 0.5f * q3;
 800289e:	4be9      	ldr	r3, [pc, #932]	; (8002c44 <MadgwickAhrsFilter+0x3fc>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ac:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float twoq0 = 2.0f * q0;
 80028b0:	4be1      	ldr	r3, [pc, #900]	; (8002c38 <MadgwickAhrsFilter+0x3f0>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float twoq1 = 2.0f * q1;
 80028be:	4bdf      	ldr	r3, [pc, #892]	; (8002c3c <MadgwickAhrsFilter+0x3f4>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028c8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float twoq2 = 2.0f * q2;
 80028cc:	4bdc      	ldr	r3, [pc, #880]	; (8002c40 <MadgwickAhrsFilter+0x3f8>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028d6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 80028da:	edd7 7a02 	vldr	s15, [r7, #8]
 80028de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ee:	edd7 7a00 	vldr	s15, [r7]
 80028f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	ee17 0a90 	vmov	r0, s15
 80028fe:	f7fd fe23 	bl	8000548 <__aeabi_f2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	ec43 2b10 	vmov	d0, r2, r3
 800290a:	f015 faf1 	bl	8017ef0 <sqrt>
 800290e:	ec53 2b10 	vmov	r2, r3, d0
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f967 	bl	8000be8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	a_x /= norm;
 8002920:	edd7 6a02 	vldr	s13, [r7, #8]
 8002924:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292c:	edc7 7a02 	vstr	s15, [r7, #8]
	a_y /= norm;
 8002930:	edd7 6a01 	vldr	s13, [r7, #4]
 8002934:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293c:	edc7 7a01 	vstr	s15, [r7, #4]
	a_z /= norm;
 8002940:	edd7 6a00 	vldr	s13, [r7]
 8002944:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800294c:	edc7 7a00 	vstr	s15, [r7]

	f_1 = twoq1 * q3 - twoq0 * q2 - a_x;
 8002950:	4bbc      	ldr	r3, [pc, #752]	; (8002c44 <MadgwickAhrsFilter+0x3fc>)
 8002952:	ed93 7a00 	vldr	s14, [r3]
 8002956:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800295a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295e:	4bb8      	ldr	r3, [pc, #736]	; (8002c40 <MadgwickAhrsFilter+0x3f8>)
 8002960:	edd3 6a00 	vldr	s13, [r3]
 8002964:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002970:	edd7 7a02 	vldr	s15, [r7, #8]
 8002974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002978:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	f_2 = twoq0 * q1 + twoq2 * q3 - a_y;
 800297c:	4baf      	ldr	r3, [pc, #700]	; (8002c3c <MadgwickAhrsFilter+0x3f4>)
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800298a:	4bae      	ldr	r3, [pc, #696]	; (8002c44 <MadgwickAhrsFilter+0x3fc>)
 800298c:	edd3 6a00 	vldr	s13, [r3]
 8002990:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299c:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	f_3 = 1.0f - twoq1 * q1 - twoq2 * q2 - a_z;
 80029a8:	4ba4      	ldr	r3, [pc, #656]	; (8002c3c <MadgwickAhrsFilter+0x3f4>)
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029be:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <MadgwickAhrsFilter+0x3f8>)
 80029c0:	edd3 6a00 	vldr	s13, [r3]
 80029c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029d0:	edd7 7a00 	vldr	s15, [r7]
 80029d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	J_11or24 = twoq2;
 80029dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
	J_12or23 = 2.0f * q3;
 80029e2:	4b98      	ldr	r3, [pc, #608]	; (8002c44 <MadgwickAhrsFilter+0x3fc>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ec:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	J_13or22 = twoq0;
 80029f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f4:	66bb      	str	r3, [r7, #104]	; 0x68
	J_14or21 = twoq1;
 80029f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029fa:	667b      	str	r3, [r7, #100]	; 0x64
	J_32 = 2.0f * J_14or21;
 80029fc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a04:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	J_33 = 2.0f * J_11or24;
 8002a08:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a10:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	qHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 8002a14:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002a18:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a20:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002a24:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a30:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	qHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8002a34:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002a38:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a40:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002a44:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a50:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002a54:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a60:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	qHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8002a64:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002a68:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a70:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002a74:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a80:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002a84:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a90:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	qHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8002a94:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002a98:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa0:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002aa4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	norm = sqrt(qHatDot_1 * qHatDot_1 + qHatDot_2 * qHatDot_2 + qHatDot_3 * qHatDot_3 + qHatDot_4 * qHatDot_4);
 8002ab4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002abc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ad8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae0:	ee17 0a90 	vmov	r0, s15
 8002ae4:	f7fd fd30 	bl	8000548 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	ec43 2b10 	vmov	d0, r2, r3
 8002af0:	f015 f9fe 	bl	8017ef0 <sqrt>
 8002af4:	ec53 2b10 	vmov	r2, r3, d0
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7fe f874 	bl	8000be8 <__aeabi_d2f>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	qHatDot_1 /= norm;
 8002b06:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002b0a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b12:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	qHatDot_2 /= norm;
 8002b16:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002b1a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b22:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	qHatDot_3 /= norm;
 8002b26:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002b2a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b32:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	qHatDot_4 /= norm;
 8002b36:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002b3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b42:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	qDot_omega_1 = -halfq1 * gx - halfq2 * gy - halfq3 * gz;
 8002b46:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b4a:	eeb1 7a67 	vneg.f32	s14, s15
 8002b4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b56:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b66:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b76:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	qDot_omega_2 = halfq0 * gx + halfq2 * gz - halfq3 * gy;
 8002b7a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002b7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b86:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b96:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	qDot_omega_3 = halfq0 * gy - halfq1 * gz + halfq3 * gx;
 8002baa:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb6:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8002bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bc6:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002bca:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	qDot_omega_4 = halfq0 * gz + halfq1 * gy - halfq2 * gx;
 8002bda:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002bde:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be6:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8002bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	q0 += (qDot_omega_1 - (beta1 * qHatDot_1)) * Elapsed_time_Ahrs;
 8002c0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c0c:	f7fd fc9c 	bl	8000548 <__aeabi_f2d>
 8002c10:	4680      	mov	r8, r0
 8002c12:	4689      	mov	r9, r1
 8002c14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c16:	f7fd fc97 	bl	8000548 <__aeabi_f2d>
 8002c1a:	a305      	add	r3, pc, #20	; (adr r3, 8002c30 <MadgwickAhrsFilter+0x3e8>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fcea 	bl	80005f8 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	e00e      	b.n	8002c48 <MadgwickAhrsFilter+0x400>
 8002c2a:	bf00      	nop
 8002c2c:	f3af 8000 	nop.w
 8002c30:	b3124c54 	.word	0xb3124c54
 8002c34:	3fb358e1 	.word	0x3fb358e1
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	20000344 	.word	0x20000344
 8002c40:	20000348 	.word	0x20000348
 8002c44:	2000034c 	.word	0x2000034c
 8002c48:	4640      	mov	r0, r8
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	f7fd fb1c 	bl	8000288 <__aeabi_dsub>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	a3d9      	add	r3, pc, #868	; (adr r3, 8002fc0 <MadgwickAhrsFilter+0x778>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fccb 	bl	80005f8 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4690      	mov	r8, r2
 8002c68:	4699      	mov	r9, r3
 8002c6a:	4bd7      	ldr	r3, [pc, #860]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc6a 	bl	8000548 <__aeabi_f2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4640      	mov	r0, r8
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	f7fd fb06 	bl	800028c <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fd ffae 	bl	8000be8 <__aeabi_d2f>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4ace      	ldr	r2, [pc, #824]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002c90:	6013      	str	r3, [r2, #0]
	q1 += (qDot_omega_2 - (beta1 * qHatDot_2)) * Elapsed_time_Ahrs;
 8002c92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c94:	f7fd fc58 	bl	8000548 <__aeabi_f2d>
 8002c98:	4680      	mov	r8, r0
 8002c9a:	4689      	mov	r9, r1
 8002c9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c9e:	f7fd fc53 	bl	8000548 <__aeabi_f2d>
 8002ca2:	a3c5      	add	r3, pc, #788	; (adr r3, 8002fb8 <MadgwickAhrsFilter+0x770>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fca6 	bl	80005f8 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4640      	mov	r0, r8
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	f7fd fae8 	bl	8000288 <__aeabi_dsub>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	a3bf      	add	r3, pc, #764	; (adr r3, 8002fc0 <MadgwickAhrsFilter+0x778>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fc97 	bl	80005f8 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4690      	mov	r8, r2
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	4bbe      	ldr	r3, [pc, #760]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc36 	bl	8000548 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	f7fd fad2 	bl	800028c <__adddf3>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd ff7a 	bl	8000be8 <__aeabi_d2f>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4ab5      	ldr	r2, [pc, #724]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002cf8:	6013      	str	r3, [r2, #0]
	q2 += (qDot_omega_3 - (beta1 * qHatDot_3)) * Elapsed_time_Ahrs;
 8002cfa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cfc:	f7fd fc24 	bl	8000548 <__aeabi_f2d>
 8002d00:	4680      	mov	r8, r0
 8002d02:	4689      	mov	r9, r1
 8002d04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d06:	f7fd fc1f 	bl	8000548 <__aeabi_f2d>
 8002d0a:	a3ab      	add	r3, pc, #684	; (adr r3, 8002fb8 <MadgwickAhrsFilter+0x770>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f7fd fc72 	bl	80005f8 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4640      	mov	r0, r8
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	f7fd fab4 	bl	8000288 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	a3a5      	add	r3, pc, #660	; (adr r3, 8002fc0 <MadgwickAhrsFilter+0x778>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fc63 	bl	80005f8 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4ba5      	ldr	r3, [pc, #660]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fc02 	bl	8000548 <__aeabi_f2d>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4640      	mov	r0, r8
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	f7fd fa9e 	bl	800028c <__adddf3>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7fd ff46 	bl	8000be8 <__aeabi_d2f>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4a9c      	ldr	r2, [pc, #624]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002d60:	6013      	str	r3, [r2, #0]
	q3 += (qDot_omega_4 - (beta1 * qHatDot_4)) * Elapsed_time_Ahrs;
 8002d62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d64:	f7fd fbf0 	bl	8000548 <__aeabi_f2d>
 8002d68:	4680      	mov	r8, r0
 8002d6a:	4689      	mov	r9, r1
 8002d6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d6e:	f7fd fbeb 	bl	8000548 <__aeabi_f2d>
 8002d72:	a391      	add	r3, pc, #580	; (adr r3, 8002fb8 <MadgwickAhrsFilter+0x770>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fc3e 	bl	80005f8 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4640      	mov	r0, r8
 8002d82:	4649      	mov	r1, r9
 8002d84:	f7fd fa80 	bl	8000288 <__aeabi_dsub>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	a38b      	add	r3, pc, #556	; (adr r3, 8002fc0 <MadgwickAhrsFilter+0x778>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fc2f 	bl	80005f8 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4699      	mov	r9, r3
 8002da2:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbce 	bl	8000548 <__aeabi_f2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4640      	mov	r0, r8
 8002db2:	4649      	mov	r1, r9
 8002db4:	f7fd fa6a 	bl	800028c <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f7fd ff12 	bl	8000be8 <__aeabi_d2f>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002dc8:	6013      	str	r3, [r2, #0]

	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002dcc:	ed93 7a00 	vldr	s14, [r3]
 8002dd0:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dda:	4b7c      	ldr	r3, [pc, #496]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002ddc:	edd3 6a00 	vldr	s13, [r3]
 8002de0:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dee:	4b78      	ldr	r3, [pc, #480]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002df0:	edd3 6a00 	vldr	s13, [r3]
 8002df4:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e02:	4b74      	ldr	r3, [pc, #464]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002e04:	edd3 6a00 	vldr	s13, [r3]
 8002e08:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	ee17 0a90 	vmov	r0, s15
 8002e1a:	f7fd fb95 	bl	8000548 <__aeabi_f2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	ec43 2b10 	vmov	d0, r2, r3
 8002e26:	f015 f863 	bl	8017ef0 <sqrt>
 8002e2a:	ec53 2b10 	vmov	r2, r3, d0
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd fed9 	bl	8000be8 <__aeabi_d2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	q0 /= norm;
 8002e3c:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002e3e:	edd3 6a00 	vldr	s13, [r3]
 8002e42:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
	q1 /= norm;
 8002e50:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002e52:	edd3 6a00 	vldr	s13, [r3]
 8002e56:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002e60:	edc3 7a00 	vstr	s15, [r3]
	q2 /= norm;
 8002e64:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002e66:	edd3 6a00 	vldr	s13, [r3]
 8002e6a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e72:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
	q3 /= norm;
 8002e78:	4b56      	ldr	r3, [pc, #344]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002e7a:	edd3 6a00 	vldr	s13, [r3]
 8002e7e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e86:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]
	float q0q1 = q0*q1;
 8002e8c:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	4b4e      	ldr	r3, [pc, #312]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float q0q2 = q0*q2;
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002ea2:	ed93 7a00 	vldr	s14, [r3]
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float q0q3 = q0*q3;
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <MadgwickAhrsFilter+0x780>)
 8002eb6:	ed93 7a00 	vldr	s14, [r3]
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q1q1 = q1*q1;
 8002ec8:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002eca:	ed93 7a00 	vldr	s14, [r3]
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float q1q2 = q1*q2;
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002ede:	ed93 7a00 	vldr	s14, [r3]
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float q1q3 = q1*q3;
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <MadgwickAhrsFilter+0x784>)
 8002ef2:	ed93 7a00 	vldr	s14, [r3]
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float q2q2 = q2*q2;
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002f06:	ed93 7a00 	vldr	s14, [r3]
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f14:	edc7 7a08 	vstr	s15, [r7, #32]
	float q2q3 = q2*q3;
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <MadgwickAhrsFilter+0x788>)
 8002f1a:	ed93 7a00 	vldr	s14, [r3]
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f28:	edc7 7a07 	vstr	s15, [r7, #28]
	float q3q3 = q3*q3;
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002f2e:	ed93 7a00 	vldr	s14, [r3]
 8002f32:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <MadgwickAhrsFilter+0x78c>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	edc7 7a06 	vstr	s15, [r7, #24]

	DCM00 = 2*(0.5 - q2q2 - q3q3);
 8002f40:	6a38      	ldr	r0, [r7, #32]
 8002f42:	f7fd fb01 	bl	8000548 <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	f04f 0000 	mov.w	r0, #0
 8002f4e:	4922      	ldr	r1, [pc, #136]	; (8002fd8 <MadgwickAhrsFilter+0x790>)
 8002f50:	f7fd f99a 	bl	8000288 <__aeabi_dsub>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4690      	mov	r8, r2
 8002f5a:	4699      	mov	r9, r3
 8002f5c:	69b8      	ldr	r0, [r7, #24]
 8002f5e:	f7fd faf3 	bl	8000548 <__aeabi_f2d>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4640      	mov	r0, r8
 8002f68:	4649      	mov	r1, r9
 8002f6a:	f7fd f98d 	bl	8000288 <__aeabi_dsub>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	f7fd f987 	bl	800028c <__adddf3>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fd fe2f 	bl	8000be8 <__aeabi_d2f>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <MadgwickAhrsFilter+0x794>)
 8002f8e:	6013      	str	r3, [r2, #0]
	DCM01 = 2*(q1q2 - q0q3);
 8002f90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f94:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <MadgwickAhrsFilter+0x798>)
 8002fa2:	edc3 7a00 	vstr	s15, [r3]
	DCM02 = 2*(q1q3 + q0q2);
 8002fa6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002faa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb2:	e017      	b.n	8002fe4 <MadgwickAhrsFilter+0x79c>
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	b3124c54 	.word	0xb3124c54
 8002fbc:	3fb358e1 	.word	0x3fb358e1
 8002fc0:	47ae147b 	.word	0x47ae147b
 8002fc4:	3f747ae1 	.word	0x3f747ae1
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	20000344 	.word	0x20000344
 8002fd0:	20000348 	.word	0x20000348
 8002fd4:	2000034c 	.word	0x2000034c
 8002fd8:	3fe00000 	.word	0x3fe00000
 8002fdc:	20000008 	.word	0x20000008
 8002fe0:	20000350 	.word	0x20000350
 8002fe4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fe8:	4bb9      	ldr	r3, [pc, #740]	; (80032d0 <MadgwickAhrsFilter+0xa88>)
 8002fea:	edc3 7a00 	vstr	s15, [r3]
	DCM10 = 2*(q1q2 + q0q3);
 8002fee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002ff2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ffe:	4bb5      	ldr	r3, [pc, #724]	; (80032d4 <MadgwickAhrsFilter+0xa8c>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
	DCM11 = 2*(0.5 - q1q1 - q3q3);
 8003004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003006:	f7fd fa9f 	bl	8000548 <__aeabi_f2d>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	49b1      	ldr	r1, [pc, #708]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 8003014:	f7fd f938 	bl	8000288 <__aeabi_dsub>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4690      	mov	r8, r2
 800301e:	4699      	mov	r9, r3
 8003020:	69b8      	ldr	r0, [r7, #24]
 8003022:	f7fd fa91 	bl	8000548 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4640      	mov	r0, r8
 800302c:	4649      	mov	r1, r9
 800302e:	f7fd f92b 	bl	8000288 <__aeabi_dsub>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	f7fd f925 	bl	800028c <__adddf3>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fdcd 	bl	8000be8 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	4aa2      	ldr	r2, [pc, #648]	; (80032dc <MadgwickAhrsFilter+0xa94>)
 8003052:	6013      	str	r3, [r2, #0]
	DCM12 = 2*(q2q3 - q0q1);
 8003054:	ed97 7a07 	vldr	s14, [r7, #28]
 8003058:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800305c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003064:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <MadgwickAhrsFilter+0xa98>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
	DCM20 = 2*(q1q3 - q0q2);
 800306a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800306e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003076:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800307a:	4b9a      	ldr	r3, [pc, #616]	; (80032e4 <MadgwickAhrsFilter+0xa9c>)
 800307c:	edc3 7a00 	vstr	s15, [r3]
	DCM21 = 2*(q2q3 + q0q1);
 8003080:	ed97 7a07 	vldr	s14, [r7, #28]
 8003084:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003090:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <MadgwickAhrsFilter+0xaa0>)
 8003092:	edc3 7a00 	vstr	s15, [r3]
	DCM22 = 2*(0.5 - q1q1 - q2q2);
 8003096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003098:	f7fd fa56 	bl	8000548 <__aeabi_f2d>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	498c      	ldr	r1, [pc, #560]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 80030a6:	f7fd f8ef 	bl	8000288 <__aeabi_dsub>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4690      	mov	r8, r2
 80030b0:	4699      	mov	r9, r3
 80030b2:	6a38      	ldr	r0, [r7, #32]
 80030b4:	f7fd fa48 	bl	8000548 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4640      	mov	r0, r8
 80030be:	4649      	mov	r1, r9
 80030c0:	f7fd f8e2 	bl	8000288 <__aeabi_dsub>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	f7fd f8dc 	bl	800028c <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f7fd fd84 	bl	8000be8 <__aeabi_d2f>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4a82      	ldr	r2, [pc, #520]	; (80032ec <MadgwickAhrsFilter+0xaa4>)
 80030e4:	6013      	str	r3, [r2, #0]

	ahrs_y=atan2(DCM10, DCM00)*RAD_TO_DEG;
 80030e6:	4b7b      	ldr	r3, [pc, #492]	; (80032d4 <MadgwickAhrsFilter+0xa8c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa2c 	bl	8000548 <__aeabi_f2d>
 80030f0:	4680      	mov	r8, r0
 80030f2:	4689      	mov	r9, r1
 80030f4:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <MadgwickAhrsFilter+0xaa8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fa25 	bl	8000548 <__aeabi_f2d>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	ec43 2b11 	vmov	d1, r2, r3
 8003106:	ec49 8b10 	vmov	d0, r8, r9
 800310a:	f014 fe41 	bl	8017d90 <atan2>
 800310e:	ec51 0b10 	vmov	r0, r1, d0
 8003112:	a36d      	add	r3, pc, #436	; (adr r3, 80032c8 <MadgwickAhrsFilter+0xa80>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd fa6e 	bl	80005f8 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f7fd fd60 	bl	8000be8 <__aeabi_d2f>
 8003128:	4603      	mov	r3, r0
 800312a:	4a72      	ldr	r2, [pc, #456]	; (80032f4 <MadgwickAhrsFilter+0xaac>)
 800312c:	6013      	str	r3, [r2, #0]
	ahrs_p=-asin(DCM20)*RAD_TO_DEG;
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <MadgwickAhrsFilter+0xa9c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fa08 	bl	8000548 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	ec43 2b10 	vmov	d0, r2, r3
 8003140:	f014 fdec 	bl	8017d1c <asin>
 8003144:	ec53 2b10 	vmov	r2, r3, d0
 8003148:	4614      	mov	r4, r2
 800314a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800314e:	a35e      	add	r3, pc, #376	; (adr r3, 80032c8 <MadgwickAhrsFilter+0xa80>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	4620      	mov	r0, r4
 8003156:	4629      	mov	r1, r5
 8003158:	f7fd fa4e 	bl	80005f8 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fd40 	bl	8000be8 <__aeabi_d2f>
 8003168:	4603      	mov	r3, r0
 800316a:	4a63      	ldr	r2, [pc, #396]	; (80032f8 <MadgwickAhrsFilter+0xab0>)
 800316c:	6013      	str	r3, [r2, #0]
	ahrs_r=atan2(DCM21, DCM22)*RAD_TO_DEG;
 800316e:	4b5e      	ldr	r3, [pc, #376]	; (80032e8 <MadgwickAhrsFilter+0xaa0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f9e8 	bl	8000548 <__aeabi_f2d>
 8003178:	4604      	mov	r4, r0
 800317a:	460d      	mov	r5, r1
 800317c:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <MadgwickAhrsFilter+0xaa4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f9e1 	bl	8000548 <__aeabi_f2d>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	ec43 2b11 	vmov	d1, r2, r3
 800318e:	ec45 4b10 	vmov	d0, r4, r5
 8003192:	f014 fdfd 	bl	8017d90 <atan2>
 8003196:	ec51 0b10 	vmov	r0, r1, d0
 800319a:	a34b      	add	r3, pc, #300	; (adr r3, 80032c8 <MadgwickAhrsFilter+0xa80>)
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fd fa2a 	bl	80005f8 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7fd fd1c 	bl	8000be8 <__aeabi_d2f>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a52      	ldr	r2, [pc, #328]	; (80032fc <MadgwickAhrsFilter+0xab4>)
 80031b4:	6013      	str	r3, [r2, #0]

	Ahrs_YAW     = 0.5*ahrs_y  + 0.5*last_ahrs_y;
 80031b6:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <MadgwickAhrsFilter+0xaac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9c4 	bl	8000548 <__aeabi_f2d>
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 80031c6:	f7fd fa17 	bl	80005f8 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <MadgwickAhrsFilter+0xab8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9b6 	bl	8000548 <__aeabi_f2d>
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 80031e2:	f7fd fa09 	bl	80005f8 <__aeabi_dmul>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	f7fd f84d 	bl	800028c <__adddf3>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	f7fd fcf5 	bl	8000be8 <__aeabi_d2f>
 80031fe:	4603      	mov	r3, r0
 8003200:	4a40      	ldr	r2, [pc, #256]	; (8003304 <MadgwickAhrsFilter+0xabc>)
 8003202:	6013      	str	r3, [r2, #0]
	Ahrs_PITCH   = 0.5*ahrs_p  + 0.5*last_ahrs_p;
 8003204:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <MadgwickAhrsFilter+0xab0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f99d 	bl	8000548 <__aeabi_f2d>
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 8003214:	f7fd f9f0 	bl	80005f8 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4614      	mov	r4, r2
 800321e:	461d      	mov	r5, r3
 8003220:	4b39      	ldr	r3, [pc, #228]	; (8003308 <MadgwickAhrsFilter+0xac0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98f 	bl	8000548 <__aeabi_f2d>
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 8003230:	f7fd f9e2 	bl	80005f8 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4620      	mov	r0, r4
 800323a:	4629      	mov	r1, r5
 800323c:	f7fd f826 	bl	800028c <__adddf3>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	f7fd fcce 	bl	8000be8 <__aeabi_d2f>
 800324c:	4603      	mov	r3, r0
 800324e:	4a2f      	ldr	r2, [pc, #188]	; (800330c <MadgwickAhrsFilter+0xac4>)
 8003250:	6013      	str	r3, [r2, #0]
	Ahrs_ROLL    = 0.5*ahrs_r  + 0.5*last_ahrs_r;
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <MadgwickAhrsFilter+0xab4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd f976 	bl	8000548 <__aeabi_f2d>
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 8003262:	f7fd f9c9 	bl	80005f8 <__aeabi_dmul>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4614      	mov	r4, r2
 800326c:	461d      	mov	r5, r3
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <MadgwickAhrsFilter+0xac8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f968 	bl	8000548 <__aeabi_f2d>
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <MadgwickAhrsFilter+0xa90>)
 800327e:	f7fd f9bb 	bl	80005f8 <__aeabi_dmul>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4620      	mov	r0, r4
 8003288:	4629      	mov	r1, r5
 800328a:	f7fc ffff 	bl	800028c <__adddf3>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7fd fca7 	bl	8000be8 <__aeabi_d2f>
 800329a:	4603      	mov	r3, r0
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <MadgwickAhrsFilter+0xacc>)
 800329e:	6013      	str	r3, [r2, #0]

	last_ahrs_y  =  Ahrs_YAW;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <MadgwickAhrsFilter+0xabc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a16      	ldr	r2, [pc, #88]	; (8003300 <MadgwickAhrsFilter+0xab8>)
 80032a6:	6013      	str	r3, [r2, #0]
	last_ahrs_p  =  Ahrs_PITCH;
 80032a8:	4b18      	ldr	r3, [pc, #96]	; (800330c <MadgwickAhrsFilter+0xac4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <MadgwickAhrsFilter+0xac0>)
 80032ae:	6013      	str	r3, [r2, #0]
	last_ahrs_r  =  Ahrs_ROLL;
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <MadgwickAhrsFilter+0xacc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <MadgwickAhrsFilter+0xac8>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	37a0      	adds	r7, #160	; 0xa0
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032c2:	bf00      	nop
 80032c4:	f3af 8000 	nop.w
 80032c8:	1a47a9e3 	.word	0x1a47a9e3
 80032cc:	404ca5dc 	.word	0x404ca5dc
 80032d0:	20000354 	.word	0x20000354
 80032d4:	20000358 	.word	0x20000358
 80032d8:	3fe00000 	.word	0x3fe00000
 80032dc:	2000000c 	.word	0x2000000c
 80032e0:	2000035c 	.word	0x2000035c
 80032e4:	20000360 	.word	0x20000360
 80032e8:	20000364 	.word	0x20000364
 80032ec:	20000010 	.word	0x20000010
 80032f0:	20000008 	.word	0x20000008
 80032f4:	2000110c 	.word	0x2000110c
 80032f8:	200012a0 	.word	0x200012a0
 80032fc:	20001254 	.word	0x20001254
 8003300:	200014c4 	.word	0x200014c4
 8003304:	20001498 	.word	0x20001498
 8003308:	20001430 	.word	0x20001430
 800330c:	20001220 	.word	0x20001220
 8003310:	2000134c 	.word	0x2000134c
 8003314:	20000c40 	.word	0x20000c40

08003318 <dshot_init>:
uint32_t motor2_dmabuffer[18];
uint32_t motor3_dmabuffer[18];
uint32_t motor4_dmabuffer[18];

void dshot_init()
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  	HAL_TIM_PWM_Start((&htim1), TIM_CHANNEL_1);
 800331c:	2100      	movs	r1, #0
 800331e:	4808      	ldr	r0, [pc, #32]	; (8003340 <dshot_init+0x28>)
 8003320:	f00b f8ec 	bl	800e4fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start((&htim1), TIM_CHANNEL_2);
 8003324:	2104      	movs	r1, #4
 8003326:	4806      	ldr	r0, [pc, #24]	; (8003340 <dshot_init+0x28>)
 8003328:	f00b f8e8 	bl	800e4fc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start((&htim1), TIM_CHANNEL_3);
 800332c:	2108      	movs	r1, #8
 800332e:	4804      	ldr	r0, [pc, #16]	; (8003340 <dshot_init+0x28>)
 8003330:	f00b f8e4 	bl	800e4fc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start((&htim1), TIM_CHANNEL_4);
 8003334:	210c      	movs	r1, #12
 8003336:	4802      	ldr	r0, [pc, #8]	; (8003340 <dshot_init+0x28>)
 8003338:	f00b f8e0 	bl	800e4fc <HAL_TIM_PWM_Start>
//	Motor.Sol_Arka=48;
//	Motor.Sol_On  =48;
//	dshot_write_all(Motor.Sag_Arka,Motor.Sag_On,Motor.Sol_Arka,Motor.Sol_On);

		//__HAL_TIM_DISABLE_DMA((&htim1), TIM_DMA_CC1);
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20001500 	.word	0x20001500

08003344 <GetSector>:
	HAL_FLASH_Lock();
	return HAL_OK;
}

uint32_t GetSector(uint32_t Address)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a44      	ldr	r2, [pc, #272]	; (8003464 <GetSector+0x120>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d806      	bhi.n	8003366 <GetSector+0x22>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800335e:	d302      	bcc.n	8003366 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e077      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a3f      	ldr	r2, [pc, #252]	; (8003468 <GetSector+0x124>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d806      	bhi.n	800337c <GetSector+0x38>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a3e      	ldr	r2, [pc, #248]	; (800346c <GetSector+0x128>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d302      	bcc.n	800337c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8003376:	2301      	movs	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e06c      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3c      	ldr	r2, [pc, #240]	; (8003470 <GetSector+0x12c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d806      	bhi.n	8003392 <GetSector+0x4e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3b      	ldr	r2, [pc, #236]	; (8003474 <GetSector+0x130>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d302      	bcc.n	8003392 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800338c:	2302      	movs	r3, #2
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e061      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a38      	ldr	r2, [pc, #224]	; (8003478 <GetSector+0x134>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d206      	bcs.n	80033a8 <GetSector+0x64>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a37      	ldr	r2, [pc, #220]	; (800347c <GetSector+0x138>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d302      	bcc.n	80033a8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80033a2:	2303      	movs	r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e056      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a35      	ldr	r2, [pc, #212]	; (8003480 <GetSector+0x13c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d206      	bcs.n	80033be <GetSector+0x7a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a31      	ldr	r2, [pc, #196]	; (8003478 <GetSector+0x134>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d902      	bls.n	80033be <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80033b8:	2304      	movs	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e04b      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a30      	ldr	r2, [pc, #192]	; (8003484 <GetSector+0x140>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d206      	bcs.n	80033d4 <GetSector+0x90>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <GetSector+0x13c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d902      	bls.n	80033d4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80033ce:	2305      	movs	r3, #5
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e040      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <GetSector+0x144>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d206      	bcs.n	80033ea <GetSector+0xa6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a29      	ldr	r2, [pc, #164]	; (8003484 <GetSector+0x140>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d902      	bls.n	80033ea <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80033e4:	2306      	movs	r3, #6
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e035      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <GetSector+0x148>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d206      	bcs.n	8003400 <GetSector+0xbc>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a24      	ldr	r2, [pc, #144]	; (8003488 <GetSector+0x144>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d902      	bls.n	8003400 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80033fa:	2307      	movs	r3, #7
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e02a      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a23      	ldr	r2, [pc, #140]	; (8003490 <GetSector+0x14c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d206      	bcs.n	8003416 <GetSector+0xd2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a20      	ldr	r2, [pc, #128]	; (800348c <GetSector+0x148>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d902      	bls.n	8003416 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8003410:	2308      	movs	r3, #8
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e01f      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <GetSector+0x150>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d206      	bcs.n	800342c <GetSector+0xe8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <GetSector+0x14c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d902      	bls.n	800342c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8003426:	2309      	movs	r3, #9
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e014      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <GetSector+0x154>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d806      	bhi.n	8003442 <GetSector+0xfe>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <GetSector+0x150>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d902      	bls.n	8003442 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800343c:	230a      	movs	r3, #10
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e009      	b.n	8003456 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <GetSector+0x158>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d805      	bhi.n	8003456 <GetSector+0x112>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <GetSector+0x15c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8003452:	230b      	movs	r3, #11
 8003454:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	08003ffe 	.word	0x08003ffe
 8003468:	08007ffe 	.word	0x08007ffe
 800346c:	08004000 	.word	0x08004000
 8003470:	0800bffe 	.word	0x0800bffe
 8003474:	08008000 	.word	0x08008000
 8003478:	0800ffff 	.word	0x0800ffff
 800347c:	0800c000 	.word	0x0800c000
 8003480:	0801ffff 	.word	0x0801ffff
 8003484:	0803ffff 	.word	0x0803ffff
 8003488:	0805ffff 	.word	0x0805ffff
 800348c:	0807ffff 	.word	0x0807ffff
 8003490:	0809ffff 	.word	0x0809ffff
 8003494:	080bffff 	.word	0x080bffff
 8003498:	080dfffe 	.word	0x080dfffe
 800349c:	080ffffe 	.word	0x080ffffe
 80034a0:	080dffff 	.word	0x080dffff

080034a4 <Flash_Write_Data_u8>:
	  HAL_FLASH_Lock();
	  return HAL_OK;
}

uint8_t Flash_Write_Data_u8(uint32_t StartSectorAddress, uint8_t *Data, uint16_t numberofwords)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80034b6:	f006 fed9 	bl	800a26c <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff ff42 	bl	8003344 <GetSector>
 80034c0:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80034ce:	69f8      	ldr	r0, [r7, #28]
 80034d0:	f7ff ff38 	bl	8003344 <GetSector>
 80034d4:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <Flash_Write_Data_u8+0xb8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <Flash_Write_Data_u8+0xb8>)
 80034de:	2202      	movs	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <Flash_Write_Data_u8+0xb8>)
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a1a      	ldr	r2, [pc, #104]	; (800355c <Flash_Write_Data_u8+0xb8>)
 80034f2:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	4818      	ldr	r0, [pc, #96]	; (800355c <Flash_Write_Data_u8+0xb8>)
 80034fc:	f007 f824 	bl	800a548 <HAL_FLASHEx_Erase>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01e      	beq.n	8003544 <Flash_Write_Data_u8+0xa0>
	  {
		  return HAL_FLASH_GetError ();
 8003506:	f006 fee3 	bl	800a2d0 <HAL_FLASH_GetError>
 800350a:	4603      	mov	r3, r0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e020      	b.n	8003552 <Flash_Write_Data_u8+0xae>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, StartSectorAddress, Data[sofar]) == HAL_OK)
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	2000      	movs	r0, #0
 8003522:	f006 fe4f 	bl	800a1c4 <HAL_FLASH_Program>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <Flash_Write_Data_u8+0x96>
	     {
	    	 StartSectorAddress += 1;  // use StartPageAddress += 2 for half word and 8 for double word
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	e004      	b.n	8003544 <Flash_Write_Data_u8+0xa0>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800353a:	f006 fec9 	bl	800a2d0 <HAL_FLASH_GetError>
 800353e:	4603      	mov	r3, r0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e006      	b.n	8003552 <Flash_Write_Data_u8+0xae>
	   while (sofar<numberofwords)
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	429a      	cmp	r2, r3
 800354a:	dbe1      	blt.n	8003510 <Flash_Write_Data_u8+0x6c>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800354c:	f006 feb0 	bl	800a2b0 <HAL_FLASH_Lock>

	  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000368 	.word	0x20000368

08003560 <Flash_Read_Data_u8>:
		RxBuf++;
	}
}

void Flash_Read_Data_u8 (uint32_t StartSectorAddress, uint8_t *RxBuf, uint16_t numberofwords)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
	while (numberofwords--)
 800356e:	e00a      	b.n	8003586 <Flash_Read_Data_u8+0x26>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	701a      	strb	r2, [r3, #0]
		StartSectorAddress += 1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
	while (numberofwords--)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	80fa      	strh	r2, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ef      	bne.n	8003570 <Flash_Read_Data_u8+0x10>
	}
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <Butterworth>:
	A_Coefficient[1] = -2.0f * (ita * ita - 1.0) * B_Coefficient[0];
	A_Coefficient[2] = (1.0 - q*ita + ita * ita) * B_Coefficient[0];
}

float Butterworth(Notch *FilterName ,float FilterData)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	ed87 0a00 	vstr	s0, [r7]
	FilterName->NotchFilterOut = (B_LP[0])*FilterData+(B_LP[1])*FilterName->NotchFilterIn[0]+(B_LP[2])*FilterName->NotchFilterIn[1]-(A_LP[1])*FilterName->NotchFilterIn[2]-(A_LP[2])*FilterName->NotchFilterIn[3];
 80035ac:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800363c <Butterworth+0x9c>
 80035b0:	edd7 7a00 	vldr	s15, [r7]
 80035b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003640 <Butterworth+0xa0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ca:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800363c <Butterworth+0x9c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035dc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003644 <Butterworth+0xa4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ee:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003648 <Butterworth+0xa8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80035f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	edc3 7a05 	vstr	s15, [r3, #20]
	FilterName->NotchFilterIn[1] = FilterName->NotchFilterIn[0];
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	605a      	str	r2, [r3, #4]
	FilterName->NotchFilterIn[0] = FilterData;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]
	FilterName->NotchFilterIn[3] = FilterName->NotchFilterIn[2];
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
	FilterName->NotchFilterIn[2] = FilterName->NotchFilterOut;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	609a      	str	r2, [r3, #8]
	return FilterName->NotchFilterOut;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	ee07 3a90 	vmov	s15, r3
}
 800362c:	eeb0 0a67 	vmov.f32	s0, s15
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	3c5ae08b 	.word	0x3c5ae08b
 8003640:	3cdae08b 	.word	0x3cdae08b
 8003644:	bfd2dff8 	.word	0xbfd2dff8
 8003648:	3f336df9 	.word	0x3f336df9

0800364c <Uart_DMA_Receive_Start>:
uint8_t RATE_10Hz[] =  		{0XB5, 0X62, 0X06, 0X08, 0X06, 0X00, 0X64, 0X00, 0X01, 0X00, 0X01, 0X00, 0X7A, 0X12};



void Uart_DMA_Receive_Start(UART_HandleTypeDef *huart, USART_Buffer *usart_buffer)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < sizeof(USART_Buffer); i++)
 8003656:	2300      	movs	r3, #0
 8003658:	81fb      	strh	r3, [r7, #14]
 800365a:	e007      	b.n	800366c <Uart_DMA_Receive_Start+0x20>
	{
		((uint8_t*)usart_buffer)[i] = 0;
 800365c:	89fb      	ldrh	r3, [r7, #14]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4413      	add	r3, r2
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeof(USART_Buffer); i++)
 8003666:	89fb      	ldrh	r3, [r7, #14]
 8003668:	3301      	adds	r3, #1
 800366a:	81fb      	strh	r3, [r7, #14]
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	f240 4201 	movw	r2, #1025	; 0x401
 8003672:	4293      	cmp	r3, r2
 8003674:	d9f2      	bls.n	800365c <Uart_DMA_Receive_Start+0x10>
	}
	 while(HAL_UART_Receive_DMA(huart, usart_buffer->usart_receive_buffer, USART_BUFFER_SIZE) != HAL_OK);
 8003676:	bf00      	nop
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f00b fd18 	bl	800f0b6 <HAL_UART_Receive_DMA>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f5      	bne.n	8003678 <Uart_DMA_Receive_Start+0x2c>
	__HAL_UART_CLEAR_PEFLAG(huart);
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <read_DMA_Buffer>:

int16_t read_DMA_Buffer(UART_HandleTypeDef *huart, USART_Buffer *usart_buffer, uint8_t *temp_buf)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
	int16_t read_byte = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	82fb      	strh	r3, [r7, #22]
	read_byte = huart->RxXferSize - huart->hdmarx->Instance->NDTR - usart_buffer->tail;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	82fb      	strh	r3, [r7, #22]

	if(read_byte == 0)
 80036d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <read_DMA_Buffer+0x3c>
		return read_byte;
 80036e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036e4:	e033      	b.n	800374e <read_DMA_Buffer+0xa4>

	else
	{
		if(read_byte < 0)
 80036e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da05      	bge.n	80036fa <read_DMA_Buffer+0x50>
			read_byte = read_byte + huart->RxXferSize;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036f2:	8afb      	ldrh	r3, [r7, #22]
 80036f4:	4413      	add	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	82fb      	strh	r3, [r7, #22]

		for(uint16_t i = 0; i < read_byte; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	82bb      	strh	r3, [r7, #20]
 80036fe:	e01f      	b.n	8003740 <read_DMA_Buffer+0x96>
		{
			temp_buf[i] = usart_buffer->usart_receive_buffer[usart_buffer->tail];
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003706:	4619      	mov	r1, r3
 8003708:	8abb      	ldrh	r3, [r7, #20]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	5c52      	ldrb	r2, [r2, r1]
 8003712:	701a      	strb	r2, [r3, #0]
			usart_buffer->tail++;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800371a:	3301      	adds	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

			if(usart_buffer->tail >= huart->RxXferSize)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800372e:	429a      	cmp	r2, r3
 8003730:	d303      	bcc.n	800373a <read_DMA_Buffer+0x90>
				usart_buffer->tail = 0;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		for(uint16_t i = 0; i < read_byte; i++)
 800373a:	8abb      	ldrh	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	82bb      	strh	r3, [r7, #20]
 8003740:	8aba      	ldrh	r2, [r7, #20]
 8003742:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbda      	blt.n	8003700 <read_DMA_Buffer+0x56>
		}
		return read_byte;
 800374a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
	}
}
 800374e:	4618      	mov	r0, r3
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <NMEA2UBX_Config>:


void NMEA2UBX_Config(UART_HandleTypeDef *huart, USART_Buffer *USART_Buf)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, DTM_off, 11, 500);
 8003766:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800376a:	220b      	movs	r2, #11
 800376c:	4970      	ldr	r1, [pc, #448]	; (8003930 <NMEA2UBX_Config+0x1d4>)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f00b fbdf 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003774:	2032      	movs	r0, #50	; 0x32
 8003776:	f005 fbe5 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GBS_off, 11, 500);
 800377a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800377e:	220b      	movs	r2, #11
 8003780:	496c      	ldr	r1, [pc, #432]	; (8003934 <NMEA2UBX_Config+0x1d8>)
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f00b fbd5 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003788:	2032      	movs	r0, #50	; 0x32
 800378a:	f005 fbdb 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GGA_off, 11, 500);
 800378e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003792:	220b      	movs	r2, #11
 8003794:	4968      	ldr	r1, [pc, #416]	; (8003938 <NMEA2UBX_Config+0x1dc>)
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f00b fbcb 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 800379c:	2032      	movs	r0, #50	; 0x32
 800379e:	f005 fbd1 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GLL_off, 11, 500);
 80037a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037a6:	220b      	movs	r2, #11
 80037a8:	4964      	ldr	r1, [pc, #400]	; (800393c <NMEA2UBX_Config+0x1e0>)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f00b fbc1 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80037b0:	2032      	movs	r0, #50	; 0x32
 80037b2:	f005 fbc7 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GNS_off, 11, 500);
 80037b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037ba:	220b      	movs	r2, #11
 80037bc:	4960      	ldr	r1, [pc, #384]	; (8003940 <NMEA2UBX_Config+0x1e4>)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f00b fbb7 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80037c4:	2032      	movs	r0, #50	; 0x32
 80037c6:	f005 fbbd 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GRS_off, 11, 500);
 80037ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037ce:	220b      	movs	r2, #11
 80037d0:	495c      	ldr	r1, [pc, #368]	; (8003944 <NMEA2UBX_Config+0x1e8>)
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f00b fbad 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80037d8:	2032      	movs	r0, #50	; 0x32
 80037da:	f005 fbb3 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GSA_off, 11, 500);
 80037de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037e2:	220b      	movs	r2, #11
 80037e4:	4958      	ldr	r1, [pc, #352]	; (8003948 <NMEA2UBX_Config+0x1ec>)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f00b fba3 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80037ec:	2032      	movs	r0, #50	; 0x32
 80037ee:	f005 fba9 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GST_off, 11, 500);
 80037f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037f6:	220b      	movs	r2, #11
 80037f8:	4954      	ldr	r1, [pc, #336]	; (800394c <NMEA2UBX_Config+0x1f0>)
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f00b fb99 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003800:	2032      	movs	r0, #50	; 0x32
 8003802:	f005 fb9f 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, GSV_off, 11, 500);
 8003806:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800380a:	220b      	movs	r2, #11
 800380c:	4950      	ldr	r1, [pc, #320]	; (8003950 <NMEA2UBX_Config+0x1f4>)
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f00b fb8f 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003814:	2032      	movs	r0, #50	; 0x32
 8003816:	f005 fb95 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, RMC_off, 11, 500);
 800381a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800381e:	220b      	movs	r2, #11
 8003820:	494c      	ldr	r1, [pc, #304]	; (8003954 <NMEA2UBX_Config+0x1f8>)
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f00b fb85 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003828:	2032      	movs	r0, #50	; 0x32
 800382a:	f005 fb8b 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, THS_off, 11, 500);
 800382e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003832:	220b      	movs	r2, #11
 8003834:	4948      	ldr	r1, [pc, #288]	; (8003958 <NMEA2UBX_Config+0x1fc>)
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f00b fb7b 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 800383c:	2032      	movs	r0, #50	; 0x32
 800383e:	f005 fb81 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, VLW_off, 11, 500);
 8003842:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003846:	220b      	movs	r2, #11
 8003848:	4944      	ldr	r1, [pc, #272]	; (800395c <NMEA2UBX_Config+0x200>)
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f00b fb71 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003850:	2032      	movs	r0, #50	; 0x32
 8003852:	f005 fb77 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, VTG_off, 11, 500);
 8003856:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800385a:	220b      	movs	r2, #11
 800385c:	4940      	ldr	r1, [pc, #256]	; (8003960 <NMEA2UBX_Config+0x204>)
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f00b fb67 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003864:	2032      	movs	r0, #50	; 0x32
 8003866:	f005 fb6d 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, ZDA_off, 11, 500);
 800386a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800386e:	220b      	movs	r2, #11
 8003870:	493c      	ldr	r1, [pc, #240]	; (8003964 <NMEA2UBX_Config+0x208>)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f00b fb5d 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003878:	2032      	movs	r0, #50	; 0x32
 800387a:	f005 fb63 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, POSITION_off, 11, 500);
 800387e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003882:	220b      	movs	r2, #11
 8003884:	4938      	ldr	r1, [pc, #224]	; (8003968 <NMEA2UBX_Config+0x20c>)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f00b fb53 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 800388c:	2032      	movs	r0, #50	; 0x32
 800388e:	f005 fb59 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, Config_16_off, 11, 500);
 8003892:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003896:	220b      	movs	r2, #11
 8003898:	4934      	ldr	r1, [pc, #208]	; (800396c <NMEA2UBX_Config+0x210>)
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f00b fb49 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80038a0:	2032      	movs	r0, #50	; 0x32
 80038a2:	f005 fb4f 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, SVSTATUS_off, 11, 500);
 80038a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038aa:	220b      	movs	r2, #11
 80038ac:	4930      	ldr	r1, [pc, #192]	; (8003970 <NMEA2UBX_Config+0x214>)
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f00b fb3f 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80038b4:	2032      	movs	r0, #50	; 0x32
 80038b6:	f005 fb45 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, TIME_off, 11, 500);
 80038ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038be:	220b      	movs	r2, #11
 80038c0:	492c      	ldr	r1, [pc, #176]	; (8003974 <NMEA2UBX_Config+0x218>)
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f00b fb35 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80038c8:	2032      	movs	r0, #50	; 0x32
 80038ca:	f005 fb3b 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, Config_19_off, 11, 500);
 80038ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038d2:	220b      	movs	r2, #11
 80038d4:	4928      	ldr	r1, [pc, #160]	; (8003978 <NMEA2UBX_Config+0x21c>)
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f00b fb2b 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80038dc:	2032      	movs	r0, #50	; 0x32
 80038de:	f005 fb31 	bl	8008f44 <HAL_Delay>
	HAL_UART_Transmit(huart, Config_20_off, 11, 500);
 80038e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038e6:	220b      	movs	r2, #11
 80038e8:	4924      	ldr	r1, [pc, #144]	; (800397c <NMEA2UBX_Config+0x220>)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f00b fb21 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 80038f0:	2032      	movs	r0, #50	; 0x32
 80038f2:	f005 fb27 	bl	8008f44 <HAL_Delay>

	HAL_UART_Transmit(huart, PVT_on, 11, 500);
 80038f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038fa:	220b      	movs	r2, #11
 80038fc:	4920      	ldr	r1, [pc, #128]	; (8003980 <NMEA2UBX_Config+0x224>)
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f00b fb17 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003904:	2032      	movs	r0, #50	; 0x32
 8003906:	f005 fb1d 	bl	8008f44 <HAL_Delay>

	HAL_UART_Transmit(huart, RATE_10Hz, 14, 500);
 800390a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800390e:	220e      	movs	r2, #14
 8003910:	491c      	ldr	r1, [pc, #112]	; (8003984 <NMEA2UBX_Config+0x228>)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f00b fb0d 	bl	800ef32 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003918:	2032      	movs	r0, #50	; 0x32
 800391a:	f005 fb13 	bl	8008f44 <HAL_Delay>

	Uart_DMA_Receive_Start(huart, USART_Buf);
 800391e:	6839      	ldr	r1, [r7, #0]
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fe93 	bl	800364c <Uart_DMA_Receive_Start>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000014 	.word	0x20000014
 8003934:	20000020 	.word	0x20000020
 8003938:	2000002c 	.word	0x2000002c
 800393c:	20000038 	.word	0x20000038
 8003940:	20000044 	.word	0x20000044
 8003944:	20000050 	.word	0x20000050
 8003948:	2000005c 	.word	0x2000005c
 800394c:	20000068 	.word	0x20000068
 8003950:	20000074 	.word	0x20000074
 8003954:	20000080 	.word	0x20000080
 8003958:	2000008c 	.word	0x2000008c
 800395c:	20000098 	.word	0x20000098
 8003960:	200000a4 	.word	0x200000a4
 8003964:	200000b0 	.word	0x200000b0
 8003968:	200000bc 	.word	0x200000bc
 800396c:	200000c8 	.word	0x200000c8
 8003970:	200000d4 	.word	0x200000d4
 8003974:	200000e0 	.word	0x200000e0
 8003978:	200000ec 	.word	0x200000ec
 800397c:	200000f8 	.word	0x200000f8
 8003980:	20000104 	.word	0x20000104
 8003984:	20000110 	.word	0x20000110

08003988 <GPS_Data_Control>:


void GPS_Data_Control(UBX_Handle *gpsDatas, const uint8_t *datas, uint8_t read_byte)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]

	static uint8_t indeks = 0;
	for(i = 0; i < read_byte ; i++)
 8003996:	4ba5      	ldr	r3, [pc, #660]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e13a      	b.n	8003c14 <GPS_Data_Control+0x28c>
	{
		switch(gpsDatas->state)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80039a4:	2b07      	cmp	r3, #7
 80039a6:	f200 812f 	bhi.w	8003c08 <GPS_Data_Control+0x280>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <GPS_Data_Control+0x28>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039d1 	.word	0x080039d1
 80039b4:	08003a0b 	.word	0x08003a0b
 80039b8:	08003a53 	.word	0x08003a53
 80039bc:	08003a9b 	.word	0x08003a9b
 80039c0:	08003ae3 	.word	0x08003ae3
 80039c4:	08003b2b 	.word	0x08003b2b
 80039c8:	08003b83 	.word	0x08003b83
 80039cc:	08003bc3 	.word	0x08003bc3
		{
			case YAKALA_u :
			{
				if(datas[i] == 181) //0xB5
 80039d0:	4b96      	ldr	r3, [pc, #600]	; (8003c2c <GPS_Data_Control+0x2a4>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2bb5      	cmp	r3, #181	; 0xb5
 80039de:	f040 8110 	bne.w	8003c02 <GPS_Data_Control+0x27a>
				{
					gpsDatas->state =YAKALA_b;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 80039ea:	4b90      	ldr	r3, [pc, #576]	; (8003c2c <GPS_Data_Control+0x2a4>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	441a      	add	r2, r3
 80039f4:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <GPS_Data_Control+0x2a8>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	1c59      	adds	r1, r3, #1
 80039fa:	b2c8      	uxtb	r0, r1
 80039fc:	498c      	ldr	r1, [pc, #560]	; (8003c30 <GPS_Data_Control+0x2a8>)
 80039fe:	7008      	strb	r0, [r1, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	545a      	strb	r2, [r3, r1]
				}
				break;
 8003a08:	e0fb      	b.n	8003c02 <GPS_Data_Control+0x27a>
			}

			case YAKALA_b :
			{
				if(datas[i] == 98) //0x62
 8003a0a:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b62      	cmp	r3, #98	; 0x62
 8003a18:	d113      	bne.n	8003a42 <GPS_Data_Control+0xba>
				{
					gpsDatas->state =YAKALA_CLASS;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003a22:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	441a      	add	r2, r3
 8003a2c:	4b80      	ldr	r3, [pc, #512]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	b2c8      	uxtb	r0, r1
 8003a34:	497e      	ldr	r1, [pc, #504]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003a36:	7008      	strb	r0, [r1, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	545a      	strb	r2, [r3, r1]
				else
				{
					gpsDatas->state =YAKALA_u;
					indeks = 0;
				}
				break;
 8003a40:	e0e2      	b.n	8003c08 <GPS_Data_Control+0x280>
					gpsDatas->state =YAKALA_u;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					indeks = 0;
 8003a4a:	4b79      	ldr	r3, [pc, #484]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
				break;
 8003a50:	e0da      	b.n	8003c08 <GPS_Data_Control+0x280>
			}

			case YAKALA_CLASS :
			{
				if(datas[i] == 1) //0x01 -> NAV
 8003a52:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d113      	bne.n	8003a8a <GPS_Data_Control+0x102>
				{
					gpsDatas->state =YAKALA_ID;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	441a      	add	r2, r3
 8003a74:	4b6e      	ldr	r3, [pc, #440]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	1c59      	adds	r1, r3, #1
 8003a7a:	b2c8      	uxtb	r0, r1
 8003a7c:	496c      	ldr	r1, [pc, #432]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003a7e:	7008      	strb	r0, [r1, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	545a      	strb	r2, [r3, r1]
				else
				{
					gpsDatas->state =YAKALA_u;
					indeks = 0;
				}
				break;
 8003a88:	e0be      	b.n	8003c08 <GPS_Data_Control+0x280>
					gpsDatas->state =YAKALA_u;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					indeks = 0;
 8003a92:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
				break;
 8003a98:	e0b6      	b.n	8003c08 <GPS_Data_Control+0x280>
			}

			case YAKALA_ID :
			{
				if(datas[i] == 7) //0x07 -> PVT
 8003a9a:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b07      	cmp	r3, #7
 8003aa8:	d113      	bne.n	8003ad2 <GPS_Data_Control+0x14a>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003aaa:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	441a      	add	r2, r3
 8003ab4:	4b5e      	ldr	r3, [pc, #376]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	1c59      	adds	r1, r3, #1
 8003aba:	b2c8      	uxtb	r0, r1
 8003abc:	495c      	ldr	r1, [pc, #368]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003abe:	7008      	strb	r0, [r1, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	545a      	strb	r2, [r3, r1]
					gpsDatas->state =YAKALA_LENGTH_L;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2204      	movs	r2, #4
 8003acc:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
				else
				{
					gpsDatas->state =YAKALA_u;
					indeks = 0;
				}
				break;
 8003ad0:	e09a      	b.n	8003c08 <GPS_Data_Control+0x280>
					gpsDatas->state =YAKALA_u;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					indeks = 0;
 8003ada:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
				break;
 8003ae0:	e092      	b.n	8003c08 <GPS_Data_Control+0x280>
			}

			case YAKALA_LENGTH_L :
			{
				if(datas[i] == 92) // 0x5C
 8003ae2:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b5c      	cmp	r3, #92	; 0x5c
 8003af0:	d113      	bne.n	8003b1a <GPS_Data_Control+0x192>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	441a      	add	r2, r3
 8003afc:	4b4c      	ldr	r3, [pc, #304]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	b2c8      	uxtb	r0, r1
 8003b04:	494a      	ldr	r1, [pc, #296]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b06:	7008      	strb	r0, [r1, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	545a      	strb	r2, [r3, r1]
					gpsDatas->state =YAKALA_LENGTH_H;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2205      	movs	r2, #5
 8003b14:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
				else
				{
					gpsDatas->state =YAKALA_u;
					indeks = 0;
				}
				break;
 8003b18:	e076      	b.n	8003c08 <GPS_Data_Control+0x280>
					gpsDatas->state =YAKALA_u;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					indeks = 0;
 8003b22:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
				break;
 8003b28:	e06e      	b.n	8003c08 <GPS_Data_Control+0x280>
			}

			case YAKALA_LENGTH_H :
			{
				if(datas[i] == 0) // 0x00
 8003b2a:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11b      	bne.n	8003b72 <GPS_Data_Control+0x1ea>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003b3a:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	441a      	add	r2, r3
 8003b44:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	1c59      	adds	r1, r3, #1
 8003b4a:	b2c8      	uxtb	r0, r1
 8003b4c:	4938      	ldr	r1, [pc, #224]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b4e:	7008      	strb	r0, [r1, #0]
 8003b50:	4619      	mov	r1, r3
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	545a      	strb	r2, [r3, r1]
					if(gpsDatas->gpsDatasArray[2] == 1 && gpsDatas->gpsDatasArray[3] == 7)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	789b      	ldrb	r3, [r3, #2]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d152      	bne.n	8003c06 <GPS_Data_Control+0x27e>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	78db      	ldrb	r3, [r3, #3]
 8003b64:	2b07      	cmp	r3, #7
 8003b66:	d14e      	bne.n	8003c06 <GPS_Data_Control+0x27e>
					{
						gpsDatas->state =TOPLA_NAV_PVT_92;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2206      	movs	r2, #6
 8003b6c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
				else
				{
					gpsDatas->state =YAKALA_u;
					indeks = 0;
				}
				break;
 8003b70:	e049      	b.n	8003c06 <GPS_Data_Control+0x27e>
					gpsDatas->state =YAKALA_u;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
					indeks = 0;
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
				break;
 8003b80:	e041      	b.n	8003c06 <GPS_Data_Control+0x27e>
			}

			case TOPLA_NAV_PVT_92:		// NAV_PVT paketinin yapisi [ 0xB5, 0x62, 0x01, 0x07, 0x92, 0x00, Payload[92], CK_A, CK_B ] seklindendir.
			{
				if( indeks < (6 + 92 + 2) ) 							// ubx_NAV_PVT frame yapisi toplam 100 byte'dir. 6 byte bilgilendirme + 92 byte payload + 2 byte checksum
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b63      	cmp	r3, #99	; 0x63
 8003b88:	d80f      	bhi.n	8003baa <GPS_Data_Control+0x222>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003b8a:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	441a      	add	r2, r3
 8003b94:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	b2c8      	uxtb	r0, r1
 8003b9c:	4924      	ldr	r1, [pc, #144]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003b9e:	7008      	strb	r0, [r1, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	545a      	strb	r2, [r3, r1]
				{
					indeks = 0;
					GPS_Parser(gpsDatas, NAV_PVT_92);
					gpsDatas->state = YAKALA_u;
				}
				break;
 8003ba8:	e02e      	b.n	8003c08 <GPS_Data_Control+0x280>
					indeks = 0;
 8003baa:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
					GPS_Parser(gpsDatas, NAV_PVT_92);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f89e 	bl	8003cf4 <GPS_Parser>
					gpsDatas->state = YAKALA_u;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
				break;
 8003bc0:	e022      	b.n	8003c08 <GPS_Data_Control+0x280>
			}

			case TOPLA_NAV_POSLLH_28:
			{
				if( indeks < (6 + 28 + 2) )								// ubx_NAV_POSLLH frame yapisi toplam 34 byte'dir. 6 byte bilgilendirme + 28 byte payload + 2 byte checksum.
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b23      	cmp	r3, #35	; 0x23
 8003bc8:	d80f      	bhi.n	8003bea <GPS_Data_Control+0x262>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	b2c8      	uxtb	r0, r1
 8003bdc:	4914      	ldr	r1, [pc, #80]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003bde:	7008      	strb	r0, [r1, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	545a      	strb	r2, [r3, r1]
				{
					indeks = 0;
					GPS_Parser(gpsDatas, NAV_POSLLH_28);
					gpsDatas->state = YAKALA_u;
				}
				break;
 8003be8:	e00e      	b.n	8003c08 <GPS_Data_Control+0x280>
					indeks = 0;
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <GPS_Data_Control+0x2a8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
					GPS_Parser(gpsDatas, NAV_POSLLH_28);
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f87e 	bl	8003cf4 <GPS_Parser>
					gpsDatas->state = YAKALA_u;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
				break;
 8003c00:	e002      	b.n	8003c08 <GPS_Data_Control+0x280>
				break;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <GPS_Data_Control+0x280>
				break;
 8003c06:	bf00      	nop
	for(i = 0; i < read_byte ; i++)
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <GPS_Data_Control+0x2a4>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	79fa      	ldrb	r2, [r7, #7]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	f63f aebf 	bhi.w	800399e <GPS_Data_Control+0x16>

		}

	}

}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200018c0 	.word	0x200018c0
 8003c30:	20000380 	.word	0x20000380

08003c34 <checksum_calc>:


void checksum_calc(UBX_Handle *gpsDatas)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	memcpy(Buffer, (uint8_t *)gpsDatas->gpsDatasArray+2, 96);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3302      	adds	r3, #2
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <checksum_calc+0x7c>)
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	2360      	movs	r3, #96	; 0x60
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f00f fb77 	bl	801333c <memcpy>
	N = 96; 														//checksum  hesaplanacak alanın byte sayısı;
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <checksum_calc+0x80>)
 8003c50:	2260      	movs	r2, #96	; 0x60
 8003c52:	701a      	strb	r2, [r3, #0]
	Check_A = 0, Check_B = 0;
 8003c54:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <checksum_calc+0x84>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <checksum_calc+0x88>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
	for(I=0; I<N; I++)
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <checksum_calc+0x8c>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e018      	b.n	8003c9a <checksum_calc+0x66>
	{
		Check_A = Check_A + Buffer[I];
 8003c68:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <checksum_calc+0x8c>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <checksum_calc+0x7c>)
 8003c70:	5c9a      	ldrb	r2, [r3, r2]
 8003c72:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <checksum_calc+0x84>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <checksum_calc+0x84>)
 8003c7c:	701a      	strb	r2, [r3, #0]
		Check_B = Check_B + Check_A;
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <checksum_calc+0x88>)
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <checksum_calc+0x84>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <checksum_calc+0x88>)
 8003c8c:	701a      	strb	r2, [r3, #0]
	for(I=0; I<N; I++)
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <checksum_calc+0x8c>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <checksum_calc+0x8c>)
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <checksum_calc+0x8c>)
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <checksum_calc+0x80>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3e0      	bcc.n	8003c68 <checksum_calc+0x34>
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	2000181c 	.word	0x2000181c
 8003cb4:	200017bc 	.word	0x200017bc
 8003cb8:	2000037c 	.word	0x2000037c
 8003cbc:	2000037d 	.word	0x2000037d
 8003cc0:	2000187c 	.word	0x2000187c

08003cc4 <UBX_gelen_checksum>:


void UBX_gelen_checksum(UBX_Handle *gpsDatas)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	gelen_Check_A = gpsDatas->gpsDatasArray[98];
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <UBX_gelen_checksum+0x28>)
 8003cd4:	701a      	strb	r2, [r3, #0]
	gelen_Check_B = gpsDatas->gpsDatasArray[99];
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <UBX_gelen_checksum+0x2c>)
 8003cde:	701a      	strb	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	2000037e 	.word	0x2000037e
 8003cf0:	2000037f 	.word	0x2000037f

08003cf4 <GPS_Parser>:


void GPS_Parser(UBX_Handle *gpsDatas, UBX_Types gpsType)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	72fb      	strb	r3, [r7, #11]
	switch(gpsType)
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 826c 	bne.w	80041e0 <GPS_Parser+0x4ec>
	{
		case NAV_PVT_92:
		{
			checksum_calc(gpsDatas);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ff93 	bl	8003c34 <checksum_calc>
			UBX_gelen_checksum(gpsDatas);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ffd8 	bl	8003cc4 <UBX_gelen_checksum>

			if ( (Check_A == gelen_Check_A) && (Check_B == gelen_Check_B) )		//checksum kontrolu
 8003d14:	4bba      	ldr	r3, [pc, #744]	; (8004000 <GPS_Parser+0x30c>)
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	4bba      	ldr	r3, [pc, #744]	; (8004004 <GPS_Parser+0x310>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	f040 8256 	bne.w	80041ce <GPS_Parser+0x4da>
 8003d22:	4bb9      	ldr	r3, [pc, #740]	; (8004008 <GPS_Parser+0x314>)
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	4bb9      	ldr	r3, [pc, #740]	; (800400c <GPS_Parser+0x318>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	f040 824f 	bne.w	80041ce <GPS_Parser+0x4da>
			{
				memcpy(pvt_load, (uint8_t *)gpsDatas->gpsDatasArray+6, 92); 	//alt tarafta okunabilirlik ve datasheete benzesin diye sadece payload'i ubx_PVT'ye kopyalıyorum.
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3306      	adds	r3, #6
 8003d34:	4ab6      	ldr	r2, [pc, #728]	; (8004010 <GPS_Parser+0x31c>)
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	235c      	movs	r3, #92	; 0x5c
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f00f fafd 	bl	801333c <memcpy>
				if ( /*pvt_load[11] == VALID_CONTROL*/ 1 )  							//validity kontrolu
				{

					gpsDatas->ubx_PVT.iTOW 			=			 pvt_load[3]<<24 | pvt_load[2]<<16 | pvt_load[1]<<8 | pvt_load[0];
 8003d42:	4bb3      	ldr	r3, [pc, #716]	; (8004010 <GPS_Parser+0x31c>)
 8003d44:	78db      	ldrb	r3, [r3, #3]
 8003d46:	061a      	lsls	r2, r3, #24
 8003d48:	4bb1      	ldr	r3, [pc, #708]	; (8004010 <GPS_Parser+0x31c>)
 8003d4a:	789b      	ldrb	r3, [r3, #2]
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	4baf      	ldr	r3, [pc, #700]	; (8004010 <GPS_Parser+0x31c>)
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	4313      	orrs	r3, r2
 8003d58:	4aad      	ldr	r2, [pc, #692]	; (8004010 <GPS_Parser+0x31c>)
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
					gpsDatas->ubx_PVT.year 			=			 pvt_load[5]<<8  | pvt_load[4];
 8003d66:	4baa      	ldr	r3, [pc, #680]	; (8004010 <GPS_Parser+0x31c>)
 8003d68:	795b      	ldrb	r3, [r3, #5]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	4ba8      	ldr	r3, [pc, #672]	; (8004010 <GPS_Parser+0x31c>)
 8003d70:	791b      	ldrb	r3, [r3, #4]
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	4313      	orrs	r3, r2
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
					gpsDatas->ubx_PVT.month 		=			 pvt_load[6];
 8003d80:	4ba3      	ldr	r3, [pc, #652]	; (8004010 <GPS_Parser+0x31c>)
 8003d82:	799a      	ldrb	r2, [r3, #6]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
					gpsDatas->ubx_PVT.day 			=			 pvt_load[7];
 8003d8a:	4ba1      	ldr	r3, [pc, #644]	; (8004010 <GPS_Parser+0x31c>)
 8003d8c:	79da      	ldrb	r2, [r3, #7]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
					gpsDatas->ubx_PVT.hour			=			 pvt_load[8];
 8003d94:	4b9e      	ldr	r3, [pc, #632]	; (8004010 <GPS_Parser+0x31c>)
 8003d96:	7a1a      	ldrb	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
					gpsDatas->ubx_PVT.min 			=			 pvt_load[9];
 8003d9e:	4b9c      	ldr	r3, [pc, #624]	; (8004010 <GPS_Parser+0x31c>)
 8003da0:	7a5a      	ldrb	r2, [r3, #9]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
					gpsDatas->ubx_PVT.sec 			=			 pvt_load[10];
 8003da8:	4b99      	ldr	r3, [pc, #612]	; (8004010 <GPS_Parser+0x31c>)
 8003daa:	7a9a      	ldrb	r2, [r3, #10]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
					gpsDatas->ubx_PVT.valid 		=			 pvt_load[11];
 8003db2:	4b97      	ldr	r3, [pc, #604]	; (8004010 <GPS_Parser+0x31c>)
 8003db4:	7ada      	ldrb	r2, [r3, #11]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
					gpsDatas->ubx_PVT.tAcc			=			 pvt_load[15]<<24 | pvt_load[14]<<16 | pvt_load[13]<<8 | pvt_load[12];
 8003dbc:	4b94      	ldr	r3, [pc, #592]	; (8004010 <GPS_Parser+0x31c>)
 8003dbe:	7bdb      	ldrb	r3, [r3, #15]
 8003dc0:	061a      	lsls	r2, r3, #24
 8003dc2:	4b93      	ldr	r3, [pc, #588]	; (8004010 <GPS_Parser+0x31c>)
 8003dc4:	7b9b      	ldrb	r3, [r3, #14]
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	4b91      	ldr	r3, [pc, #580]	; (8004010 <GPS_Parser+0x31c>)
 8003dcc:	7b5b      	ldrb	r3, [r3, #13]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	4a8f      	ldr	r2, [pc, #572]	; (8004010 <GPS_Parser+0x31c>)
 8003dd4:	7b12      	ldrb	r2, [r2, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
					gpsDatas->ubx_PVT.nano 			= 	 		 pvt_load[19]<<24 | pvt_load[18]<<16 | pvt_load[17]<<8 | pvt_load[16];
 8003de0:	4b8b      	ldr	r3, [pc, #556]	; (8004010 <GPS_Parser+0x31c>)
 8003de2:	7cdb      	ldrb	r3, [r3, #19]
 8003de4:	061a      	lsls	r2, r3, #24
 8003de6:	4b8a      	ldr	r3, [pc, #552]	; (8004010 <GPS_Parser+0x31c>)
 8003de8:	7c9b      	ldrb	r3, [r3, #18]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	431a      	orrs	r2, r3
 8003dee:	4b88      	ldr	r3, [pc, #544]	; (8004010 <GPS_Parser+0x31c>)
 8003df0:	7c5b      	ldrb	r3, [r3, #17]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	4313      	orrs	r3, r2
 8003df6:	4a86      	ldr	r2, [pc, #536]	; (8004010 <GPS_Parser+0x31c>)
 8003df8:	7c12      	ldrb	r2, [r2, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
					gpsDatas->ubx_PVT.fixType		= 			 pvt_load[20];
 8003e02:	4b83      	ldr	r3, [pc, #524]	; (8004010 <GPS_Parser+0x31c>)
 8003e04:	7d1a      	ldrb	r2, [r3, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
					gpsDatas->ubx_PVT.flags			= 			 pvt_load[21];
 8003e0c:	4b80      	ldr	r3, [pc, #512]	; (8004010 <GPS_Parser+0x31c>)
 8003e0e:	7d5a      	ldrb	r2, [r3, #21]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
					gpsDatas->ubx_PVT.flags2		= 			 pvt_load[22];
 8003e16:	4b7e      	ldr	r3, [pc, #504]	; (8004010 <GPS_Parser+0x31c>)
 8003e18:	7d9a      	ldrb	r2, [r3, #22]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
					gpsDatas->ubx_PVT.numSV			=			 pvt_load[23];
 8003e20:	4b7b      	ldr	r3, [pc, #492]	; (8004010 <GPS_Parser+0x31c>)
 8003e22:	7dda      	ldrb	r2, [r3, #23]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
					gpsDatas->ubx_PVT.longitude	 	=(int32_t)(	 pvt_load[27]<<24 | pvt_load[26]<<16 | pvt_load[25]<<8 | pvt_load[24]) / 10000000.0f;
 8003e2a:	4b79      	ldr	r3, [pc, #484]	; (8004010 <GPS_Parser+0x31c>)
 8003e2c:	7edb      	ldrb	r3, [r3, #27]
 8003e2e:	061a      	lsls	r2, r3, #24
 8003e30:	4b77      	ldr	r3, [pc, #476]	; (8004010 <GPS_Parser+0x31c>)
 8003e32:	7e9b      	ldrb	r3, [r3, #26]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	4b75      	ldr	r3, [pc, #468]	; (8004010 <GPS_Parser+0x31c>)
 8003e3a:	7e5b      	ldrb	r3, [r3, #25]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	4a73      	ldr	r2, [pc, #460]	; (8004010 <GPS_Parser+0x31c>)
 8003e42:	7e12      	ldrb	r2, [r2, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e4e:	eddf 6a71 	vldr	s13, [pc, #452]	; 8004014 <GPS_Parser+0x320>
 8003e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8003e5c:	edc3 7a00 	vstr	s15, [r3]
					gpsDatas->ubx_PVT.latitude		=(int32_t)(	 pvt_load[31]<<24 | pvt_load[30]<<16 | pvt_load[29]<<8 | pvt_load[28]) / 10000000.0f;
 8003e60:	4b6b      	ldr	r3, [pc, #428]	; (8004010 <GPS_Parser+0x31c>)
 8003e62:	7fdb      	ldrb	r3, [r3, #31]
 8003e64:	061a      	lsls	r2, r3, #24
 8003e66:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <GPS_Parser+0x31c>)
 8003e68:	7f9b      	ldrb	r3, [r3, #30]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	4b68      	ldr	r3, [pc, #416]	; (8004010 <GPS_Parser+0x31c>)
 8003e70:	7f5b      	ldrb	r3, [r3, #29]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	4313      	orrs	r3, r2
 8003e76:	4a66      	ldr	r2, [pc, #408]	; (8004010 <GPS_Parser+0x31c>)
 8003e78:	7f12      	ldrb	r2, [r2, #28]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e84:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004014 <GPS_Parser+0x320>
 8003e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8003e92:	edc3 7a00 	vstr	s15, [r3]
					gpsDatas->ubx_PVT.height		 =			 pvt_load[35]<<24 | pvt_load[34]<<16 | pvt_load[33]<<8 | pvt_load[32];
 8003e96:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <GPS_Parser+0x31c>)
 8003e98:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003e9c:	061a      	lsls	r2, r3, #24
 8003e9e:	4b5c      	ldr	r3, [pc, #368]	; (8004010 <GPS_Parser+0x31c>)
 8003ea0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <GPS_Parser+0x31c>)
 8003eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	4a57      	ldr	r2, [pc, #348]	; (8004010 <GPS_Parser+0x31c>)
 8003eb4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
					gpsDatas->ubx_PVT.hMSL			 =			 pvt_load[39]<<24 | pvt_load[38]<<16 | pvt_load[37]<<8 | pvt_load[36];
 8003ec0:	4b53      	ldr	r3, [pc, #332]	; (8004010 <GPS_Parser+0x31c>)
 8003ec2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003ec6:	061a      	lsls	r2, r3, #24
 8003ec8:	4b51      	ldr	r3, [pc, #324]	; (8004010 <GPS_Parser+0x31c>)
 8003eca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <GPS_Parser+0x31c>)
 8003ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	4313      	orrs	r3, r2
 8003edc:	4a4c      	ldr	r2, [pc, #304]	; (8004010 <GPS_Parser+0x31c>)
 8003ede:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
					gpsDatas->ubx_PVT.hAcc			 =			 pvt_load[43]<<24 | pvt_load[42]<<16 | pvt_load[41]<<8 | pvt_load[40];
 8003eea:	4b49      	ldr	r3, [pc, #292]	; (8004010 <GPS_Parser+0x31c>)
 8003eec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ef0:	061a      	lsls	r2, r3, #24
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <GPS_Parser+0x31c>)
 8003ef4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	4b44      	ldr	r3, [pc, #272]	; (8004010 <GPS_Parser+0x31c>)
 8003efe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	4313      	orrs	r3, r2
 8003f06:	4a42      	ldr	r2, [pc, #264]	; (8004010 <GPS_Parser+0x31c>)
 8003f08:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
					gpsDatas->ubx_PVT.vAcc	  		 =			 pvt_load[47]<<24 | pvt_load[46]<<16 | pvt_load[45]<<8 | pvt_load[44];
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <GPS_Parser+0x31c>)
 8003f18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003f1c:	061a      	lsls	r2, r3, #24
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	; (8004010 <GPS_Parser+0x31c>)
 8003f20:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <GPS_Parser+0x31c>)
 8003f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	4313      	orrs	r3, r2
 8003f32:	4a37      	ldr	r2, [pc, #220]	; (8004010 <GPS_Parser+0x31c>)
 8003f34:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
					gpsDatas->ubx_PVT.velN	  		 =			 pvt_load[51]<<24 | pvt_load[50]<<16 | pvt_load[49]<<8 | pvt_load[48];
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <GPS_Parser+0x31c>)
 8003f44:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003f48:	061a      	lsls	r2, r3, #24
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <GPS_Parser+0x31c>)
 8003f4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <GPS_Parser+0x31c>)
 8003f56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <GPS_Parser+0x31c>)
 8003f60:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
					gpsDatas->ubx_PVT.velE	 		 =			 pvt_load[55]<<24 | pvt_load[54]<<16 | pvt_load[53]<<8 | pvt_load[52];
 8003f6c:	4b28      	ldr	r3, [pc, #160]	; (8004010 <GPS_Parser+0x31c>)
 8003f6e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003f72:	061a      	lsls	r2, r3, #24
 8003f74:	4b26      	ldr	r3, [pc, #152]	; (8004010 <GPS_Parser+0x31c>)
 8003f76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <GPS_Parser+0x31c>)
 8003f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	4313      	orrs	r3, r2
 8003f88:	4a21      	ldr	r2, [pc, #132]	; (8004010 <GPS_Parser+0x31c>)
 8003f8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
					gpsDatas->ubx_PVT.velD	  		 =			 pvt_load[59]<<24 | pvt_load[58]<<16 | pvt_load[57]<<8 | pvt_load[56];
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <GPS_Parser+0x31c>)
 8003f98:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <GPS_Parser+0x31c>)
 8003fa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <GPS_Parser+0x31c>)
 8003faa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <GPS_Parser+0x31c>)
 8003fb4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
					gpsDatas->ubx_PVT.gSpeed		 =			 pvt_load[63]<<24 | pvt_load[62]<<16 | pvt_load[61]<<8 | pvt_load[60];
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <GPS_Parser+0x31c>)
 8003fc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc6:	061a      	lsls	r2, r3, #24
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <GPS_Parser+0x31c>)
 8003fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <GPS_Parser+0x31c>)
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <GPS_Parser+0x31c>)
 8003fde:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
					gpsDatas->ubx_PVT.headingMotion  =(int32_t)( pvt_load[67]<<24 | pvt_load[66]<<16 | pvt_load[65]<<8 | pvt_load[64]) / 100000.0f;
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <GPS_Parser+0x31c>)
 8003fec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ff0:	061a      	lsls	r2, r3, #24
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <GPS_Parser+0x31c>)
 8003ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	e00c      	b.n	8004018 <GPS_Parser+0x324>
 8003ffe:	bf00      	nop
 8004000:	2000037c 	.word	0x2000037c
 8004004:	2000037e 	.word	0x2000037e
 8004008:	2000037d 	.word	0x2000037d
 800400c:	2000037f 	.word	0x2000037f
 8004010:	200017c0 	.word	0x200017c0
 8004014:	4b189680 	.word	0x4b189680
 8004018:	4b86      	ldr	r3, [pc, #536]	; (8004234 <GPS_Parser+0x540>)
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	4313      	orrs	r3, r2
 8004022:	4a84      	ldr	r2, [pc, #528]	; (8004234 <GPS_Parser+0x540>)
 8004024:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8004028:	4313      	orrs	r3, r2
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004032:	eddf 6a81 	vldr	s13, [pc, #516]	; 8004238 <GPS_Parser+0x544>
 8004036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8004040:	edc3 7a00 	vstr	s15, [r3]
					gpsDatas->ubx_PVT.sAcc			 =			 pvt_load[71]<<24 | pvt_load[70]<<16 | pvt_load[69]<<8 | pvt_load[68];
 8004044:	4b7b      	ldr	r3, [pc, #492]	; (8004234 <GPS_Parser+0x540>)
 8004046:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800404a:	061a      	lsls	r2, r3, #24
 800404c:	4b79      	ldr	r3, [pc, #484]	; (8004234 <GPS_Parser+0x540>)
 800404e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	4b77      	ldr	r3, [pc, #476]	; (8004234 <GPS_Parser+0x540>)
 8004058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	4313      	orrs	r3, r2
 8004060:	4a74      	ldr	r2, [pc, #464]	; (8004234 <GPS_Parser+0x540>)
 8004062:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8004066:	4313      	orrs	r3, r2
 8004068:	461a      	mov	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
					gpsDatas->ubx_PVT.headingAccuracy=(uint32_t)(pvt_load[75]<<24 | pvt_load[74]<<16 | pvt_load[73]<<8 | pvt_load[72]) / 100000.0f;
 8004070:	4b70      	ldr	r3, [pc, #448]	; (8004234 <GPS_Parser+0x540>)
 8004072:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004076:	061a      	lsls	r2, r3, #24
 8004078:	4b6e      	ldr	r3, [pc, #440]	; (8004234 <GPS_Parser+0x540>)
 800407a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <GPS_Parser+0x540>)
 8004084:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	4313      	orrs	r3, r2
 800408c:	4a69      	ldr	r2, [pc, #420]	; (8004234 <GPS_Parser+0x540>)
 800408e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004092:	4313      	orrs	r3, r2
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800409c:	eddf 6a66 	vldr	s13, [pc, #408]	; 8004238 <GPS_Parser+0x544>
 80040a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80040aa:	edc3 7a00 	vstr	s15, [r3]
					gpsDatas->ubx_PVT.positionDOP	 =(uint16_t)(pvt_load[77]<<8  | pvt_load[76]) / 100.0f;
 80040ae:	4b61      	ldr	r3, [pc, #388]	; (8004234 <GPS_Parser+0x540>)
 80040b0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <GPS_Parser+0x540>)
 80040ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80040be:	b21b      	sxth	r3, r3
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ce:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800423c <GPS_Parser+0x548>
 80040d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80040dc:	edc3 7a00 	vstr	s15, [r3]
					gpsDatas->ubx_PVT.flags3		 =			 pvt_load[79]<<8  | pvt_load[78];
 80040e0:	4b54      	ldr	r3, [pc, #336]	; (8004234 <GPS_Parser+0x540>)
 80040e2:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	b21a      	sxth	r2, r3
 80040ea:	4b52      	ldr	r3, [pc, #328]	; (8004234 <GPS_Parser+0x540>)
 80040ec:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80040f0:	b21b      	sxth	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
					gpsDatas->ubx_PVT.reserved1		 =			 pvt_load[83]<<24 | pvt_load[82]<<16 | pvt_load[81]<<8 | pvt_load[80];
 80040fe:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <GPS_Parser+0x540>)
 8004100:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004104:	061a      	lsls	r2, r3, #24
 8004106:	4b4b      	ldr	r3, [pc, #300]	; (8004234 <GPS_Parser+0x540>)
 8004108:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	4b48      	ldr	r3, [pc, #288]	; (8004234 <GPS_Parser+0x540>)
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	4313      	orrs	r3, r2
 800411a:	4a46      	ldr	r2, [pc, #280]	; (8004234 <GPS_Parser+0x540>)
 800411c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8004120:	4313      	orrs	r3, r2
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
					gpsDatas->ubx_PVT.headingVeh	 =(uint32_t)(pvt_load[87]<<24 | pvt_load[86]<<16 | pvt_load[85]<<8 | pvt_load[84]) / 100000.0f;
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <GPS_Parser+0x540>)
 800412c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8004130:	061a      	lsls	r2, r3, #24
 8004132:	4b40      	ldr	r3, [pc, #256]	; (8004234 <GPS_Parser+0x540>)
 8004134:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <GPS_Parser+0x540>)
 800413e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	4313      	orrs	r3, r2
 8004146:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <GPS_Parser+0x540>)
 8004148:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800414c:	4313      	orrs	r3, r2
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004156:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004238 <GPS_Parser+0x544>
 800415a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8004164:	edc3 7a00 	vstr	s15, [r3]
					gpsDatas->ubx_PVT.magDec		 =			 pvt_load[89]<<8  | pvt_load[88];
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <GPS_Parser+0x540>)
 800416a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	b21a      	sxth	r2, r3
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <GPS_Parser+0x540>)
 8004174:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004178:	b21b      	sxth	r3, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	b21a      	sxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8a3 2470 	strh.w	r2, [r3, #1136]	; 0x470
					gpsDatas->ubx_PVT.magAcc		 =			 pvt_load[91]<<8  | pvt_load[90];
 8004184:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <GPS_Parser+0x540>)
 8004186:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	b21a      	sxth	r2, r3
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <GPS_Parser+0x540>)
 8004190:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8004194:	b21b      	sxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b21b      	sxth	r3, r3
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8a3 2472 	strh.w	r2, [r3, #1138]	; 0x472

					gpsDatas->gps_errorhandler.trueData_u32++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

					if( gpsDatas->ubx_PVT.numSV >= 9)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 342b 	ldrb.w	r3, [r3, #1067]	; 0x42b
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d904      	bls.n	80041c4 <GPS_Parser+0x4d0>
					{
						gpsDatas->satelite_num_flag = 1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
				if ( /*pvt_load[11] == VALID_CONTROL*/ 1 )  							//validity kontrolu
 80041c2:	e00c      	b.n	80041de <GPS_Parser+0x4ea>
					}
					else
					{
						gpsDatas->satelite_num_flag = 0;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
				if ( /*pvt_load[11] == VALID_CONTROL*/ 1 )  							//validity kontrolu
 80041cc:	e007      	b.n	80041de <GPS_Parser+0x4ea>
					gpsDatas->gps_errorhandler.validDataError_u32++;
				}
			}
			else
			{
			gpsDatas->gps_errorhandler.checksumError_u32++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			}
			break;
 80041dc:	e7ff      	b.n	80041de <GPS_Parser+0x4ea>
 80041de:	bf00      	nop
		case NAV_VELNED_36:
		{
			// VELNED paketi eklenmek istenirse buraya eklenebilir.
		}
	}
	gpsDatas->gpsEfficiency_u8 = ((float)gpsDatas->gps_errorhandler.trueData_u32 /(gpsDatas->gps_errorhandler.checksumError_u32 + gpsDatas->gps_errorhandler.validDataError_u32 + gpsDatas->gps_errorhandler.trueData_u32) * 100);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80041fa:	441a      	add	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004202:	4413      	add	r3, r2
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800420c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004210:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800423c <GPS_Parser+0x548>
 8004214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004220:	793b      	ldrb	r3, [r7, #4]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	200017c0 	.word	0x200017c0
 8004238:	47c35000 	.word	0x47c35000
 800423c:	42c80000 	.word	0x42c80000

08004240 <ManyometerWrite>:
// offsett hesaplanacak

float mag_off_max_x=0,mag_off_max_y=0,mag_off_max_z=0,mag_off_min_x=0,mag_off_min_y=0,mag_off_min_z=0;// x y ve z ekseni manyotometre tanımlamaları

void ManyometerWrite(uint8_t wRegister,uint8_t Value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	4603      	mov	r3, r0
 8004248:	460a      	mov	r2, r1
 800424a:	71fb      	strb	r3, [r7, #7]
 800424c:	4613      	mov	r3, r2
 800424e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]         = wRegister;
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	733b      	strb	r3, [r7, #12]
	data[1]         = Value;
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ManyometerSlaveAdressWrite, data, 2, 10);
 8004258:	f107 020c 	add.w	r2, r7, #12
 800425c:	230a      	movs	r3, #10
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2302      	movs	r3, #2
 8004262:	213c      	movs	r1, #60	; 0x3c
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <ManyometerWrite+0x34>)
 8004266:	f006 fdbd 	bl	800ade4 <HAL_I2C_Master_Transmit>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000fec 	.word	0x20000fec

08004278 <ManyometerRead>:
void ManyometerRead(uint8_t rRegister,uint8_t NumberOfBytes)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af04      	add	r7, sp, #16
 800427e:	4603      	mov	r3, r0
 8004280:	460a      	mov	r2, r1
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	4613      	mov	r3, r2
 8004286:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, ManyometerSlaveAdressRead, rRegister, 1,Mydatas, NumberOfBytes, 10);
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	b29a      	uxth	r2, r3
 800428c:	79bb      	ldrb	r3, [r7, #6]
 800428e:	b29b      	uxth	r3, r3
 8004290:	210a      	movs	r1, #10
 8004292:	9102      	str	r1, [sp, #8]
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <ManyometerRead+0x34>)
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2301      	movs	r3, #1
 800429c:	213d      	movs	r1, #61	; 0x3d
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <ManyometerRead+0x38>)
 80042a0:	f007 f8c4 	bl	800b42c <HAL_I2C_Mem_Read>
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20001570 	.word	0x20001570
 80042b0:	20000fec 	.word	0x20000fec

080042b4 <ManyometerInit>:
void ManyometerInit()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
    // baslangıc kurulumu
	HAL_Delay(10);
 80042b8:	200a      	movs	r0, #10
 80042ba:	f004 fe43 	bl	8008f44 <HAL_Delay>

	ManyometerWrite(HMC5883L_MODE_REGISTER,0x00);
 80042be:	2100      	movs	r1, #0
 80042c0:	2002      	movs	r0, #2
 80042c2:	f7ff ffbd 	bl	8004240 <ManyometerWrite>
	ManyometerWrite(HMC5883L_CFG_REG_A,0b00010000);
 80042c6:	2110      	movs	r1, #16
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7ff ffb9 	bl	8004240 <ManyometerWrite>
	ManyometerWrite(HMC5883L_CFG_REG_B,0b00100000);
 80042ce:	2120      	movs	r1, #32
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7ff ffb5 	bl	8004240 <ManyometerWrite>

	calibration_matrice[0][0]=0.141937;
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <ManyometerInit+0x74>)
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <ManyometerInit+0x78>)
 80042da:	601a      	str	r2, [r3, #0]
	calibration_matrice[0][1]=0.000479;
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <ManyometerInit+0x74>)
 80042de:	4a14      	ldr	r2, [pc, #80]	; (8004330 <ManyometerInit+0x7c>)
 80042e0:	605a      	str	r2, [r3, #4]
	calibration_matrice[0][2]=0.000078;
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <ManyometerInit+0x74>)
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <ManyometerInit+0x80>)
 80042e6:	609a      	str	r2, [r3, #8]
    calibration_matrice[1][0]=0.000479;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <ManyometerInit+0x74>)
 80042ea:	4a11      	ldr	r2, [pc, #68]	; (8004330 <ManyometerInit+0x7c>)
 80042ec:	60da      	str	r2, [r3, #12]
	calibration_matrice[1][1]=0.116996;
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <ManyometerInit+0x74>)
 80042f0:	4a11      	ldr	r2, [pc, #68]	; (8004338 <ManyometerInit+0x84>)
 80042f2:	611a      	str	r2, [r3, #16]
	calibration_matrice[1][2]=0.000102;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <ManyometerInit+0x74>)
 80042f6:	4a11      	ldr	r2, [pc, #68]	; (800433c <ManyometerInit+0x88>)
 80042f8:	615a      	str	r2, [r3, #20]
    calibration_matrice[2][0]=0.000078;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <ManyometerInit+0x74>)
 80042fc:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <ManyometerInit+0x80>)
 80042fe:	619a      	str	r2, [r3, #24]
	calibration_matrice[2][1]=0.000102;
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <ManyometerInit+0x74>)
 8004302:	4a0e      	ldr	r2, [pc, #56]	; (800433c <ManyometerInit+0x88>)
 8004304:	61da      	str	r2, [r3, #28]
	calibration_matrice[2][2]=0.183908;
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <ManyometerInit+0x74>)
 8004308:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <ManyometerInit+0x8c>)
 800430a:	621a      	str	r2, [r3, #32]

    bias_value_mag_x=-11.875537;
 800430c:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <ManyometerInit+0x90>)
 800430e:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <ManyometerInit+0x94>)
 8004310:	601a      	str	r2, [r3, #0]
    bias_value_mag_y=-621.8516;
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <ManyometerInit+0x98>)
 8004314:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <ManyometerInit+0x9c>)
 8004316:	601a      	str	r2, [r3, #0]
    bias_value_mag_z=-64.713503;
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <ManyometerInit+0xa0>)
 800431a:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <ManyometerInit+0xa4>)
 800431c:	601a      	str	r2, [r3, #0]

    magno_declination=5.50;
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <ManyometerInit+0xa8>)
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <ManyometerInit+0xac>)
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	200014a0 	.word	0x200014a0
 800432c:	3e1157ef 	.word	0x3e1157ef
 8004330:	39fb224b 	.word	0x39fb224b
 8004334:	38a393ee 	.word	0x38a393ee
 8004338:	3def9b99 	.word	0x3def9b99
 800433c:	38d5e8d5 	.word	0x38d5e8d5
 8004340:	3e3c5261 	.word	0x3e3c5261
 8004344:	20001764 	.word	0x20001764
 8004348:	c13e0233 	.word	0xc13e0233
 800434c:	20000cbc 	.word	0x20000cbc
 8004350:	c41b7681 	.word	0xc41b7681
 8004354:	20001558 	.word	0x20001558
 8004358:	c2816d50 	.word	0xc2816d50
 800435c:	20001418 	.word	0x20001418
 8004360:	40b00000 	.word	0x40b00000
 8004364:	00000000 	.word	0x00000000

08004368 <ManyometerReadValue>:
void ManyometerReadValue()// manyotometre kurulumu
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	ManyometerRead(0x03, 6);
 800436c:	2106      	movs	r1, #6
 800436e:	2003      	movs	r0, #3
 8004370:	f7ff ff82 	bl	8004278 <ManyometerRead>
	Mag_Raw_X=(Mydatas[0] << 8) | Mydatas[1];
 8004374:	4b7c      	ldr	r3, [pc, #496]	; (8004568 <ManyometerReadValue+0x200>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	b21a      	sxth	r2, r3
 800437c:	4b7a      	ldr	r3, [pc, #488]	; (8004568 <ManyometerReadValue+0x200>)
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	b21b      	sxth	r3, r3
 8004382:	4313      	orrs	r3, r2
 8004384:	b21a      	sxth	r2, r3
 8004386:	4b79      	ldr	r3, [pc, #484]	; (800456c <ManyometerReadValue+0x204>)
 8004388:	801a      	strh	r2, [r3, #0]
	Mag_Raw_Z=(Mydatas[2] << 8) | Mydatas[3];
 800438a:	4b77      	ldr	r3, [pc, #476]	; (8004568 <ManyometerReadValue+0x200>)
 800438c:	789b      	ldrb	r3, [r3, #2]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b21a      	sxth	r2, r3
 8004392:	4b75      	ldr	r3, [pc, #468]	; (8004568 <ManyometerReadValue+0x200>)
 8004394:	78db      	ldrb	r3, [r3, #3]
 8004396:	b21b      	sxth	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b21a      	sxth	r2, r3
 800439c:	4b74      	ldr	r3, [pc, #464]	; (8004570 <ManyometerReadValue+0x208>)
 800439e:	801a      	strh	r2, [r3, #0]
	Mag_Raw_Y=(Mydatas[4] << 8) | Mydatas[5];
 80043a0:	4b71      	ldr	r3, [pc, #452]	; (8004568 <ManyometerReadValue+0x200>)
 80043a2:	791b      	ldrb	r3, [r3, #4]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <ManyometerReadValue+0x200>)
 80043aa:	795b      	ldrb	r3, [r3, #5]
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b21a      	sxth	r2, r3
 80043b2:	4b70      	ldr	r3, [pc, #448]	; (8004574 <ManyometerReadValue+0x20c>)
 80043b4:	801a      	strh	r2, [r3, #0]

	scaled_mag_x=Mag_Raw_X * 0.92; //1,3 mg
 80043b6:	4b6d      	ldr	r3, [pc, #436]	; (800456c <ManyometerReadValue+0x204>)
 80043b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc f8b1 	bl	8000524 <__aeabi_i2d>
 80043c2:	a367      	add	r3, pc, #412	; (adr r3, 8004560 <ManyometerReadValue+0x1f8>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fc f916 	bl	80005f8 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7fc fc08 	bl	8000be8 <__aeabi_d2f>
 80043d8:	4603      	mov	r3, r0
 80043da:	4a67      	ldr	r2, [pc, #412]	; (8004578 <ManyometerReadValue+0x210>)
 80043dc:	6013      	str	r3, [r2, #0]
    scaled_mag_y=Mag_Raw_Y * 0.92;
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <ManyometerReadValue+0x20c>)
 80043e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc f89d 	bl	8000524 <__aeabi_i2d>
 80043ea:	a35d      	add	r3, pc, #372	; (adr r3, 8004560 <ManyometerReadValue+0x1f8>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f7fc f902 	bl	80005f8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	f7fc fbf4 	bl	8000be8 <__aeabi_d2f>
 8004400:	4603      	mov	r3, r0
 8004402:	4a5e      	ldr	r2, [pc, #376]	; (800457c <ManyometerReadValue+0x214>)
 8004404:	6013      	str	r3, [r2, #0]
	scaled_mag_z=Mag_Raw_Z * 0.92;
 8004406:	4b5a      	ldr	r3, [pc, #360]	; (8004570 <ManyometerReadValue+0x208>)
 8004408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f889 	bl	8000524 <__aeabi_i2d>
 8004412:	a353      	add	r3, pc, #332	; (adr r3, 8004560 <ManyometerReadValue+0x1f8>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f8ee 	bl	80005f8 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f7fc fbe0 	bl	8000be8 <__aeabi_d2f>
 8004428:	4603      	mov	r3, r0
 800442a:	4a55      	ldr	r2, [pc, #340]	; (8004580 <ManyometerReadValue+0x218>)
 800442c:	6013      	str	r3, [r2, #0]

    biased_mag_x = scaled_mag_x - bias_value_mag_x;
 800442e:	4b52      	ldr	r3, [pc, #328]	; (8004578 <ManyometerReadValue+0x210>)
 8004430:	ed93 7a00 	vldr	s14, [r3]
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <ManyometerReadValue+0x21c>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800443e:	4b52      	ldr	r3, [pc, #328]	; (8004588 <ManyometerReadValue+0x220>)
 8004440:	edc3 7a00 	vstr	s15, [r3]
    biased_mag_y = scaled_mag_y - bias_value_mag_y;
 8004444:	4b4d      	ldr	r3, [pc, #308]	; (800457c <ManyometerReadValue+0x214>)
 8004446:	ed93 7a00 	vldr	s14, [r3]
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <ManyometerReadValue+0x224>)
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004454:	4b4e      	ldr	r3, [pc, #312]	; (8004590 <ManyometerReadValue+0x228>)
 8004456:	edc3 7a00 	vstr	s15, [r3]
    biased_mag_z = scaled_mag_z - bias_value_mag_z;
 800445a:	4b49      	ldr	r3, [pc, #292]	; (8004580 <ManyometerReadValue+0x218>)
 800445c:	ed93 7a00 	vldr	s14, [r3]
 8004460:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <ManyometerReadValue+0x22c>)
 8004462:	edd3 7a00 	vldr	s15, [r3]
 8004466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800446a:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <ManyometerReadValue+0x230>)
 800446c:	edc3 7a00 	vstr	s15, [r3]

    calibrated_mag_x = calibration_matrice[0][0]*biased_mag_x + calibration_matrice[0][1]*biased_mag_y + calibration_matrice[0][2]*biased_mag_z;
 8004470:	4b4a      	ldr	r3, [pc, #296]	; (800459c <ManyometerReadValue+0x234>)
 8004472:	ed93 7a00 	vldr	s14, [r3]
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <ManyometerReadValue+0x220>)
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004480:	4b46      	ldr	r3, [pc, #280]	; (800459c <ManyometerReadValue+0x234>)
 8004482:	edd3 6a01 	vldr	s13, [r3, #4]
 8004486:	4b42      	ldr	r3, [pc, #264]	; (8004590 <ManyometerReadValue+0x228>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004494:	4b41      	ldr	r3, [pc, #260]	; (800459c <ManyometerReadValue+0x234>)
 8004496:	edd3 6a02 	vldr	s13, [r3, #8]
 800449a:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <ManyometerReadValue+0x230>)
 800449c:	edd3 7a00 	vldr	s15, [r3]
 80044a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a8:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <ManyometerReadValue+0x238>)
 80044aa:	edc3 7a00 	vstr	s15, [r3]
    calibrated_mag_y = calibration_matrice[1][0]*biased_mag_x + calibration_matrice[1][1]*biased_mag_y + calibration_matrice[1][2]*biased_mag_z;
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <ManyometerReadValue+0x234>)
 80044b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80044b4:	4b34      	ldr	r3, [pc, #208]	; (8004588 <ManyometerReadValue+0x220>)
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044be:	4b37      	ldr	r3, [pc, #220]	; (800459c <ManyometerReadValue+0x234>)
 80044c0:	edd3 6a04 	vldr	s13, [r3, #16]
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <ManyometerReadValue+0x228>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044d2:	4b32      	ldr	r3, [pc, #200]	; (800459c <ManyometerReadValue+0x234>)
 80044d4:	edd3 6a05 	vldr	s13, [r3, #20]
 80044d8:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <ManyometerReadValue+0x230>)
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044e6:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <ManyometerReadValue+0x23c>)
 80044e8:	edc3 7a00 	vstr	s15, [r3]
    calibrated_mag_z = calibration_matrice[2][0]*biased_mag_x + calibration_matrice[2][1]*biased_mag_y + calibration_matrice[2][2]*biased_mag_z;
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <ManyometerReadValue+0x234>)
 80044ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80044f2:	4b25      	ldr	r3, [pc, #148]	; (8004588 <ManyometerReadValue+0x220>)
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <ManyometerReadValue+0x234>)
 80044fe:	edd3 6a07 	vldr	s13, [r3, #28]
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <ManyometerReadValue+0x228>)
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800450c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <ManyometerReadValue+0x234>)
 8004512:	edd3 6a08 	vldr	s13, [r3, #32]
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <ManyometerReadValue+0x230>)
 8004518:	edd3 7a00 	vldr	s15, [r3]
 800451c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <ManyometerReadValue+0x240>)
 8004526:	edc3 7a00 	vstr	s15, [r3]
    Butterworth(&MagRollFiltered, scaled_mag_x);
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <ManyometerReadValue+0x210>)
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	eeb0 0a67 	vmov.f32	s0, s15
 8004534:	481d      	ldr	r0, [pc, #116]	; (80045ac <ManyometerReadValue+0x244>)
 8004536:	f7ff f833 	bl	80035a0 <Butterworth>
    Butterworth(&MagPitchFiltered, scaled_mag_y);
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <ManyometerReadValue+0x214>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	eeb0 0a67 	vmov.f32	s0, s15
 8004544:	481a      	ldr	r0, [pc, #104]	; (80045b0 <ManyometerReadValue+0x248>)
 8004546:	f7ff f82b 	bl	80035a0 <Butterworth>
    Butterworth(&MagYawFiltered, scaled_mag_z);
 800454a:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <ManyometerReadValue+0x218>)
 800454c:	edd3 7a00 	vldr	s15, [r3]
 8004550:	eeb0 0a67 	vmov.f32	s0, s15
 8004554:	4817      	ldr	r0, [pc, #92]	; (80045b4 <ManyometerReadValue+0x24c>)
 8004556:	f7ff f823 	bl	80035a0 <Butterworth>

}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	d70a3d71 	.word	0xd70a3d71
 8004564:	3fed70a3 	.word	0x3fed70a3
 8004568:	20001570 	.word	0x20001570
 800456c:	20001568 	.word	0x20001568
 8004570:	20001424 	.word	0x20001424
 8004574:	200012a6 	.word	0x200012a6
 8004578:	2000155c 	.word	0x2000155c
 800457c:	20001494 	.word	0x20001494
 8004580:	200016e4 	.word	0x200016e4
 8004584:	20001764 	.word	0x20001764
 8004588:	20001408 	.word	0x20001408
 800458c:	20000cbc 	.word	0x20000cbc
 8004590:	20001428 	.word	0x20001428
 8004594:	20001558 	.word	0x20001558
 8004598:	20000fe8 	.word	0x20000fe8
 800459c:	200014a0 	.word	0x200014a0
 80045a0:	20001264 	.word	0x20001264
 80045a4:	20001490 	.word	0x20001490
 80045a8:	2000114c 	.word	0x2000114c
 80045ac:	20001150 	.word	0x20001150
 80045b0:	20001390 	.word	0x20001390
 80045b4:	20001168 	.word	0x20001168

080045b8 <RemotoControlMapping>:
//	    SetMotorPWM(Motor.Sol_Arka, Motor.Sag_Arka,Motor.Sag_On, Motor.Sol_On);
//	}
//}
uint8_t PositionFlag=0;
void RemotoControlMapping()
{
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	RemoteRoll.Raw  	= Rc.Ch1; //MapInt(Rc.Ch1, Min_Throttle, Max_Throttle, -Max_Axis_Value, Max_Axis_Value);
 80045bc:	4ba6      	ldr	r3, [pc, #664]	; (8004858 <RemotoControlMapping+0x2a0>)
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b21a      	sxth	r2, r3
 80045c2:	4ba6      	ldr	r3, [pc, #664]	; (800485c <RemotoControlMapping+0x2a4>)
 80045c4:	801a      	strh	r2, [r3, #0]
	RemotePitch.Raw  	= Rc.Ch2; //MapInt(Rc.Ch2, Min_Throttle, Max_Throttle, -Max_Axis_Value, Max_Axis_Value);
 80045c6:	4ba4      	ldr	r3, [pc, #656]	; (8004858 <RemotoControlMapping+0x2a0>)
 80045c8:	885b      	ldrh	r3, [r3, #2]
 80045ca:	b21a      	sxth	r2, r3
 80045cc:	4ba4      	ldr	r3, [pc, #656]	; (8004860 <RemotoControlMapping+0x2a8>)
 80045ce:	801a      	strh	r2, [r3, #0]
	RemoteYaw.Raw       = Rc.Ch4;
 80045d0:	4ba1      	ldr	r3, [pc, #644]	; (8004858 <RemotoControlMapping+0x2a0>)
 80045d2:	88db      	ldrh	r3, [r3, #6]
 80045d4:	b21a      	sxth	r2, r3
 80045d6:	4ba3      	ldr	r3, [pc, #652]	; (8004864 <RemotoControlMapping+0x2ac>)
 80045d8:	801a      	strh	r2, [r3, #0]
	RemoteThrottle.Raw  = Rc.Ch3; //MapInt(Rc.Ch2, Min_Throttle, Max_Throttle, -Max_Axis_Value, Max_Axis_Value);
 80045da:	4b9f      	ldr	r3, [pc, #636]	; (8004858 <RemotoControlMapping+0x2a0>)
 80045dc:	889b      	ldrh	r3, [r3, #4]
 80045de:	b21a      	sxth	r2, r3
 80045e0:	4ba1      	ldr	r3, [pc, #644]	; (8004868 <RemotoControlMapping+0x2b0>)
 80045e2:	801a      	strh	r2, [r3, #0]

	RemoteRoll.Velocity  	 = RemoteRoll.Velocity     + (RemoteRoll.Raw  	 -1500) * VelocityCoefficient * Elapsed_time;
 80045e4:	4b9d      	ldr	r3, [pc, #628]	; (800485c <RemotoControlMapping+0x2a4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fb ffad 	bl	8000548 <__aeabi_f2d>
 80045ee:	4604      	mov	r4, r0
 80045f0:	460d      	mov	r5, r1
 80045f2:	4b9a      	ldr	r3, [pc, #616]	; (800485c <RemotoControlMapping+0x2a4>)
 80045f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ff91 	bl	8000524 <__aeabi_i2d>
 8004602:	a391      	add	r3, pc, #580	; (adr r3, 8004848 <RemotoControlMapping+0x290>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fb fff6 	bl	80005f8 <__aeabi_dmul>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	a38e      	add	r3, pc, #568	; (adr r3, 8004850 <RemotoControlMapping+0x298>)
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f7fb ffed 	bl	80005f8 <__aeabi_dmul>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4620      	mov	r0, r4
 8004624:	4629      	mov	r1, r5
 8004626:	f7fb fe31 	bl	800028c <__adddf3>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	f7fc fad9 	bl	8000be8 <__aeabi_d2f>
 8004636:	4603      	mov	r3, r0
 8004638:	4a88      	ldr	r2, [pc, #544]	; (800485c <RemotoControlMapping+0x2a4>)
 800463a:	6053      	str	r3, [r2, #4]
	RemotePitch.Velocity  	 = RemotePitch.Velocity    + (RemotePitch.Raw  	 -1500) * VelocityCoefficient * Elapsed_time;
 800463c:	4b88      	ldr	r3, [pc, #544]	; (8004860 <RemotoControlMapping+0x2a8>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fb ff81 	bl	8000548 <__aeabi_f2d>
 8004646:	4604      	mov	r4, r0
 8004648:	460d      	mov	r5, r1
 800464a:	4b85      	ldr	r3, [pc, #532]	; (8004860 <RemotoControlMapping+0x2a8>)
 800464c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004650:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004654:	4618      	mov	r0, r3
 8004656:	f7fb ff65 	bl	8000524 <__aeabi_i2d>
 800465a:	a37b      	add	r3, pc, #492	; (adr r3, 8004848 <RemotoControlMapping+0x290>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb ffca 	bl	80005f8 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	a378      	add	r3, pc, #480	; (adr r3, 8004850 <RemotoControlMapping+0x298>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb ffc1 	bl	80005f8 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4620      	mov	r0, r4
 800467c:	4629      	mov	r1, r5
 800467e:	f7fb fe05 	bl	800028c <__adddf3>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f7fc faad 	bl	8000be8 <__aeabi_d2f>
 800468e:	4603      	mov	r3, r0
 8004690:	4a73      	ldr	r2, [pc, #460]	; (8004860 <RemotoControlMapping+0x2a8>)
 8004692:	6053      	str	r3, [r2, #4]
	RemoteYaw.Velocity       = RemoteYaw.Velocity      + (RemoteYaw.Raw      -1500) * VelocityCoefficient * Elapsed_time;
 8004694:	4b73      	ldr	r3, [pc, #460]	; (8004864 <RemotoControlMapping+0x2ac>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fb ff55 	bl	8000548 <__aeabi_f2d>
 800469e:	4604      	mov	r4, r0
 80046a0:	460d      	mov	r5, r1
 80046a2:	4b70      	ldr	r3, [pc, #448]	; (8004864 <RemotoControlMapping+0x2ac>)
 80046a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff39 	bl	8000524 <__aeabi_i2d>
 80046b2:	a365      	add	r3, pc, #404	; (adr r3, 8004848 <RemotoControlMapping+0x290>)
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f7fb ff9e 	bl	80005f8 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	a362      	add	r3, pc, #392	; (adr r3, 8004850 <RemotoControlMapping+0x298>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb ff95 	bl	80005f8 <__aeabi_dmul>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4620      	mov	r0, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	f7fb fdd9 	bl	800028c <__adddf3>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	f7fc fa81 	bl	8000be8 <__aeabi_d2f>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <RemotoControlMapping+0x2ac>)
 80046ea:	6053      	str	r3, [r2, #4]
	RemoteThrottle.Velocity  = RemoteThrottle.Velocity + (RemoteThrottle.Raw -1500) * VelocityCoefficient * Elapsed_time;
 80046ec:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <RemotoControlMapping+0x2b0>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fb ff29 	bl	8000548 <__aeabi_f2d>
 80046f6:	4604      	mov	r4, r0
 80046f8:	460d      	mov	r5, r1
 80046fa:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <RemotoControlMapping+0x2b0>)
 80046fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004700:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb ff0d 	bl	8000524 <__aeabi_i2d>
 800470a:	a34f      	add	r3, pc, #316	; (adr r3, 8004848 <RemotoControlMapping+0x290>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fb ff72 	bl	80005f8 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	a34c      	add	r3, pc, #304	; (adr r3, 8004850 <RemotoControlMapping+0x298>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fb ff69 	bl	80005f8 <__aeabi_dmul>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f7fb fdad 	bl	800028c <__adddf3>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	f7fc fa55 	bl	8000be8 <__aeabi_d2f>
 800473e:	4603      	mov	r3, r0
 8004740:	4a49      	ldr	r2, [pc, #292]	; (8004868 <RemotoControlMapping+0x2b0>)
 8004742:	6053      	str	r3, [r2, #4]

	if(RemoteThrottle.Velocity <= 0)
 8004744:	4b48      	ldr	r3, [pc, #288]	; (8004868 <RemotoControlMapping+0x2b0>)
 8004746:	edd3 7a01 	vldr	s15, [r3, #4]
 800474a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d803      	bhi.n	800475c <RemotoControlMapping+0x1a4>
	{
		RemoteThrottle.Velocity=0;
 8004754:	4b44      	ldr	r3, [pc, #272]	; (8004868 <RemotoControlMapping+0x2b0>)
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	605a      	str	r2, [r3, #4]
	}
	if (RemoteRoll.Raw  > MaxDeadband)
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <RemotoControlMapping+0x2a4>)
 800475e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004762:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8004766:	dd18      	ble.n	800479a <RemotoControlMapping+0x1e2>
	{
		RemoteRoll.Setpoint    = -(RemoteRoll.Raw  - MaxDeadband);
 8004768:	4b3c      	ldr	r3, [pc, #240]	; (800485c <RemotoControlMapping+0x2a4>)
 800476a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800476e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477a:	4b38      	ldr	r3, [pc, #224]	; (800485c <RemotoControlMapping+0x2a4>)
 800477c:	edc3 7a02 	vstr	s15, [r3, #8]
		RemoteRoll.FeedForward = -(RemoteRoll.Raw  - MaxDeadband);
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <RemotoControlMapping+0x2a4>)
 8004782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004786:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004792:	4b32      	ldr	r3, [pc, #200]	; (800485c <RemotoControlMapping+0x2a4>)
 8004794:	edc3 7a03 	vstr	s15, [r3, #12]
 8004798:	e01d      	b.n	80047d6 <RemotoControlMapping+0x21e>
	}
	else if (RemoteRoll.Raw < MindDeadband)
 800479a:	4b30      	ldr	r3, [pc, #192]	; (800485c <RemotoControlMapping+0x2a4>)
 800479c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047a0:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 80047a4:	da17      	bge.n	80047d6 <RemotoControlMapping+0x21e>
	{
		RemoteRoll.Setpoint = -(RemoteRoll.Raw - MindDeadband);
 80047a6:	4b2d      	ldr	r3, [pc, #180]	; (800485c <RemotoControlMapping+0x2a4>)
 80047a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ac:	f5c3 63b9 	rsb	r3, r3, #1480	; 0x5c8
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <RemotoControlMapping+0x2a4>)
 80047ba:	edc3 7a02 	vstr	s15, [r3, #8]
		RemoteRoll.FeedForward = -(RemoteRoll.Raw - MindDeadband);
 80047be:	4b27      	ldr	r3, [pc, #156]	; (800485c <RemotoControlMapping+0x2a4>)
 80047c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c4:	f5c3 63b9 	rsb	r3, r3, #1480	; 0x5c8
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d0:	4b22      	ldr	r3, [pc, #136]	; (800485c <RemotoControlMapping+0x2a4>)
 80047d2:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	RemoteRoll.Setpoint -= Ahrs_ROLL * LevelAdjustCoefficient;// kumanda hassasiyeti level adjust coefficient ayarlıyor
 80047d6:	4b21      	ldr	r3, [pc, #132]	; (800485c <RemotoControlMapping+0x2a4>)
 80047d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <RemotoControlMapping+0x2b4>)
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 80047e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <RemotoControlMapping+0x2a4>)
 80047f0:	edc3 7a02 	vstr	s15, [r3, #8]
	RemoteRoll.Setpoint /= LevelDivededValue;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <RemotoControlMapping+0x2a4>)
 80047f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80047fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80047fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004802:	4b16      	ldr	r3, [pc, #88]	; (800485c <RemotoControlMapping+0x2a4>)
 8004804:	edc3 7a02 	vstr	s15, [r3, #8]

	if (RemotePitch.Raw  > MaxDeadband)
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <RemotoControlMapping+0x2a8>)
 800480a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480e:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8004812:	dd2d      	ble.n	8004870 <RemotoControlMapping+0x2b8>
	{
		RemotePitch.Setpoint = RemotePitch.Raw  - MaxDeadband;
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <RemotoControlMapping+0x2a8>)
 8004816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800481a:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <RemotoControlMapping+0x2a8>)
 8004828:	edc3 7a02 	vstr	s15, [r3, #8]
		RemotePitch.FeedForward = RemotePitch.Raw  - MaxDeadband;
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <RemotoControlMapping+0x2a8>)
 800482e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004832:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <RemotoControlMapping+0x2a8>)
 8004840:	edc3 7a03 	vstr	s15, [r3, #12]
 8004844:	e032      	b.n	80048ac <RemotoControlMapping+0x2f4>
 8004846:	bf00      	nop
 8004848:	47ae147b 	.word	0x47ae147b
 800484c:	3f747ae1 	.word	0x3f747ae1
 8004850:	d2f1a9fc 	.word	0xd2f1a9fc
 8004854:	3f60624d 	.word	0x3f60624d
 8004858:	20001468 	.word	0x20001468
 800485c:	20001228 	.word	0x20001228
 8004860:	2000174c 	.word	0x2000174c
 8004864:	200012f4 	.word	0x200012f4
 8004868:	20000d50 	.word	0x20000d50
 800486c:	20000c40 	.word	0x20000c40
	}
	else if (RemotePitch.Raw < MindDeadband)
 8004870:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <RemotoControlMapping+0x448>)
 8004872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004876:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800487a:	da17      	bge.n	80048ac <RemotoControlMapping+0x2f4>
	{
		RemotePitch.Setpoint = RemotePitch.Raw - MindDeadband;
 800487c:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <RemotoControlMapping+0x448>)
 800487e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004882:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800488e:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <RemotoControlMapping+0x448>)
 8004890:	edc3 7a02 	vstr	s15, [r3, #8]
		RemotePitch.FeedForward = RemotePitch.Raw - MindDeadband;
 8004894:	4b5a      	ldr	r3, [pc, #360]	; (8004a00 <RemotoControlMapping+0x448>)
 8004896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489a:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a6:	4b56      	ldr	r3, [pc, #344]	; (8004a00 <RemotoControlMapping+0x448>)
 80048a8:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	RemotePitch.Setpoint -= Ahrs_PITCH * LevelAdjustCoefficient;// kumanda hassasiyeti level adjust coefficient ayarlıyor
 80048ac:	4b54      	ldr	r3, [pc, #336]	; (8004a00 <RemotoControlMapping+0x448>)
 80048ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80048b2:	4b54      	ldr	r3, [pc, #336]	; (8004a04 <RemotoControlMapping+0x44c>)
 80048b4:	edd3 7a00 	vldr	s15, [r3]
 80048b8:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 80048bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80048c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048c4:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <RemotoControlMapping+0x448>)
 80048c6:	edc3 7a02 	vstr	s15, [r3, #8]
	RemotePitch.Setpoint /= LevelDivededValue;
 80048ca:	4b4d      	ldr	r3, [pc, #308]	; (8004a00 <RemotoControlMapping+0x448>)
 80048cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80048d0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80048d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d8:	4b49      	ldr	r3, [pc, #292]	; (8004a00 <RemotoControlMapping+0x448>)
 80048da:	edc3 7a02 	vstr	s15, [r3, #8]

	if (RemoteYaw.Raw  > MaxDeadband)
 80048de:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <RemotoControlMapping+0x450>)
 80048e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e4:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 80048e8:	dd18      	ble.n	800491c <RemotoControlMapping+0x364>
	{
		RemoteYaw.Setpoint = RemoteYaw.Raw - MaxDeadband;
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <RemotoControlMapping+0x450>)
 80048ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f0:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048fc:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <RemotoControlMapping+0x450>)
 80048fe:	edc3 7a02 	vstr	s15, [r3, #8]
		RemoteYaw.FeedForward = RemoteYaw.Raw - MaxDeadband;
 8004902:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <RemotoControlMapping+0x450>)
 8004904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004908:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004914:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <RemotoControlMapping+0x450>)
 8004916:	edc3 7a03 	vstr	s15, [r3, #12]
 800491a:	e01d      	b.n	8004958 <RemotoControlMapping+0x3a0>
	}
	else if (RemoteYaw.Raw < MindDeadband)
 800491c:	4b3a      	ldr	r3, [pc, #232]	; (8004a08 <RemotoControlMapping+0x450>)
 800491e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004922:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8004926:	da17      	bge.n	8004958 <RemotoControlMapping+0x3a0>
	{
		RemoteYaw.Setpoint = RemoteYaw.Raw - MindDeadband;
 8004928:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <RemotoControlMapping+0x450>)
 800492a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800492e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493a:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <RemotoControlMapping+0x450>)
 800493c:	edc3 7a02 	vstr	s15, [r3, #8]
		RemoteYaw.FeedForward = RemoteYaw.Raw - MindDeadband;
 8004940:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <RemotoControlMapping+0x450>)
 8004942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004946:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004952:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <RemotoControlMapping+0x450>)
 8004954:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if(Rc.Ch6>1700 )			   // Position mode geçiş
 8004958:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <RemotoControlMapping+0x454>)
 800495a:	895b      	ldrh	r3, [r3, #10]
 800495c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8004960:	4293      	cmp	r3, r2
 8004962:	d919      	bls.n	8004998 <RemotoControlMapping+0x3e0>
	{
		RemoteYaw.Setpoint -= magno_bearing * LevelAdjustCoefficient;// kumanda hassasiyeti level adjust coefficient ayarlıyor
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <RemotoControlMapping+0x450>)
 8004966:	ed93 7a02 	vldr	s14, [r3, #8]
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <RemotoControlMapping+0x458>)
 800496c:	edd3 7a00 	vldr	s15, [r3]
 8004970:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8004974:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800497c:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <RemotoControlMapping+0x450>)
 800497e:	edc3 7a02 	vstr	s15, [r3, #8]
		RemoteYaw.Setpoint /= 2;
 8004982:	4b21      	ldr	r3, [pc, #132]	; (8004a08 <RemotoControlMapping+0x450>)
 8004984:	ed93 7a02 	vldr	s14, [r3, #8]
 8004988:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800498c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <RemotoControlMapping+0x450>)
 8004992:	edc3 7a02 	vstr	s15, [r3, #8]
 8004996:	e018      	b.n	80049ca <RemotoControlMapping+0x412>
	}
	else
	{
		RemoteYaw.Setpoint -= Ahrs_YAW * LevelAdjustCoefficient;// kumanda hassasiyeti level adjust coefficient ayarlıyor
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <RemotoControlMapping+0x450>)
 800499a:	ed93 7a02 	vldr	s14, [r3, #8]
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <RemotoControlMapping+0x45c>)
 80049a0:	edd3 7a00 	vldr	s15, [r3]
 80049a4:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 80049a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b0:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <RemotoControlMapping+0x450>)
 80049b2:	edc3 7a02 	vstr	s15, [r3, #8]
		RemoteYaw.Setpoint /= 2;
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <RemotoControlMapping+0x450>)
 80049b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80049bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80049c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <RemotoControlMapping+0x450>)
 80049c6:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	RemoteThrottle.Setpoint=MapFloat(RemoteThrottle.Raw, 1000, 2000, 0, 250);
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <RemotoControlMapping+0x460>)
 80049cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d8:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004a1c <RemotoControlMapping+0x464>
 80049dc:	eddf 1a10 	vldr	s3, [pc, #64]	; 8004a20 <RemotoControlMapping+0x468>
 80049e0:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8004a24 <RemotoControlMapping+0x46c>
 80049e4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004a28 <RemotoControlMapping+0x470>
 80049e8:	eeb0 0a67 	vmov.f32	s0, s15
 80049ec:	f001 fe34 	bl	8006658 <MapFloat>
 80049f0:	eef0 7a40 	vmov.f32	s15, s0
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <RemotoControlMapping+0x460>)
 80049f6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80049fa:	bf00      	nop
 80049fc:	bdb0      	pop	{r4, r5, r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2000174c 	.word	0x2000174c
 8004a04:	20001220 	.word	0x20001220
 8004a08:	200012f4 	.word	0x200012f4
 8004a0c:	20001468 	.word	0x20001468
 8004a10:	200017b8 	.word	0x200017b8
 8004a14:	20001498 	.word	0x20001498
 8004a18:	20000d50 	.word	0x20000d50
 8004a1c:	437a0000 	.word	0x437a0000
 8004a20:	00000000 	.word	0x00000000
 8004a24:	44fa0000 	.word	0x44fa0000
 8004a28:	447a0000 	.word	0x447a0000

08004a2c <PositionControl>:
void PositionControl(UBX_Handle *gpsDatas)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	if(Rc.Ch6 >1700)
 8004a34:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <PositionControl+0xd8>)
 8004a36:	895b      	ldrh	r3, [r3, #10]
 8004a38:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d912      	bls.n	8004a66 <PositionControl+0x3a>
	{
		if(PositionFlag==0) // bu flag ile gps moduna gectiğinde ilk konumu setpoint değerine atıyor bu sayede ilk positiona göre hata buluyoruz
 8004a40:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <PositionControl+0xdc>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <PositionControl+0x34>
		{
			RemoteRoll.TargetPosition  = gpsDatas->ubx_PVT.latitude ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <PositionControl+0xe0>)
 8004a52:	6113      	str	r3, [r2, #16]
			RemotePitch.TargetPosition = gpsDatas->ubx_PVT.longitude ;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <PositionControl+0xe4>)
 8004a5e:	6113      	str	r3, [r2, #16]
		}
		PositionFlag = 1;
 8004a60:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <PositionControl+0xdc>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
	}

	RemoteRoll.TargetPositionVelocity = constrain((RemoteRoll.TargetPosition - gpsDatas->ubx_PVT.latitude), 300, 300);
 8004a66:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <PositionControl+0xe0>)
 8004a68:	ed93 7a04 	vldr	s14, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8004a72:	edd3 7a00 	vldr	s15, [r3]
 8004a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a7a:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8004b14 <PositionControl+0xe8>
 8004a7e:	eddf 0a25 	vldr	s1, [pc, #148]	; 8004b14 <PositionControl+0xe8>
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	f001 fe15 	bl	80066b4 <constrain>
 8004a8a:	eef0 7a40 	vmov.f32	s15, s0
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <PositionControl+0xe0>)
 8004a90:	edc3 7a05 	vstr	s15, [r3, #20]
	RemoteRoll.TargetPositionVelocity*= PositionLevelCoefficient; // PositionLevelCoefficient P katsayısı
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <PositionControl+0xe0>)
 8004a96:	ed93 7a05 	vldr	s14, [r3, #20]
 8004a9a:	4b1f      	ldr	r3, [pc, #124]	; (8004b18 <PositionControl+0xec>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <PositionControl+0xe0>)
 8004aac:	edc3 7a05 	vstr	s15, [r3, #20]
	RemotePitch.TargetPositionVelocity = constrain((RemotePitch.TargetPosition - gpsDatas->ubx_PVT.latitude), 300, 300);
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <PositionControl+0xe4>)
 8004ab2:	ed93 7a04 	vldr	s14, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8004abc:	edd3 7a00 	vldr	s15, [r3]
 8004ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ac4:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8004b14 <PositionControl+0xe8>
 8004ac8:	eddf 0a12 	vldr	s1, [pc, #72]	; 8004b14 <PositionControl+0xe8>
 8004acc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad0:	f001 fdf0 	bl	80066b4 <constrain>
 8004ad4:	eef0 7a40 	vmov.f32	s15, s0
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <PositionControl+0xe4>)
 8004ada:	edc3 7a05 	vstr	s15, [r3, #20]
	RemotePitch.TargetPositionVelocity*= PositionLevelCoefficient; // PositionLevelCoefficient P katsayısı
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <PositionControl+0xe4>)
 8004ae0:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <PositionControl+0xec>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <PositionControl+0xe4>)
 8004af6:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20001468 	.word	0x20001468
 8004b08:	20000381 	.word	0x20000381
 8004b0c:	20001228 	.word	0x20001228
 8004b10:	2000174c 	.word	0x2000174c
 8004b14:	43960000 	.word	0x43960000
 8004b18:	20001560 	.word	0x20001560

08004b1c <SetMotorPWM>:
#include "GPS_UBX.h"

extern LIDAR_Handle LIDAR_Data;
extern uint8_t PositionFlag;
void SetMotorPWM(uint16_t SolArka,uint16_t SagArka,uint16_t SagOn,uint16_t SolOn)
{
 8004b1c:	b490      	push	{r4, r7}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	80fb      	strh	r3, [r7, #6]
 8004b2e:	4603      	mov	r3, r0
 8004b30:	80bb      	strh	r3, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	807b      	strh	r3, [r7, #2]
 8004b36:	4613      	mov	r3, r2
 8004b38:	803b      	strh	r3, [r7, #0]
	htim1.Instance->CCR1 = SagArka;
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <SetMotorPWM+0x48>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	88ba      	ldrh	r2, [r7, #4]
 8004b40:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = SagOn;
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <SetMotorPWM+0x48>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = SolOn;
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <SetMotorPWM+0x48>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	883a      	ldrh	r2, [r7, #0]
 8004b50:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = SolArka;
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <SetMotorPWM+0x48>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc90      	pop	{r4, r7}
 8004b62:	4770      	bx	lr
 8004b64:	20001500 	.word	0x20001500

08004b68 <Init_ESC>:
void Init_ESC()
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Dutymin);
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <Init_ESC+0x38>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,Dutymin);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <Init_ESC+0x38>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,Dutymin);
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <Init_ESC+0x38>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,Dutymin);
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <Init_ESC+0x38>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 8004b94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004b98:	f004 f9d4 	bl	8008f44 <HAL_Delay>
}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20001500 	.word	0x20001500
 8004ba4:	00000000 	.word	0x00000000

08004ba8 <MotorPowerCalculateWithRate>:
//	        vibration_sonuc=vibration_total_result / 50;                                   //Print the total accelerometer vector divided by 50 on the serial monitor.
//	        vibration_total_result = 0;                                                    //Reset the vibration_total_result variable.
//	      }
//}
void MotorPowerCalculateWithRate()
{
 8004ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bac:	af00      	add	r7, sp, #0

	Rollerror  = RemoteRoll.Setpoint  - Ahrs_ROLL;
 8004bae:	4bd3      	ldr	r3, [pc, #844]	; (8004efc <MotorPowerCalculateWithRate+0x354>)
 8004bb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bb4:	4bd2      	ldr	r3, [pc, #840]	; (8004f00 <MotorPowerCalculateWithRate+0x358>)
 8004bb6:	edd3 7a00 	vldr	s15, [r3]
 8004bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bbe:	4bd1      	ldr	r3, [pc, #836]	; (8004f04 <MotorPowerCalculateWithRate+0x35c>)
 8004bc0:	edc3 7a00 	vstr	s15, [r3]
	Pitcherror = RemotePitch.Setpoint - Ahrs_PITCH;
 8004bc4:	4bd0      	ldr	r3, [pc, #832]	; (8004f08 <MotorPowerCalculateWithRate+0x360>)
 8004bc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bca:	4bd0      	ldr	r3, [pc, #832]	; (8004f0c <MotorPowerCalculateWithRate+0x364>)
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd4:	4bce      	ldr	r3, [pc, #824]	; (8004f10 <MotorPowerCalculateWithRate+0x368>)
 8004bd6:	edc3 7a00 	vstr	s15, [r3]
	Yawerror   = RemoteYaw.Setpoint   - Ahrs_YAW;   // hesaplanacak sonra daha düzgün bir sekilde
 8004bda:	4bce      	ldr	r3, [pc, #824]	; (8004f14 <MotorPowerCalculateWithRate+0x36c>)
 8004bdc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004be0:	4bcd      	ldr	r3, [pc, #820]	; (8004f18 <MotorPowerCalculateWithRate+0x370>)
 8004be2:	edd3 7a00 	vldr	s15, [r3]
 8004be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bea:	4bcc      	ldr	r3, [pc, #816]	; (8004f1c <MotorPowerCalculateWithRate+0x374>)
 8004bec:	edc3 7a00 	vstr	s15, [r3]

//	RollControlSignal  	 = PID(RemoteRoll.Setpoint, Ahrs_ROLL,Roll.Kp, Roll.Ki, Roll.Kd, Roll.limMax, Roll.Elapsed_Time, &Roll.integrator, &Roll.prevError);
//	PitchControlSignal	 = PID(RemotePitch.Setpoint, Ahrs_PITCH,Pitch.Kp, Pitch.Ki, Pitch.Kd, Pitch.limMax, Pitch.Elapsed_Time, &Pitch.integrator, &Pitch.prevError);
//	YawControlSignal  	 = PID(RemoteYaw.Setpoint, Ahrs_YAW, Yaw.Kp, Yaw.Ki, Yaw.Kd, Yaw.limMax, Yaw.Elapsed_Time, &Yaw.integrator, &Yaw.prevError);

	if(Rc.Ch6>1100 && Rc.Ch6<=1400)
 8004bf0:	4bcb      	ldr	r3, [pc, #812]	; (8004f20 <MotorPowerCalculateWithRate+0x378>)
 8004bf2:	895b      	ldrh	r3, [r3, #10]
 8004bf4:	f240 424c 	movw	r2, #1100	; 0x44c
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	f240 80e7 	bls.w	8004dcc <MotorPowerCalculateWithRate+0x224>
 8004bfe:	4bc8      	ldr	r3, [pc, #800]	; (8004f20 <MotorPowerCalculateWithRate+0x378>)
 8004c00:	895b      	ldrh	r3, [r3, #10]
 8004c02:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004c06:	f200 80e1 	bhi.w	8004dcc <MotorPowerCalculateWithRate+0x224>
	{
		RollControlSignal  	 = PID2(&Roll,RemoteRoll.Setpoint, GyroRollFiltered.NotchFilterOut);
 8004c0a:	4bbc      	ldr	r3, [pc, #752]	; (8004efc <MotorPowerCalculateWithRate+0x354>)
 8004c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c10:	4bc4      	ldr	r3, [pc, #784]	; (8004f24 <MotorPowerCalculateWithRate+0x37c>)
 8004c12:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c16:	eef0 0a47 	vmov.f32	s1, s14
 8004c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c1e:	48c2      	ldr	r0, [pc, #776]	; (8004f28 <MotorPowerCalculateWithRate+0x380>)
 8004c20:	f000 fd04 	bl	800562c <PID2>
 8004c24:	eef0 7a40 	vmov.f32	s15, s0
 8004c28:	4bc0      	ldr	r3, [pc, #768]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004c2a:	edc3 7a00 	vstr	s15, [r3]
		PitchControlSignal 	 = PID2(&Pitch,RemotePitch.Setpoint, GyroPitchFiltered.NotchFilterOut);
 8004c2e:	4bb6      	ldr	r3, [pc, #728]	; (8004f08 <MotorPowerCalculateWithRate+0x360>)
 8004c30:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c34:	4bbe      	ldr	r3, [pc, #760]	; (8004f30 <MotorPowerCalculateWithRate+0x388>)
 8004c36:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c3a:	eef0 0a47 	vmov.f32	s1, s14
 8004c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c42:	48bc      	ldr	r0, [pc, #752]	; (8004f34 <MotorPowerCalculateWithRate+0x38c>)
 8004c44:	f000 fcf2 	bl	800562c <PID2>
 8004c48:	eef0 7a40 	vmov.f32	s15, s0
 8004c4c:	4bba      	ldr	r3, [pc, #744]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004c4e:	edc3 7a00 	vstr	s15, [r3]
		YawControlSignal  	 = PID2(&Yaw,RemoteYaw.Setpoint, GyroYawFiltered.NotchFilterOut);
 8004c52:	4bb0      	ldr	r3, [pc, #704]	; (8004f14 <MotorPowerCalculateWithRate+0x36c>)
 8004c54:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c58:	4bb8      	ldr	r3, [pc, #736]	; (8004f3c <MotorPowerCalculateWithRate+0x394>)
 8004c5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c5e:	eef0 0a47 	vmov.f32	s1, s14
 8004c62:	eeb0 0a67 	vmov.f32	s0, s15
 8004c66:	48b6      	ldr	r0, [pc, #728]	; (8004f40 <MotorPowerCalculateWithRate+0x398>)
 8004c68:	f000 fce0 	bl	800562c <PID2>
 8004c6c:	eef0 7a40 	vmov.f32	s15, s0
 8004c70:	4bb4      	ldr	r3, [pc, #720]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004c72:	edc3 7a00 	vstr	s15, [r3]
		PositionFlag=0;			// gps modunun konumunu sıfırlar bu sayede mod değiştirip gps geçtiginde ilk kalkıs konumunu almak için 0 landı
 8004c76:	4bb4      	ldr	r3, [pc, #720]	; (8004f48 <MotorPowerCalculateWithRate+0x3a0>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
		Motor.Sag_On           = round(RemoteThrottle.Raw  + RollControlSignal + PitchControlSignal - YawControlSignal );//round(Throttle_Kumanda + Roll_ControlSignal + Pitch_ControlSignal - Yaw_ControlSignal);
 8004c7c:	4bb3      	ldr	r3, [pc, #716]	; (8004f4c <MotorPowerCalculateWithRate+0x3a4>)
 8004c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c8a:	4ba8      	ldr	r3, [pc, #672]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004c8c:	edd3 7a00 	vldr	s15, [r3]
 8004c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c94:	4ba8      	ldr	r3, [pc, #672]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004c96:	edd3 7a00 	vldr	s15, [r3]
 8004c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c9e:	4ba9      	ldr	r3, [pc, #676]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004ca0:	edd3 7a00 	vldr	s15, [r3]
 8004ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca8:	ee17 0a90 	vmov	r0, s15
 8004cac:	f7fb fc4c 	bl	8000548 <__aeabi_f2d>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	ec43 2b10 	vmov	d0, r2, r3
 8004cb8:	f012 ffea 	bl	8017c90 <round>
 8004cbc:	ec53 2b10 	vmov	r2, r3, d0
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f7fb ff70 	bl	8000ba8 <__aeabi_d2uiz>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	4ba0      	ldr	r3, [pc, #640]	; (8004f50 <MotorPowerCalculateWithRate+0x3a8>)
 8004cce:	805a      	strh	r2, [r3, #2]
		Motor.Sag_Arka         = round(RemoteThrottle.Raw  + RollControlSignal - PitchControlSignal + YawControlSignal );
 8004cd0:	4b9e      	ldr	r3, [pc, #632]	; (8004f4c <MotorPowerCalculateWithRate+0x3a4>)
 8004cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cde:	4b93      	ldr	r3, [pc, #588]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004ce0:	edd3 7a00 	vldr	s15, [r3]
 8004ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce8:	4b93      	ldr	r3, [pc, #588]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004cea:	edd3 7a00 	vldr	s15, [r3]
 8004cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cf2:	4b94      	ldr	r3, [pc, #592]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004cf4:	edd3 7a00 	vldr	s15, [r3]
 8004cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfc:	ee17 0a90 	vmov	r0, s15
 8004d00:	f7fb fc22 	bl	8000548 <__aeabi_f2d>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	ec43 2b10 	vmov	d0, r2, r3
 8004d0c:	f012 ffc0 	bl	8017c90 <round>
 8004d10:	ec53 2b10 	vmov	r2, r3, d0
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	f7fb ff46 	bl	8000ba8 <__aeabi_d2uiz>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	4b8b      	ldr	r3, [pc, #556]	; (8004f50 <MotorPowerCalculateWithRate+0x3a8>)
 8004d22:	80da      	strh	r2, [r3, #6]
		Motor.Sol_On           = round(RemoteThrottle.Raw  - RollControlSignal + PitchControlSignal + YawControlSignal );
 8004d24:	4b89      	ldr	r3, [pc, #548]	; (8004f4c <MotorPowerCalculateWithRate+0x3a4>)
 8004d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d32:	4b7e      	ldr	r3, [pc, #504]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004d48:	edd3 7a00 	vldr	s15, [r3]
 8004d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d50:	ee17 0a90 	vmov	r0, s15
 8004d54:	f7fb fbf8 	bl	8000548 <__aeabi_f2d>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	ec43 2b10 	vmov	d0, r2, r3
 8004d60:	f012 ff96 	bl	8017c90 <round>
 8004d64:	ec53 2b10 	vmov	r2, r3, d0
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f7fb ff1c 	bl	8000ba8 <__aeabi_d2uiz>
 8004d70:	4603      	mov	r3, r0
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <MotorPowerCalculateWithRate+0x3a8>)
 8004d76:	801a      	strh	r2, [r3, #0]
		Motor.Sol_Arka         = round(RemoteThrottle.Raw  - RollControlSignal - PitchControlSignal - YawControlSignal );
 8004d78:	4b74      	ldr	r3, [pc, #464]	; (8004f4c <MotorPowerCalculateWithRate+0x3a4>)
 8004d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d86:	4b69      	ldr	r3, [pc, #420]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004d88:	edd3 7a00 	vldr	s15, [r3]
 8004d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d90:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d9a:	4b6a      	ldr	r3, [pc, #424]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004d9c:	edd3 7a00 	vldr	s15, [r3]
 8004da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da4:	ee17 0a90 	vmov	r0, s15
 8004da8:	f7fb fbce 	bl	8000548 <__aeabi_f2d>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	ec43 2b10 	vmov	d0, r2, r3
 8004db4:	f012 ff6c 	bl	8017c90 <round>
 8004db8:	ec53 2b10 	vmov	r2, r3, d0
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fb fef2 	bl	8000ba8 <__aeabi_d2uiz>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <MotorPowerCalculateWithRate+0x3a8>)
 8004dca:	809a      	strh	r2, [r3, #4]
	}

	if(Rc.Ch6>1400 && Rc.Ch6<=1700)//altitude mode
 8004dcc:	4b54      	ldr	r3, [pc, #336]	; (8004f20 <MotorPowerCalculateWithRate+0x378>)
 8004dce:	895b      	ldrh	r3, [r3, #10]
 8004dd0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004dd4:	f240 8131 	bls.w	800503a <MotorPowerCalculateWithRate+0x492>
 8004dd8:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <MotorPowerCalculateWithRate+0x378>)
 8004dda:	895b      	ldrh	r3, [r3, #10]
 8004ddc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8004de0:	4293      	cmp	r3, r2
 8004de2:	f200 812a 	bhi.w	800503a <MotorPowerCalculateWithRate+0x492>
	{
		RollControlSignal  	 = PID2(&Roll,RemoteRoll.Setpoint , GyroRollFiltered.NotchFilterOut);
 8004de6:	4b45      	ldr	r3, [pc, #276]	; (8004efc <MotorPowerCalculateWithRate+0x354>)
 8004de8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dec:	4b4d      	ldr	r3, [pc, #308]	; (8004f24 <MotorPowerCalculateWithRate+0x37c>)
 8004dee:	ed93 7a05 	vldr	s14, [r3, #20]
 8004df2:	eef0 0a47 	vmov.f32	s1, s14
 8004df6:	eeb0 0a67 	vmov.f32	s0, s15
 8004dfa:	484b      	ldr	r0, [pc, #300]	; (8004f28 <MotorPowerCalculateWithRate+0x380>)
 8004dfc:	f000 fc16 	bl	800562c <PID2>
 8004e00:	eef0 7a40 	vmov.f32	s15, s0
 8004e04:	4b49      	ldr	r3, [pc, #292]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004e06:	edc3 7a00 	vstr	s15, [r3]
		PitchControlSignal 	 = PID2(&Pitch,RemotePitch.Setpoint, GyroPitchFiltered.NotchFilterOut);
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <MotorPowerCalculateWithRate+0x360>)
 8004e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e10:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <MotorPowerCalculateWithRate+0x388>)
 8004e12:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e16:	eef0 0a47 	vmov.f32	s1, s14
 8004e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1e:	4845      	ldr	r0, [pc, #276]	; (8004f34 <MotorPowerCalculateWithRate+0x38c>)
 8004e20:	f000 fc04 	bl	800562c <PID2>
 8004e24:	eef0 7a40 	vmov.f32	s15, s0
 8004e28:	4b43      	ldr	r3, [pc, #268]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004e2a:	edc3 7a00 	vstr	s15, [r3]
		YawControlSignal  	 = PID2(&Yaw,RemoteYaw.Setpoint, GyroYawFiltered.NotchFilterOut);
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <MotorPowerCalculateWithRate+0x36c>)
 8004e30:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <MotorPowerCalculateWithRate+0x394>)
 8004e36:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e3a:	eef0 0a47 	vmov.f32	s1, s14
 8004e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e42:	483f      	ldr	r0, [pc, #252]	; (8004f40 <MotorPowerCalculateWithRate+0x398>)
 8004e44:	f000 fbf2 	bl	800562c <PID2>
 8004e48:	eef0 7a40 	vmov.f32	s15, s0
 8004e4c:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004e4e:	edc3 7a00 	vstr	s15, [r3]

		Voltage_Loss_Prevention = 0;
 8004e52:	4b40      	ldr	r3, [pc, #256]	; (8004f54 <MotorPowerCalculateWithRate+0x3ac>)
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
		Motor.Sag_On           = round(1360 + AltitudeControlSignal  + RollControlSignal + PitchControlSignal - YawControlSignal + Voltage_Loss_Prevention);//round(Throttle_Kumanda + Roll_ControlSignal + Pitch_ControlSignal - Yaw_ControlSignal);
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <MotorPowerCalculateWithRate+0x3b0>)
 8004e5c:	edd3 7a00 	vldr	s15, [r3]
 8004e60:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004f5c <MotorPowerCalculateWithRate+0x3b4>
 8004e64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e68:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004e6a:	edd3 7a00 	vldr	s15, [r3]
 8004e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004e74:	edd3 7a00 	vldr	s15, [r3]
 8004e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e7c:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004e7e:	edd3 7a00 	vldr	s15, [r3]
 8004e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e86:	4b33      	ldr	r3, [pc, #204]	; (8004f54 <MotorPowerCalculateWithRate+0x3ac>)
 8004e88:	edd3 7a00 	vldr	s15, [r3]
 8004e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e90:	ee17 0a90 	vmov	r0, s15
 8004e94:	f7fb fb58 	bl	8000548 <__aeabi_f2d>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	ec43 2b10 	vmov	d0, r2, r3
 8004ea0:	f012 fef6 	bl	8017c90 <round>
 8004ea4:	ec53 2b10 	vmov	r2, r3, d0
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7fb fe7c 	bl	8000ba8 <__aeabi_d2uiz>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <MotorPowerCalculateWithRate+0x3a8>)
 8004eb6:	805a      	strh	r2, [r3, #2]
		Motor.Sag_Arka         = round(1360 + AltitudeControlSignal  + RollControlSignal - PitchControlSignal + YawControlSignal + Voltage_Loss_Prevention);
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <MotorPowerCalculateWithRate+0x3b0>)
 8004eba:	edd3 7a00 	vldr	s15, [r3]
 8004ebe:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004f5c <MotorPowerCalculateWithRate+0x3b4>
 8004ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <MotorPowerCalculateWithRate+0x384>)
 8004ec8:	edd3 7a00 	vldr	s15, [r3]
 8004ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <MotorPowerCalculateWithRate+0x390>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004eda:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <MotorPowerCalculateWithRate+0x39c>)
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <MotorPowerCalculateWithRate+0x3ac>)
 8004ee6:	edd3 7a00 	vldr	s15, [r3]
 8004eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eee:	ee17 0a90 	vmov	r0, s15
 8004ef2:	f7fb fb29 	bl	8000548 <__aeabi_f2d>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	e032      	b.n	8004f60 <MotorPowerCalculateWithRate+0x3b8>
 8004efa:	bf00      	nop
 8004efc:	20001228 	.word	0x20001228
 8004f00:	20000c40 	.word	0x20000c40
 8004f04:	20000d40 	.word	0x20000d40
 8004f08:	2000174c 	.word	0x2000174c
 8004f0c:	20001220 	.word	0x20001220
 8004f10:	20000fe4 	.word	0x20000fe4
 8004f14:	200012f4 	.word	0x200012f4
 8004f18:	20001498 	.word	0x20001498
 8004f1c:	20001550 	.word	0x20001550
 8004f20:	20001468 	.word	0x20001468
 8004f24:	200010f4 	.word	0x200010f4
 8004f28:	20001268 	.word	0x20001268
 8004f2c:	2000176c 	.word	0x2000176c
 8004f30:	20000c80 	.word	0x20000c80
 8004f34:	20001774 	.word	0x20001774
 8004f38:	20000d4c 	.word	0x20000d4c
 8004f3c:	2000130c 	.word	0x2000130c
 8004f40:	20000c44 	.word	0x20000c44
 8004f44:	20001258 	.word	0x20001258
 8004f48:	20000381 	.word	0x20000381
 8004f4c:	20000d50 	.word	0x20000d50
 8004f50:	20001620 	.word	0x20001620
 8004f54:	20001440 	.word	0x20001440
 8004f58:	20001488 	.word	0x20001488
 8004f5c:	44aa0000 	.word	0x44aa0000
 8004f60:	460b      	mov	r3, r1
 8004f62:	ec43 2b10 	vmov	d0, r2, r3
 8004f66:	f012 fe93 	bl	8017c90 <round>
 8004f6a:	ec53 2b10 	vmov	r2, r3, d0
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	f7fb fe19 	bl	8000ba8 <__aeabi_d2uiz>
 8004f76:	4603      	mov	r3, r0
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	4bd7      	ldr	r3, [pc, #860]	; (80052d8 <MotorPowerCalculateWithRate+0x730>)
 8004f7c:	80da      	strh	r2, [r3, #6]
		Motor.Sol_On           = round(1360 + AltitudeControlSignal  - RollControlSignal + PitchControlSignal + YawControlSignal + Voltage_Loss_Prevention);
 8004f7e:	4bd7      	ldr	r3, [pc, #860]	; (80052dc <MotorPowerCalculateWithRate+0x734>)
 8004f80:	edd3 7a00 	vldr	s15, [r3]
 8004f84:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 80052e0 <MotorPowerCalculateWithRate+0x738>
 8004f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8c:	4bd5      	ldr	r3, [pc, #852]	; (80052e4 <MotorPowerCalculateWithRate+0x73c>)
 8004f8e:	edd3 7a00 	vldr	s15, [r3]
 8004f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f96:	4bd4      	ldr	r3, [pc, #848]	; (80052e8 <MotorPowerCalculateWithRate+0x740>)
 8004f98:	edd3 7a00 	vldr	s15, [r3]
 8004f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fa0:	4bd2      	ldr	r3, [pc, #840]	; (80052ec <MotorPowerCalculateWithRate+0x744>)
 8004fa2:	edd3 7a00 	vldr	s15, [r3]
 8004fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004faa:	4bd1      	ldr	r3, [pc, #836]	; (80052f0 <MotorPowerCalculateWithRate+0x748>)
 8004fac:	edd3 7a00 	vldr	s15, [r3]
 8004fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fb4:	ee17 0a90 	vmov	r0, s15
 8004fb8:	f7fb fac6 	bl	8000548 <__aeabi_f2d>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	ec43 2b10 	vmov	d0, r2, r3
 8004fc4:	f012 fe64 	bl	8017c90 <round>
 8004fc8:	ec53 2b10 	vmov	r2, r3, d0
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fb fdea 	bl	8000ba8 <__aeabi_d2uiz>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	4bbf      	ldr	r3, [pc, #764]	; (80052d8 <MotorPowerCalculateWithRate+0x730>)
 8004fda:	801a      	strh	r2, [r3, #0]
		Motor.Sol_Arka         = round(1360 + AltitudeControlSignal  - RollControlSignal - PitchControlSignal - YawControlSignal + Voltage_Loss_Prevention);
 8004fdc:	4bbf      	ldr	r3, [pc, #764]	; (80052dc <MotorPowerCalculateWithRate+0x734>)
 8004fde:	edd3 7a00 	vldr	s15, [r3]
 8004fe2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80052e0 <MotorPowerCalculateWithRate+0x738>
 8004fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fea:	4bbe      	ldr	r3, [pc, #760]	; (80052e4 <MotorPowerCalculateWithRate+0x73c>)
 8004fec:	edd3 7a00 	vldr	s15, [r3]
 8004ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ff4:	4bbc      	ldr	r3, [pc, #752]	; (80052e8 <MotorPowerCalculateWithRate+0x740>)
 8004ff6:	edd3 7a00 	vldr	s15, [r3]
 8004ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ffe:	4bbb      	ldr	r3, [pc, #748]	; (80052ec <MotorPowerCalculateWithRate+0x744>)
 8005000:	edd3 7a00 	vldr	s15, [r3]
 8005004:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005008:	4bb9      	ldr	r3, [pc, #740]	; (80052f0 <MotorPowerCalculateWithRate+0x748>)
 800500a:	edd3 7a00 	vldr	s15, [r3]
 800500e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005012:	ee17 0a90 	vmov	r0, s15
 8005016:	f7fb fa97 	bl	8000548 <__aeabi_f2d>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	ec43 2b10 	vmov	d0, r2, r3
 8005022:	f012 fe35 	bl	8017c90 <round>
 8005026:	ec53 2b10 	vmov	r2, r3, d0
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f7fb fdbb 	bl	8000ba8 <__aeabi_d2uiz>
 8005032:	4603      	mov	r3, r0
 8005034:	b29a      	uxth	r2, r3
 8005036:	4ba8      	ldr	r3, [pc, #672]	; (80052d8 <MotorPowerCalculateWithRate+0x730>)
 8005038:	809a      	strh	r2, [r3, #4]
	}

	if(Rc.Ch6>1700 )			   // Position mode
 800503a:	4bae      	ldr	r3, [pc, #696]	; (80052f4 <MotorPowerCalculateWithRate+0x74c>)
 800503c:	895b      	ldrh	r3, [r3, #10]
 800503e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8005042:	4293      	cmp	r3, r2
 8005044:	f240 81dc 	bls.w	8005400 <MotorPowerCalculateWithRate+0x858>
	{

		RollPositionControlNorth = ((float)RollPositionControl * cos(Ahrs_YAW * 0.017453)) + ((float)PitchPositionControl * cos((Ahrs_YAW - 90) * 0.017453));// ahrs Yawda manyotometre olacak
 8005048:	4bab      	ldr	r3, [pc, #684]	; (80052f8 <MotorPowerCalculateWithRate+0x750>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fa7b 	bl	8000548 <__aeabi_f2d>
 8005052:	4604      	mov	r4, r0
 8005054:	460d      	mov	r5, r1
 8005056:	4ba9      	ldr	r3, [pc, #676]	; (80052fc <MotorPowerCalculateWithRate+0x754>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb fa74 	bl	8000548 <__aeabi_f2d>
 8005060:	a39b      	add	r3, pc, #620	; (adr r3, 80052d0 <MotorPowerCalculateWithRate+0x728>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb fac7 	bl	80005f8 <__aeabi_dmul>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	ec43 2b17 	vmov	d7, r2, r3
 8005072:	eeb0 0a47 	vmov.f32	s0, s14
 8005076:	eef0 0a67 	vmov.f32	s1, s15
 800507a:	f012 fdb9 	bl	8017bf0 <cos>
 800507e:	ec53 2b10 	vmov	r2, r3, d0
 8005082:	4620      	mov	r0, r4
 8005084:	4629      	mov	r1, r5
 8005086:	f7fb fab7 	bl	80005f8 <__aeabi_dmul>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4690      	mov	r8, r2
 8005090:	4699      	mov	r9, r3
 8005092:	4b9b      	ldr	r3, [pc, #620]	; (8005300 <MotorPowerCalculateWithRate+0x758>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb fa56 	bl	8000548 <__aeabi_f2d>
 800509c:	4604      	mov	r4, r0
 800509e:	460d      	mov	r5, r1
 80050a0:	4b96      	ldr	r3, [pc, #600]	; (80052fc <MotorPowerCalculateWithRate+0x754>)
 80050a2:	edd3 7a00 	vldr	s15, [r3]
 80050a6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8005304 <MotorPowerCalculateWithRate+0x75c>
 80050aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050ae:	ee17 0a90 	vmov	r0, s15
 80050b2:	f7fb fa49 	bl	8000548 <__aeabi_f2d>
 80050b6:	a386      	add	r3, pc, #536	; (adr r3, 80052d0 <MotorPowerCalculateWithRate+0x728>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fa9c 	bl	80005f8 <__aeabi_dmul>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	ec43 2b17 	vmov	d7, r2, r3
 80050c8:	eeb0 0a47 	vmov.f32	s0, s14
 80050cc:	eef0 0a67 	vmov.f32	s1, s15
 80050d0:	f012 fd8e 	bl	8017bf0 <cos>
 80050d4:	ec53 2b10 	vmov	r2, r3, d0
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb fa8c 	bl	80005f8 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb f8d0 	bl	800028c <__adddf3>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	f7fb fd78 	bl	8000be8 <__aeabi_d2f>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a83      	ldr	r2, [pc, #524]	; (8005308 <MotorPowerCalculateWithRate+0x760>)
 80050fc:	6013      	str	r3, [r2, #0]
		PitchPositionControlNorth=((float)PitchPositionControl * cos(Ahrs_YAW * 0.017453)) + ((float)RollPositionControl * cos((Ahrs_YAW + 90) * 0.017453));
 80050fe:	4b80      	ldr	r3, [pc, #512]	; (8005300 <MotorPowerCalculateWithRate+0x758>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb fa20 	bl	8000548 <__aeabi_f2d>
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
 800510c:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <MotorPowerCalculateWithRate+0x754>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb fa19 	bl	8000548 <__aeabi_f2d>
 8005116:	a36e      	add	r3, pc, #440	; (adr r3, 80052d0 <MotorPowerCalculateWithRate+0x728>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fa6c 	bl	80005f8 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	ec43 2b17 	vmov	d7, r2, r3
 8005128:	eeb0 0a47 	vmov.f32	s0, s14
 800512c:	eef0 0a67 	vmov.f32	s1, s15
 8005130:	f012 fd5e 	bl	8017bf0 <cos>
 8005134:	ec53 2b10 	vmov	r2, r3, d0
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb fa5c 	bl	80005f8 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4690      	mov	r8, r2
 8005146:	4699      	mov	r9, r3
 8005148:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <MotorPowerCalculateWithRate+0x750>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb f9fb 	bl	8000548 <__aeabi_f2d>
 8005152:	4604      	mov	r4, r0
 8005154:	460d      	mov	r5, r1
 8005156:	4b69      	ldr	r3, [pc, #420]	; (80052fc <MotorPowerCalculateWithRate+0x754>)
 8005158:	edd3 7a00 	vldr	s15, [r3]
 800515c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8005304 <MotorPowerCalculateWithRate+0x75c>
 8005160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005164:	ee17 0a90 	vmov	r0, s15
 8005168:	f7fb f9ee 	bl	8000548 <__aeabi_f2d>
 800516c:	a358      	add	r3, pc, #352	; (adr r3, 80052d0 <MotorPowerCalculateWithRate+0x728>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f7fb fa41 	bl	80005f8 <__aeabi_dmul>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	ec43 2b17 	vmov	d7, r2, r3
 800517e:	eeb0 0a47 	vmov.f32	s0, s14
 8005182:	eef0 0a67 	vmov.f32	s1, s15
 8005186:	f012 fd33 	bl	8017bf0 <cos>
 800518a:	ec53 2b10 	vmov	r2, r3, d0
 800518e:	4620      	mov	r0, r4
 8005190:	4629      	mov	r1, r5
 8005192:	f7fb fa31 	bl	80005f8 <__aeabi_dmul>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4640      	mov	r0, r8
 800519c:	4649      	mov	r1, r9
 800519e:	f7fb f875 	bl	800028c <__adddf3>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	f7fb fd1d 	bl	8000be8 <__aeabi_d2f>
 80051ae:	4603      	mov	r3, r0
 80051b0:	4a56      	ldr	r2, [pc, #344]	; (800530c <MotorPowerCalculateWithRate+0x764>)
 80051b2:	6013      	str	r3, [r2, #0]

		RollControlSignal  	 = PID2(&Roll,RollPositionControlNorth, GyroRollFiltered.NotchFilterOut);
 80051b4:	4b54      	ldr	r3, [pc, #336]	; (8005308 <MotorPowerCalculateWithRate+0x760>)
 80051b6:	edd3 7a00 	vldr	s15, [r3]
 80051ba:	4b55      	ldr	r3, [pc, #340]	; (8005310 <MotorPowerCalculateWithRate+0x768>)
 80051bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80051c0:	eef0 0a47 	vmov.f32	s1, s14
 80051c4:	eeb0 0a67 	vmov.f32	s0, s15
 80051c8:	4852      	ldr	r0, [pc, #328]	; (8005314 <MotorPowerCalculateWithRate+0x76c>)
 80051ca:	f000 fa2f 	bl	800562c <PID2>
 80051ce:	eef0 7a40 	vmov.f32	s15, s0
 80051d2:	4b44      	ldr	r3, [pc, #272]	; (80052e4 <MotorPowerCalculateWithRate+0x73c>)
 80051d4:	edc3 7a00 	vstr	s15, [r3]
		PitchControlSignal 	 = PID2(&Pitch,PitchPositionControlNorth, GyroPitchFiltered.NotchFilterOut);
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <MotorPowerCalculateWithRate+0x764>)
 80051da:	edd3 7a00 	vldr	s15, [r3]
 80051de:	4b4e      	ldr	r3, [pc, #312]	; (8005318 <MotorPowerCalculateWithRate+0x770>)
 80051e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80051e4:	eef0 0a47 	vmov.f32	s1, s14
 80051e8:	eeb0 0a67 	vmov.f32	s0, s15
 80051ec:	484b      	ldr	r0, [pc, #300]	; (800531c <MotorPowerCalculateWithRate+0x774>)
 80051ee:	f000 fa1d 	bl	800562c <PID2>
 80051f2:	eef0 7a40 	vmov.f32	s15, s0
 80051f6:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <MotorPowerCalculateWithRate+0x740>)
 80051f8:	edc3 7a00 	vstr	s15, [r3]
		YawControlSignal  	 = PID2(&Yaw,RemoteYaw.Setpoint, GyroYawFiltered.NotchFilterOut);
 80051fc:	4b48      	ldr	r3, [pc, #288]	; (8005320 <MotorPowerCalculateWithRate+0x778>)
 80051fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005202:	4b48      	ldr	r3, [pc, #288]	; (8005324 <MotorPowerCalculateWithRate+0x77c>)
 8005204:	ed93 7a05 	vldr	s14, [r3, #20]
 8005208:	eef0 0a47 	vmov.f32	s1, s14
 800520c:	eeb0 0a67 	vmov.f32	s0, s15
 8005210:	4845      	ldr	r0, [pc, #276]	; (8005328 <MotorPowerCalculateWithRate+0x780>)
 8005212:	f000 fa0b 	bl	800562c <PID2>
 8005216:	eef0 7a40 	vmov.f32	s15, s0
 800521a:	4b34      	ldr	r3, [pc, #208]	; (80052ec <MotorPowerCalculateWithRate+0x744>)
 800521c:	edc3 7a00 	vstr	s15, [r3]

//		Voltage_Loss_Prevention = (BatteryMaxVoltage - Battery.Voltage)*battery_compensation;
		Voltage_Loss_Prevention=0;
 8005220:	4b33      	ldr	r3, [pc, #204]	; (80052f0 <MotorPowerCalculateWithRate+0x748>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
		Motor.Sag_On           = round(1360 + AltitudeControlSignal  + RollControlSignal + PitchControlSignal - YawControlSignal + Voltage_Loss_Prevention);//round(Throttle_Kumanda + Roll_ControlSignal + Pitch_ControlSignal - Yaw_ControlSignal);
 8005228:	4b2c      	ldr	r3, [pc, #176]	; (80052dc <MotorPowerCalculateWithRate+0x734>)
 800522a:	edd3 7a00 	vldr	s15, [r3]
 800522e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80052e0 <MotorPowerCalculateWithRate+0x738>
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <MotorPowerCalculateWithRate+0x73c>)
 8005238:	edd3 7a00 	vldr	s15, [r3]
 800523c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005240:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <MotorPowerCalculateWithRate+0x740>)
 8005242:	edd3 7a00 	vldr	s15, [r3]
 8005246:	ee37 7a27 	vadd.f32	s14, s14, s15
 800524a:	4b28      	ldr	r3, [pc, #160]	; (80052ec <MotorPowerCalculateWithRate+0x744>)
 800524c:	edd3 7a00 	vldr	s15, [r3]
 8005250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005254:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <MotorPowerCalculateWithRate+0x748>)
 8005256:	edd3 7a00 	vldr	s15, [r3]
 800525a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800525e:	ee17 0a90 	vmov	r0, s15
 8005262:	f7fb f971 	bl	8000548 <__aeabi_f2d>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	ec43 2b10 	vmov	d0, r2, r3
 800526e:	f012 fd0f 	bl	8017c90 <round>
 8005272:	ec53 2b10 	vmov	r2, r3, d0
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	f7fb fc95 	bl	8000ba8 <__aeabi_d2uiz>
 800527e:	4603      	mov	r3, r0
 8005280:	b29a      	uxth	r2, r3
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <MotorPowerCalculateWithRate+0x730>)
 8005284:	805a      	strh	r2, [r3, #2]
		Motor.Sag_Arka         = round(1360 + AltitudeControlSignal  + RollControlSignal - PitchControlSignal + YawControlSignal + Voltage_Loss_Prevention);
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <MotorPowerCalculateWithRate+0x734>)
 8005288:	edd3 7a00 	vldr	s15, [r3]
 800528c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80052e0 <MotorPowerCalculateWithRate+0x738>
 8005290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005294:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <MotorPowerCalculateWithRate+0x73c>)
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <MotorPowerCalculateWithRate+0x740>)
 80052a0:	edd3 7a00 	vldr	s15, [r3]
 80052a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <MotorPowerCalculateWithRate+0x744>)
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <MotorPowerCalculateWithRate+0x748>)
 80052b4:	edd3 7a00 	vldr	s15, [r3]
 80052b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052bc:	ee17 0a90 	vmov	r0, s15
 80052c0:	f7fb f942 	bl	8000548 <__aeabi_f2d>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	ec43 2b10 	vmov	d0, r2, r3
 80052cc:	e02e      	b.n	800532c <MotorPowerCalculateWithRate+0x784>
 80052ce:	bf00      	nop
 80052d0:	00de4c51 	.word	0x00de4c51
 80052d4:	3f91df33 	.word	0x3f91df33
 80052d8:	20001620 	.word	0x20001620
 80052dc:	20001488 	.word	0x20001488
 80052e0:	44aa0000 	.word	0x44aa0000
 80052e4:	2000176c 	.word	0x2000176c
 80052e8:	20000d4c 	.word	0x20000d4c
 80052ec:	20001258 	.word	0x20001258
 80052f0:	20001440 	.word	0x20001440
 80052f4:	20001468 	.word	0x20001468
 80052f8:	20001748 	.word	0x20001748
 80052fc:	20001498 	.word	0x20001498
 8005300:	20001618 	.word	0x20001618
 8005304:	42b40000 	.word	0x42b40000
 8005308:	20001698 	.word	0x20001698
 800530c:	20001224 	.word	0x20001224
 8005310:	200010f4 	.word	0x200010f4
 8005314:	20001268 	.word	0x20001268
 8005318:	20000c80 	.word	0x20000c80
 800531c:	20001774 	.word	0x20001774
 8005320:	200012f4 	.word	0x200012f4
 8005324:	2000130c 	.word	0x2000130c
 8005328:	20000c44 	.word	0x20000c44
 800532c:	f012 fcb0 	bl	8017c90 <round>
 8005330:	ec53 2b10 	vmov	r2, r3, d0
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	f7fb fc36 	bl	8000ba8 <__aeabi_d2uiz>
 800533c:	4603      	mov	r3, r0
 800533e:	b29a      	uxth	r2, r3
 8005340:	4b5f      	ldr	r3, [pc, #380]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 8005342:	80da      	strh	r2, [r3, #6]
		Motor.Sol_On           = round(1360 + AltitudeControlSignal  - RollControlSignal + PitchControlSignal + YawControlSignal + Voltage_Loss_Prevention);
 8005344:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <MotorPowerCalculateWithRate+0x91c>)
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80054c8 <MotorPowerCalculateWithRate+0x920>
 800534e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005352:	4b5e      	ldr	r3, [pc, #376]	; (80054cc <MotorPowerCalculateWithRate+0x924>)
 8005354:	edd3 7a00 	vldr	s15, [r3]
 8005358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800535c:	4b5c      	ldr	r3, [pc, #368]	; (80054d0 <MotorPowerCalculateWithRate+0x928>)
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005366:	4b5b      	ldr	r3, [pc, #364]	; (80054d4 <MotorPowerCalculateWithRate+0x92c>)
 8005368:	edd3 7a00 	vldr	s15, [r3]
 800536c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005370:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <MotorPowerCalculateWithRate+0x930>)
 8005372:	edd3 7a00 	vldr	s15, [r3]
 8005376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537a:	ee17 0a90 	vmov	r0, s15
 800537e:	f7fb f8e3 	bl	8000548 <__aeabi_f2d>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	ec43 2b10 	vmov	d0, r2, r3
 800538a:	f012 fc81 	bl	8017c90 <round>
 800538e:	ec53 2b10 	vmov	r2, r3, d0
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f7fb fc07 	bl	8000ba8 <__aeabi_d2uiz>
 800539a:	4603      	mov	r3, r0
 800539c:	b29a      	uxth	r2, r3
 800539e:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 80053a0:	801a      	strh	r2, [r3, #0]
		Motor.Sol_Arka         = round(1360 + AltitudeControlSignal  - RollControlSignal - PitchControlSignal - YawControlSignal + Voltage_Loss_Prevention);
 80053a2:	4b48      	ldr	r3, [pc, #288]	; (80054c4 <MotorPowerCalculateWithRate+0x91c>)
 80053a4:	edd3 7a00 	vldr	s15, [r3]
 80053a8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80054c8 <MotorPowerCalculateWithRate+0x920>
 80053ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b0:	4b46      	ldr	r3, [pc, #280]	; (80054cc <MotorPowerCalculateWithRate+0x924>)
 80053b2:	edd3 7a00 	vldr	s15, [r3]
 80053b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053ba:	4b45      	ldr	r3, [pc, #276]	; (80054d0 <MotorPowerCalculateWithRate+0x928>)
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053c4:	4b43      	ldr	r3, [pc, #268]	; (80054d4 <MotorPowerCalculateWithRate+0x92c>)
 80053c6:	edd3 7a00 	vldr	s15, [r3]
 80053ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053ce:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <MotorPowerCalculateWithRate+0x930>)
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d8:	ee17 0a90 	vmov	r0, s15
 80053dc:	f7fb f8b4 	bl	8000548 <__aeabi_f2d>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	ec43 2b10 	vmov	d0, r2, r3
 80053e8:	f012 fc52 	bl	8017c90 <round>
 80053ec:	ec53 2b10 	vmov	r2, r3, d0
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7fb fbd8 	bl	8000ba8 <__aeabi_d2uiz>
 80053f8:	4603      	mov	r3, r0
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 80053fe:	809a      	strh	r2, [r3, #4]
	}

	Motor.Sag_On           = constrain(Motor.Sag_On,   MotorMinThrottle, MotorMaxThrottle) ;
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 8005402:	885b      	ldrh	r3, [r3, #2]
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80054dc <MotorPowerCalculateWithRate+0x934>
 8005410:	eddf 0a33 	vldr	s1, [pc, #204]	; 80054e0 <MotorPowerCalculateWithRate+0x938>
 8005414:	eeb0 0a67 	vmov.f32	s0, s15
 8005418:	f001 f94c 	bl	80066b4 <constrain>
 800541c:	eef0 7a40 	vmov.f32	s15, s0
 8005420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005424:	ee17 3a90 	vmov	r3, s15
 8005428:	b29a      	uxth	r2, r3
 800542a:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 800542c:	805a      	strh	r2, [r3, #2]
	Motor.Sag_Arka         = constrain(Motor.Sag_Arka, MotorMinThrottle, MotorMaxThrottle) ;
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 8005430:	88db      	ldrh	r3, [r3, #6]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80054dc <MotorPowerCalculateWithRate+0x934>
 800543e:	eddf 0a28 	vldr	s1, [pc, #160]	; 80054e0 <MotorPowerCalculateWithRate+0x938>
 8005442:	eeb0 0a67 	vmov.f32	s0, s15
 8005446:	f001 f935 	bl	80066b4 <constrain>
 800544a:	eef0 7a40 	vmov.f32	s15, s0
 800544e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005452:	ee17 3a90 	vmov	r3, s15
 8005456:	b29a      	uxth	r2, r3
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 800545a:	80da      	strh	r2, [r3, #6]
	Motor.Sol_On           = constrain(Motor.Sol_On,   MotorMinThrottle, MotorMaxThrottle) ;
 800545c:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005468:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80054dc <MotorPowerCalculateWithRate+0x934>
 800546c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80054e0 <MotorPowerCalculateWithRate+0x938>
 8005470:	eeb0 0a67 	vmov.f32	s0, s15
 8005474:	f001 f91e 	bl	80066b4 <constrain>
 8005478:	eef0 7a40 	vmov.f32	s15, s0
 800547c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005480:	ee17 3a90 	vmov	r3, s15
 8005484:	b29a      	uxth	r2, r3
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 8005488:	801a      	strh	r2, [r3, #0]
	Motor.Sol_Arka         = constrain(Motor.Sol_Arka, MotorMinThrottle, MotorMaxThrottle) ;
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 800548c:	889b      	ldrh	r3, [r3, #4]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80054dc <MotorPowerCalculateWithRate+0x934>
 800549a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80054e0 <MotorPowerCalculateWithRate+0x938>
 800549e:	eeb0 0a67 	vmov.f32	s0, s15
 80054a2:	f001 f907 	bl	80066b4 <constrain>
 80054a6:	eef0 7a40 	vmov.f32	s15, s0
 80054aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ae:	ee17 3a90 	vmov	r3, s15
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	4b02      	ldr	r3, [pc, #8]	; (80054c0 <MotorPowerCalculateWithRate+0x918>)
 80054b6:	809a      	strh	r2, [r3, #4]
}
 80054b8:	bf00      	nop
 80054ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054be:	bf00      	nop
 80054c0:	20001620 	.word	0x20001620
 80054c4:	20001488 	.word	0x20001488
 80054c8:	44aa0000 	.word	0x44aa0000
 80054cc:	2000176c 	.word	0x2000176c
 80054d0:	20000d4c 	.word	0x20000d4c
 80054d4:	20001258 	.word	0x20001258
 80054d8:	20001440 	.word	0x20001440
 80054dc:	44ed8000 	.word	0x44ed8000
 80054e0:	447a0000 	.word	0x447a0000

080054e4 <MotorPowerCalculateWithAltitude>:
void MotorPowerCalculateWithAltitude()
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
	Rollerror  = RemoteRoll.Setpoint  - Ahrs_ROLL;
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <MotorPowerCalculateWithAltitude+0x90>)
 80054ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80054ee:	4b22      	ldr	r3, [pc, #136]	; (8005578 <MotorPowerCalculateWithAltitude+0x94>)
 80054f0:	edd3 7a00 	vldr	s15, [r3]
 80054f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054f8:	4b20      	ldr	r3, [pc, #128]	; (800557c <MotorPowerCalculateWithAltitude+0x98>)
 80054fa:	edc3 7a00 	vstr	s15, [r3]
	Pitcherror = RemotePitch.Setpoint - Ahrs_PITCH;
 80054fe:	4b20      	ldr	r3, [pc, #128]	; (8005580 <MotorPowerCalculateWithAltitude+0x9c>)
 8005500:	ed93 7a02 	vldr	s14, [r3, #8]
 8005504:	4b1f      	ldr	r3, [pc, #124]	; (8005584 <MotorPowerCalculateWithAltitude+0xa0>)
 8005506:	edd3 7a00 	vldr	s15, [r3]
 800550a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800550e:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <MotorPowerCalculateWithAltitude+0xa4>)
 8005510:	edc3 7a00 	vstr	s15, [r3]
	Yawerror   = RemoteYaw.Setpoint   - Ahrs_YAW;   // hesaplanacak sonra daha düzgün bir sekilde
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <MotorPowerCalculateWithAltitude+0xa8>)
 8005516:	ed93 7a02 	vldr	s14, [r3, #8]
 800551a:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <MotorPowerCalculateWithAltitude+0xac>)
 800551c:	edd3 7a00 	vldr	s15, [r3]
 8005520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <MotorPowerCalculateWithAltitude+0xb0>)
 8005526:	edc3 7a00 	vstr	s15, [r3]
	Altitudeerror = RemoteThrottle.Setpoint - LIDAR_Data.LIDAR_Pack.Distance;
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <MotorPowerCalculateWithAltitude+0xb4>)
 800552c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <MotorPowerCalculateWithAltitude+0xb8>)
 8005532:	891b      	ldrh	r3, [r3, #8]
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800553c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <MotorPowerCalculateWithAltitude+0xbc>)
 8005542:	edc3 7a00 	vstr	s15, [r3]
	AltitudeControlSignal= PID2(&Altitude, RemoteThrottle.Setpoint, LIDAR_Data.LIDAR_Pack.Distance);
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <MotorPowerCalculateWithAltitude+0xb4>)
 8005548:	edd3 7a02 	vldr	s15, [r3, #8]
 800554c:	4b13      	ldr	r3, [pc, #76]	; (800559c <MotorPowerCalculateWithAltitude+0xb8>)
 800554e:	891b      	ldrh	r3, [r3, #8]
 8005550:	ee07 3a10 	vmov	s14, r3
 8005554:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005558:	eef0 0a47 	vmov.f32	s1, s14
 800555c:	eeb0 0a67 	vmov.f32	s0, s15
 8005560:	4810      	ldr	r0, [pc, #64]	; (80055a4 <MotorPowerCalculateWithAltitude+0xc0>)
 8005562:	f000 f863 	bl	800562c <PID2>
 8005566:	eef0 7a40 	vmov.f32	s15, s0
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <MotorPowerCalculateWithAltitude+0xc4>)
 800556c:	edc3 7a00 	vstr	s15, [r3]
}
 8005570:	bf00      	nop
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20001228 	.word	0x20001228
 8005578:	20000c40 	.word	0x20000c40
 800557c:	20000d40 	.word	0x20000d40
 8005580:	2000174c 	.word	0x2000174c
 8005584:	20001220 	.word	0x20001220
 8005588:	20000fe4 	.word	0x20000fe4
 800558c:	200012f4 	.word	0x200012f4
 8005590:	20001498 	.word	0x20001498
 8005594:	20001550 	.word	0x20001550
 8005598:	20000d50 	.word	0x20000d50
 800559c:	20002730 	.word	0x20002730
 80055a0:	2000148c 	.word	0x2000148c
 80055a4:	20001350 	.word	0x20001350
 80055a8:	20001488 	.word	0x20001488

080055ac <MotorPowerCalculateWithPosition>:
void MotorPowerCalculateWithPosition(UBX_Handle *gpsDatas)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	RollPositionControl  = PID2(&PIDRollPositionControl, RemoteRoll.TargetPositionVelocity, gpsDatas->ubx_PVT.velE);
 80055b4:	4b17      	ldr	r3, [pc, #92]	; (8005614 <MotorPowerCalculateWithPosition+0x68>)
 80055b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80055c0:	ee07 3a10 	vmov	s14, r3
 80055c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80055c8:	eef0 0a47 	vmov.f32	s1, s14
 80055cc:	eeb0 0a67 	vmov.f32	s0, s15
 80055d0:	4811      	ldr	r0, [pc, #68]	; (8005618 <MotorPowerCalculateWithPosition+0x6c>)
 80055d2:	f000 f82b 	bl	800562c <PID2>
 80055d6:	eef0 7a40 	vmov.f32	s15, s0
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <MotorPowerCalculateWithPosition+0x70>)
 80055dc:	edc3 7a00 	vstr	s15, [r3]
	PitchPositionControl = PID2(&PIDPitchPositionControl, RemotePitch.TargetPositionVelocity, gpsDatas->ubx_PVT.velN);
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <MotorPowerCalculateWithPosition+0x74>)
 80055e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 80055ec:	ee07 3a10 	vmov	s14, r3
 80055f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80055f4:	eef0 0a47 	vmov.f32	s1, s14
 80055f8:	eeb0 0a67 	vmov.f32	s0, s15
 80055fc:	4809      	ldr	r0, [pc, #36]	; (8005624 <MotorPowerCalculateWithPosition+0x78>)
 80055fe:	f000 f815 	bl	800562c <PID2>
 8005602:	eef0 7a40 	vmov.f32	s15, s0
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <MotorPowerCalculateWithPosition+0x7c>)
 8005608:	edc3 7a00 	vstr	s15, [r3]
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20001228 	.word	0x20001228
 8005618:	200011e8 	.word	0x200011e8
 800561c:	20001748 	.word	0x20001748
 8005620:	2000174c 	.word	0x2000174c
 8005624:	20001110 	.word	0x20001110
 8005628:	20001618 	.word	0x20001618

0800562c <PID2>:
//	*pre_error = error;
//	return output;
//}

float PID2(PIDController *pid, float setpoint, float measurement)//  referance adresi buradadır https://www.youtube.com/watch?v=zOByx3Izf5U
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	ed87 0a02 	vstr	s0, [r7, #8]
 8005638:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 800563c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005640:	edd7 7a01 	vldr	s15, [r7, #4]
 8005644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005648:	edc7 7a05 	vstr	s15, [r7, #20]

    float proportional = pid->Kp * error;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	edd3 7a00 	vldr	s15, [r3]
 8005652:	ed97 7a05 	vldr	s14, [r7, #20]
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565a:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->Elapsed_Time * (error + pid->prevError);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	edd3 7a01 	vldr	s15, [r3, #4]
 800566a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800566e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	edd3 7a08 	vldr	s15, [r3, #32]
 8005678:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8005682:	edd7 7a05 	vldr	s15, [r7, #20]
 8005686:	ee76 7a27 	vadd.f32	s15, s12, s15
 800568a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800568e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (pid->integrator > pid->limMaxInt) {
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80056a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	dd04      	ble.n	80056b8 <PID2+0x8c>

        pid->integrator = pid->limMaxInt;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
 80056b6:	e00e      	b.n	80056d6 <PID2+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80056c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056cc:	d503      	bpl.n	80056d6 <PID2+0xaa>

        pid->integrator = pid->limMinInt;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

    }

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80056dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80056e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80056ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056ee:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->Elapsed_Time) * pid->differentiator)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80056f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8005702:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800570c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005710:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
 8005714:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->Elapsed_Time);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	edd3 7a03 	vldr	s15, [r3, #12]
 800571e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	edd3 7a08 	vldr	s15, [r3, #32]
 8005728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800572c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    pid->out = proportional + pid->integrator + pid->differentiator;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800573c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800574a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	dd04      	ble.n	8005774 <PID2+0x148>
    {
        pid->out = pid->limMax;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	635a      	str	r2, [r3, #52]	; 0x34
 8005772:	e00e      	b.n	8005792 <PID2+0x166>
    }
    else if (pid->out < pid->limMin)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005788:	d503      	bpl.n	8005792 <PID2+0x166>
    {
        pid->out = pid->limMin;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	635a      	str	r2, [r3, #52]	; 0x34
    }

    pid->prevError       = error;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	631a      	str	r2, [r3, #48]	; 0x30


    return pid->out;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	ee07 3a90 	vmov	s15, r3

}
 80057a6:	eeb0 0a67 	vmov.f32	s0, s15
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <PID_init>:
void PID_init(PIDController *Pid)// pid değerlerinin kumanda iletimi kesildiğinde sıfırlanma fonksiyonu
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

	Pid->integrator = 0.0f;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24
	Pid->prevError  = 0.0f;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28

	Pid->differentiator  = 0.0f;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
	Pid->prevMeasurement = 0.0f;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	; 0x30

	Pid->out = 0.0f;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34


}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <Offset_Calculate>:
 */
#include "ReadingSensor.h"
#include "Filter.h"

void Offset_Calculate()
{
 80057f0:	b5b0      	push	{r4, r5, r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < Sample ; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e132      	b.n	8005a62 <Offset_Calculate+0x272>
	{
		MPU6050_Get_Accel_RawData(&myAccelRaw);
 80057fc:	48c2      	ldr	r0, [pc, #776]	; (8005b08 <Offset_Calculate+0x318>)
 80057fe:	f000 fe05 	bl	800640c <MPU6050_Get_Accel_RawData>
		MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8005802:	48c2      	ldr	r0, [pc, #776]	; (8005b0c <Offset_Calculate+0x31c>)
 8005804:	f000 fe68 	bl	80064d8 <MPU6050_Get_Gyro_RawData>

		Mpu.Gyro_Roll_Offset_Cal   += myGyroRaw.x  * GyroScalingFactor;
 8005808:	4bc1      	ldr	r3, [pc, #772]	; (8005b10 <Offset_Calculate+0x320>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4618      	mov	r0, r3
 800580e:	f7fa fe9b 	bl	8000548 <__aeabi_f2d>
 8005812:	4604      	mov	r4, r0
 8005814:	460d      	mov	r5, r1
 8005816:	4bbd      	ldr	r3, [pc, #756]	; (8005b0c <Offset_Calculate+0x31c>)
 8005818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fa fe81 	bl	8000524 <__aeabi_i2d>
 8005822:	a3b5      	add	r3, pc, #724	; (adr r3, 8005af8 <Offset_Calculate+0x308>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fee6 	bl	80005f8 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	a3b2      	add	r3, pc, #712	; (adr r3, 8005b00 <Offset_Calculate+0x310>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fedd 	bl	80005f8 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4620      	mov	r0, r4
 8005844:	4629      	mov	r1, r5
 8005846:	f7fa fd21 	bl	800028c <__adddf3>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4610      	mov	r0, r2
 8005850:	4619      	mov	r1, r3
 8005852:	f7fb f9c9 	bl	8000be8 <__aeabi_d2f>
 8005856:	4603      	mov	r3, r0
 8005858:	4aad      	ldr	r2, [pc, #692]	; (8005b10 <Offset_Calculate+0x320>)
 800585a:	60d3      	str	r3, [r2, #12]
		Mpu.Gyro_Pitch_Offset_Cal  += myGyroRaw.y  * GyroScalingFactor;
 800585c:	4bac      	ldr	r3, [pc, #688]	; (8005b10 <Offset_Calculate+0x320>)
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fa fe71 	bl	8000548 <__aeabi_f2d>
 8005866:	4604      	mov	r4, r0
 8005868:	460d      	mov	r5, r1
 800586a:	4ba8      	ldr	r3, [pc, #672]	; (8005b0c <Offset_Calculate+0x31c>)
 800586c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005870:	4618      	mov	r0, r3
 8005872:	f7fa fe57 	bl	8000524 <__aeabi_i2d>
 8005876:	a3a0      	add	r3, pc, #640	; (adr r3, 8005af8 <Offset_Calculate+0x308>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa febc 	bl	80005f8 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	a39d      	add	r3, pc, #628	; (adr r3, 8005b00 <Offset_Calculate+0x310>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa feb3 	bl	80005f8 <__aeabi_dmul>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fa fcf7 	bl	800028c <__adddf3>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fb f99f 	bl	8000be8 <__aeabi_d2f>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4a98      	ldr	r2, [pc, #608]	; (8005b10 <Offset_Calculate+0x320>)
 80058ae:	6113      	str	r3, [r2, #16]
		Mpu.Gyro_Yaw_Offset_Cal    += myGyroRaw.z  * GyroScalingFactor;
 80058b0:	4b97      	ldr	r3, [pc, #604]	; (8005b10 <Offset_Calculate+0x320>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fa fe47 	bl	8000548 <__aeabi_f2d>
 80058ba:	4604      	mov	r4, r0
 80058bc:	460d      	mov	r5, r1
 80058be:	4b93      	ldr	r3, [pc, #588]	; (8005b0c <Offset_Calculate+0x31c>)
 80058c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fa fe2d 	bl	8000524 <__aeabi_i2d>
 80058ca:	a38b      	add	r3, pc, #556	; (adr r3, 8005af8 <Offset_Calculate+0x308>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f7fa fe92 	bl	80005f8 <__aeabi_dmul>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	a388      	add	r3, pc, #544	; (adr r3, 8005b00 <Offset_Calculate+0x310>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fe89 	bl	80005f8 <__aeabi_dmul>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fa fccd 	bl	800028c <__adddf3>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	f7fb f975 	bl	8000be8 <__aeabi_d2f>
 80058fe:	4603      	mov	r3, r0
 8005900:	4a83      	ldr	r2, [pc, #524]	; (8005b10 <Offset_Calculate+0x320>)
 8005902:	6153      	str	r3, [r2, #20]
		Mpu.Accel_Roll_Offset_Cal  += myAccelRaw.x * AccelScalingFactor;
 8005904:	4b82      	ldr	r3, [pc, #520]	; (8005b10 <Offset_Calculate+0x320>)
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	4618      	mov	r0, r3
 800590a:	f7fa fe1d 	bl	8000548 <__aeabi_f2d>
 800590e:	4604      	mov	r4, r0
 8005910:	460d      	mov	r5, r1
 8005912:	4b7d      	ldr	r3, [pc, #500]	; (8005b08 <Offset_Calculate+0x318>)
 8005914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fa fe03 	bl	8000524 <__aeabi_i2d>
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	4b7c      	ldr	r3, [pc, #496]	; (8005b14 <Offset_Calculate+0x324>)
 8005924:	f7fa fe68 	bl	80005f8 <__aeabi_dmul>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4620      	mov	r0, r4
 800592e:	4629      	mov	r1, r5
 8005930:	f7fa fcac 	bl	800028c <__adddf3>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4610      	mov	r0, r2
 800593a:	4619      	mov	r1, r3
 800593c:	f7fb f954 	bl	8000be8 <__aeabi_d2f>
 8005940:	4603      	mov	r3, r0
 8005942:	4a73      	ldr	r2, [pc, #460]	; (8005b10 <Offset_Calculate+0x320>)
 8005944:	6493      	str	r3, [r2, #72]	; 0x48
		Mpu.Accel_Pitch_Offset_Cal += myAccelRaw.y * AccelScalingFactor;
 8005946:	4b72      	ldr	r3, [pc, #456]	; (8005b10 <Offset_Calculate+0x320>)
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	4618      	mov	r0, r3
 800594c:	f7fa fdfc 	bl	8000548 <__aeabi_f2d>
 8005950:	4604      	mov	r4, r0
 8005952:	460d      	mov	r5, r1
 8005954:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <Offset_Calculate+0x318>)
 8005956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fa fde2 	bl	8000524 <__aeabi_i2d>
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	4b6b      	ldr	r3, [pc, #428]	; (8005b14 <Offset_Calculate+0x324>)
 8005966:	f7fa fe47 	bl	80005f8 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	f7fa fc8b 	bl	800028c <__adddf3>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	f7fb f933 	bl	8000be8 <__aeabi_d2f>
 8005982:	4603      	mov	r3, r0
 8005984:	4a62      	ldr	r2, [pc, #392]	; (8005b10 <Offset_Calculate+0x320>)
 8005986:	64d3      	str	r3, [r2, #76]	; 0x4c
		Mpu.Accel_Yaw_Offset_Cal   += myAccelRaw.z * AccelScalingFactor;
 8005988:	4b61      	ldr	r3, [pc, #388]	; (8005b10 <Offset_Calculate+0x320>)
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	4618      	mov	r0, r3
 800598e:	f7fa fddb 	bl	8000548 <__aeabi_f2d>
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
 8005996:	4b5c      	ldr	r3, [pc, #368]	; (8005b08 <Offset_Calculate+0x318>)
 8005998:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fa fdc1 	bl	8000524 <__aeabi_i2d>
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	4b5b      	ldr	r3, [pc, #364]	; (8005b14 <Offset_Calculate+0x324>)
 80059a8:	f7fa fe26 	bl	80005f8 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4620      	mov	r0, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	f7fa fc6a 	bl	800028c <__adddf3>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	f7fb f912 	bl	8000be8 <__aeabi_d2f>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4a52      	ldr	r2, [pc, #328]	; (8005b10 <Offset_Calculate+0x320>)
 80059c8:	6513      	str	r3, [r2, #80]	; 0x50

		HAL_Delay(3);
 80059ca:	2003      	movs	r0, #3
 80059cc:	f003 faba 	bl	8008f44 <HAL_Delay>
		if(system_clock_counter_1ms%50==0)
 80059d0:	4b51      	ldr	r3, [pc, #324]	; (8005b18 <Offset_Calculate+0x328>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b51      	ldr	r3, [pc, #324]	; (8005b1c <Offset_Calculate+0x32c>)
 80059d6:	fba3 1302 	umull	r1, r3, r3, r2
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	2132      	movs	r1, #50	; 0x32
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d139      	bne.n	8005a5c <Offset_Calculate+0x26c>
		{

			if(m==1)
 80059e8:	4b4d      	ldr	r3, [pc, #308]	; (8005b20 <Offset_Calculate+0x330>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d108      	bne.n	8005a02 <Offset_Calculate+0x212>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2101      	movs	r1, #1
 80059f4:	484b      	ldr	r0, [pc, #300]	; (8005b24 <Offset_Calculate+0x334>)
 80059f6:	f005 f865 	bl	800aac4 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80059fa:	2102      	movs	r1, #2
 80059fc:	4849      	ldr	r0, [pc, #292]	; (8005b24 <Offset_Calculate+0x334>)
 80059fe:	f005 f87a 	bl	800aaf6 <HAL_GPIO_TogglePin>
			}
			if(m==2)
 8005a02:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <Offset_Calculate+0x330>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d107      	bne.n	8005a1a <Offset_Calculate+0x22a>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	4845      	ldr	r0, [pc, #276]	; (8005b24 <Offset_Calculate+0x334>)
 8005a0e:	f005 f872 	bl	800aaf6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8005a12:	2104      	movs	r1, #4
 8005a14:	4843      	ldr	r0, [pc, #268]	; (8005b24 <Offset_Calculate+0x334>)
 8005a16:	f005 f86e 	bl	800aaf6 <HAL_GPIO_TogglePin>
			}
			if(m==3)
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <Offset_Calculate+0x330>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d107      	bne.n	8005a32 <Offset_Calculate+0x242>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8005a22:	2104      	movs	r1, #4
 8005a24:	483f      	ldr	r0, [pc, #252]	; (8005b24 <Offset_Calculate+0x334>)
 8005a26:	f005 f866 	bl	800aaf6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8005a2a:	2108      	movs	r1, #8
 8005a2c:	483d      	ldr	r0, [pc, #244]	; (8005b24 <Offset_Calculate+0x334>)
 8005a2e:	f005 f862 	bl	800aaf6 <HAL_GPIO_TogglePin>
			}
			if(m==4)
 8005a32:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <Offset_Calculate+0x330>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d10b      	bne.n	8005a52 <Offset_Calculate+0x262>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8005a3a:	2108      	movs	r1, #8
 8005a3c:	4839      	ldr	r0, [pc, #228]	; (8005b24 <Offset_Calculate+0x334>)
 8005a3e:	f005 f85a 	bl	800aaf6 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8005a42:	2201      	movs	r2, #1
 8005a44:	2101      	movs	r1, #1
 8005a46:	4837      	ldr	r0, [pc, #220]	; (8005b24 <Offset_Calculate+0x334>)
 8005a48:	f005 f83c 	bl	800aac4 <HAL_GPIO_WritePin>
				m=0;
 8005a4c:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <Offset_Calculate+0x330>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
			}

			m+=1;
 8005a52:	4b33      	ldr	r3, [pc, #204]	; (8005b20 <Offset_Calculate+0x330>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	4a31      	ldr	r2, [pc, #196]	; (8005b20 <Offset_Calculate+0x330>)
 8005a5a:	6013      	str	r3, [r2, #0]
	for(int i = 0 ; i < Sample ; i++)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a68:	f6ff aec8 	blt.w	80057fc <Offset_Calculate+0xc>
		}

		// başka bir şekilde bekletmeliyiz ı2c sorunu bundan kaynaklanıyor olabilir
	    // ledler eklenecek buraya kalibrasyon oluyor ledleri
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8005a6c:	2108      	movs	r1, #8
 8005a6e:	482d      	ldr	r0, [pc, #180]	; (8005b24 <Offset_Calculate+0x334>)
 8005a70:	f005 f841 	bl	800aaf6 <HAL_GPIO_TogglePin>

	Mpu.Gyro_Roll_Offset_Cal   /= Sample;
 8005a74:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <Offset_Calculate+0x320>)
 8005a76:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a7a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8005b28 <Offset_Calculate+0x338>
 8005a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <Offset_Calculate+0x320>)
 8005a84:	edc3 7a03 	vstr	s15, [r3, #12]
	Mpu.Gyro_Pitch_Offset_Cal  /= Sample;
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <Offset_Calculate+0x320>)
 8005a8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b28 <Offset_Calculate+0x338>
 8005a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a96:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <Offset_Calculate+0x320>)
 8005a98:	edc3 7a04 	vstr	s15, [r3, #16]
	Mpu.Gyro_Yaw_Offset_Cal    /= Sample;
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <Offset_Calculate+0x320>)
 8005a9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005aa2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8005b28 <Offset_Calculate+0x338>
 8005aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aaa:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <Offset_Calculate+0x320>)
 8005aac:	edc3 7a05 	vstr	s15, [r3, #20]
	Mpu.Accel_Roll_Offset_Cal  /= Sample;
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <Offset_Calculate+0x320>)
 8005ab2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8005ab6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005b28 <Offset_Calculate+0x338>
 8005aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <Offset_Calculate+0x320>)
 8005ac0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	Mpu.Accel_Pitch_Offset_Cal /= Sample;
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <Offset_Calculate+0x320>)
 8005ac6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005aca:	eddf 6a17 	vldr	s13, [pc, #92]	; 8005b28 <Offset_Calculate+0x338>
 8005ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <Offset_Calculate+0x320>)
 8005ad4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	Mpu.Accel_Yaw_Offset_Cal   /= Sample;
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <Offset_Calculate+0x320>)
 8005ada:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005ade:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005b28 <Offset_Calculate+0x338>
 8005ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ae6:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <Offset_Calculate+0x320>)
 8005ae8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bdb0      	pop	{r4, r5, r7, pc}
 8005af4:	f3af 8000 	nop.w
 8005af8:	1f41d1c1 	.word	0x1f41d1c1
 8005afc:	3f9f41f4 	.word	0x3f9f41f4
 8005b00:	33333333 	.word	0x33333333
 8005b04:	3ffb3333 	.word	0x3ffb3333
 8005b08:	200017ac 	.word	0x200017ac
 8005b0c:	2000124c 	.word	0x2000124c
 8005b10:	20001180 	.word	0x20001180
 8005b14:	3f200000 	.word	0x3f200000
 8005b18:	2000140c 	.word	0x2000140c
 8005b1c:	51eb851f 	.word	0x51eb851f
 8005b20:	200016e0 	.word	0x200016e0
 8005b24:	40020800 	.word	0x40020800
 8005b28:	44fa0000 	.word	0x44fa0000
 8005b2c:	00000000 	.word	0x00000000

08005b30 <MPU6050>:
void MPU6050()// ivmeölçer ve gyro yaw değerleri eksi ile çarpılabilir
{
 8005b30:	b5b0      	push	{r4, r5, r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	MPU6050_Get_Accel_RawData(&myAccelRaw);
 8005b34:	489a      	ldr	r0, [pc, #616]	; (8005da0 <MPU6050+0x270>)
 8005b36:	f000 fc69 	bl	800640c <MPU6050_Get_Accel_RawData>
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8005b3a:	489a      	ldr	r0, [pc, #616]	; (8005da4 <MPU6050+0x274>)
 8005b3c:	f000 fccc 	bl	80064d8 <MPU6050_Get_Gyro_RawData>

	Mpu.Accel_Roll_Set   = (myAccelRaw.x * AccelScalingFactor) - Mpu.Accel_Roll_Offset_Cal   ;
 8005b40:	4b97      	ldr	r3, [pc, #604]	; (8005da0 <MPU6050+0x270>)
 8005b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fa fcec 	bl	8000524 <__aeabi_i2d>
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	4b95      	ldr	r3, [pc, #596]	; (8005da8 <MPU6050+0x278>)
 8005b52:	f7fa fd51 	bl	80005f8 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4614      	mov	r4, r2
 8005b5c:	461d      	mov	r5, r3
 8005b5e:	4b93      	ldr	r3, [pc, #588]	; (8005dac <MPU6050+0x27c>)
 8005b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fa fcf0 	bl	8000548 <__aeabi_f2d>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa fb8a 	bl	8000288 <__aeabi_dsub>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f7fb f834 	bl	8000be8 <__aeabi_d2f>
 8005b80:	4603      	mov	r3, r0
 8005b82:	4a8a      	ldr	r2, [pc, #552]	; (8005dac <MPU6050+0x27c>)
 8005b84:	63d3      	str	r3, [r2, #60]	; 0x3c
	Mpu.Accel_Pitch_Set  = (myAccelRaw.y * AccelScalingFactor) - Mpu.Accel_Pitch_Offset_Cal   ;
 8005b86:	4b86      	ldr	r3, [pc, #536]	; (8005da0 <MPU6050+0x270>)
 8005b88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fa fcc9 	bl	8000524 <__aeabi_i2d>
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	4b84      	ldr	r3, [pc, #528]	; (8005da8 <MPU6050+0x278>)
 8005b98:	f7fa fd2e 	bl	80005f8 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	461d      	mov	r5, r3
 8005ba4:	4b81      	ldr	r3, [pc, #516]	; (8005dac <MPU6050+0x27c>)
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fa fccd 	bl	8000548 <__aeabi_f2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7fa fb67 	bl	8000288 <__aeabi_dsub>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f7fb f811 	bl	8000be8 <__aeabi_d2f>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a78      	ldr	r2, [pc, #480]	; (8005dac <MPU6050+0x27c>)
 8005bca:	6413      	str	r3, [r2, #64]	; 0x40
	Mpu.Accel_Yaw_Set    = (myAccelRaw.z * AccelScalingFactor)								  ;//offset verilmesine gerek yok offsett verilecekse yanına 1 ekle
 8005bcc:	4b74      	ldr	r3, [pc, #464]	; (8005da0 <MPU6050+0x270>)
 8005bce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fa fca6 	bl	8000524 <__aeabi_i2d>
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	4b72      	ldr	r3, [pc, #456]	; (8005da8 <MPU6050+0x278>)
 8005bde:	f7fa fd0b 	bl	80005f8 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fa fffd 	bl	8000be8 <__aeabi_d2f>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <MPU6050+0x27c>)
 8005bf2:	6453      	str	r3, [r2, #68]	; 0x44
	Mpu.Gyro_Roll_Set    = (myGyroRaw.x  * GyroScalingFactor)  - Mpu.Gyro_Roll_Offset_Cal     ;
 8005bf4:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <MPU6050+0x274>)
 8005bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa fc92 	bl	8000524 <__aeabi_i2d>
 8005c00:	a361      	add	r3, pc, #388	; (adr r3, 8005d88 <MPU6050+0x258>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fcf7 	bl	80005f8 <__aeabi_dmul>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	a35f      	add	r3, pc, #380	; (adr r3, 8005d90 <MPU6050+0x260>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fcee 	bl	80005f8 <__aeabi_dmul>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4614      	mov	r4, r2
 8005c22:	461d      	mov	r5, r3
 8005c24:	4b61      	ldr	r3, [pc, #388]	; (8005dac <MPU6050+0x27c>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fa fc8d 	bl	8000548 <__aeabi_f2d>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fb27 	bl	8000288 <__aeabi_dsub>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4610      	mov	r0, r2
 8005c40:	4619      	mov	r1, r3
 8005c42:	f7fa ffd1 	bl	8000be8 <__aeabi_d2f>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4a58      	ldr	r2, [pc, #352]	; (8005dac <MPU6050+0x27c>)
 8005c4a:	6013      	str	r3, [r2, #0]
	Mpu.Gyro_Pitch_Set   = (myGyroRaw.y  * GyroScalingFactor)  - Mpu.Gyro_Pitch_Offset_Cal    ;
 8005c4c:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <MPU6050+0x274>)
 8005c4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fa fc66 	bl	8000524 <__aeabi_i2d>
 8005c58:	a34b      	add	r3, pc, #300	; (adr r3, 8005d88 <MPU6050+0x258>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fccb 	bl	80005f8 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	a349      	add	r3, pc, #292	; (adr r3, 8005d90 <MPU6050+0x260>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fcc2 	bl	80005f8 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	461d      	mov	r5, r3
 8005c7c:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <MPU6050+0x27c>)
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fa fc61 	bl	8000548 <__aeabi_f2d>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	f7fa fafb 	bl	8000288 <__aeabi_dsub>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fa ffa5 	bl	8000be8 <__aeabi_d2f>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4a42      	ldr	r2, [pc, #264]	; (8005dac <MPU6050+0x27c>)
 8005ca2:	6053      	str	r3, [r2, #4]
	Mpu.Gyro_Yaw_Set     = (myGyroRaw.z  * GyroScalingFactor)  - Mpu.Gyro_Yaw_Offset_Cal      ;
 8005ca4:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <MPU6050+0x274>)
 8005ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fa fc3a 	bl	8000524 <__aeabi_i2d>
 8005cb0:	a335      	add	r3, pc, #212	; (adr r3, 8005d88 <MPU6050+0x258>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fc9f 	bl	80005f8 <__aeabi_dmul>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	a333      	add	r3, pc, #204	; (adr r3, 8005d90 <MPU6050+0x260>)
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f7fa fc96 	bl	80005f8 <__aeabi_dmul>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	4b35      	ldr	r3, [pc, #212]	; (8005dac <MPU6050+0x27c>)
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fa fc35 	bl	8000548 <__aeabi_f2d>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	f7fa facf 	bl	8000288 <__aeabi_dsub>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f7fa ff79 	bl	8000be8 <__aeabi_d2f>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <MPU6050+0x27c>)
 8005cfa:	6093      	str	r3, [r2, #8]
//	Mpu.Accel_Roll_Degree  = atan((Mpu.Accel_Pitch_Set)/sqrt(pow((Mpu.Accel_Roll_Set),2) + pow((Mpu.Accel_Yaw_Set),2)))*RAD_TO_DEG;// complementary için gerekli
//	Mpu.Accel_Pitch_Degree = atan(-1*(Mpu.Accel_Roll_Set )/sqrt(pow((Mpu.Accel_Pitch_Set),2) + pow((Mpu.Accel_Yaw_Set),2)))*RAD_TO_DEG;


	// Notch butterworth second order low pass filter ile filtrelendi
	Butterworth(&AccelRollFiltered  , Mpu.Accel_Roll_Set);
 8005cfc:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <MPU6050+0x27c>)
 8005cfe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005d02:	eeb0 0a67 	vmov.f32	s0, s15
 8005d06:	482a      	ldr	r0, [pc, #168]	; (8005db0 <MPU6050+0x280>)
 8005d08:	f7fd fc4a 	bl	80035a0 <Butterworth>
	Butterworth(&AccelPitchFiltered , Mpu.Accel_Pitch_Set);
 8005d0c:	4b27      	ldr	r3, [pc, #156]	; (8005dac <MPU6050+0x27c>)
 8005d0e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005d12:	eeb0 0a67 	vmov.f32	s0, s15
 8005d16:	4827      	ldr	r0, [pc, #156]	; (8005db4 <MPU6050+0x284>)
 8005d18:	f7fd fc42 	bl	80035a0 <Butterworth>
	Butterworth(&AccelYawFiltered   , Mpu.Accel_Yaw_Set);
 8005d1c:	4b23      	ldr	r3, [pc, #140]	; (8005dac <MPU6050+0x27c>)
 8005d1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005d22:	eeb0 0a67 	vmov.f32	s0, s15
 8005d26:	4824      	ldr	r0, [pc, #144]	; (8005db8 <MPU6050+0x288>)
 8005d28:	f7fd fc3a 	bl	80035a0 <Butterworth>
	Butterworth(&GyroRollFiltered   , Mpu.Gyro_Roll_Set);
 8005d2c:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <MPU6050+0x27c>)
 8005d2e:	edd3 7a00 	vldr	s15, [r3]
 8005d32:	eeb0 0a67 	vmov.f32	s0, s15
 8005d36:	4821      	ldr	r0, [pc, #132]	; (8005dbc <MPU6050+0x28c>)
 8005d38:	f7fd fc32 	bl	80035a0 <Butterworth>
	Butterworth(&GyroPitchFiltered  , Mpu.Gyro_Pitch_Set);
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <MPU6050+0x27c>)
 8005d3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d42:	eeb0 0a67 	vmov.f32	s0, s15
 8005d46:	481e      	ldr	r0, [pc, #120]	; (8005dc0 <MPU6050+0x290>)
 8005d48:	f7fd fc2a 	bl	80035a0 <Butterworth>
	Butterworth(&GyroYawFiltered    , Mpu.Gyro_Yaw_Set);
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <MPU6050+0x27c>)
 8005d4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d52:	eeb0 0a67 	vmov.f32	s0, s15
 8005d56:	481b      	ldr	r0, [pc, #108]	; (8005dc4 <MPU6050+0x294>)
 8005d58:	f7fd fc22 	bl	80035a0 <Butterworth>

	gravityAccel = AccelYawFiltered.NotchFilterOut*9.81;
 8005d5c:	4b16      	ldr	r3, [pc, #88]	; (8005db8 <MPU6050+0x288>)
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fa fbf1 	bl	8000548 <__aeabi_f2d>
 8005d66:	a30c      	add	r3, pc, #48	; (adr r3, 8005d98 <MPU6050+0x268>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fc44 	bl	80005f8 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	f7fa ff36 	bl	8000be8 <__aeabi_d2f>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <MPU6050+0x298>)
 8005d80:	6013      	str	r3, [r2, #0]
//
//	Mpu.ComplementaryRoll = (float)(0.992*(Mpu.ComplementaryRoll + Mpu.Gyro_Roll_Ahrs)  + 0.008*AccelRollFiltered.NotchFilterOut); // complementary filtre şuanda madwick ahrs filtrede sorun çıkar geçilebilir
//	Mpu.ComplementaryPitch= (float)(0.992*(Mpu.ComplementaryPitch+ Mpu.Gyro_Pitch_Ahrs)  + 0.008*AccelPitchFiltered.NotchFilterOut);
//	Mpu.ComplementaryYaw  = Mpu.Gyro_Yaw_Degree; //özel olarak ilgilen hmc ile birleştir

}
 8005d82:	bf00      	nop
 8005d84:	bdb0      	pop	{r4, r5, r7, pc}
 8005d86:	bf00      	nop
 8005d88:	1f41d1c1 	.word	0x1f41d1c1
 8005d8c:	3f9f41f4 	.word	0x3f9f41f4
 8005d90:	33333333 	.word	0x33333333
 8005d94:	3ffb3333 	.word	0x3ffb3333
 8005d98:	51eb851f 	.word	0x51eb851f
 8005d9c:	40239eb8 	.word	0x40239eb8
 8005da0:	200017ac 	.word	0x200017ac
 8005da4:	2000124c 	.word	0x2000124c
 8005da8:	3f200000 	.word	0x3f200000
 8005dac:	20001180 	.word	0x20001180
 8005db0:	200016e8 	.word	0x200016e8
 8005db4:	20000cd4 	.word	0x20000cd4
 8005db8:	200013f0 	.word	0x200013f0
 8005dbc:	200010f4 	.word	0x200010f4
 8005dc0:	20000c80 	.word	0x20000c80
 8005dc4:	2000130c 	.word	0x2000130c
 8005dc8:	20001094 	.word	0x20001094
 8005dcc:	00000000 	.word	0x00000000

08005dd0 <MPU6050AHRS>:

void MPU6050AHRS()
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
	Mpu.Gyro_Roll_Ahrs1  = GyroRollFiltered.NotchFilterOut   * Elapsed_time_Ahrs;//complementary ve Ahrs filtre girişlerine bunları uygulamalıyız
 8005dd4:	4b50      	ldr	r3, [pc, #320]	; (8005f18 <MPU6050AHRS+0x148>)
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa fbb5 	bl	8000548 <__aeabi_f2d>
 8005dde:	a34a      	add	r3, pc, #296	; (adr r3, 8005f08 <MPU6050AHRS+0x138>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fc08 	bl	80005f8 <__aeabi_dmul>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	f7fa fefa 	bl	8000be8 <__aeabi_d2f>
 8005df4:	4603      	mov	r3, r0
 8005df6:	4a49      	ldr	r2, [pc, #292]	; (8005f1c <MPU6050AHRS+0x14c>)
 8005df8:	6253      	str	r3, [r2, #36]	; 0x24
	Mpu.Gyro_Pitch_Ahrs1 = GyroPitchFiltered.NotchFilterOut  * Elapsed_time_Ahrs;
 8005dfa:	4b49      	ldr	r3, [pc, #292]	; (8005f20 <MPU6050AHRS+0x150>)
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fa fba2 	bl	8000548 <__aeabi_f2d>
 8005e04:	a340      	add	r3, pc, #256	; (adr r3, 8005f08 <MPU6050AHRS+0x138>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fbf5 	bl	80005f8 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa fee7 	bl	8000be8 <__aeabi_d2f>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4a3f      	ldr	r2, [pc, #252]	; (8005f1c <MPU6050AHRS+0x14c>)
 8005e1e:	6293      	str	r3, [r2, #40]	; 0x28
	Mpu.Gyro_Yaw_Ahrs1   = GyroYawFiltered.NotchFilterOut    * Elapsed_time_Ahrs;
 8005e20:	4b40      	ldr	r3, [pc, #256]	; (8005f24 <MPU6050AHRS+0x154>)
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fa fb8f 	bl	8000548 <__aeabi_f2d>
 8005e2a:	a337      	add	r3, pc, #220	; (adr r3, 8005f08 <MPU6050AHRS+0x138>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa fbe2 	bl	80005f8 <__aeabi_dmul>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f7fa fed4 	bl	8000be8 <__aeabi_d2f>
 8005e40:	4603      	mov	r3, r0
 8005e42:	4a36      	ldr	r2, [pc, #216]	; (8005f1c <MPU6050AHRS+0x14c>)
 8005e44:	62d3      	str	r3, [r2, #44]	; 0x2c

	Remove_Gravity_effect = AccelYawFiltered.NotchFilterOut - Mpu.Accel_Yaw_Set;
 8005e46:	4b38      	ldr	r3, [pc, #224]	; (8005f28 <MPU6050AHRS+0x158>)
 8005e48:	ed93 7a05 	vldr	s14, [r3, #20]
 8005e4c:	4b33      	ldr	r3, [pc, #204]	; (8005f1c <MPU6050AHRS+0x14c>)
 8005e4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e56:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <MPU6050AHRS+0x15c>)
 8005e58:	edc3 7a00 	vstr	s15, [r3]

	AccelToVelocity(&MpuVelocity.ImuRollVelocity, -AccelRollFiltered.NotchFilterOut*Gravity, Elapsed_time_Ahrs);
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <MPU6050AHRS+0x160>)
 8005e5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e62:	eef1 7a67 	vneg.f32	s15, s15
 8005e66:	ee17 3a90 	vmov	r3, s15
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fa fb6c 	bl	8000548 <__aeabi_f2d>
 8005e70:	a327      	add	r3, pc, #156	; (adr r3, 8005f10 <MPU6050AHRS+0x140>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa fbbf 	bl	80005f8 <__aeabi_dmul>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	f7fa feb1 	bl	8000be8 <__aeabi_d2f>
 8005e86:	4603      	mov	r3, r0
 8005e88:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8005f34 <MPU6050AHRS+0x164>
 8005e8c:	ee00 3a10 	vmov	s0, r3
 8005e90:	4829      	ldr	r0, [pc, #164]	; (8005f38 <MPU6050AHRS+0x168>)
 8005e92:	f000 f859 	bl	8005f48 <AccelToVelocity>
	AccelToVelocity(&MpuVelocity.ImuPitchVelocity,-AccelPitchFiltered.NotchFilterOut*Gravity, Elapsed_time_Ahrs);
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <MPU6050AHRS+0x16c>)
 8005e98:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e9c:	eef1 7a67 	vneg.f32	s15, s15
 8005ea0:	ee17 3a90 	vmov	r3, s15
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa fb4f 	bl	8000548 <__aeabi_f2d>
 8005eaa:	a319      	add	r3, pc, #100	; (adr r3, 8005f10 <MPU6050AHRS+0x140>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa fba2 	bl	80005f8 <__aeabi_dmul>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f7fa fe94 	bl	8000be8 <__aeabi_d2f>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005f34 <MPU6050AHRS+0x164>
 8005ec6:	ee00 3a10 	vmov	s0, r3
 8005eca:	481d      	ldr	r0, [pc, #116]	; (8005f40 <MPU6050AHRS+0x170>)
 8005ecc:	f000 f83c 	bl	8005f48 <AccelToVelocity>
	AccelToVelocity(&MpuVelocity.ImuYawVelocity, Remove_Gravity_effect*Gravity, Elapsed_time_Ahrs);
 8005ed0:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <MPU6050AHRS+0x15c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fa fb37 	bl	8000548 <__aeabi_f2d>
 8005eda:	a30d      	add	r3, pc, #52	; (adr r3, 8005f10 <MPU6050AHRS+0x140>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa fb8a 	bl	80005f8 <__aeabi_dmul>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4619      	mov	r1, r3
 8005eec:	f7fa fe7c 	bl	8000be8 <__aeabi_d2f>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005f34 <MPU6050AHRS+0x164>
 8005ef6:	ee00 3a10 	vmov	s0, r3
 8005efa:	4812      	ldr	r0, [pc, #72]	; (8005f44 <MPU6050AHRS+0x174>)
 8005efc:	f000 f824 	bl	8005f48 <AccelToVelocity>
}
 8005f00:	bf00      	nop
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	f3af 8000 	nop.w
 8005f08:	47ae147b 	.word	0x47ae147b
 8005f0c:	3f747ae1 	.word	0x3f747ae1
 8005f10:	acd9e83e 	.word	0xacd9e83e
 8005f14:	40239cfa 	.word	0x40239cfa
 8005f18:	200010f4 	.word	0x200010f4
 8005f1c:	20001180 	.word	0x20001180
 8005f20:	20000c80 	.word	0x20000c80
 8005f24:	2000130c 	.word	0x2000130c
 8005f28:	200013f0 	.word	0x200013f0
 8005f2c:	20001628 	.word	0x20001628
 8005f30:	200016e8 	.word	0x200016e8
 8005f34:	3ba3d70a 	.word	0x3ba3d70a
 8005f38:	20000f8c 	.word	0x20000f8c
 8005f3c:	20000cd4 	.word	0x20000cd4
 8005f40:	20000f90 	.word	0x20000f90
 8005f44:	20000f94 	.word	0x20000f94

08005f48 <AccelToVelocity>:
	{
		magno_bearing = magno_bearing - 360;
	}
}
float AccelToVelocity(float *VelocityData,float AccelData,float Dt)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f54:	edc7 0a01 	vstr	s1, [r7, #4]
	return *VelocityData += AccelData * Dt;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	ed93 7a00 	vldr	s14, [r3]
 8005f5e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	edc3 7a00 	vstr	s15, [r3]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	ee07 3a90 	vmov	s15, r3
}
 8005f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LIDAR_Config>:
//}


		
void LIDAR_Config(UART_HandleTypeDef *huart, TF_USART_Buffer *USART_Buf)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
	Uart_DMA_Receive_Start(huart, USART_Buf);
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fd fb58 	bl	800364c <Uart_DMA_Receive_Start>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	0000      	movs	r0, r0
	...

08005fa8 <LIDAR_Data_Parser>:

void LIDAR_Data_Parser(LIDAR_Handle *lidarDatas, const uint8_t *datas, uint8_t read_byte)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	71fb      	strb	r3, [r7, #7]

	static uint8_t ci = 0;  // checksum control indeks
	uint8_t check_toplam = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75fb      	strb	r3, [r7, #23]
	for(i = 0; i < read_byte ; i++)
 8005fbc:	4b86      	ldr	r3, [pc, #536]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	e0f8      	b.n	80061b6 <LIDAR_Data_Parser+0x20e>
	{
		switch(lidarDatas->state)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <LIDAR_Data_Parser+0x2a>
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d049      	beq.n	8006064 <LIDAR_Data_Parser+0xbc>
 8005fd0:	e0eb      	b.n	80061aa <LIDAR_Data_Parser+0x202>
		{
			case YAKALA_HEADS :
			{
				if( (datas[i] == HEADS) && (datas[i+1] == HEADS) )
 8005fd2:	4b81      	ldr	r3, [pc, #516]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4413      	add	r3, r2
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b59      	cmp	r3, #89	; 0x59
 8005fe0:	d13c      	bne.n	800605c <LIDAR_Data_Parser+0xb4>
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	4413      	add	r3, r2
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b59      	cmp	r3, #89	; 0x59
 8005ff0:	d134      	bne.n	800605c <LIDAR_Data_Parser+0xb4>
				{
					for(ci = 0; ci < 8; ci++)
 8005ff2:	4b7a      	ldr	r3, [pc, #488]	; (80061dc <LIDAR_Data_Parser+0x234>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e012      	b.n	8006020 <LIDAR_Data_Parser+0x78>
					{
						check_toplam = check_toplam + datas[i+ci];
 8005ffa:	4b77      	ldr	r3, [pc, #476]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	4b76      	ldr	r3, [pc, #472]	; (80061dc <LIDAR_Data_Parser+0x234>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4413      	add	r3, r2
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4413      	add	r3, r2
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	4413      	add	r3, r2
 8006012:	75fb      	strb	r3, [r7, #23]
					for(ci = 0; ci < 8; ci++)
 8006014:	4b71      	ldr	r3, [pc, #452]	; (80061dc <LIDAR_Data_Parser+0x234>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	b2da      	uxtb	r2, r3
 800601c:	4b6f      	ldr	r3, [pc, #444]	; (80061dc <LIDAR_Data_Parser+0x234>)
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	4b6e      	ldr	r3, [pc, #440]	; (80061dc <LIDAR_Data_Parser+0x234>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b07      	cmp	r3, #7
 8006026:	d9e8      	bls.n	8005ffa <LIDAR_Data_Parser+0x52>
					}

					if(check_toplam == datas[i+8])
 8006028:	4b6b      	ldr	r3, [pc, #428]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	7dfa      	ldrb	r2, [r7, #23]
 8006036:	429a      	cmp	r2, r3
 8006038:	d108      	bne.n	800604c <LIDAR_Data_Parser+0xa4>
					{
						lidarDatas->state = PARSE_LIDAR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
						say++;
 8006040:	4b67      	ldr	r3, [pc, #412]	; (80061e0 <LIDAR_Data_Parser+0x238>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a66      	ldr	r2, [pc, #408]	; (80061e0 <LIDAR_Data_Parser+0x238>)
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e004      	b.n	8006056 <LIDAR_Data_Parser+0xae>
					}
					else{
						lidarDatas->checksumError_u32++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]
					}
					check_toplam = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]

				}else{
					lidarDatas->state = YAKALA_HEADS;
				}

				break;
 800605a:	e0a6      	b.n	80061aa <LIDAR_Data_Parser+0x202>
					lidarDatas->state = YAKALA_HEADS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
				break;
 8006062:	e0a2      	b.n	80061aa <LIDAR_Data_Parser+0x202>
			}
			case PARSE_LIDAR :
			{

				lidarDatas->LIDAR_Pack.Distance 	= datas[i+2] << 8 | datas[i+1];
 8006064:	4b5c      	ldr	r3, [pc, #368]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	3302      	adds	r3, #2
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	b21a      	sxth	r2, r3
 8006074:	4b58      	ldr	r3, [pc, #352]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	440b      	add	r3, r1
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b21b      	sxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b21b      	sxth	r3, r3
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	811a      	strh	r2, [r3, #8]
				lidarDatas->LIDAR_Pack.Strength 	= datas[i+4] << 8 | datas[i+3];
 800608c:	4b52      	ldr	r3, [pc, #328]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	3304      	adds	r3, #4
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	b21a      	sxth	r2, r3
 800609c:	4b4e      	ldr	r3, [pc, #312]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	3303      	adds	r3, #3
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	440b      	add	r3, r1
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b21b      	sxth	r3, r3
 80060aa:	4313      	orrs	r3, r2
 80060ac:	b21b      	sxth	r3, r3
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	815a      	strh	r2, [r3, #10]
				lidarDatas->LIDAR_Pack.Mode 		= datas[i+5];
 80060b4:	4b48      	ldr	r3, [pc, #288]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	3305      	adds	r3, #5
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	731a      	strb	r2, [r3, #12]
				lidarDatas->LIDAR_Pack.SpareByte 	= datas[i+6];
 80060c4:	4b44      	ldr	r3, [pc, #272]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	3306      	adds	r3, #6
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	781a      	ldrb	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	735a      	strb	r2, [r3, #13]
				lidarDatas->LIDAR_Pack.Checksum 	= datas[i+7];
 80060d4:	4b40      	ldr	r3, [pc, #256]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	3307      	adds	r3, #7
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	739a      	strb	r2, [r3, #14]

				lidarDatas->LIDAR_Pack.AngleDistance = ((float)lidarDatas->LIDAR_Pack.Distance/100.0f) - (Barometer_Altitude*AltitudeCalculator*sqrt(pow(Ahrs_ROLL,2)+pow(Ahrs_PITCH,2)));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	891b      	ldrh	r3, [r3, #8]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80061e4 <LIDAR_Data_Parser+0x23c>
 80060f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060f8:	ee16 0a90 	vmov	r0, s13
 80060fc:	f7fa fa24 	bl	8000548 <__aeabi_f2d>
 8006100:	4604      	mov	r4, r0
 8006102:	460d      	mov	r5, r1
 8006104:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <LIDAR_Data_Parser+0x240>)
 8006106:	ed93 7a00 	vldr	s14, [r3]
 800610a:	4b38      	ldr	r3, [pc, #224]	; (80061ec <LIDAR_Data_Parser+0x244>)
 800610c:	edd3 7a00 	vldr	s15, [r3]
 8006110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006114:	ee17 0a90 	vmov	r0, s15
 8006118:	f7fa fa16 	bl	8000548 <__aeabi_f2d>
 800611c:	4680      	mov	r8, r0
 800611e:	4689      	mov	r9, r1
 8006120:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <LIDAR_Data_Parser+0x248>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f7fa fa0f 	bl	8000548 <__aeabi_f2d>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80061d0 <LIDAR_Data_Parser+0x228>
 8006132:	ec43 2b10 	vmov	d0, r2, r3
 8006136:	f011 fe2d 	bl	8017d94 <pow>
 800613a:	ec5b ab10 	vmov	sl, fp, d0
 800613e:	4b2d      	ldr	r3, [pc, #180]	; (80061f4 <LIDAR_Data_Parser+0x24c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fa fa00 	bl	8000548 <__aeabi_f2d>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80061d0 <LIDAR_Data_Parser+0x228>
 8006150:	ec43 2b10 	vmov	d0, r2, r3
 8006154:	f011 fe1e 	bl	8017d94 <pow>
 8006158:	ec53 2b10 	vmov	r2, r3, d0
 800615c:	4650      	mov	r0, sl
 800615e:	4659      	mov	r1, fp
 8006160:	f7fa f894 	bl	800028c <__adddf3>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	ec43 2b17 	vmov	d7, r2, r3
 800616c:	eeb0 0a47 	vmov.f32	s0, s14
 8006170:	eef0 0a67 	vmov.f32	s1, s15
 8006174:	f011 febc 	bl	8017ef0 <sqrt>
 8006178:	ec53 2b10 	vmov	r2, r3, d0
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa fa3a 	bl	80005f8 <__aeabi_dmul>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4620      	mov	r0, r4
 800618a:	4629      	mov	r1, r5
 800618c:	f7fa f87c 	bl	8000288 <__aeabi_dsub>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4610      	mov	r0, r2
 8006196:	4619      	mov	r1, r3
 8006198:	f7fa fd26 	bl	8000be8 <__aeabi_d2f>
 800619c:	4602      	mov	r2, r0
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	611a      	str	r2, [r3, #16]

				lidarDatas->state = YAKALA_HEADS;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]

				break;
 80061a8:	bf00      	nop
	for(i = 0; i < read_byte ; i++)
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <LIDAR_Data_Parser+0x230>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	79fa      	ldrb	r2, [r7, #7]
 80061bc:	429a      	cmp	r2, r3
 80061be:	f63f af01 	bhi.w	8005fc4 <LIDAR_Data_Parser+0x1c>

		}

	}

}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ce:	bf00      	nop
 80061d0:	00000000 	.word	0x00000000
 80061d4:	40000000 	.word	0x40000000
 80061d8:	200018c0 	.word	0x200018c0
 80061dc:	20000388 	.word	0x20000388
 80061e0:	20000384 	.word	0x20000384
 80061e4:	42c80000 	.word	0x42c80000
 80061e8:	2000169c 	.word	0x2000169c
 80061ec:	2000142c 	.word	0x2000142c
 80061f0:	20000c40 	.word	0x20000c40
 80061f4:	20001220 	.word	0x20001220

080061f8 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8006200:	2254      	movs	r2, #84	; 0x54
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4803      	ldr	r0, [pc, #12]	; (8006214 <MPU6050_Init+0x1c>)
 8006206:	f00d f899 	bl	801333c <memcpy>
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2000038c 	.word	0x2000038c

08006218 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af02      	add	r7, sp, #8
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
 8006224:	4613      	mov	r3, r2
 8006226:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8006228:	23d0      	movs	r3, #208	; 0xd0
 800622a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	b299      	uxth	r1, r3
 8006234:	f107 020c 	add.w	r2, r7, #12
 8006238:	230a      	movs	r3, #10
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2301      	movs	r3, #1
 800623e:	4808      	ldr	r0, [pc, #32]	; (8006260 <I2C_Read+0x48>)
 8006240:	f004 fdd0 	bl	800ade4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(20);
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	b299      	uxth	r1, r3
 8006248:	79bb      	ldrb	r3, [r7, #6]
 800624a:	b29b      	uxth	r3, r3
 800624c:	2264      	movs	r2, #100	; 0x64
 800624e:	9200      	str	r2, [sp, #0]
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	4803      	ldr	r0, [pc, #12]	; (8006260 <I2C_Read+0x48>)
 8006254:	f004 fec4 	bl	800afe0 <HAL_I2C_Master_Receive>
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2000038c 	.word	0x2000038c

08006264 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af02      	add	r7, sp, #8
 800626a:	4603      	mov	r3, r0
 800626c:	460a      	mov	r2, r1
 800626e:	71fb      	strb	r3, [r7, #7]
 8006270:	4613      	mov	r3, r2
 8006272:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8006278:	79bb      	ldrb	r3, [r7, #6]
 800627a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 800627c:	23d0      	movs	r3, #208	; 0xd0
 800627e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	b299      	uxth	r1, r3
 8006284:	f107 020c 	add.w	r2, r7, #12
 8006288:	2364      	movs	r3, #100	; 0x64
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	2302      	movs	r3, #2
 800628e:	4803      	ldr	r0, [pc, #12]	; (800629c <I2C_Write8+0x38>)
 8006290:	f004 fda8 	bl	800ade4 <HAL_I2C_Master_Transmit>
}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2000038c 	.word	0x2000038c

080062a0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80062ac:	2180      	movs	r1, #128	; 0x80
 80062ae:	206b      	movs	r0, #107	; 0x6b
 80062b0:	f7ff ffd8 	bl	8006264 <I2C_Write8>
	HAL_Delay(100);
 80062b4:	2064      	movs	r0, #100	; 0x64
 80062b6:	f002 fe45 	bl	8008f44 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	791b      	ldrb	r3, [r3, #4]
 80062c8:	019b      	lsls	r3, r3, #6
 80062ca:	b25b      	sxtb	r3, r3
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	b25a      	sxtb	r2, r3
 80062d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	4619      	mov	r1, r3
 80062e0:	206b      	movs	r0, #107	; 0x6b
 80062e2:	f7ff ffbf 	bl	8006264 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80062e6:	2064      	movs	r0, #100	; 0x64
 80062e8:	f002 fe2c 	bl	8008f44 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	78db      	ldrb	r3, [r3, #3]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	4619      	mov	r1, r3
 80062fe:	201a      	movs	r0, #26
 8006300:	f7ff ffb0 	bl	8006264 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0318 	and.w	r3, r3, #24
 8006314:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	4619      	mov	r1, r3
 800631a:	201b      	movs	r0, #27
 800631c:	f7ff ffa2 	bl	8006264 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	789b      	ldrb	r3, [r3, #2]
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 0318 	and.w	r3, r3, #24
 8006330:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	4619      	mov	r1, r3
 8006336:	201c      	movs	r0, #28
 8006338:	f7ff ff94 	bl	8006264 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 800633c:	2004      	movs	r0, #4
 800633e:	f000 f857 	bl	80063f0 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	789b      	ldrb	r3, [r3, #2]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d81a      	bhi.n	8006380 <MPU6050_Config+0xe0>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <MPU6050_Config+0xb0>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	08006369 	.word	0x08006369
 8006358:	08006371 	.word	0x08006371
 800635c:	08006379 	.word	0x08006379
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <MPU6050_Config+0x12c>)
 8006362:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <MPU6050_Config+0x130>)
 8006364:	601a      	str	r2, [r3, #0]
			break;
 8006366:	e00c      	b.n	8006382 <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <MPU6050_Config+0x12c>)
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <MPU6050_Config+0x134>)
 800636c:	601a      	str	r2, [r3, #0]
				break;
 800636e:	e008      	b.n	8006382 <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <MPU6050_Config+0x12c>)
 8006372:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <MPU6050_Config+0x138>)
 8006374:	601a      	str	r2, [r3, #0]
			break;
 8006376:	e004      	b.n	8006382 <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8006378:	4b14      	ldr	r3, [pc, #80]	; (80063cc <MPU6050_Config+0x12c>)
 800637a:	4a18      	ldr	r2, [pc, #96]	; (80063dc <MPU6050_Config+0x13c>)
 800637c:	601a      	str	r2, [r3, #0]
			break;
 800637e:	e000      	b.n	8006382 <MPU6050_Config+0xe2>

		default:
			break;
 8006380:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d81a      	bhi.n	80063c0 <MPU6050_Config+0x120>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <MPU6050_Config+0xf0>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063a9 	.word	0x080063a9
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b9 	.word	0x080063b9
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <MPU6050_Config+0x140>)
 80063a2:	4a10      	ldr	r2, [pc, #64]	; (80063e4 <MPU6050_Config+0x144>)
 80063a4:	601a      	str	r2, [r3, #0]
			break;
 80063a6:	e00c      	b.n	80063c2 <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <MPU6050_Config+0x140>)
 80063aa:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <MPU6050_Config+0x148>)
 80063ac:	601a      	str	r2, [r3, #0]
				break;
 80063ae:	e008      	b.n	80063c2 <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <MPU6050_Config+0x140>)
 80063b2:	4a0e      	ldr	r2, [pc, #56]	; (80063ec <MPU6050_Config+0x14c>)
 80063b4:	601a      	str	r2, [r3, #0]
			break;
 80063b6:	e004      	b.n	80063c2 <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <MPU6050_Config+0x140>)
 80063ba:	4a05      	ldr	r2, [pc, #20]	; (80063d0 <MPU6050_Config+0x130>)
 80063bc:	601a      	str	r2, [r3, #0]
			break;
 80063be:	e000      	b.n	80063c2 <MPU6050_Config+0x122>

		default:
			break;
 80063c0:	bf00      	nop
	}

}
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200003e0 	.word	0x200003e0
 80063d0:	3d7a0000 	.word	0x3d7a0000
 80063d4:	3dfa0000 	.word	0x3dfa0000
 80063d8:	3e7a0000 	.word	0x3e7a0000
 80063dc:	3efa0000 	.word	0x3efa0000
 80063e0:	200003e4 	.word	0x200003e4
 80063e4:	3bfa0000 	.word	0x3bfa0000
 80063e8:	3c7a0000 	.word	0x3c7a0000
 80063ec:	3cfa0000 	.word	0x3cfa0000

080063f0 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	4619      	mov	r1, r3
 80063fe:	2019      	movs	r0, #25
 8006400:	f7ff ff30 	bl	8006264 <I2C_Write8>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8006414:	f107 031c 	add.w	r3, r7, #28
 8006418:	3301      	adds	r3, #1
 800641a:	2201      	movs	r2, #1
 800641c:	4619      	mov	r1, r3
 800641e:	203a      	movs	r0, #58	; 0x3a
 8006420:	f7ff fefa 	bl	8006218 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8006424:	7f7b      	ldrb	r3, [r7, #29]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d04f      	beq.n	80064ca <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 800642a:	f107 0314 	add.w	r3, r7, #20
 800642e:	2206      	movs	r2, #6
 8006430:	4619      	mov	r1, r3
 8006432:	203b      	movs	r0, #59	; 0x3b
 8006434:	f7ff fef0 	bl	8006218 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8006438:	7d3b      	ldrb	r3, [r7, #20]
 800643a:	b29b      	uxth	r3, r3
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	b29a      	uxth	r2, r3
 8006440:	7d7b      	ldrb	r3, [r7, #21]
 8006442:	b29b      	uxth	r3, r3
 8006444:	4413      	add	r3, r2
 8006446:	b29b      	uxth	r3, r3
 8006448:	b21a      	sxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 800644e:	7dbb      	ldrb	r3, [r7, #22]
 8006450:	b29b      	uxth	r3, r3
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	b29a      	uxth	r2, r3
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	b29b      	uxth	r3, r3
 800645a:	4413      	add	r3, r2
 800645c:	b29b      	uxth	r3, r3
 800645e:	b21a      	sxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8006464:	7e3b      	ldrb	r3, [r7, #24]
 8006466:	b29b      	uxth	r3, r3
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	b29a      	uxth	r2, r3
 800646c:	7e7b      	ldrb	r3, [r7, #25]
 800646e:	b29b      	uxth	r3, r3
 8006470:	4413      	add	r3, r2
 8006472:	b29b      	uxth	r3, r3
 8006474:	b21a      	sxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	2206      	movs	r2, #6
 8006480:	4619      	mov	r1, r3
 8006482:	2043      	movs	r0, #67	; 0x43
 8006484:	f7ff fec8 	bl	8006218 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8006488:	7b3b      	ldrb	r3, [r7, #12]
 800648a:	b29b      	uxth	r3, r3
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	b29a      	uxth	r2, r3
 8006490:	7b7b      	ldrb	r3, [r7, #13]
 8006492:	b29b      	uxth	r3, r3
 8006494:	4413      	add	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	b21a      	sxth	r2, r3
 800649a:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <MPU6050_Get_Accel_RawData+0xc8>)
 800649c:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	b21a      	sxth	r2, r3
 80064b0:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <MPU6050_Get_Accel_RawData+0xc8>)
 80064b2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80064b4:	7c3b      	ldrb	r3, [r7, #16]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	7c7b      	ldrb	r3, [r7, #17]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b21a      	sxth	r2, r3
 80064c6:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <MPU6050_Get_Accel_RawData+0xc8>)
 80064c8:	809a      	strh	r2, [r3, #4]
	}
}
 80064ca:	bf00      	nop
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200003e8 	.word	0x200003e8

080064d8 <MPU6050_Get_Gyro_RawData>:
//	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
//	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
//}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <MPU6050_Get_Gyro_RawData+0x34>)
 80064e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <MPU6050_Get_Gyro_RawData+0x34>)
 80064ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <MPU6050_Get_Gyro_RawData+0x34>)
 80064f6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	809a      	strh	r2, [r3, #4]
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	200003e8 	.word	0x200003e8

08006510 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006514:	f3bf 8f4f 	dsb	sy
}
 8006518:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <__NVIC_SystemReset+0x24>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006522:	4904      	ldr	r1, [pc, #16]	; (8006534 <__NVIC_SystemReset+0x24>)
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <__NVIC_SystemReset+0x28>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800652a:	f3bf 8f4f 	dsb	sy
}
 800652e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <__NVIC_SystemReset+0x20>
 8006534:	e000ed00 	.word	0xe000ed00
 8006538:	05fa0004 	.word	0x05fa0004

0800653c <HAL_SYSTICK_Callback>:
 *      Author: PC_1830
 */
#include "Uav_Global.h"

void HAL_SYSTICK_Callback(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
	system_clock_counter_1ms++;
 8006540:	4b40      	ldr	r3, [pc, #256]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3301      	adds	r3, #1
 8006546:	4a3f      	ldr	r2, [pc, #252]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 8006548:	6013      	str	r3, [r2, #0]

	if( system_clock_counter_1ms % 1000 == 0)
 800654a:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b3e      	ldr	r3, [pc, #248]	; (8006648 <HAL_SYSTICK_Callback+0x10c>)
 8006550:	fba3 1302 	umull	r1, r3, r3, r2
 8006554:	099b      	lsrs	r3, r3, #6
 8006556:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_SYSTICK_Callback+0x32>
	{
		Time.Task.Hz_1 = 1;
 8006564:	4a39      	ldr	r2, [pc, #228]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 8006566:	7813      	ldrb	r3, [r2, #0]
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 200 == 0)
 800656e:	4b35      	ldr	r3, [pc, #212]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b37      	ldr	r3, [pc, #220]	; (8006650 <HAL_SYSTICK_Callback+0x114>)
 8006574:	fba3 1302 	umull	r1, r3, r3, r2
 8006578:	099b      	lsrs	r3, r3, #6
 800657a:	21c8      	movs	r1, #200	; 0xc8
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_SYSTICK_Callback+0x54>
	{
		Time.Task.Hz_5 = 1;
 8006586:	4a31      	ldr	r2, [pc, #196]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 8006588:	7813      	ldrb	r3, [r2, #0]
 800658a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658e:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 100 == 0)
 8006590:	4b2c      	ldr	r3, [pc, #176]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <HAL_SYSTICK_Callback+0x114>)
 8006596:	fba3 1302 	umull	r1, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	2164      	movs	r1, #100	; 0x64
 800659e:	fb01 f303 	mul.w	r3, r1, r3
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <HAL_SYSTICK_Callback+0x76>
	{
		Time.Task.Hz_10 = 1;
 80065a8:	4a28      	ldr	r2, [pc, #160]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 80065aa:	7813      	ldrb	r3, [r2, #0]
 80065ac:	f043 0320 	orr.w	r3, r3, #32
 80065b0:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 50 == 0)
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b26      	ldr	r3, [pc, #152]	; (8006650 <HAL_SYSTICK_Callback+0x114>)
 80065b8:	fba3 1302 	umull	r1, r3, r3, r2
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	2132      	movs	r1, #50	; 0x32
 80065c0:	fb01 f303 	mul.w	r3, r1, r3
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <HAL_SYSTICK_Callback+0x98>
	{
		Time.Task.Hz_20 = 1;
 80065ca:	4a20      	ldr	r2, [pc, #128]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 80065cc:	7813      	ldrb	r3, [r2, #0]
 80065ce:	f043 0310 	orr.w	r3, r3, #16
 80065d2:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 20 == 0)
 80065d4:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 80065d6:	6819      	ldr	r1, [r3, #0]
 80065d8:	4b1e      	ldr	r3, [pc, #120]	; (8006654 <HAL_SYSTICK_Callback+0x118>)
 80065da:	fba3 2301 	umull	r2, r3, r3, r1
 80065de:	091a      	lsrs	r2, r3, #4
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	1aca      	subs	r2, r1, r3
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	d104      	bne.n	80065f8 <HAL_SYSTICK_Callback+0xbc>
	{
		Time.Task.Hz_50 = 1;
 80065ee:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 80065f0:	7813      	ldrb	r3, [r2, #0]
 80065f2:	f043 0308 	orr.w	r3, r3, #8
 80065f6:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 5 == 0)
 80065f8:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	4b15      	ldr	r3, [pc, #84]	; (8006654 <HAL_SYSTICK_Callback+0x118>)
 80065fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006602:	089a      	lsrs	r2, r3, #2
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	1aca      	subs	r2, r1, r3
 800660c:	2a00      	cmp	r2, #0
 800660e:	d104      	bne.n	800661a <HAL_SYSTICK_Callback+0xde>
	{
		Time.Task.Hz_200 = 1;
 8006610:	4a0e      	ldr	r2, [pc, #56]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 8006612:	7813      	ldrb	r3, [r2, #0]
 8006614:	f043 0304 	orr.w	r3, r3, #4
 8006618:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 2 == 0)
 800661a:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <HAL_SYSTICK_Callback+0x108>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_SYSTICK_Callback+0xf4>
	{
		Time.Task.Hz_500 = 1;
 8006626:	4a09      	ldr	r2, [pc, #36]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 8006628:	7813      	ldrb	r3, [r2, #0]
 800662a:	f043 0302 	orr.w	r3, r3, #2
 800662e:	7013      	strb	r3, [r2, #0]
	}
	if( system_clock_counter_1ms % 1 == 0)
	{
		Time.Task.Hz_1000 = 1;
 8006630:	4a06      	ldr	r2, [pc, #24]	; (800664c <HAL_SYSTICK_Callback+0x110>)
 8006632:	7813      	ldrb	r3, [r2, #0]
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	7013      	strb	r3, [r2, #0]
	}
}
 800663a:	bf00      	nop
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	2000140c 	.word	0x2000140c
 8006648:	10624dd3 	.word	0x10624dd3
 800664c:	20001690 	.word	0x20001690
 8006650:	51eb851f 	.word	0x51eb851f
 8006654:	cccccccd 	.word	0xcccccccd

08006658 <MapFloat>:
int MapInt(int x, int in_min, int in_max, int out_min, int out_max)
{
	return (int)(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
float MapFloat(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006662:	edc7 0a04 	vstr	s1, [r7, #16]
 8006666:	ed87 1a03 	vstr	s2, [r7, #12]
 800666a:	edc7 1a02 	vstr	s3, [r7, #8]
 800666e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (float)(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006672:	ed97 7a05 	vldr	s14, [r7, #20]
 8006676:	edd7 7a04 	vldr	s15, [r7, #16]
 800667a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800667e:	edd7 6a01 	vldr	s13, [r7, #4]
 8006682:	edd7 7a02 	vldr	s15, [r7, #8]
 8006686:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800668a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800668e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006692:	edd7 7a04 	vldr	s15, [r7, #16]
 8006696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669e:	edd7 7a02 	vldr	s15, [r7, #8]
 80066a2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80066a6:	eeb0 0a67 	vmov.f32	s0, s15
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <constrain>:
float constrain(float value, float Min, float Max)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80066be:	edc7 0a02 	vstr	s1, [r7, #8]
 80066c2:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value < Min)
 80066c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80066ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80066ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d6:	d501      	bpl.n	80066dc <constrain+0x28>
	{
		return Min;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	e00b      	b.n	80066f4 <constrain+0x40>
	}
	if(value > Max)
 80066dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80066e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80066e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ec:	dd01      	ble.n	80066f2 <constrain+0x3e>
	{
		return Max;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	e000      	b.n	80066f4 <constrain+0x40>
	}

	return value;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	ee07 3a90 	vmov	s15, r3
}
 80066f8:	eeb0 0a67 	vmov.f32	s0, s15
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	if(huart==&huart3)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a81      	ldr	r2, [pc, #516]	; (8006918 <HAL_UART_RxCpltCallback+0x210>)
 8006714:	4293      	cmp	r3, r2
 8006716:	f040 80fa 	bne.w	800690e <HAL_UART_RxCpltCallback+0x206>
	{
		RcTrue.ConnectTrue=1;
 800671a:	4b80      	ldr	r3, [pc, #512]	; (800691c <HAL_UART_RxCpltCallback+0x214>)
 800671c:	2201      	movs	r2, #1
 800671e:	805a      	strh	r2, [r3, #2]
		static int index = 0;
		Rx_buffer[index++] = Rx_temp;
 8006720:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	497e      	ldr	r1, [pc, #504]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 8006728:	600a      	str	r2, [r1, #0]
 800672a:	4a7e      	ldr	r2, [pc, #504]	; (8006924 <HAL_UART_RxCpltCallback+0x21c>)
 800672c:	7811      	ldrb	r1, [r2, #0]
 800672e:	4a7e      	ldr	r2, [pc, #504]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006730:	54d1      	strb	r1, [r2, r3]
		if(index == 1 && Rx_buffer[0] != 0x20)
 8006732:	4b7b      	ldr	r3, [pc, #492]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d106      	bne.n	8006748 <HAL_UART_RxCpltCallback+0x40>
 800673a:	4b7b      	ldr	r3, [pc, #492]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b20      	cmp	r3, #32
 8006740:	d002      	beq.n	8006748 <HAL_UART_RxCpltCallback+0x40>
		{
			index = 0;
 8006742:	4b77      	ldr	r3, [pc, #476]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
		}
		if(index == 2 && Rx_buffer[1] != 0x40)
 8006748:	4b75      	ldr	r3, [pc, #468]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d106      	bne.n	800675e <HAL_UART_RxCpltCallback+0x56>
 8006750:	4b75      	ldr	r3, [pc, #468]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d002      	beq.n	800675e <HAL_UART_RxCpltCallback+0x56>
		{
			index = 0;
 8006758:	4b71      	ldr	r3, [pc, #452]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
		}
		if(index == 32)
 800675e:	4b70      	ldr	r3, [pc, #448]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b20      	cmp	r3, #32
 8006764:	f040 80ce 	bne.w	8006904 <HAL_UART_RxCpltCallback+0x1fc>
		{
			index = 0;
 8006768:	4b6d      	ldr	r3, [pc, #436]	; (8006920 <HAL_UART_RxCpltCallback+0x218>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
			uint16_t checksum;
			uint16_t checksum_cal = 0xFFFF;
 800676e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006772:	82fb      	strh	r3, [r7, #22]
			checksum = Rx_buffer[31] << 8 | Rx_buffer[30];
 8006774:	4b6c      	ldr	r3, [pc, #432]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006776:	7fdb      	ldrb	r3, [r3, #31]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	b21a      	sxth	r2, r3
 800677c:	4b6a      	ldr	r3, [pc, #424]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800677e:	7f9b      	ldrb	r3, [r3, #30]
 8006780:	b21b      	sxth	r3, r3
 8006782:	4313      	orrs	r3, r2
 8006784:	b21b      	sxth	r3, r3
 8006786:	81fb      	strh	r3, [r7, #14]

			for(int i = 0 ; i<30 ; i++)
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	e00a      	b.n	80067a4 <HAL_UART_RxCpltCallback+0x9c>
			{
				checksum_cal -= Rx_buffer[i];
 800678e:	4a66      	ldr	r2, [pc, #408]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	8afa      	ldrh	r2, [r7, #22]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	82fb      	strh	r3, [r7, #22]
			for(int i = 0 ; i<30 ; i++)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	3301      	adds	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2b1d      	cmp	r3, #29
 80067a8:	ddf1      	ble.n	800678e <HAL_UART_RxCpltCallback+0x86>
			}

			if(checksum_cal == checksum)
 80067aa:	8afa      	ldrh	r2, [r7, #22]
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	f040 80a8 	bne.w	8006904 <HAL_UART_RxCpltCallback+0x1fc>
			{
				Rc.Ch1 = Rx_buffer[3] << 8 | Rx_buffer[2];
 80067b4:	4b5c      	ldr	r3, [pc, #368]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067b6:	78db      	ldrb	r3, [r3, #3]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	b21a      	sxth	r2, r3
 80067bc:	4b5a      	ldr	r3, [pc, #360]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067be:	789b      	ldrb	r3, [r3, #2]
 80067c0:	b21b      	sxth	r3, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	b21b      	sxth	r3, r3
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	4b58      	ldr	r3, [pc, #352]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80067ca:	801a      	strh	r2, [r3, #0]
				Rc.Ch2 = Rx_buffer[5] << 8 | Rx_buffer[4];
 80067cc:	4b56      	ldr	r3, [pc, #344]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067ce:	795b      	ldrb	r3, [r3, #5]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	b21a      	sxth	r2, r3
 80067d4:	4b54      	ldr	r3, [pc, #336]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067d6:	791b      	ldrb	r3, [r3, #4]
 80067d8:	b21b      	sxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b21b      	sxth	r3, r3
 80067de:	b29a      	uxth	r2, r3
 80067e0:	4b52      	ldr	r3, [pc, #328]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80067e2:	805a      	strh	r2, [r3, #2]
				Rc.Ch3 = Rx_buffer[7] << 8 | Rx_buffer[6];
 80067e4:	4b50      	ldr	r3, [pc, #320]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067e6:	79db      	ldrb	r3, [r3, #7]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	b21a      	sxth	r2, r3
 80067ec:	4b4e      	ldr	r3, [pc, #312]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067ee:	799b      	ldrb	r3, [r3, #6]
 80067f0:	b21b      	sxth	r3, r3
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b21b      	sxth	r3, r3
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	4b4c      	ldr	r3, [pc, #304]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80067fa:	809a      	strh	r2, [r3, #4]
				Rc.Ch4 = Rx_buffer[9] << 8 | Rx_buffer[8];
 80067fc:	4b4a      	ldr	r3, [pc, #296]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80067fe:	7a5b      	ldrb	r3, [r3, #9]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	b21a      	sxth	r2, r3
 8006804:	4b48      	ldr	r3, [pc, #288]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006806:	7a1b      	ldrb	r3, [r3, #8]
 8006808:	b21b      	sxth	r3, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	b21b      	sxth	r3, r3
 800680e:	b29a      	uxth	r2, r3
 8006810:	4b46      	ldr	r3, [pc, #280]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 8006812:	80da      	strh	r2, [r3, #6]
				Rc.Ch5 = Rx_buffer[11] << 8 | Rx_buffer[10];
 8006814:	4b44      	ldr	r3, [pc, #272]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006816:	7adb      	ldrb	r3, [r3, #11]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	b21a      	sxth	r2, r3
 800681c:	4b42      	ldr	r3, [pc, #264]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800681e:	7a9b      	ldrb	r3, [r3, #10]
 8006820:	b21b      	sxth	r3, r3
 8006822:	4313      	orrs	r3, r2
 8006824:	b21b      	sxth	r3, r3
 8006826:	b29a      	uxth	r2, r3
 8006828:	4b40      	ldr	r3, [pc, #256]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 800682a:	811a      	strh	r2, [r3, #8]
				Rc.Ch6 = Rx_buffer[13] << 8 | Rx_buffer[12];
 800682c:	4b3e      	ldr	r3, [pc, #248]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800682e:	7b5b      	ldrb	r3, [r3, #13]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	b21a      	sxth	r2, r3
 8006834:	4b3c      	ldr	r3, [pc, #240]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006836:	7b1b      	ldrb	r3, [r3, #12]
 8006838:	b21b      	sxth	r3, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	b21b      	sxth	r3, r3
 800683e:	b29a      	uxth	r2, r3
 8006840:	4b3a      	ldr	r3, [pc, #232]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 8006842:	815a      	strh	r2, [r3, #10]
				Rc.Ch7 = Rx_buffer[15] << 8 | Rx_buffer[14];
 8006844:	4b38      	ldr	r3, [pc, #224]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006846:	7bdb      	ldrb	r3, [r3, #15]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	b21a      	sxth	r2, r3
 800684c:	4b36      	ldr	r3, [pc, #216]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800684e:	7b9b      	ldrb	r3, [r3, #14]
 8006850:	b21b      	sxth	r3, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	b21b      	sxth	r3, r3
 8006856:	b29a      	uxth	r2, r3
 8006858:	4b34      	ldr	r3, [pc, #208]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 800685a:	819a      	strh	r2, [r3, #12]
				Rc.Ch8 = Rx_buffer[17] << 8 | Rx_buffer[16];
 800685c:	4b32      	ldr	r3, [pc, #200]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800685e:	7c5b      	ldrb	r3, [r3, #17]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	b21a      	sxth	r2, r3
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006866:	7c1b      	ldrb	r3, [r3, #16]
 8006868:	b21b      	sxth	r3, r3
 800686a:	4313      	orrs	r3, r2
 800686c:	b21b      	sxth	r3, r3
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b2e      	ldr	r3, [pc, #184]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 8006872:	81da      	strh	r2, [r3, #14]
				Rc.Ch9 = Rx_buffer[19] << 8 | Rx_buffer[18];
 8006874:	4b2c      	ldr	r3, [pc, #176]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006876:	7cdb      	ldrb	r3, [r3, #19]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	b21a      	sxth	r2, r3
 800687c:	4b2a      	ldr	r3, [pc, #168]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800687e:	7c9b      	ldrb	r3, [r3, #18]
 8006880:	b21b      	sxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b21b      	sxth	r3, r3
 8006886:	b29a      	uxth	r2, r3
 8006888:	4b28      	ldr	r3, [pc, #160]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 800688a:	821a      	strh	r2, [r3, #16]
				Rc.Ch10 = Rx_buffer[21] << 8 | Rx_buffer[20];
 800688c:	4b26      	ldr	r3, [pc, #152]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 800688e:	7d5b      	ldrb	r3, [r3, #21]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	b21a      	sxth	r2, r3
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 8006896:	7d1b      	ldrb	r3, [r3, #20]
 8006898:	b21b      	sxth	r3, r3
 800689a:	4313      	orrs	r3, r2
 800689c:	b21b      	sxth	r3, r3
 800689e:	b29a      	uxth	r2, r3
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80068a2:	825a      	strh	r2, [r3, #18]
				Rc.Ch11 = Rx_buffer[23] << 8 | Rx_buffer[22];
 80068a4:	4b20      	ldr	r3, [pc, #128]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068a6:	7ddb      	ldrb	r3, [r3, #23]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	b21a      	sxth	r2, r3
 80068ac:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068ae:	7d9b      	ldrb	r3, [r3, #22]
 80068b0:	b21b      	sxth	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	4b1c      	ldr	r3, [pc, #112]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80068ba:	829a      	strh	r2, [r3, #20]
				Rc.Ch12 = Rx_buffer[25] << 8 | Rx_buffer[24];
 80068bc:	4b1a      	ldr	r3, [pc, #104]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068be:	7e5b      	ldrb	r3, [r3, #25]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	b21a      	sxth	r2, r3
 80068c4:	4b18      	ldr	r3, [pc, #96]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068c6:	7e1b      	ldrb	r3, [r3, #24]
 80068c8:	b21b      	sxth	r3, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b21b      	sxth	r3, r3
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	4b16      	ldr	r3, [pc, #88]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80068d2:	82da      	strh	r2, [r3, #22]
				Rc.Ch13 = Rx_buffer[27] << 8 | Rx_buffer[26];
 80068d4:	4b14      	ldr	r3, [pc, #80]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068d6:	7edb      	ldrb	r3, [r3, #27]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	b21a      	sxth	r2, r3
 80068dc:	4b12      	ldr	r3, [pc, #72]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068de:	7e9b      	ldrb	r3, [r3, #26]
 80068e0:	b21b      	sxth	r3, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	4b10      	ldr	r3, [pc, #64]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 80068ea:	831a      	strh	r2, [r3, #24]
				Rc.Ch14 = Rx_buffer[29] << 8 | Rx_buffer[28];
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068ee:	7f5b      	ldrb	r3, [r3, #29]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	b21a      	sxth	r2, r3
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <HAL_UART_RxCpltCallback+0x220>)
 80068f6:	7f1b      	ldrb	r3, [r3, #28]
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b21b      	sxth	r3, r3
 80068fe:	b29a      	uxth	r2, r3
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <HAL_UART_RxCpltCallback+0x224>)
 8006902:	835a      	strh	r2, [r3, #26]
			}
		}
		HAL_UART_Receive_IT(&huart3, &Rx_temp, 1);
 8006904:	2201      	movs	r2, #1
 8006906:	4907      	ldr	r1, [pc, #28]	; (8006924 <HAL_UART_RxCpltCallback+0x21c>)
 8006908:	4803      	ldr	r0, [pc, #12]	; (8006918 <HAL_UART_RxCpltCallback+0x210>)
 800690a:	f008 fba4 	bl	800f056 <HAL_UART_Receive_IT>
	//			index = 0;
	//		}
	//		HAL_UART_Receive_IT(&huart5, &raspberryRx, 1);
	//}
	//}
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000fa0 	.word	0x20000fa0
 800691c:	20000cc8 	.word	0x20000cc8
 8006920:	200003f0 	.word	0x200003f0
 8006924:	200012a4 	.word	0x200012a4
 8006928:	200016a0 	.word	0x200016a0
 800692c:	20001468 	.word	0x20001468

08006930 <HAL_GPIO_EXTI_Callback>:
//	}
//	HAL_ADC_Stop(&hadc1);
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	80fb      	strh	r3, [r7, #6]
	onReceiveFlag = 0;
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <HAL_GPIO_EXTI_Callback+0x24>)
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]

	AESK_NRF24_ReadPack();
 8006940:	f7fb fe9e 	bl	8002680 <AESK_NRF24_ReadPack>

	onReceiveFlag = 1;
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <HAL_GPIO_EXTI_Callback+0x24>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000f88 	.word	0x20000f88

08006958 <onReceive>:
void onReceive(uint8_t * pack, uint16_t len)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	807b      	strh	r3, [r7, #2]
	if(*pack == 'P' || *pack == 'G' || *pack == 'U')
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b50      	cmp	r3, #80	; 0x50
 800696a:	d007      	beq.n	800697c <onReceive+0x24>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b47      	cmp	r3, #71	; 0x47
 8006972:	d003      	beq.n	800697c <onReceive+0x24>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b55      	cmp	r3, #85	; 0x55
 800697a:	d10a      	bne.n	8006992 <onReceive+0x3a>
	{
		AESK_NRF24_WritePack(pack, len, nodeGCS);
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <onReceive+0x58>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	8879      	ldrh	r1, [r7, #2]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fb fee7 	bl	8002758 <AESK_NRF24_WritePack>
		HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800698a:	2102      	movs	r1, #2
 800698c:	4809      	ldr	r0, [pc, #36]	; (80069b4 <onReceive+0x5c>)
 800698e:	f004 f8b2 	bl	800aaf6 <HAL_GPIO_TogglePin>
	}

	parseBuffer(pack);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f812 	bl	80069bc <parseBuffer>

	HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8006998:	2102      	movs	r1, #2
 800699a:	4806      	ldr	r0, [pc, #24]	; (80069b4 <onReceive+0x5c>)
 800699c:	f004 f8ab 	bl	800aaf6 <HAL_GPIO_TogglePin>

	onReceiveFlag = 1;
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <onReceive+0x60>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	701a      	strb	r2, [r3, #0]
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200016c8 	.word	0x200016c8
 80069b4:	40020800 	.word	0x40020800
 80069b8:	20000f88 	.word	0x20000f88

080069bc <parseBuffer>:

void parseBuffer(uint8_t *buffer)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
    uint16_t index = 2;
 80069c4:	2302      	movs	r3, #2
 80069c6:	81fb      	strh	r3, [r7, #14]

    if(aesk_nrf24_data.RxBuffer[0] == 'P')
 80069c8:	4bbb      	ldr	r3, [pc, #748]	; (8006cb8 <parseBuffer+0x2fc>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b50      	cmp	r3, #80	; 0x50
 80069ce:	f040 81dc 	bne.w	8006d8a <parseBuffer+0x3ce>
    {
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKp,buffer,&index);
 80069d2:	f107 030e 	add.w	r3, r7, #14
 80069d6:	461a      	mov	r2, r3
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	48b8      	ldr	r0, [pc, #736]	; (8006cbc <parseBuffer+0x300>)
 80069dc:	f7fa fbfb 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKi,buffer,&index);
 80069e0:	f107 030e 	add.w	r3, r7, #14
 80069e4:	461a      	mov	r2, r3
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	48b5      	ldr	r0, [pc, #724]	; (8006cc0 <parseBuffer+0x304>)
 80069ea:	f7fa fbf4 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKd,buffer,&index);
 80069ee:	f107 030e 	add.w	r3, r7, #14
 80069f2:	461a      	mov	r2, r3
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	48b3      	ldr	r0, [pc, #716]	; (8006cc4 <parseBuffer+0x308>)
 80069f8:	f7fa fbed 	bl	80011d6 <AESK_UINT8toUINT24_LE>

        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKp,buffer,&index);
 80069fc:	f107 030e 	add.w	r3, r7, #14
 8006a00:	461a      	mov	r2, r3
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	48b0      	ldr	r0, [pc, #704]	; (8006cc8 <parseBuffer+0x30c>)
 8006a06:	f7fa fbe6 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKi,buffer,&index);
 8006a0a:	f107 030e 	add.w	r3, r7, #14
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	48ae      	ldr	r0, [pc, #696]	; (8006ccc <parseBuffer+0x310>)
 8006a14:	f7fa fbdf 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKd,buffer,&index);
 8006a18:	f107 030e 	add.w	r3, r7, #14
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	48ab      	ldr	r0, [pc, #684]	; (8006cd0 <parseBuffer+0x314>)
 8006a22:	f7fa fbd8 	bl	80011d6 <AESK_UINT8toUINT24_LE>

        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKp,buffer,&index);
 8006a26:	f107 030e 	add.w	r3, r7, #14
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	48a9      	ldr	r0, [pc, #676]	; (8006cd4 <parseBuffer+0x318>)
 8006a30:	f7fa fbd1 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKi,buffer,&index);
 8006a34:	f107 030e 	add.w	r3, r7, #14
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	48a6      	ldr	r0, [pc, #664]	; (8006cd8 <parseBuffer+0x31c>)
 8006a3e:	f7fa fbca 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKd,buffer,&index);
 8006a42:	f107 030e 	add.w	r3, r7, #14
 8006a46:	461a      	mov	r2, r3
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	48a4      	ldr	r0, [pc, #656]	; (8006cdc <parseBuffer+0x320>)
 8006a4c:	f7fa fbc3 	bl	80011d6 <AESK_UINT8toUINT24_LE>

        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKp,buffer,&index);
 8006a50:	f107 030e 	add.w	r3, r7, #14
 8006a54:	461a      	mov	r2, r3
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	48a1      	ldr	r0, [pc, #644]	; (8006ce0 <parseBuffer+0x324>)
 8006a5a:	f7fa fbbc 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKi,buffer,&index);
 8006a5e:	f107 030e 	add.w	r3, r7, #14
 8006a62:	461a      	mov	r2, r3
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	489f      	ldr	r0, [pc, #636]	; (8006ce4 <parseBuffer+0x328>)
 8006a68:	f7fa fbb5 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKd,buffer,&index);
 8006a6c:	f107 030e 	add.w	r3, r7, #14
 8006a70:	461a      	mov	r2, r3
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	489c      	ldr	r0, [pc, #624]	; (8006ce8 <parseBuffer+0x32c>)
 8006a76:	f7fa fbae 	bl	80011d6 <AESK_UINT8toUINT24_LE>

        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kp,buffer,&index);
 8006a7a:	f107 030e 	add.w	r3, r7, #14
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	489a      	ldr	r0, [pc, #616]	; (8006cec <parseBuffer+0x330>)
 8006a84:	f7fa fba7 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Ki,buffer,&index);
 8006a88:	f107 030e 	add.w	r3, r7, #14
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4897      	ldr	r0, [pc, #604]	; (8006cf0 <parseBuffer+0x334>)
 8006a92:	f7fa fba0 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kd,buffer,&index);
 8006a96:	f107 030e 	add.w	r3, r7, #14
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4895      	ldr	r0, [pc, #596]	; (8006cf4 <parseBuffer+0x338>)
 8006aa0:	f7fa fb99 	bl	80011d6 <AESK_UINT8toUINT24_LE>

        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kp,buffer,&index);
 8006aa4:	f107 030e 	add.w	r3, r7, #14
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4892      	ldr	r0, [pc, #584]	; (8006cf8 <parseBuffer+0x33c>)
 8006aae:	f7fa fb92 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Ki,buffer,&index);
 8006ab2:	f107 030e 	add.w	r3, r7, #14
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4890      	ldr	r0, [pc, #576]	; (8006cfc <parseBuffer+0x340>)
 8006abc:	f7fa fb8b 	bl	80011d6 <AESK_UINT8toUINT24_LE>
        AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kd,buffer,&index);
 8006ac0:	f107 030e 	add.w	r3, r7, #14
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	488d      	ldr	r0, [pc, #564]	; (8006d00 <parseBuffer+0x344>)
 8006aca:	f7fa fb84 	bl	80011d6 <AESK_UINT8toUINT24_LE>


        aesk_Rx_Datas_Float.floatRollPitchKp = (float)aesk_Rx_Datas_Int.RollPitchKp/100000;
 8006ace:	4b7b      	ldr	r3, [pc, #492]	; (8006cbc <parseBuffer+0x300>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ada:	eddf 6a91 	vldr	s13, [pc, #580]	; 8006d20 <parseBuffer+0x364>
 8006ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ae2:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <parseBuffer+0x348>)
 8006ae4:	edc3 7a00 	vstr	s15, [r3]
        aesk_Rx_Datas_Float.floatRollPitchKi = (float)aesk_Rx_Datas_Int.RollPitchKi/100000;
 8006ae8:	4b74      	ldr	r3, [pc, #464]	; (8006cbc <parseBuffer+0x300>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006af4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8006d20 <parseBuffer+0x364>
 8006af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006afc:	4b81      	ldr	r3, [pc, #516]	; (8006d04 <parseBuffer+0x348>)
 8006afe:	edc3 7a01 	vstr	s15, [r3, #4]
        aesk_Rx_Datas_Float.floatRollPitchKd = (float)aesk_Rx_Datas_Int.RollPitchKd/100000;
 8006b02:	4b6e      	ldr	r3, [pc, #440]	; (8006cbc <parseBuffer+0x300>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b0e:	eddf 6a84 	vldr	s13, [pc, #528]	; 8006d20 <parseBuffer+0x364>
 8006b12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b16:	4b7b      	ldr	r3, [pc, #492]	; (8006d04 <parseBuffer+0x348>)
 8006b18:	edc3 7a02 	vstr	s15, [r3, #8]

        Roll.Kp = aesk_Rx_Datas_Float.floatRollPitchKp;
 8006b1c:	4b79      	ldr	r3, [pc, #484]	; (8006d04 <parseBuffer+0x348>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a79      	ldr	r2, [pc, #484]	; (8006d08 <parseBuffer+0x34c>)
 8006b22:	6013      	str	r3, [r2, #0]
		Roll.Ki = aesk_Rx_Datas_Float.floatRollPitchKi;
 8006b24:	4b77      	ldr	r3, [pc, #476]	; (8006d04 <parseBuffer+0x348>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a77      	ldr	r2, [pc, #476]	; (8006d08 <parseBuffer+0x34c>)
 8006b2a:	6053      	str	r3, [r2, #4]
		Roll.Kd = aesk_Rx_Datas_Float.floatRollPitchKd;
 8006b2c:	4b75      	ldr	r3, [pc, #468]	; (8006d04 <parseBuffer+0x348>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4a75      	ldr	r2, [pc, #468]	; (8006d08 <parseBuffer+0x34c>)
 8006b32:	6093      	str	r3, [r2, #8]

		Pitch.Kp = aesk_Rx_Datas_Float.floatRollPitchKp;
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <parseBuffer+0x348>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a74      	ldr	r2, [pc, #464]	; (8006d0c <parseBuffer+0x350>)
 8006b3a:	6013      	str	r3, [r2, #0]
		Pitch.Ki = aesk_Rx_Datas_Float.floatRollPitchKi;
 8006b3c:	4b71      	ldr	r3, [pc, #452]	; (8006d04 <parseBuffer+0x348>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a72      	ldr	r2, [pc, #456]	; (8006d0c <parseBuffer+0x350>)
 8006b42:	6053      	str	r3, [r2, #4]
		Pitch.Kd = aesk_Rx_Datas_Float.floatRollPitchKd;
 8006b44:	4b6f      	ldr	r3, [pc, #444]	; (8006d04 <parseBuffer+0x348>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4a70      	ldr	r2, [pc, #448]	; (8006d0c <parseBuffer+0x350>)
 8006b4a:	6093      	str	r3, [r2, #8]

        aesk_Rx_Datas_Float.floatYawKp = (float)aesk_Rx_Datas_Int.YawKp/100000;
 8006b4c:	4b5b      	ldr	r3, [pc, #364]	; (8006cbc <parseBuffer+0x300>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b58:	eddf 6a71 	vldr	s13, [pc, #452]	; 8006d20 <parseBuffer+0x364>
 8006b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b60:	4b68      	ldr	r3, [pc, #416]	; (8006d04 <parseBuffer+0x348>)
 8006b62:	edc3 7a03 	vstr	s15, [r3, #12]
        aesk_Rx_Datas_Float.floatYawKi = (float)aesk_Rx_Datas_Int.YawKi/100000;
 8006b66:	4b55      	ldr	r3, [pc, #340]	; (8006cbc <parseBuffer+0x300>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b72:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006d20 <parseBuffer+0x364>
 8006b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b7a:	4b62      	ldr	r3, [pc, #392]	; (8006d04 <parseBuffer+0x348>)
 8006b7c:	edc3 7a04 	vstr	s15, [r3, #16]
        aesk_Rx_Datas_Float.floatYawKd = (float)aesk_Rx_Datas_Int.YawKd/100000;
 8006b80:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <parseBuffer+0x300>)
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	ee07 3a90 	vmov	s15, r3
 8006b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b8c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006d20 <parseBuffer+0x364>
 8006b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b94:	4b5b      	ldr	r3, [pc, #364]	; (8006d04 <parseBuffer+0x348>)
 8006b96:	edc3 7a05 	vstr	s15, [r3, #20]

        Yaw.Kp = aesk_Rx_Datas_Float.floatYawKp;
 8006b9a:	4b5a      	ldr	r3, [pc, #360]	; (8006d04 <parseBuffer+0x348>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	4a5c      	ldr	r2, [pc, #368]	; (8006d10 <parseBuffer+0x354>)
 8006ba0:	6013      	str	r3, [r2, #0]
		Yaw.Ki = aesk_Rx_Datas_Float.floatYawKi;
 8006ba2:	4b58      	ldr	r3, [pc, #352]	; (8006d04 <parseBuffer+0x348>)
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	4a5a      	ldr	r2, [pc, #360]	; (8006d10 <parseBuffer+0x354>)
 8006ba8:	6053      	str	r3, [r2, #4]
		AltitudeCalculator = aesk_Rx_Datas_Float.floatYawKd;
 8006baa:	4b56      	ldr	r3, [pc, #344]	; (8006d04 <parseBuffer+0x348>)
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	4a59      	ldr	r2, [pc, #356]	; (8006d14 <parseBuffer+0x358>)
 8006bb0:	6013      	str	r3, [r2, #0]
		Yaw.Kd = 0;
 8006bb2:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <parseBuffer+0x354>)
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
		aesk_Rx_Datas_Float.floatAltitudeKp = (float)aesk_Rx_Datas_Int.AltitudeKp/100000;
 8006bba:	4b40      	ldr	r3, [pc, #256]	; (8006cbc <parseBuffer+0x300>)
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bc6:	eddf 6a56 	vldr	s13, [pc, #344]	; 8006d20 <parseBuffer+0x364>
 8006bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bce:	4b4d      	ldr	r3, [pc, #308]	; (8006d04 <parseBuffer+0x348>)
 8006bd0:	edc3 7a06 	vstr	s15, [r3, #24]
		aesk_Rx_Datas_Float.floatAltitudeKi = (float)aesk_Rx_Datas_Int.AltitudeKi/100000;
 8006bd4:	4b39      	ldr	r3, [pc, #228]	; (8006cbc <parseBuffer+0x300>)
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	ee07 3a90 	vmov	s15, r3
 8006bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006be0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d20 <parseBuffer+0x364>
 8006be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006be8:	4b46      	ldr	r3, [pc, #280]	; (8006d04 <parseBuffer+0x348>)
 8006bea:	edc3 7a07 	vstr	s15, [r3, #28]
		aesk_Rx_Datas_Float.floatAltitudeKd = (float)aesk_Rx_Datas_Int.AltitudeKd/100000;
 8006bee:	4b33      	ldr	r3, [pc, #204]	; (8006cbc <parseBuffer+0x300>)
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bfa:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006d20 <parseBuffer+0x364>
 8006bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c02:	4b40      	ldr	r3, [pc, #256]	; (8006d04 <parseBuffer+0x348>)
 8006c04:	edc3 7a08 	vstr	s15, [r3, #32]

		Altitude.Kp=  aesk_Rx_Datas_Float.floatAltitudeKp ;
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <parseBuffer+0x348>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	4a42      	ldr	r2, [pc, #264]	; (8006d18 <parseBuffer+0x35c>)
 8006c0e:	6013      	str	r3, [r2, #0]
		Altitude.Ki=  aesk_Rx_Datas_Float.floatAltitudeKi ;
 8006c10:	4b3c      	ldr	r3, [pc, #240]	; (8006d04 <parseBuffer+0x348>)
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	4a40      	ldr	r2, [pc, #256]	; (8006d18 <parseBuffer+0x35c>)
 8006c16:	6053      	str	r3, [r2, #4]
		Altitude.Kd=  aesk_Rx_Datas_Float.floatAltitudeKd ;
 8006c18:	4b3a      	ldr	r3, [pc, #232]	; (8006d04 <parseBuffer+0x348>)
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	4a3e      	ldr	r2, [pc, #248]	; (8006d18 <parseBuffer+0x35c>)
 8006c1e:	6093      	str	r3, [r2, #8]
		Flash_Write_Data_u8(0x08060000,&buffer[2], 72);// 24 sadece roll ve yaw degerlerini tutmak için arttırmak istediğinde her deger için 4 bayt
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3302      	adds	r3, #2
 8006c24:	2248      	movs	r2, #72	; 0x48
 8006c26:	4619      	mov	r1, r3
 8006c28:	483c      	ldr	r0, [pc, #240]	; (8006d1c <parseBuffer+0x360>)
 8006c2a:	f7fc fc3b 	bl	80034a4 <Flash_Write_Data_u8>

		aesk_Rx_Datas_Float.floatGpsKp = (float)aesk_Rx_Datas_Int.GpsKp/100000;
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <parseBuffer+0x300>)
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c3a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006d20 <parseBuffer+0x364>
 8006c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c42:	4b30      	ldr	r3, [pc, #192]	; (8006d04 <parseBuffer+0x348>)
 8006c44:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        aesk_Rx_Datas_Float.floatGpsKi = (float)aesk_Rx_Datas_Int.GpsKi/100000;
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <parseBuffer+0x300>)
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c54:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006d20 <parseBuffer+0x364>
 8006c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c5c:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <parseBuffer+0x348>)
 8006c5e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        aesk_Rx_Datas_Float.floatGpsKd = (float)aesk_Rx_Datas_Int.GpsKd/100000;
 8006c62:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <parseBuffer+0x300>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c6e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006d20 <parseBuffer+0x364>
 8006c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c76:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <parseBuffer+0x348>)
 8006c78:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

        aesk_Rx_Datas_Float.floatExt1Kp = (float)aesk_Rx_Datas_Int.Ext1Kp/100000;
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <parseBuffer+0x300>)
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c88:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006d20 <parseBuffer+0x364>
 8006c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c90:	4b1c      	ldr	r3, [pc, #112]	; (8006d04 <parseBuffer+0x348>)
 8006c92:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        aesk_Rx_Datas_Float.floatExt1Ki = (float)aesk_Rx_Datas_Int.Ext1Ki/100000;
 8006c96:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <parseBuffer+0x300>)
 8006c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ca2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006d20 <parseBuffer+0x364>
 8006ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006caa:	4b16      	ldr	r3, [pc, #88]	; (8006d04 <parseBuffer+0x348>)
 8006cac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        aesk_Rx_Datas_Float.floatExt1Kd = (float)aesk_Rx_Datas_Int.Ext1Kd/100000;
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <parseBuffer+0x300>)
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	e036      	b.n	8006d24 <parseBuffer+0x368>
 8006cb6:	bf00      	nop
 8006cb8:	20000d68 	.word	0x20000d68
 8006cbc:	20001634 	.word	0x20001634
 8006cc0:	20001638 	.word	0x20001638
 8006cc4:	2000163c 	.word	0x2000163c
 8006cc8:	20001640 	.word	0x20001640
 8006ccc:	20001644 	.word	0x20001644
 8006cd0:	20001648 	.word	0x20001648
 8006cd4:	2000164c 	.word	0x2000164c
 8006cd8:	20001650 	.word	0x20001650
 8006cdc:	20001654 	.word	0x20001654
 8006ce0:	20001658 	.word	0x20001658
 8006ce4:	2000165c 	.word	0x2000165c
 8006ce8:	20001660 	.word	0x20001660
 8006cec:	20001664 	.word	0x20001664
 8006cf0:	20001668 	.word	0x20001668
 8006cf4:	2000166c 	.word	0x2000166c
 8006cf8:	20001670 	.word	0x20001670
 8006cfc:	20001674 	.word	0x20001674
 8006d00:	20001678 	.word	0x20001678
 8006d04:	20001700 	.word	0x20001700
 8006d08:	20001268 	.word	0x20001268
 8006d0c:	20001774 	.word	0x20001774
 8006d10:	20000c44 	.word	0x20000c44
 8006d14:	2000142c 	.word	0x2000142c
 8006d18:	20001350 	.word	0x20001350
 8006d1c:	08060000 	.word	0x08060000
 8006d20:	47c35000 	.word	0x47c35000
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d2c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8006d20 <parseBuffer+0x364>
 8006d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d34:	4b3f      	ldr	r3, [pc, #252]	; (8006e34 <parseBuffer+0x478>)
 8006d36:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

        aesk_Rx_Datas_Float.floatExt2Kp = (float)aesk_Rx_Datas_Int.Ext2Kp/100000;
 8006d3a:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <parseBuffer+0x47c>)
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e3c <parseBuffer+0x480>
 8006d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d4e:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <parseBuffer+0x478>)
 8006d50:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        aesk_Rx_Datas_Float.floatExt2Ki = (float)aesk_Rx_Datas_Int.Ext2Ki/100000;
 8006d54:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <parseBuffer+0x47c>)
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d60:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006e3c <parseBuffer+0x480>
 8006d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d68:	4b32      	ldr	r3, [pc, #200]	; (8006e34 <parseBuffer+0x478>)
 8006d6a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        aesk_Rx_Datas_Float.floatExt2Kd = (float)aesk_Rx_Datas_Int.Ext2Kd/100000;
 8006d6e:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <parseBuffer+0x47c>)
 8006d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d7a:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006e3c <parseBuffer+0x480>
 8006d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d82:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <parseBuffer+0x478>)
 8006d84:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    else if(aesk_nrf24_data.RxBuffer[0] == 'U')
    {
		  NVIC_SystemReset();
    }

}
 8006d88:	e050      	b.n	8006e2c <parseBuffer+0x470>
    else if(aesk_nrf24_data.RxBuffer[0] == 'T')
 8006d8a:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <parseBuffer+0x484>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b54      	cmp	r3, #84	; 0x54
 8006d90:	d146      	bne.n	8006e20 <parseBuffer+0x464>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc1,buffer,&index);
 8006d92:	f107 030e 	add.w	r3, r7, #14
 8006d96:	461a      	mov	r2, r3
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	482a      	ldr	r0, [pc, #168]	; (8006e44 <parseBuffer+0x488>)
 8006d9c:	f7fa f9f8 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc2,buffer,&index);
 8006da0:	f107 030e 	add.w	r3, r7, #14
 8006da4:	461a      	mov	r2, r3
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4827      	ldr	r0, [pc, #156]	; (8006e48 <parseBuffer+0x48c>)
 8006daa:	f7fa f9f1 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc3,buffer,&index);
 8006dae:	f107 030e 	add.w	r3, r7, #14
 8006db2:	461a      	mov	r2, r3
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4825      	ldr	r0, [pc, #148]	; (8006e4c <parseBuffer+0x490>)
 8006db8:	f7fa f9ea 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc4,buffer,&index);
 8006dbc:	f107 030e 	add.w	r3, r7, #14
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4822      	ldr	r0, [pc, #136]	; (8006e50 <parseBuffer+0x494>)
 8006dc6:	f7fa f9e3 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc5,buffer,&index);
 8006dca:	f107 030e 	add.w	r3, r7, #14
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4820      	ldr	r0, [pc, #128]	; (8006e54 <parseBuffer+0x498>)
 8006dd4:	f7fa f9dc 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc6,buffer,&index);
 8006dd8:	f107 030e 	add.w	r3, r7, #14
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	481d      	ldr	r0, [pc, #116]	; (8006e58 <parseBuffer+0x49c>)
 8006de2:	f7fa f9d5 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc7,buffer,&index);
 8006de6:	f107 030e 	add.w	r3, r7, #14
 8006dea:	461a      	mov	r2, r3
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	481b      	ldr	r0, [pc, #108]	; (8006e5c <parseBuffer+0x4a0>)
 8006df0:	f7fa f9ce 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc8,buffer,&index);
 8006df4:	f107 030e 	add.w	r3, r7, #14
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4818      	ldr	r0, [pc, #96]	; (8006e60 <parseBuffer+0x4a4>)
 8006dfe:	f7fa f9c7 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc9,buffer,&index);
 8006e02:	f107 030e 	add.w	r3, r7, #14
 8006e06:	461a      	mov	r2, r3
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	4816      	ldr	r0, [pc, #88]	; (8006e64 <parseBuffer+0x4a8>)
 8006e0c:	f7fa f9c0 	bl	8001190 <AESK_UINT8toUINT16_LE>
		AESK_UINT8toUINT16_LE(&aesk_Rx_Datas_Int.adc10,buffer,&index);
 8006e10:	f107 030e 	add.w	r3, r7, #14
 8006e14:	461a      	mov	r2, r3
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4813      	ldr	r0, [pc, #76]	; (8006e68 <parseBuffer+0x4ac>)
 8006e1a:	f7fa f9b9 	bl	8001190 <AESK_UINT8toUINT16_LE>
}
 8006e1e:	e005      	b.n	8006e2c <parseBuffer+0x470>
    else if(aesk_nrf24_data.RxBuffer[0] == 'U')
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <parseBuffer+0x484>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b55      	cmp	r3, #85	; 0x55
 8006e26:	d101      	bne.n	8006e2c <parseBuffer+0x470>
		  NVIC_SystemReset();
 8006e28:	f7ff fb72 	bl	8006510 <__NVIC_SystemReset>
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20001700 	.word	0x20001700
 8006e38:	20001634 	.word	0x20001634
 8006e3c:	47c35000 	.word	0x47c35000
 8006e40:	20000d68 	.word	0x20000d68
 8006e44:	2000167c 	.word	0x2000167c
 8006e48:	2000167e 	.word	0x2000167e
 8006e4c:	20001680 	.word	0x20001680
 8006e50:	20001682 	.word	0x20001682
 8006e54:	20001684 	.word	0x20001684
 8006e58:	20001686 	.word	0x20001686
 8006e5c:	20001688 	.word	0x20001688
 8006e60:	2000168a 	.word	0x2000168a
 8006e64:	2000168c 	.word	0x2000168c
 8006e68:	2000168e 	.word	0x2000168e

08006e6c <Battery_Calculate>:
void Battery_Calculate()
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
	for (int i=0;i<10;i++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	e00e      	b.n	8006e96 <Battery_Calculate+0x2a>
	{
		Battery.Adc_value = adc_data[0];
 8006e78:	4b26      	ldr	r3, [pc, #152]	; (8006f14 <Battery_Calculate+0xa8>)
 8006e7a:	881a      	ldrh	r2, [r3, #0]
 8006e7c:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <Battery_Calculate+0xac>)
 8006e7e:	801a      	strh	r2, [r3, #0]
		Battery.Adc_array[i]= Battery.Adc_value;
 8006e80:	4b25      	ldr	r3, [pc, #148]	; (8006f18 <Battery_Calculate+0xac>)
 8006e82:	8819      	ldrh	r1, [r3, #0]
 8006e84:	4a24      	ldr	r2, [pc, #144]	; (8006f18 <Battery_Calculate+0xac>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	460a      	mov	r2, r1
 8006e8e:	80da      	strh	r2, [r3, #6]
	for (int i=0;i<10;i++)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3301      	adds	r3, #1
 8006e94:	607b      	str	r3, [r7, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b09      	cmp	r3, #9
 8006e9a:	dded      	ble.n	8006e78 <Battery_Calculate+0xc>
	}
	for(int i = 0; i < 10; i++)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	e012      	b.n	8006ec8 <Battery_Calculate+0x5c>
	{
		if(Battery.Adc_index < Battery.Adc_array[i])
 8006ea2:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <Battery_Calculate+0xac>)
 8006ea4:	885a      	ldrh	r2, [r3, #2]
 8006ea6:	491c      	ldr	r1, [pc, #112]	; (8006f18 <Battery_Calculate+0xac>)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	440b      	add	r3, r1
 8006eae:	88db      	ldrh	r3, [r3, #6]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d206      	bcs.n	8006ec2 <Battery_Calculate+0x56>
		{
			Battery.Adc_index = Battery.Adc_array[i];
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <Battery_Calculate+0xac>)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	88da      	ldrh	r2, [r3, #6]
 8006ebe:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <Battery_Calculate+0xac>)
 8006ec0:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 10; i++)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b09      	cmp	r3, #9
 8006ecc:	dde9      	ble.n	8006ea2 <Battery_Calculate+0x36>
		}
	}
	Battery.Adc_output = Battery.Adc_index;
 8006ece:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <Battery_Calculate+0xac>)
 8006ed0:	885a      	ldrh	r2, [r3, #2]
 8006ed2:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <Battery_Calculate+0xac>)
 8006ed4:	809a      	strh	r2, [r3, #4]
//	Battery.Voltage2 = (((Battery.Adc_output-2900.0)/215)+13.3);// değerler bataryaya göre ayarlanmalı
	Battery.Voltage = MapFloat(Battery.Adc_output, 2900, 3660, 13.3, 16.8);
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <Battery_Calculate+0xac>)
 8006ed8:	889b      	ldrh	r3, [r3, #4]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8006f1c <Battery_Calculate+0xb0>
 8006ee6:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8006f20 <Battery_Calculate+0xb4>
 8006eea:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8006f24 <Battery_Calculate+0xb8>
 8006eee:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8006f28 <Battery_Calculate+0xbc>
 8006ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef6:	f7ff fbaf 	bl	8006658 <MapFloat>
 8006efa:	eef0 7a40 	vmov.f32	s15, s0
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <Battery_Calculate+0xac>)
 8006f00:	edc3 7a07 	vstr	s15, [r3, #28]
	Battery.Adc_index = 0;
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <Battery_Calculate+0xac>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	805a      	strh	r2, [r3, #2]
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	200014d0 	.word	0x200014d0
 8006f18:	20001444 	.word	0x20001444
 8006f1c:	41866666 	.word	0x41866666
 8006f20:	4154cccd 	.word	0x4154cccd
 8006f24:	4564c000 	.word	0x4564c000
 8006f28:	45354000 	.word	0x45354000
 8006f2c:	00000000 	.word	0x00000000

08006f30 <MainAllInit>:
void MainAllInit()
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af02      	add	r7, sp, #8
	HAL_TIM_Base_Start(&htim1);//timer başlatma fonksiyonu
 8006f36:	486a      	ldr	r0, [pc, #424]	; (80070e0 <MainAllInit+0x1b0>)
 8006f38:	f007 fa28 	bl	800e38c <HAL_TIM_Base_Start>


	dshot_init();
 8006f3c:	f7fc f9ec 	bl	8003318 <dshot_init>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);//motorlara giden pwmleri başlatma
 8006f40:	2108      	movs	r1, #8
 8006f42:	4868      	ldr	r0, [pc, #416]	; (80070e4 <MainAllInit+0x1b4>)
 8006f44:	f007 fada 	bl	800e4fc <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart3, &Rx_temp, 1);
 8006f48:	2201      	movs	r2, #1
 8006f4a:	4967      	ldr	r1, [pc, #412]	; (80070e8 <MainAllInit+0x1b8>)
 8006f4c:	4867      	ldr	r0, [pc, #412]	; (80070ec <MainAllInit+0x1bc>)
 8006f4e:	f008 f882 	bl	800f056 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart5, &raspberryRx, 1);//raspberry interrupt fonksiyonu
  	MPU6050_Init(&hi2c2);// imunun  başlatma fonksiyonun
 8006f52:	4867      	ldr	r0, [pc, #412]	; (80070f0 <MainAllInit+0x1c0>)
 8006f54:	f7ff f950 	bl	80061f8 <MPU6050_Init>
	myMpuConfig.Accel_Full_Scale=AFS_SEL_4g;//configürasyon için değerlerin ayarlanması
 8006f58:	4b66      	ldr	r3, [pc, #408]	; (80070f4 <MainAllInit+0x1c4>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	709a      	strb	r2, [r3, #2]
	myMpuConfig.ClockSource=Internal_8MHz;//configürasyon için değerlerin ayarlanması
 8006f5e:	4b65      	ldr	r3, [pc, #404]	; (80070f4 <MainAllInit+0x1c4>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
	myMpuConfig.CONFIG_DLPF=DLPF_44A_42G_Hz;//configürasyon için değerlerin ayarlanması
 8006f64:	4b63      	ldr	r3, [pc, #396]	; (80070f4 <MainAllInit+0x1c4>)
 8006f66:	2203      	movs	r2, #3
 8006f68:	70da      	strb	r2, [r3, #3]
	myMpuConfig.Gyro_Full_Scale=FS_SEL_500;//configürasyon için değerlerin ayarlanması
 8006f6a:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <MainAllInit+0x1c4>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	705a      	strb	r2, [r3, #1]
	myMpuConfig.Sleep_Mode_Bit=0;//configürasyon için değerlerin ayarlanması
 8006f70:	4b60      	ldr	r3, [pc, #384]	; (80070f4 <MainAllInit+0x1c4>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	711a      	strb	r2, [r3, #4]
	MPU6050_Config(&myMpuConfig);
 8006f76:	485f      	ldr	r0, [pc, #380]	; (80070f4 <MainAllInit+0x1c4>)
 8006f78:	f7ff f992 	bl	80062a0 <MPU6050_Config>
	Rolltau = 0.009f;
 8006f7c:	4b5e      	ldr	r3, [pc, #376]	; (80070f8 <MainAllInit+0x1c8>)
 8006f7e:	4a5f      	ldr	r2, [pc, #380]	; (80070fc <MainAllInit+0x1cc>)
 8006f80:	601a      	str	r2, [r3, #0]
	RollLimit = 400.0f;
 8006f82:	4b5f      	ldr	r3, [pc, #380]	; (8007100 <MainAllInit+0x1d0>)
 8006f84:	4a5f      	ldr	r2, [pc, #380]	; (8007104 <MainAllInit+0x1d4>)
 8006f86:	601a      	str	r2, [r3, #0]
	RollLimitint = 50.0f;
 8006f88:	4b5f      	ldr	r3, [pc, #380]	; (8007108 <MainAllInit+0x1d8>)
 8006f8a:	4a60      	ldr	r2, [pc, #384]	; (800710c <MainAllInit+0x1dc>)
 8006f8c:	601a      	str	r2, [r3, #0]
	AESK_NRF24_DATA_Init(48, 0x11223344AA, &onReceive);
 8006f8e:	4b60      	ldr	r3, [pc, #384]	; (8007110 <MainAllInit+0x1e0>)
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	a351      	add	r3, pc, #324	; (adr r3, 80070d8 <MainAllInit+0x1a8>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	2030      	movs	r0, #48	; 0x30
 8006f9a:	f7fa fe0d 	bl	8001bb8 <AESK_NRF24_DATA_Init>
	AESK_NRF24_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_Pin);
 8006f9e:	2320      	movs	r3, #32
 8006fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fa4:	495b      	ldr	r1, [pc, #364]	; (8007114 <MainAllInit+0x1e4>)
 8006fa6:	485c      	ldr	r0, [pc, #368]	; (8007118 <MainAllInit+0x1e8>)
 8006fa8:	f7fa fdd0 	bl	8001b4c <AESK_NRF24_Init>

	ManyometerInit();
 8006fac:	f7fd f982 	bl	80042b4 <ManyometerInit>

	PID_init(&Roll);
 8006fb0:	485a      	ldr	r0, [pc, #360]	; (800711c <MainAllInit+0x1ec>)
 8006fb2:	f7fe fbff 	bl	80057b4 <PID_init>
	PID_init(&Pitch);
 8006fb6:	485a      	ldr	r0, [pc, #360]	; (8007120 <MainAllInit+0x1f0>)
 8006fb8:	f7fe fbfc 	bl	80057b4 <PID_init>
	PID_init(&Yaw);
 8006fbc:	4859      	ldr	r0, [pc, #356]	; (8007124 <MainAllInit+0x1f4>)
 8006fbe:	f7fe fbf9 	bl	80057b4 <PID_init>
	PID_init(&Altitude);
 8006fc2:	4859      	ldr	r0, [pc, #356]	; (8007128 <MainAllInit+0x1f8>)
 8006fc4:	f7fe fbf6 	bl	80057b4 <PID_init>

	Init_ESC(); // Esc kalibrasyon fonksiyonu
 8006fc8:	f7fd fdce 	bl	8004b68 <Init_ESC>
	Offset_Calculate();// imunun kendi calibre etmesi için fonksiyon
 8006fcc:	f7fe fc10 	bl	80057f0 <Offset_Calculate>

//	Ms5611Init();
	BarometerInit();
 8006fd0:	f000 face 	bl	8007570 <BarometerInit>
	Registerinit();// registera kaydedilen pid degerlerini yükler
 8006fd4:	f000 f8ea 	bl	80071ac <Registerinit>

	Roll.tau= Rolltau;
 8006fd8:	4b47      	ldr	r3, [pc, #284]	; (80070f8 <MainAllInit+0x1c8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a4f      	ldr	r2, [pc, #316]	; (800711c <MainAllInit+0x1ec>)
 8006fde:	60d3      	str	r3, [r2, #12]
	Roll.limMax = RollLimit;
 8006fe0:	4b47      	ldr	r3, [pc, #284]	; (8007100 <MainAllInit+0x1d0>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a4d      	ldr	r2, [pc, #308]	; (800711c <MainAllInit+0x1ec>)
 8006fe6:	6153      	str	r3, [r2, #20]
	Roll.limMin = -RollLimit;
 8006fe8:	4b45      	ldr	r3, [pc, #276]	; (8007100 <MainAllInit+0x1d0>)
 8006fea:	edd3 7a00 	vldr	s15, [r3]
 8006fee:	eef1 7a67 	vneg.f32	s15, s15
 8006ff2:	4b4a      	ldr	r3, [pc, #296]	; (800711c <MainAllInit+0x1ec>)
 8006ff4:	edc3 7a04 	vstr	s15, [r3, #16]
	Roll.limMaxInt = RollLimitint;
 8006ff8:	4b43      	ldr	r3, [pc, #268]	; (8007108 <MainAllInit+0x1d8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a47      	ldr	r2, [pc, #284]	; (800711c <MainAllInit+0x1ec>)
 8006ffe:	61d3      	str	r3, [r2, #28]
	Roll.limMinInt = -RollLimitint;
 8007000:	4b41      	ldr	r3, [pc, #260]	; (8007108 <MainAllInit+0x1d8>)
 8007002:	edd3 7a00 	vldr	s15, [r3]
 8007006:	eef1 7a67 	vneg.f32	s15, s15
 800700a:	4b44      	ldr	r3, [pc, #272]	; (800711c <MainAllInit+0x1ec>)
 800700c:	edc3 7a06 	vstr	s15, [r3, #24]
	Roll.Elapsed_Time = Elapsed_time;
 8007010:	4b42      	ldr	r3, [pc, #264]	; (800711c <MainAllInit+0x1ec>)
 8007012:	4a46      	ldr	r2, [pc, #280]	; (800712c <MainAllInit+0x1fc>)
 8007014:	621a      	str	r2, [r3, #32]

	Pitch.tau= Rolltau;
 8007016:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <MainAllInit+0x1c8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a41      	ldr	r2, [pc, #260]	; (8007120 <MainAllInit+0x1f0>)
 800701c:	60d3      	str	r3, [r2, #12]
	Pitch.limMax = RollLimit;
 800701e:	4b38      	ldr	r3, [pc, #224]	; (8007100 <MainAllInit+0x1d0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a3f      	ldr	r2, [pc, #252]	; (8007120 <MainAllInit+0x1f0>)
 8007024:	6153      	str	r3, [r2, #20]
	Pitch.limMin = -RollLimit;
 8007026:	4b36      	ldr	r3, [pc, #216]	; (8007100 <MainAllInit+0x1d0>)
 8007028:	edd3 7a00 	vldr	s15, [r3]
 800702c:	eef1 7a67 	vneg.f32	s15, s15
 8007030:	4b3b      	ldr	r3, [pc, #236]	; (8007120 <MainAllInit+0x1f0>)
 8007032:	edc3 7a04 	vstr	s15, [r3, #16]
	Pitch.limMaxInt = RollLimitint;
 8007036:	4b34      	ldr	r3, [pc, #208]	; (8007108 <MainAllInit+0x1d8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a39      	ldr	r2, [pc, #228]	; (8007120 <MainAllInit+0x1f0>)
 800703c:	61d3      	str	r3, [r2, #28]
	Pitch.limMinInt = -RollLimitint;
 800703e:	4b32      	ldr	r3, [pc, #200]	; (8007108 <MainAllInit+0x1d8>)
 8007040:	edd3 7a00 	vldr	s15, [r3]
 8007044:	eef1 7a67 	vneg.f32	s15, s15
 8007048:	4b35      	ldr	r3, [pc, #212]	; (8007120 <MainAllInit+0x1f0>)
 800704a:	edc3 7a06 	vstr	s15, [r3, #24]
    Pitch.Elapsed_Time = Elapsed_time;
 800704e:	4b34      	ldr	r3, [pc, #208]	; (8007120 <MainAllInit+0x1f0>)
 8007050:	4a36      	ldr	r2, [pc, #216]	; (800712c <MainAllInit+0x1fc>)
 8007052:	621a      	str	r2, [r3, #32]

	Yaw.tau= Rolltau;
 8007054:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <MainAllInit+0x1c8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a32      	ldr	r2, [pc, #200]	; (8007124 <MainAllInit+0x1f4>)
 800705a:	60d3      	str	r3, [r2, #12]
	Yaw.limMax = RollLimit;
 800705c:	4b28      	ldr	r3, [pc, #160]	; (8007100 <MainAllInit+0x1d0>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a30      	ldr	r2, [pc, #192]	; (8007124 <MainAllInit+0x1f4>)
 8007062:	6153      	str	r3, [r2, #20]
	Yaw.limMin = -RollLimit;
 8007064:	4b26      	ldr	r3, [pc, #152]	; (8007100 <MainAllInit+0x1d0>)
 8007066:	edd3 7a00 	vldr	s15, [r3]
 800706a:	eef1 7a67 	vneg.f32	s15, s15
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <MainAllInit+0x1f4>)
 8007070:	edc3 7a04 	vstr	s15, [r3, #16]
	Yaw.limMaxInt = RollLimitint;
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <MainAllInit+0x1d8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <MainAllInit+0x1f4>)
 800707a:	61d3      	str	r3, [r2, #28]
	Yaw.limMinInt = -RollLimitint;
 800707c:	4b22      	ldr	r3, [pc, #136]	; (8007108 <MainAllInit+0x1d8>)
 800707e:	edd3 7a00 	vldr	s15, [r3]
 8007082:	eef1 7a67 	vneg.f32	s15, s15
 8007086:	4b27      	ldr	r3, [pc, #156]	; (8007124 <MainAllInit+0x1f4>)
 8007088:	edc3 7a06 	vstr	s15, [r3, #24]
	Yaw.Elapsed_Time = Elapsed_time;
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <MainAllInit+0x1f4>)
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <MainAllInit+0x1fc>)
 8007090:	621a      	str	r2, [r3, #32]

	Altitude.tau= Rolltau;
 8007092:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <MainAllInit+0x1c8>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a24      	ldr	r2, [pc, #144]	; (8007128 <MainAllInit+0x1f8>)
 8007098:	60d3      	str	r3, [r2, #12]
	Altitude.limMax = RollLimit;
 800709a:	4b19      	ldr	r3, [pc, #100]	; (8007100 <MainAllInit+0x1d0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a22      	ldr	r2, [pc, #136]	; (8007128 <MainAllInit+0x1f8>)
 80070a0:	6153      	str	r3, [r2, #20]
	Altitude.limMin = -RollLimit;
 80070a2:	4b17      	ldr	r3, [pc, #92]	; (8007100 <MainAllInit+0x1d0>)
 80070a4:	edd3 7a00 	vldr	s15, [r3]
 80070a8:	eef1 7a67 	vneg.f32	s15, s15
 80070ac:	4b1e      	ldr	r3, [pc, #120]	; (8007128 <MainAllInit+0x1f8>)
 80070ae:	edc3 7a04 	vstr	s15, [r3, #16]
	Altitude.limMaxInt = RollLimitint;
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <MainAllInit+0x1d8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <MainAllInit+0x1f8>)
 80070b8:	61d3      	str	r3, [r2, #28]
	Altitude.limMinInt = -RollLimitint;
 80070ba:	4b13      	ldr	r3, [pc, #76]	; (8007108 <MainAllInit+0x1d8>)
 80070bc:	edd3 7a00 	vldr	s15, [r3]
 80070c0:	eef1 7a67 	vneg.f32	s15, s15
 80070c4:	4b18      	ldr	r3, [pc, #96]	; (8007128 <MainAllInit+0x1f8>)
 80070c6:	edc3 7a06 	vstr	s15, [r3, #24]
	Altitude.Elapsed_Time = Elapsed_time;
 80070ca:	4b17      	ldr	r3, [pc, #92]	; (8007128 <MainAllInit+0x1f8>)
 80070cc:	4a17      	ldr	r2, [pc, #92]	; (800712c <MainAllInit+0x1fc>)
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	223344aa 	.word	0x223344aa
 80070dc:	00000011 	.word	0x00000011
 80070e0:	20001500 	.word	0x20001500
 80070e4:	200012ac 	.word	0x200012ac
 80070e8:	200012a4 	.word	0x200012a4
 80070ec:	20000fa0 	.word	0x20000fa0
 80070f0:	200010a0 	.word	0x200010a0
 80070f4:	200016d8 	.word	0x200016d8
 80070f8:	20000cb8 	.word	0x20000cb8
 80070fc:	3c1374bc 	.word	0x3c1374bc
 8007100:	200012a8 	.word	0x200012a8
 8007104:	43c80000 	.word	0x43c80000
 8007108:	200016d4 	.word	0x200016d4
 800710c:	42480000 	.word	0x42480000
 8007110:	08006959 	.word	0x08006959
 8007114:	40020800 	.word	0x40020800
 8007118:	200015bc 	.word	0x200015bc
 800711c:	20001268 	.word	0x20001268
 8007120:	20001774 	.word	0x20001774
 8007124:	20000c44 	.word	0x20000c44
 8007128:	20001350 	.word	0x20001350
 800712c:	3b03126f 	.word	0x3b03126f

08007130 <RemoteControlOnOff>:
void RemoteControlOnOff()
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
	if((Rc.Ch6<=1100) || Rc.Ch3 <= 1050)
 8007134:	4b17      	ldr	r3, [pc, #92]	; (8007194 <RemoteControlOnOff+0x64>)
 8007136:	895b      	ldrh	r3, [r3, #10]
 8007138:	f240 424c 	movw	r2, #1100	; 0x44c
 800713c:	4293      	cmp	r3, r2
 800713e:	d905      	bls.n	800714c <RemoteControlOnOff+0x1c>
 8007140:	4b14      	ldr	r3, [pc, #80]	; (8007194 <RemoteControlOnOff+0x64>)
 8007142:	889b      	ldrh	r3, [r3, #4]
 8007144:	f240 421a 	movw	r2, #1050	; 0x41a
 8007148:	4293      	cmp	r3, r2
 800714a:	d816      	bhi.n	800717a <RemoteControlOnOff+0x4a>
	{
		SetMotorPWM(1000, 1000, 1000, 1000);
 800714c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007154:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800715c:	f7fd fcde 	bl	8004b1c <SetMotorPWM>
		PID_init(&Roll);
 8007160:	480d      	ldr	r0, [pc, #52]	; (8007198 <RemoteControlOnOff+0x68>)
 8007162:	f7fe fb27 	bl	80057b4 <PID_init>
		PID_init(&Pitch);
 8007166:	480d      	ldr	r0, [pc, #52]	; (800719c <RemoteControlOnOff+0x6c>)
 8007168:	f7fe fb24 	bl	80057b4 <PID_init>
		PID_init(&Yaw);
 800716c:	480c      	ldr	r0, [pc, #48]	; (80071a0 <RemoteControlOnOff+0x70>)
 800716e:	f7fe fb21 	bl	80057b4 <PID_init>
		PID_init(&Altitude);
 8007172:	480c      	ldr	r0, [pc, #48]	; (80071a4 <RemoteControlOnOff+0x74>)
 8007174:	f7fe fb1e 	bl	80057b4 <PID_init>
 8007178:	e00a      	b.n	8007190 <RemoteControlOnOff+0x60>
	}
	else
	{
		SetMotorPWM(Motor.Sol_Arka, Motor.Sag_Arka,Motor.Sag_On, Motor.Sol_On);
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <RemoteControlOnOff+0x78>)
 800717c:	8898      	ldrh	r0, [r3, #4]
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <RemoteControlOnOff+0x78>)
 8007180:	88d9      	ldrh	r1, [r3, #6]
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <RemoteControlOnOff+0x78>)
 8007184:	885a      	ldrh	r2, [r3, #2]
 8007186:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <RemoteControlOnOff+0x78>)
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	f7fd fcc7 	bl	8004b1c <SetMotorPWM>
	}
}
 800718e:	bf00      	nop
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20001468 	.word	0x20001468
 8007198:	20001268 	.word	0x20001268
 800719c:	20001774 	.word	0x20001774
 80071a0:	20000c44 	.word	0x20000c44
 80071a4:	20001350 	.word	0x20001350
 80071a8:	20001620 	.word	0x20001620

080071ac <Registerinit>:
void Registerinit()
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b094      	sub	sp, #80	; 0x50
 80071b0:	af00      	add	r7, sp, #0
	uint8_t pidBuf[72];
	Flash_Read_Data_u8(0x08060000, pidBuf, 72);
 80071b2:	f107 0308 	add.w	r3, r7, #8
 80071b6:	2248      	movs	r2, #72	; 0x48
 80071b8:	4619      	mov	r1, r3
 80071ba:	4898      	ldr	r0, [pc, #608]	; (800741c <Registerinit+0x270>)
 80071bc:	f7fc f9d0 	bl	8003560 <Flash_Read_Data_u8>
	uint16_t indexx = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	80fb      	strh	r3, [r7, #6]
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKp,pidBuf,&indexx);
 80071c4:	1dba      	adds	r2, r7, #6
 80071c6:	f107 0308 	add.w	r3, r7, #8
 80071ca:	4619      	mov	r1, r3
 80071cc:	4894      	ldr	r0, [pc, #592]	; (8007420 <Registerinit+0x274>)
 80071ce:	f7fa f802 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKi,pidBuf,&indexx);
 80071d2:	1dba      	adds	r2, r7, #6
 80071d4:	f107 0308 	add.w	r3, r7, #8
 80071d8:	4619      	mov	r1, r3
 80071da:	4892      	ldr	r0, [pc, #584]	; (8007424 <Registerinit+0x278>)
 80071dc:	f7f9 fffb 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.RollPitchKd,pidBuf,&indexx);
 80071e0:	1dba      	adds	r2, r7, #6
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	4619      	mov	r1, r3
 80071e8:	488f      	ldr	r0, [pc, #572]	; (8007428 <Registerinit+0x27c>)
 80071ea:	f7f9 fff4 	bl	80011d6 <AESK_UINT8toUINT24_LE>

	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKp,pidBuf,&indexx);
 80071ee:	1dba      	adds	r2, r7, #6
 80071f0:	f107 0308 	add.w	r3, r7, #8
 80071f4:	4619      	mov	r1, r3
 80071f6:	488d      	ldr	r0, [pc, #564]	; (800742c <Registerinit+0x280>)
 80071f8:	f7f9 ffed 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKi,pidBuf,&indexx);
 80071fc:	1dba      	adds	r2, r7, #6
 80071fe:	f107 0308 	add.w	r3, r7, #8
 8007202:	4619      	mov	r1, r3
 8007204:	488a      	ldr	r0, [pc, #552]	; (8007430 <Registerinit+0x284>)
 8007206:	f7f9 ffe6 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.YawKd,pidBuf,&indexx);
 800720a:	1dba      	adds	r2, r7, #6
 800720c:	f107 0308 	add.w	r3, r7, #8
 8007210:	4619      	mov	r1, r3
 8007212:	4888      	ldr	r0, [pc, #544]	; (8007434 <Registerinit+0x288>)
 8007214:	f7f9 ffdf 	bl	80011d6 <AESK_UINT8toUINT24_LE>

	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKp,pidBuf,&indexx);
 8007218:	1dba      	adds	r2, r7, #6
 800721a:	f107 0308 	add.w	r3, r7, #8
 800721e:	4619      	mov	r1, r3
 8007220:	4885      	ldr	r0, [pc, #532]	; (8007438 <Registerinit+0x28c>)
 8007222:	f7f9 ffd8 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKi,pidBuf,&indexx);
 8007226:	1dba      	adds	r2, r7, #6
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4619      	mov	r1, r3
 800722e:	4883      	ldr	r0, [pc, #524]	; (800743c <Registerinit+0x290>)
 8007230:	f7f9 ffd1 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.AltitudeKd,pidBuf,&indexx);
 8007234:	1dba      	adds	r2, r7, #6
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4619      	mov	r1, r3
 800723c:	4880      	ldr	r0, [pc, #512]	; (8007440 <Registerinit+0x294>)
 800723e:	f7f9 ffca 	bl	80011d6 <AESK_UINT8toUINT24_LE>

	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKp,pidBuf,&indexx);
 8007242:	1dba      	adds	r2, r7, #6
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	4619      	mov	r1, r3
 800724a:	487e      	ldr	r0, [pc, #504]	; (8007444 <Registerinit+0x298>)
 800724c:	f7f9 ffc3 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKi,pidBuf,&indexx);
 8007250:	1dba      	adds	r2, r7, #6
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	4619      	mov	r1, r3
 8007258:	487b      	ldr	r0, [pc, #492]	; (8007448 <Registerinit+0x29c>)
 800725a:	f7f9 ffbc 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.GpsKd,pidBuf,&indexx);
 800725e:	1dba      	adds	r2, r7, #6
 8007260:	f107 0308 	add.w	r3, r7, #8
 8007264:	4619      	mov	r1, r3
 8007266:	4879      	ldr	r0, [pc, #484]	; (800744c <Registerinit+0x2a0>)
 8007268:	f7f9 ffb5 	bl	80011d6 <AESK_UINT8toUINT24_LE>

	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kp,pidBuf,&indexx);
 800726c:	1dba      	adds	r2, r7, #6
 800726e:	f107 0308 	add.w	r3, r7, #8
 8007272:	4619      	mov	r1, r3
 8007274:	4876      	ldr	r0, [pc, #472]	; (8007450 <Registerinit+0x2a4>)
 8007276:	f7f9 ffae 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Ki,pidBuf,&indexx);
 800727a:	1dba      	adds	r2, r7, #6
 800727c:	f107 0308 	add.w	r3, r7, #8
 8007280:	4619      	mov	r1, r3
 8007282:	4874      	ldr	r0, [pc, #464]	; (8007454 <Registerinit+0x2a8>)
 8007284:	f7f9 ffa7 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext1Kd,pidBuf,&indexx);
 8007288:	1dba      	adds	r2, r7, #6
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	4619      	mov	r1, r3
 8007290:	4871      	ldr	r0, [pc, #452]	; (8007458 <Registerinit+0x2ac>)
 8007292:	f7f9 ffa0 	bl	80011d6 <AESK_UINT8toUINT24_LE>

	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kp,pidBuf,&indexx);
 8007296:	1dba      	adds	r2, r7, #6
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	4619      	mov	r1, r3
 800729e:	486f      	ldr	r0, [pc, #444]	; (800745c <Registerinit+0x2b0>)
 80072a0:	f7f9 ff99 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Ki,pidBuf,&indexx);
 80072a4:	1dba      	adds	r2, r7, #6
 80072a6:	f107 0308 	add.w	r3, r7, #8
 80072aa:	4619      	mov	r1, r3
 80072ac:	486c      	ldr	r0, [pc, #432]	; (8007460 <Registerinit+0x2b4>)
 80072ae:	f7f9 ff92 	bl	80011d6 <AESK_UINT8toUINT24_LE>
	AESK_UINT8toUINT24_LE(&aesk_Rx_Datas_Int.Ext2Kd,pidBuf,&indexx);
 80072b2:	1dba      	adds	r2, r7, #6
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	4619      	mov	r1, r3
 80072ba:	486a      	ldr	r0, [pc, #424]	; (8007464 <Registerinit+0x2b8>)
 80072bc:	f7f9 ff8b 	bl	80011d6 <AESK_UINT8toUINT24_LE>

	aesk_Rx_Datas_Float.floatRollPitchKp = (float)aesk_Rx_Datas_Int.RollPitchKp/100000;
 80072c0:	4b57      	ldr	r3, [pc, #348]	; (8007420 <Registerinit+0x274>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072cc:	eddf 6a66 	vldr	s13, [pc, #408]	; 8007468 <Registerinit+0x2bc>
 80072d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072d4:	4b65      	ldr	r3, [pc, #404]	; (800746c <Registerinit+0x2c0>)
 80072d6:	edc3 7a00 	vstr	s15, [r3]
	aesk_Rx_Datas_Float.floatRollPitchKi = (float)aesk_Rx_Datas_Int.RollPitchKi/100000;
 80072da:	4b51      	ldr	r3, [pc, #324]	; (8007420 <Registerinit+0x274>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072e6:	eddf 6a60 	vldr	s13, [pc, #384]	; 8007468 <Registerinit+0x2bc>
 80072ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072ee:	4b5f      	ldr	r3, [pc, #380]	; (800746c <Registerinit+0x2c0>)
 80072f0:	edc3 7a01 	vstr	s15, [r3, #4]
	aesk_Rx_Datas_Float.floatRollPitchKd = (float)aesk_Rx_Datas_Int.RollPitchKd/100000;
 80072f4:	4b4a      	ldr	r3, [pc, #296]	; (8007420 <Registerinit+0x274>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007300:	eddf 6a59 	vldr	s13, [pc, #356]	; 8007468 <Registerinit+0x2bc>
 8007304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007308:	4b58      	ldr	r3, [pc, #352]	; (800746c <Registerinit+0x2c0>)
 800730a:	edc3 7a02 	vstr	s15, [r3, #8]

	Roll.Kp = aesk_Rx_Datas_Float.floatRollPitchKp;
 800730e:	4b57      	ldr	r3, [pc, #348]	; (800746c <Registerinit+0x2c0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a57      	ldr	r2, [pc, #348]	; (8007470 <Registerinit+0x2c4>)
 8007314:	6013      	str	r3, [r2, #0]
	Roll.Ki = aesk_Rx_Datas_Float.floatRollPitchKi;
 8007316:	4b55      	ldr	r3, [pc, #340]	; (800746c <Registerinit+0x2c0>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	4a55      	ldr	r2, [pc, #340]	; (8007470 <Registerinit+0x2c4>)
 800731c:	6053      	str	r3, [r2, #4]
	Roll.Kd = aesk_Rx_Datas_Float.floatRollPitchKd;
 800731e:	4b53      	ldr	r3, [pc, #332]	; (800746c <Registerinit+0x2c0>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4a53      	ldr	r2, [pc, #332]	; (8007470 <Registerinit+0x2c4>)
 8007324:	6093      	str	r3, [r2, #8]

	Pitch.Kp = aesk_Rx_Datas_Float.floatRollPitchKp;
 8007326:	4b51      	ldr	r3, [pc, #324]	; (800746c <Registerinit+0x2c0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a52      	ldr	r2, [pc, #328]	; (8007474 <Registerinit+0x2c8>)
 800732c:	6013      	str	r3, [r2, #0]
	Pitch.Ki = aesk_Rx_Datas_Float.floatRollPitchKi;
 800732e:	4b4f      	ldr	r3, [pc, #316]	; (800746c <Registerinit+0x2c0>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	4a50      	ldr	r2, [pc, #320]	; (8007474 <Registerinit+0x2c8>)
 8007334:	6053      	str	r3, [r2, #4]
	Pitch.Kd = aesk_Rx_Datas_Float.floatRollPitchKd;
 8007336:	4b4d      	ldr	r3, [pc, #308]	; (800746c <Registerinit+0x2c0>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	4a4e      	ldr	r2, [pc, #312]	; (8007474 <Registerinit+0x2c8>)
 800733c:	6093      	str	r3, [r2, #8]

    aesk_Rx_Datas_Float.floatYawKp = (float)aesk_Rx_Datas_Int.YawKp/100000;
 800733e:	4b38      	ldr	r3, [pc, #224]	; (8007420 <Registerinit+0x274>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800734a:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007468 <Registerinit+0x2bc>
 800734e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007352:	4b46      	ldr	r3, [pc, #280]	; (800746c <Registerinit+0x2c0>)
 8007354:	edc3 7a03 	vstr	s15, [r3, #12]
	aesk_Rx_Datas_Float.floatYawKi = (float)aesk_Rx_Datas_Int.YawKi/100000;
 8007358:	4b31      	ldr	r3, [pc, #196]	; (8007420 <Registerinit+0x274>)
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007364:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007468 <Registerinit+0x2bc>
 8007368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800736c:	4b3f      	ldr	r3, [pc, #252]	; (800746c <Registerinit+0x2c0>)
 800736e:	edc3 7a04 	vstr	s15, [r3, #16]
	aesk_Rx_Datas_Float.floatYawKd = (float)aesk_Rx_Datas_Int.YawKd/100000;
 8007372:	4b2b      	ldr	r3, [pc, #172]	; (8007420 <Registerinit+0x274>)
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800737e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8007468 <Registerinit+0x2bc>
 8007382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007386:	4b39      	ldr	r3, [pc, #228]	; (800746c <Registerinit+0x2c0>)
 8007388:	edc3 7a05 	vstr	s15, [r3, #20]

	Yaw.Kp = aesk_Rx_Datas_Float.floatYawKp;
 800738c:	4b37      	ldr	r3, [pc, #220]	; (800746c <Registerinit+0x2c0>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4a39      	ldr	r2, [pc, #228]	; (8007478 <Registerinit+0x2cc>)
 8007392:	6013      	str	r3, [r2, #0]
	Yaw.Ki = aesk_Rx_Datas_Float.floatYawKi;
 8007394:	4b35      	ldr	r3, [pc, #212]	; (800746c <Registerinit+0x2c0>)
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	4a37      	ldr	r2, [pc, #220]	; (8007478 <Registerinit+0x2cc>)
 800739a:	6053      	str	r3, [r2, #4]
	Yaw.Kd = 0;
 800739c:	4b36      	ldr	r3, [pc, #216]	; (8007478 <Registerinit+0x2cc>)
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
	AltitudeCalculator = aesk_Rx_Datas_Float.floatYawKd;
 80073a4:	4b31      	ldr	r3, [pc, #196]	; (800746c <Registerinit+0x2c0>)
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	4a34      	ldr	r2, [pc, #208]	; (800747c <Registerinit+0x2d0>)
 80073aa:	6013      	str	r3, [r2, #0]

	aesk_Rx_Datas_Float.floatAltitudeKp = (float)aesk_Rx_Datas_Int.AltitudeKp/100000;
 80073ac:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <Registerinit+0x274>)
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073b8:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8007468 <Registerinit+0x2bc>
 80073bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <Registerinit+0x2c0>)
 80073c2:	edc3 7a06 	vstr	s15, [r3, #24]
	aesk_Rx_Datas_Float.floatAltitudeKi = (float)aesk_Rx_Datas_Int.AltitudeKi/100000;
 80073c6:	4b16      	ldr	r3, [pc, #88]	; (8007420 <Registerinit+0x274>)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073d2:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007468 <Registerinit+0x2bc>
 80073d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073da:	4b24      	ldr	r3, [pc, #144]	; (800746c <Registerinit+0x2c0>)
 80073dc:	edc3 7a07 	vstr	s15, [r3, #28]
	aesk_Rx_Datas_Float.floatAltitudeKd = (float)aesk_Rx_Datas_Int.AltitudeKd/100000;
 80073e0:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <Registerinit+0x274>)
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	ee07 3a90 	vmov	s15, r3
 80073e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073ec:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007468 <Registerinit+0x2bc>
 80073f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073f4:	4b1d      	ldr	r3, [pc, #116]	; (800746c <Registerinit+0x2c0>)
 80073f6:	edc3 7a08 	vstr	s15, [r3, #32]

	Altitude.Kp = aesk_Rx_Datas_Float.floatAltitudeKp;
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <Registerinit+0x2c0>)
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	4a20      	ldr	r2, [pc, #128]	; (8007480 <Registerinit+0x2d4>)
 8007400:	6013      	str	r3, [r2, #0]
	Altitude.Ki = aesk_Rx_Datas_Float.floatAltitudeKi;
 8007402:	4b1a      	ldr	r3, [pc, #104]	; (800746c <Registerinit+0x2c0>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	4a1e      	ldr	r2, [pc, #120]	; (8007480 <Registerinit+0x2d4>)
 8007408:	6053      	str	r3, [r2, #4]
	Altitude.Kd = aesk_Rx_Datas_Float.floatAltitudeKd;
 800740a:	4b18      	ldr	r3, [pc, #96]	; (800746c <Registerinit+0x2c0>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <Registerinit+0x2d4>)
 8007410:	6093      	str	r3, [r2, #8]

}
 8007412:	bf00      	nop
 8007414:	3750      	adds	r7, #80	; 0x50
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	08060000 	.word	0x08060000
 8007420:	20001634 	.word	0x20001634
 8007424:	20001638 	.word	0x20001638
 8007428:	2000163c 	.word	0x2000163c
 800742c:	20001640 	.word	0x20001640
 8007430:	20001644 	.word	0x20001644
 8007434:	20001648 	.word	0x20001648
 8007438:	2000164c 	.word	0x2000164c
 800743c:	20001650 	.word	0x20001650
 8007440:	20001654 	.word	0x20001654
 8007444:	20001658 	.word	0x20001658
 8007448:	2000165c 	.word	0x2000165c
 800744c:	20001660 	.word	0x20001660
 8007450:	20001664 	.word	0x20001664
 8007454:	20001668 	.word	0x20001668
 8007458:	2000166c 	.word	0x2000166c
 800745c:	20001670 	.word	0x20001670
 8007460:	20001674 	.word	0x20001674
 8007464:	20001678 	.word	0x20001678
 8007468:	47c35000 	.word	0x47c35000
 800746c:	20001700 	.word	0x20001700
 8007470:	20001268 	.word	0x20001268
 8007474:	20001774 	.word	0x20001774
 8007478:	20000c44 	.word	0x20000c44
 800747c:	2000142c 	.word	0x2000142c
 8007480:	20001350 	.word	0x20001350

08007484 <BarometerWrite>:
int counter=0;
uint8_t lps22hd_flag=1;
int Counter2,k;

void BarometerWrite(uint8_t wRegister,uint8_t Value)//barometre adreslerine değer yazma fonksiyonu
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	4603      	mov	r3, r0
 800748c:	460a      	mov	r2, r1
 800748e:	71fb      	strb	r3, [r7, #7]
 8007490:	4613      	mov	r3, r2
 8007492:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]         = wRegister;
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	733b      	strb	r3, [r7, #12]
	data[1]         = Value;
 8007498:	79bb      	ldrb	r3, [r7, #6]
 800749a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVE_ADDR_WRITE, data, 2, 10);
 800749c:	f107 020c 	add.w	r2, r7, #12
 80074a0:	230a      	movs	r3, #10
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	2302      	movs	r3, #2
 80074a6:	21b8      	movs	r1, #184	; 0xb8
 80074a8:	4803      	ldr	r0, [pc, #12]	; (80074b8 <BarometerWrite+0x34>)
 80074aa:	f003 fc9b 	bl	800ade4 <HAL_I2C_Master_Transmit>

}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000fec 	.word	0x20000fec

080074bc <BarometerReadXL>:
void BarometerReadXL(uint8_t rRegister,uint8_t NumberOfBytes)//barometre adresindeki değer okuman fonksiyonu
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af04      	add	r7, sp, #16
 80074c2:	4603      	mov	r3, r0
 80074c4:	460a      	mov	r2, r1
 80074c6:	71fb      	strb	r3, [r7, #7]
 80074c8:	4613      	mov	r3, r2
 80074ca:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, SLAVE_ADDR_READ, rRegister, 1 , Barometer_DataXL, NumberOfBytes, 10);
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	79bb      	ldrb	r3, [r7, #6]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	210a      	movs	r1, #10
 80074d6:	9102      	str	r1, [sp, #8]
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <BarometerReadXL+0x34>)
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	2301      	movs	r3, #1
 80074e0:	21b9      	movs	r1, #185	; 0xb9
 80074e2:	4804      	ldr	r0, [pc, #16]	; (80074f4 <BarometerReadXL+0x38>)
 80074e4:	f003 ffa2 	bl	800b42c <HAL_I2C_Mem_Read>

}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20001614 	.word	0x20001614
 80074f4:	20000fec 	.word	0x20000fec

080074f8 <BarometerReadL>:
void BarometerReadL(uint8_t rRegister,uint8_t NumberOfBytes)//barometre adresindeki değer okuman fonksiyonu
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	4603      	mov	r3, r0
 8007500:	460a      	mov	r2, r1
 8007502:	71fb      	strb	r3, [r7, #7]
 8007504:	4613      	mov	r3, r2
 8007506:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, SLAVE_ADDR_READ, rRegister, 1 , Barometer_DataL, NumberOfBytes, 10);
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	b29a      	uxth	r2, r3
 800750c:	79bb      	ldrb	r3, [r7, #6]
 800750e:	b29b      	uxth	r3, r3
 8007510:	210a      	movs	r1, #10
 8007512:	9102      	str	r1, [sp, #8]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <BarometerReadL+0x34>)
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2301      	movs	r3, #1
 800751c:	21b9      	movs	r1, #185	; 0xb9
 800751e:	4804      	ldr	r0, [pc, #16]	; (8007530 <BarometerReadL+0x38>)
 8007520:	f003 ff84 	bl	800b42c <HAL_I2C_Mem_Read>

}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20001340 	.word	0x20001340
 8007530:	20000fec 	.word	0x20000fec

08007534 <BarometerReadH>:
void BarometerReadH(uint8_t rRegister,uint8_t NumberOfBytes)//barometre adresindeki değer okuman fonksiyonu
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af04      	add	r7, sp, #16
 800753a:	4603      	mov	r3, r0
 800753c:	460a      	mov	r2, r1
 800753e:	71fb      	strb	r3, [r7, #7]
 8007540:	4613      	mov	r3, r2
 8007542:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, SLAVE_ADDR_READ, rRegister, 1 , Barometer_DataH, NumberOfBytes, 10);
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	b29a      	uxth	r2, r3
 8007548:	79bb      	ldrb	r3, [r7, #6]
 800754a:	b29b      	uxth	r3, r3
 800754c:	210a      	movs	r1, #10
 800754e:	9102      	str	r1, [sp, #8]
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <BarometerReadH+0x34>)
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	2301      	movs	r3, #1
 8007558:	21b9      	movs	r1, #185	; 0xb9
 800755a:	4804      	ldr	r0, [pc, #16]	; (800756c <BarometerReadH+0x38>)
 800755c:	f003 ff66 	bl	800b42c <HAL_I2C_Mem_Read>

}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20000d44 	.word	0x20000d44
 800756c:	20000fec 	.word	0x20000fec

08007570 <BarometerInit>:
void BarometerInit()//barometre başlatma fonksiyonu
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0

	BarometerWrite(CTRL_REG1,0b01010000);
 8007574:	2150      	movs	r1, #80	; 0x50
 8007576:	2010      	movs	r0, #16
 8007578:	f7ff ff84 	bl	8007484 <BarometerWrite>
	BarometerWrite(CTRL_REG2,0x00);
 800757c:	2100      	movs	r1, #0
 800757e:	2011      	movs	r0, #17
 8007580:	f7ff ff80 	bl	8007484 <BarometerWrite>
}
 8007584:	bf00      	nop
 8007586:	bd80      	pop	{r7, pc}

08007588 <BarometerReadValues>:
void BarometerReadValues()//1ms flagin içinde yapma// barometre bütün değerlerin okunup birlerştirilmesi ve
{
 8007588:	b5b0      	push	{r4, r5, r7, lr}
 800758a:	af00      	add	r7, sp, #0

	  BarometerReadXL(PRESS_OUT_XL, 1);
 800758c:	2101      	movs	r1, #1
 800758e:	2028      	movs	r0, #40	; 0x28
 8007590:	f7ff ff94 	bl	80074bc <BarometerReadXL>
	  BarometerReadL(PRESS_OUT_L, 1);
 8007594:	2101      	movs	r1, #1
 8007596:	2029      	movs	r0, #41	; 0x29
 8007598:	f7ff ffae 	bl	80074f8 <BarometerReadL>
	  BarometerReadH(PRESS_OUT_H, 1);
 800759c:	2101      	movs	r1, #1
 800759e:	202a      	movs	r0, #42	; 0x2a
 80075a0:	f7ff ffc8 	bl	8007534 <BarometerReadH>
      k++;
 80075a4:	4b5a      	ldr	r3, [pc, #360]	; (8007710 <BarometerReadValues+0x188>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a59      	ldr	r2, [pc, #356]	; (8007710 <BarometerReadValues+0x188>)
 80075ac:	6013      	str	r3, [r2, #0]
      if(k==20)
 80075ae:	4b58      	ldr	r3, [pc, #352]	; (8007710 <BarometerReadValues+0x188>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b14      	cmp	r3, #20
 80075b4:	d110      	bne.n	80075d8 <BarometerReadValues+0x50>
      {
    	  actual_Pressure_fast=Barometer_Pressure_Filtered/20;
 80075b6:	4b57      	ldr	r3, [pc, #348]	; (8007714 <BarometerReadValues+0x18c>)
 80075b8:	ed93 7a00 	vldr	s14, [r3]
 80075bc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80075c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075c4:	4b54      	ldr	r3, [pc, #336]	; (8007718 <BarometerReadValues+0x190>)
 80075c6:	edc3 7a00 	vstr	s15, [r3]
    	  Barometer_Pressure_Filtered = 0;
 80075ca:	4b52      	ldr	r3, [pc, #328]	; (8007714 <BarometerReadValues+0x18c>)
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
    	  k=0;
 80075d2:	4b4f      	ldr	r3, [pc, #316]	; (8007710 <BarometerReadValues+0x188>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
      }
	  Barometer_Pressure = Barometer_DataXL[0]  + (Barometer_DataL[0]<<8) + (Barometer_DataH[0]<<16);
 80075d8:	4b50      	ldr	r3, [pc, #320]	; (800771c <BarometerReadValues+0x194>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	4b50      	ldr	r3, [pc, #320]	; (8007720 <BarometerReadValues+0x198>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	441a      	add	r2, r3
 80075e6:	4b4f      	ldr	r3, [pc, #316]	; (8007724 <BarometerReadValues+0x19c>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	4413      	add	r3, r2
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075f6:	4b4c      	ldr	r3, [pc, #304]	; (8007728 <BarometerReadValues+0x1a0>)
 80075f8:	edc3 7a00 	vstr	s15, [r3]
      Barometer_Pressure=Barometer_Pressure/4096;
 80075fc:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <BarometerReadValues+0x1a0>)
 80075fe:	ed93 7a00 	vldr	s14, [r3]
 8007602:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800772c <BarometerReadValues+0x1a4>
 8007606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800760a:	4b47      	ldr	r3, [pc, #284]	; (8007728 <BarometerReadValues+0x1a0>)
 800760c:	edc3 7a00 	vstr	s15, [r3]
      Barometer_Pressure_Filtered +=  Barometer_Pressure;
 8007610:	4b40      	ldr	r3, [pc, #256]	; (8007714 <BarometerReadValues+0x18c>)
 8007612:	ed93 7a00 	vldr	s14, [r3]
 8007616:	4b44      	ldr	r3, [pc, #272]	; (8007728 <BarometerReadValues+0x1a0>)
 8007618:	edd3 7a00 	vldr	s15, [r3]
 800761c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007620:	4b3c      	ldr	r3, [pc, #240]	; (8007714 <BarometerReadValues+0x18c>)
 8007622:	edc3 7a00 	vstr	s15, [r3]
      actual_Pressure_slow = actual_Pressure_slow * (float)0.93 + actual_Pressure_fast * (float)0.07;
 8007626:	4b42      	ldr	r3, [pc, #264]	; (8007730 <BarometerReadValues+0x1a8>)
 8007628:	edd3 7a00 	vldr	s15, [r3]
 800762c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007734 <BarometerReadValues+0x1ac>
 8007630:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007634:	4b38      	ldr	r3, [pc, #224]	; (8007718 <BarometerReadValues+0x190>)
 8007636:	edd3 7a00 	vldr	s15, [r3]
 800763a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8007738 <BarometerReadValues+0x1b0>
 800763e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007646:	4b3a      	ldr	r3, [pc, #232]	; (8007730 <BarometerReadValues+0x1a8>)
 8007648:	edc3 7a00 	vstr	s15, [r3]
      actual_Pressure_diff = actual_Pressure_slow - actual_Pressure_fast;
 800764c:	4b38      	ldr	r3, [pc, #224]	; (8007730 <BarometerReadValues+0x1a8>)
 800764e:	ed93 7a00 	vldr	s14, [r3]
 8007652:	4b31      	ldr	r3, [pc, #196]	; (8007718 <BarometerReadValues+0x190>)
 8007654:	edd3 7a00 	vldr	s15, [r3]
 8007658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800765c:	4b37      	ldr	r3, [pc, #220]	; (800773c <BarometerReadValues+0x1b4>)
 800765e:	edc3 7a00 	vstr	s15, [r3]
      if (actual_Pressure_diff > 8)actual_Pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <BarometerReadValues+0x1b4>)
 8007664:	edd3 7a00 	vldr	s15, [r3]
 8007668:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800766c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007674:	dd03      	ble.n	800767e <BarometerReadValues+0xf6>
 8007676:	4b31      	ldr	r3, [pc, #196]	; (800773c <BarometerReadValues+0x1b4>)
 8007678:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800767c:	601a      	str	r2, [r3, #0]
          if (actual_Pressure_diff < -8)actual_Pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 800767e:	4b2f      	ldr	r3, [pc, #188]	; (800773c <BarometerReadValues+0x1b4>)
 8007680:	edd3 7a00 	vldr	s15, [r3]
 8007684:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8007688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	d503      	bpl.n	800769a <BarometerReadValues+0x112>
 8007692:	4b2a      	ldr	r3, [pc, #168]	; (800773c <BarometerReadValues+0x1b4>)
 8007694:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8007698:	601a      	str	r2, [r3, #0]
          //If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
          if (actual_Pressure_diff > 1 || actual_Pressure_diff < -1)actual_Pressure_slow -= actual_Pressure_diff / 6.0;
 800769a:	4b28      	ldr	r3, [pc, #160]	; (800773c <BarometerReadValues+0x1b4>)
 800769c:	edd3 7a00 	vldr	s15, [r3]
 80076a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	dc09      	bgt.n	80076c2 <BarometerReadValues+0x13a>
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <BarometerReadValues+0x1b4>)
 80076b0:	edd3 7a00 	vldr	s15, [r3]
 80076b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80076b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c0:	d51f      	bpl.n	8007702 <BarometerReadValues+0x17a>
 80076c2:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <BarometerReadValues+0x1a8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7f8 ff3e 	bl	8000548 <__aeabi_f2d>
 80076cc:	4604      	mov	r4, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <BarometerReadValues+0x1b4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7f8 ff37 	bl	8000548 <__aeabi_f2d>
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	4b18      	ldr	r3, [pc, #96]	; (8007740 <BarometerReadValues+0x1b8>)
 80076e0:	f7f9 f8b4 	bl	800084c <__aeabi_ddiv>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4620      	mov	r0, r4
 80076ea:	4629      	mov	r1, r5
 80076ec:	f7f8 fdcc 	bl	8000288 <__aeabi_dsub>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4610      	mov	r0, r2
 80076f6:	4619      	mov	r1, r3
 80076f8:	f7f9 fa76 	bl	8000be8 <__aeabi_d2f>
 80076fc:	4603      	mov	r3, r0
 80076fe:	4a0c      	ldr	r2, [pc, #48]	; (8007730 <BarometerReadValues+0x1a8>)
 8007700:	6013      	str	r3, [r2, #0]
          actual_Pressure = actual_Pressure_slow;
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <BarometerReadValues+0x1a8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a0f      	ldr	r2, [pc, #60]	; (8007744 <BarometerReadValues+0x1bc>)
 8007708:	6013      	str	r3, [r2, #0]
  	 /* Barometer_Altitude=44300*(1.0-pow(Barometer_Pressure/First_Barometer_Pressure,0.1903));
  	  y_barometer=Barometer_Altitude*0.01+last_barometer_value*0.09;
  	 AESK_Median_Filter(Barometer_Altitude,&Barometer_Pressure_Filtered, 30);
  	  last_barometer_value=y_barometer;*/

}
 800770a:	bf00      	nop
 800770c:	bdb0      	pop	{r4, r5, r7, pc}
 800770e:	bf00      	nop
 8007710:	200018a8 	.word	0x200018a8
 8007714:	20001248 	.word	0x20001248
 8007718:	200013ec 	.word	0x200013ec
 800771c:	20001614 	.word	0x20001614
 8007720:	20001340 	.word	0x20001340
 8007724:	20000d44 	.word	0x20000d44
 8007728:	2000149c 	.word	0x2000149c
 800772c:	45800000 	.word	0x45800000
 8007730:	20001548 	.word	0x20001548
 8007734:	3f6e147b 	.word	0x3f6e147b
 8007738:	3d8f5c29 	.word	0x3d8f5c29
 800773c:	200016d0 	.word	0x200016d0
 8007740:	40180000 	.word	0x40180000
 8007744:	2000125c 	.word	0x2000125c

08007748 <BarometerAltitude>:
//	First_Barometer_Pressure=First_Barometer_Pressure/4096;
//}
//}

void BarometerAltitude()//1msflag içinde yapma
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
	//daha sonra bir tanede slow degeri belirle ve ıar filtre uygula
	//0.98 slow verin 0.02 de fast verin yap
	//ve slow verinden fast verini cıkartarak pressure diff i bul
	//actual diff büyüktür 10 ve küçüktür -10 ise bunları 10 ve -10 arasında sınırlandır
	//sonra pressure diff degerini slow verinden cıkar cıkardıgında bu senin actual pressure verin olacak
	if(Rc.Ch6<=1100)
 800774c:	4b34      	ldr	r3, [pc, #208]	; (8007820 <BarometerAltitude+0xd8>)
 800774e:	895b      	ldrh	r3, [r3, #10]
 8007750:	f240 424c 	movw	r2, #1100	; 0x44c
 8007754:	4293      	cmp	r3, r2
 8007756:	d80a      	bhi.n	800776e <BarometerAltitude+0x26>
	{
		Counter2=0;
 8007758:	4b32      	ldr	r3, [pc, #200]	; (8007824 <BarometerAltitude+0xdc>)
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
		Zero_point_Barometer_Pressure=0;
 800775e:	4b32      	ldr	r3, [pc, #200]	; (8007828 <BarometerAltitude+0xe0>)
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
		First_Barometer_Pressure=0;
 8007766:	4b31      	ldr	r3, [pc, #196]	; (800782c <BarometerAltitude+0xe4>)
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
	}

	if(Counter2==100)
 800776e:	4b2d      	ldr	r3, [pc, #180]	; (8007824 <BarometerAltitude+0xdc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b64      	cmp	r3, #100	; 0x64
 8007774:	d109      	bne.n	800778a <BarometerAltitude+0x42>
	{
	   Zero_point_Barometer_Pressure=First_Barometer_Pressure/100;
 8007776:	4b2d      	ldr	r3, [pc, #180]	; (800782c <BarometerAltitude+0xe4>)
 8007778:	ed93 7a00 	vldr	s14, [r3]
 800777c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8007830 <BarometerAltitude+0xe8>
 8007780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007784:	4b28      	ldr	r3, [pc, #160]	; (8007828 <BarometerAltitude+0xe0>)
 8007786:	edc3 7a00 	vstr	s15, [r3]
	}
	if(Counter2!=101)
 800778a:	4b26      	ldr	r3, [pc, #152]	; (8007824 <BarometerAltitude+0xdc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b65      	cmp	r3, #101	; 0x65
 8007790:	d00f      	beq.n	80077b2 <BarometerAltitude+0x6a>
	{
		First_Barometer_Pressure=First_Barometer_Pressure+Barometer_Pressure;
 8007792:	4b26      	ldr	r3, [pc, #152]	; (800782c <BarometerAltitude+0xe4>)
 8007794:	ed93 7a00 	vldr	s14, [r3]
 8007798:	4b26      	ldr	r3, [pc, #152]	; (8007834 <BarometerAltitude+0xec>)
 800779a:	edd3 7a00 	vldr	s15, [r3]
 800779e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a2:	4b22      	ldr	r3, [pc, #136]	; (800782c <BarometerAltitude+0xe4>)
 80077a4:	edc3 7a00 	vstr	s15, [r3]
		Counter2++;
 80077a8:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <BarometerAltitude+0xdc>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <BarometerAltitude+0xdc>)
 80077b0:	6013      	str	r3, [r2, #0]
	}


	Barometer_Altitude=44300*(1.0-pow(actual_Pressure/Zero_point_Barometer_Pressure,0.1902949));
 80077b2:	4b21      	ldr	r3, [pc, #132]	; (8007838 <BarometerAltitude+0xf0>)
 80077b4:	ed93 7a00 	vldr	s14, [r3]
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <BarometerAltitude+0xe0>)
 80077ba:	edd3 7a00 	vldr	s15, [r3]
 80077be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80077c2:	ee16 0a90 	vmov	r0, s13
 80077c6:	f7f8 febf 	bl	8000548 <__aeabi_f2d>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8007810 <BarometerAltitude+0xc8>
 80077d2:	ec43 2b10 	vmov	d0, r2, r3
 80077d6:	f010 fadd 	bl	8017d94 <pow>
 80077da:	ec53 2b10 	vmov	r2, r3, d0
 80077de:	f04f 0000 	mov.w	r0, #0
 80077e2:	4916      	ldr	r1, [pc, #88]	; (800783c <BarometerAltitude+0xf4>)
 80077e4:	f7f8 fd50 	bl	8000288 <__aeabi_dsub>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4610      	mov	r0, r2
 80077ee:	4619      	mov	r1, r3
 80077f0:	a309      	add	r3, pc, #36	; (adr r3, 8007818 <BarometerAltitude+0xd0>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 feff 	bl	80005f8 <__aeabi_dmul>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4610      	mov	r0, r2
 8007800:	4619      	mov	r1, r3
 8007802:	f7f9 f9f1 	bl	8000be8 <__aeabi_d2f>
 8007806:	4603      	mov	r3, r0
 8007808:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <BarometerAltitude+0xf8>)
 800780a:	6013      	str	r3, [r2, #0]
//	if(Barometer_Altitude <= 0.05)
//	{
//		Barometer_Altitude = 0.0;
//	}
}
 800780c:	bf00      	nop
 800780e:	bd80      	pop	{r7, pc}
 8007810:	520c3c4e 	.word	0x520c3c4e
 8007814:	3fc85b95 	.word	0x3fc85b95
 8007818:	00000000 	.word	0x00000000
 800781c:	40e5a180 	.word	0x40e5a180
 8007820:	20001468 	.word	0x20001468
 8007824:	200018e0 	.word	0x200018e0
 8007828:	20001410 	.word	0x20001410
 800782c:	2000161c 	.word	0x2000161c
 8007830:	42c80000 	.word	0x42c80000
 8007834:	2000149c 	.word	0x2000149c
 8007838:	2000125c 	.word	0x2000125c
 800783c:	3ff00000 	.word	0x3ff00000
 8007840:	2000169c 	.word	0x2000169c

08007844 <HAL_ADC_ConvCpltCallback>:
static void MX_USART3_UART_Init(void);
static void MX_SDIO_SD_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <HAL_ADC_ConvCpltCallback+0x38>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10b      	bne.n	800786e <HAL_ADC_ConvCpltCallback+0x2a>
	{
		adc_data[0] = adc_buffer[0];
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <HAL_ADC_ConvCpltCallback+0x3c>)
 8007858:	881a      	ldrh	r2, [r3, #0]
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <HAL_ADC_ConvCpltCallback+0x40>)
 800785c:	801a      	strh	r2, [r3, #0]
		adc_data[1] = adc_buffer[1];
 800785e:	4b08      	ldr	r3, [pc, #32]	; (8007880 <HAL_ADC_ConvCpltCallback+0x3c>)
 8007860:	885a      	ldrh	r2, [r3, #2]
 8007862:	4b08      	ldr	r3, [pc, #32]	; (8007884 <HAL_ADC_ConvCpltCallback+0x40>)
 8007864:	805a      	strh	r2, [r3, #2]
		adc_data[2] = adc_buffer[2];
 8007866:	4b06      	ldr	r3, [pc, #24]	; (8007880 <HAL_ADC_ConvCpltCallback+0x3c>)
 8007868:	889a      	ldrh	r2, [r3, #4]
 800786a:	4b06      	ldr	r3, [pc, #24]	; (8007884 <HAL_ADC_ConvCpltCallback+0x40>)
 800786c:	809a      	strh	r2, [r3, #4]
	}
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40012000 	.word	0x40012000
 8007880:	200014c8 	.word	0x200014c8
 8007884:	200014d0 	.word	0x200014d0

08007888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800788e:	f001 fae7 	bl	8008e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007892:	f000 f9f7 	bl	8007c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007896:	f000 fcf3 	bl	8008280 <MX_GPIO_Init>
  MX_DMA_Init();
 800789a:	f000 fca3 	bl	80081e4 <MX_DMA_Init>
  MX_I2C1_Init();
 800789e:	f000 fac9 	bl	8007e34 <MX_I2C1_Init>
  MX_I2C2_Init();
 80078a2:	f000 faf5 	bl	8007e90 <MX_I2C2_Init>
  MX_TIM1_Init();
 80078a6:	f000 fb77 	bl	8007f98 <MX_TIM1_Init>
  MX_ADC1_Init();
 80078aa:	f000 fa55 	bl	8007d58 <MX_ADC1_Init>
  MX_SPI1_Init();
 80078ae:	f000 fb3d 	bl	8007f2c <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80078b2:	f000 fc6d 	bl	8008190 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80078b6:	f000 fc17 	bl	80080e8 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80078ba:	f000 fc3f 	bl	800813c <MX_USART3_UART_Init>
  MX_SDIO_SD_Init();
 80078be:	f000 fb15 	bl	8007eec <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80078c2:	f009 f9d7 	bl	8010c74 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  NMEA2UBX_Config(&huart4, &UBX_UART_Bufferi);
 80078c6:	49bc      	ldr	r1, [pc, #752]	; (8007bb8 <main+0x330>)
 80078c8:	48bc      	ldr	r0, [pc, #752]	; (8007bbc <main+0x334>)
 80078ca:	f7fb ff47 	bl	800375c <NMEA2UBX_Config>
  LogStart(&SdLogData);
 80078ce:	48bc      	ldr	r0, [pc, #752]	; (8007bc0 <main+0x338>)
 80078d0:	f7f9 fcc6 	bl	8001260 <LogStart>
  LogDataInit();
 80078d4:	f7f9 fd1a 	bl	800130c <LogDataInit>
  MainAllInit();
 80078d8:	f7ff fb2a 	bl	8006f30 <MainAllInit>
  onReceiveFlag = true;
 80078dc:	4bb9      	ldr	r3, [pc, #740]	; (8007bc4 <main+0x33c>)
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
  LIDAR_Config(&huart6, &LIDAR_UART_Bufferi);
 80078e2:	49b9      	ldr	r1, [pc, #740]	; (8007bc8 <main+0x340>)
 80078e4:	48b9      	ldr	r0, [pc, #740]	; (8007bcc <main+0x344>)
 80078e6:	f7fe fb50 	bl	8005f8a <LIDAR_Config>
  thisNode = 0x11223344AA;	// NRF RxPipeAdress'im
 80078ea:	49b9      	ldr	r1, [pc, #740]	; (8007bd0 <main+0x348>)
 80078ec:	a3ae      	add	r3, pc, #696	; (adr r3, 8007ba8 <main+0x320>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	e9c1 2300 	strd	r2, r3, [r1]
  nodeGCS = 0x11223344BB;	// Yer İstasyonu NRF TxPipeAdress'i
 80078f6:	49b7      	ldr	r1, [pc, #732]	; (8007bd4 <main+0x34c>)
 80078f8:	a3ad      	add	r3, pc, #692	; (adr r3, 8007bb0 <main+0x328>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	e9c1 2300 	strd	r2, r3, [r1]

//  CoefficientCalculator(20, 500);//girilen değerler kesme frekansı ve kaç herztlik döngüye sokacagın
//  Scanner();
  HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 3);
 8007902:	2203      	movs	r2, #3
 8007904:	49b4      	ldr	r1, [pc, #720]	; (8007bd8 <main+0x350>)
 8007906:	48b5      	ldr	r0, [pc, #724]	; (8007bdc <main+0x354>)
 8007908:	f001 fb84 	bl	8009014 <HAL_ADC_Start_DMA>
    /* USER CODE BEGIN 3 */

	 // tau degeri ile oynayabilirsin biraz ayarlanmalı
	 //yaw da hata var gibi

	if(Time.Task.Hz_500 == 1)
 800790c:	4bb4      	ldr	r3, [pc, #720]	; (8007be0 <main+0x358>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <main+0xa8>
	{
		MPU6050();
 800791a:	f7fe f909 	bl	8005b30 <MPU6050>
		MotorPowerCalculateWithRate();
 800791e:	f7fd f943 	bl	8004ba8 <MotorPowerCalculateWithRate>
		RemoteControlOnOff();
 8007922:	f7ff fc05 	bl	8007130 <RemoteControlOnOff>
//		HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
		Time.Task.Hz_500 = 0;
 8007926:	4aae      	ldr	r2, [pc, #696]	; (8007be0 <main+0x358>)
 8007928:	7813      	ldrb	r3, [r2, #0]
 800792a:	f36f 0341 	bfc	r3, #1, #1
 800792e:	7013      	strb	r3, [r2, #0]
	}
	if(Time.Task.Hz_200 == 1)
 8007930:	4bab      	ldr	r3, [pc, #684]	; (8007be0 <main+0x358>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d02c      	beq.n	8007998 <main+0x110>
	{
		RemotoControlMapping();
 800793e:	f7fc fe3b 	bl	80045b8 <RemotoControlMapping>
		MPU6050AHRS();
 8007942:	f7fe fa45 	bl	8005dd0 <MPU6050AHRS>
		MadgwickAhrsFilter(Mpu.Gyro_Roll_Ahrs1, Mpu.Gyro_Pitch_Ahrs1, Mpu.Gyro_Yaw_Ahrs1, AccelRollFiltered.NotchFilterOut ,AccelPitchFiltered.NotchFilterOut ,AccelYawFiltered.NotchFilterOut);
 8007946:	4ba7      	ldr	r3, [pc, #668]	; (8007be4 <main+0x35c>)
 8007948:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800794c:	4ba5      	ldr	r3, [pc, #660]	; (8007be4 <main+0x35c>)
 800794e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007952:	4ba4      	ldr	r3, [pc, #656]	; (8007be4 <main+0x35c>)
 8007954:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007958:	4ba3      	ldr	r3, [pc, #652]	; (8007be8 <main+0x360>)
 800795a:	ed93 6a05 	vldr	s12, [r3, #20]
 800795e:	4ba3      	ldr	r3, [pc, #652]	; (8007bec <main+0x364>)
 8007960:	edd3 5a05 	vldr	s11, [r3, #20]
 8007964:	4ba2      	ldr	r3, [pc, #648]	; (8007bf0 <main+0x368>)
 8007966:	ed93 5a05 	vldr	s10, [r3, #20]
 800796a:	eef0 2a45 	vmov.f32	s5, s10
 800796e:	eeb0 2a65 	vmov.f32	s4, s11
 8007972:	eef0 1a46 	vmov.f32	s3, s12
 8007976:	eeb0 1a66 	vmov.f32	s2, s13
 800797a:	eef0 0a47 	vmov.f32	s1, s14
 800797e:	eeb0 0a67 	vmov.f32	s0, s15
 8007982:	f7fa ff61 	bl	8002848 <MadgwickAhrsFilter>
		BarometerReadValues();//ms5611 ve barometrenin kütüphanesini düzenlecek boş vakitlerde
 8007986:	f7ff fdff 	bl	8007588 <BarometerReadValues>
		BarometerAltitude();//ms5611 ve barometrenin kütüphanesini düzenlecek boş vakitlerde
 800798a:	f7ff fedd 	bl	8007748 <BarometerAltitude>
//		HAL_GPIO_TogglePin(GPIOC, Led2_Pin);
		Time.Task.Hz_200 = 0;
 800798e:	4a94      	ldr	r2, [pc, #592]	; (8007be0 <main+0x358>)
 8007990:	7813      	ldrb	r3, [r2, #0]
 8007992:	f36f 0382 	bfc	r3, #2, #1
 8007996:	7013      	strb	r3, [r2, #0]
	}
	if(Time.Task.Hz_50 == 1)
 8007998:	4b91      	ldr	r3, [pc, #580]	; (8007be0 <main+0x358>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d03e      	beq.n	8007a24 <main+0x19c>
	{
//		Ms5611Altitude();
		read_byte_lidar = read_DMA_Buffer(&huart6, &LIDAR_UART_Bufferi, temp_buf_lidar);
 80079a6:	4a93      	ldr	r2, [pc, #588]	; (8007bf4 <main+0x36c>)
 80079a8:	4987      	ldr	r1, [pc, #540]	; (8007bc8 <main+0x340>)
 80079aa:	4888      	ldr	r0, [pc, #544]	; (8007bcc <main+0x344>)
 80079ac:	f7fb fe7d 	bl	80036aa <read_DMA_Buffer>
 80079b0:	4603      	mov	r3, r0
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	4b90      	ldr	r3, [pc, #576]	; (8007bf8 <main+0x370>)
 80079b6:	801a      	strh	r2, [r3, #0]
		if(read_byte_lidar > 0)
 80079b8:	4b8f      	ldr	r3, [pc, #572]	; (8007bf8 <main+0x370>)
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <main+0x148>
		{
			LIDAR_Data_Parser(&LIDAR_Data, temp_buf_lidar, read_byte_lidar);
 80079c0:	4b8d      	ldr	r3, [pc, #564]	; (8007bf8 <main+0x370>)
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	498a      	ldr	r1, [pc, #552]	; (8007bf4 <main+0x36c>)
 80079ca:	488c      	ldr	r0, [pc, #560]	; (8007bfc <main+0x374>)
 80079cc:	f7fe faec 	bl	8005fa8 <LIDAR_Data_Parser>
		}
		read_byte_gps = read_DMA_Buffer(&huart4, &UBX_UART_Bufferi, temp_buf_gps);
 80079d0:	4a8b      	ldr	r2, [pc, #556]	; (8007c00 <main+0x378>)
 80079d2:	4979      	ldr	r1, [pc, #484]	; (8007bb8 <main+0x330>)
 80079d4:	4879      	ldr	r0, [pc, #484]	; (8007bbc <main+0x334>)
 80079d6:	f7fb fe68 	bl	80036aa <read_DMA_Buffer>
 80079da:	4603      	mov	r3, r0
 80079dc:	b29a      	uxth	r2, r3
 80079de:	4b89      	ldr	r3, [pc, #548]	; (8007c04 <main+0x37c>)
 80079e0:	801a      	strh	r2, [r3, #0]
		if(read_byte_gps > 0)
 80079e2:	4b88      	ldr	r3, [pc, #544]	; (8007c04 <main+0x37c>)
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <main+0x172>
		 {
			 GPS_Data_Control(&UBX_Data, temp_buf_gps, read_byte_gps);
 80079ea:	4b86      	ldr	r3, [pc, #536]	; (8007c04 <main+0x37c>)
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	4983      	ldr	r1, [pc, #524]	; (8007c00 <main+0x378>)
 80079f4:	4884      	ldr	r0, [pc, #528]	; (8007c08 <main+0x380>)
 80079f6:	f7fb ffc7 	bl	8003988 <GPS_Data_Control>
		 }
		Battery_Calculate();
 80079fa:	f7ff fa37 	bl	8006e6c <Battery_Calculate>
		ManyometerReadValue();
 80079fe:	f7fc fcb3 	bl	8004368 <ManyometerReadValue>
		PositionControl(&UBX_Data);
 8007a02:	4881      	ldr	r0, [pc, #516]	; (8007c08 <main+0x380>)
 8007a04:	f7fd f812 	bl	8004a2c <PositionControl>
		MotorPowerCalculateWithAltitude();
 8007a08:	f7fd fd6c 	bl	80054e4 <MotorPowerCalculateWithAltitude>
		MotorPowerCalculateWithPosition(&UBX_Data);
 8007a0c:	487e      	ldr	r0, [pc, #504]	; (8007c08 <main+0x380>)
 8007a0e:	f7fd fdcd 	bl	80055ac <MotorPowerCalculateWithPosition>
		HAL_GPIO_TogglePin(GPIOC, Led1_Pin);
 8007a12:	2101      	movs	r1, #1
 8007a14:	487d      	ldr	r0, [pc, #500]	; (8007c0c <main+0x384>)
 8007a16:	f003 f86e 	bl	800aaf6 <HAL_GPIO_TogglePin>
		Time.Task.Hz_50 = 0;
 8007a1a:	4a71      	ldr	r2, [pc, #452]	; (8007be0 <main+0x358>)
 8007a1c:	7813      	ldrb	r3, [r2, #0]
 8007a1e:	f36f 03c3 	bfc	r3, #3, #1
 8007a22:	7013      	strb	r3, [r2, #0]
	}
	uint16_t batteryData = (uint16_t)(Battery.Voltage*100);
 8007a24:	4b7a      	ldr	r3, [pc, #488]	; (8007c10 <main+0x388>)
 8007a26:	edd3 7a07 	vldr	s15, [r3, #28]
 8007a2a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8007c14 <main+0x38c>
 8007a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a36:	ee17 3a90 	vmov	r3, s15
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	80fb      	strh	r3, [r7, #6]
	if(Time.Task.Hz_10 == 1)// position control 50 hz olacak
	{

	}
	if(Time.Task.Hz_20 == 1 && onReceiveFlag == 1)
 8007a3e:	4b68      	ldr	r3, [pc, #416]	; (8007be0 <main+0x358>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80a0 	beq.w	8007b8e <main+0x306>
 8007a4e:	4b5d      	ldr	r3, [pc, #372]	; (8007bc4 <main+0x33c>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 809b 	beq.w	8007b8e <main+0x306>
	{
		uint16_t indexTx=2;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	80bb      	strh	r3, [r7, #4]

		AESK_FLOAT32toUINT8_LE(&Ahrs_YAW,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007a5c:	1d3b      	adds	r3, r7, #4
 8007a5e:	461a      	mov	r2, r3
 8007a60:	496d      	ldr	r1, [pc, #436]	; (8007c18 <main+0x390>)
 8007a62:	486e      	ldr	r0, [pc, #440]	; (8007c1c <main+0x394>)
 8007a64:	f7f9 fb48 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&Ahrs_ROLL,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	496a      	ldr	r1, [pc, #424]	; (8007c18 <main+0x390>)
 8007a6e:	486c      	ldr	r0, [pc, #432]	; (8007c20 <main+0x398>)
 8007a70:	f7f9 fb42 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&Ahrs_PITCH,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007a74:	1d3b      	adds	r3, r7, #4
 8007a76:	461a      	mov	r2, r3
 8007a78:	4967      	ldr	r1, [pc, #412]	; (8007c18 <main+0x390>)
 8007a7a:	486a      	ldr	r0, [pc, #424]	; (8007c24 <main+0x39c>)
 8007a7c:	f7f9 fb3c 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&Barometer_Altitude,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007a80:	1d3b      	adds	r3, r7, #4
 8007a82:	461a      	mov	r2, r3
 8007a84:	4964      	ldr	r1, [pc, #400]	; (8007c18 <main+0x390>)
 8007a86:	4868      	ldr	r0, [pc, #416]	; (8007c28 <main+0x3a0>)
 8007a88:	f7f9 fb36 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>

		AESK_UINT16toUINT8_LE(&Motor.Sol_On,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007a8c:	1d3b      	adds	r3, r7, #4
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4961      	ldr	r1, [pc, #388]	; (8007c18 <main+0x390>)
 8007a92:	4866      	ldr	r0, [pc, #408]	; (8007c2c <main+0x3a4>)
 8007a94:	f7f9 faaa 	bl	8000fec <AESK_UINT16toUINT8_LE>
		AESK_UINT16toUINT8_LE(&Motor.Sol_Arka,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007a98:	1d3b      	adds	r3, r7, #4
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	495e      	ldr	r1, [pc, #376]	; (8007c18 <main+0x390>)
 8007a9e:	4864      	ldr	r0, [pc, #400]	; (8007c30 <main+0x3a8>)
 8007aa0:	f7f9 faa4 	bl	8000fec <AESK_UINT16toUINT8_LE>
		AESK_UINT16toUINT8_LE(&Motor.Sag_On,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	495b      	ldr	r1, [pc, #364]	; (8007c18 <main+0x390>)
 8007aaa:	4862      	ldr	r0, [pc, #392]	; (8007c34 <main+0x3ac>)
 8007aac:	f7f9 fa9e 	bl	8000fec <AESK_UINT16toUINT8_LE>
		AESK_UINT16toUINT8_LE(&Motor.Sag_Arka,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4958      	ldr	r1, [pc, #352]	; (8007c18 <main+0x390>)
 8007ab6:	4860      	ldr	r0, [pc, #384]	; (8007c38 <main+0x3b0>)
 8007ab8:	f7f9 fa98 	bl	8000fec <AESK_UINT16toUINT8_LE>

		AESK_FLOAT32toUINT8_LE(&RemoteYaw.Setpoint,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007abc:	1d3b      	adds	r3, r7, #4
 8007abe:	461a      	mov	r2, r3
 8007ac0:	4955      	ldr	r1, [pc, #340]	; (8007c18 <main+0x390>)
 8007ac2:	485e      	ldr	r0, [pc, #376]	; (8007c3c <main+0x3b4>)
 8007ac4:	f7f9 fb18 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&RemoteRoll.Setpoint,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	461a      	mov	r2, r3
 8007acc:	4952      	ldr	r1, [pc, #328]	; (8007c18 <main+0x390>)
 8007ace:	485c      	ldr	r0, [pc, #368]	; (8007c40 <main+0x3b8>)
 8007ad0:	f7f9 fb12 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&RemotePitch.Setpoint,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007ad4:	1d3b      	adds	r3, r7, #4
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	494f      	ldr	r1, [pc, #316]	; (8007c18 <main+0x390>)
 8007ada:	485a      	ldr	r0, [pc, #360]	; (8007c44 <main+0x3bc>)
 8007adc:	f7f9 fb0c 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&Altitudeerror,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007ae0:	1d3b      	adds	r3, r7, #4
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	494c      	ldr	r1, [pc, #304]	; (8007c18 <main+0x390>)
 8007ae6:	4858      	ldr	r0, [pc, #352]	; (8007c48 <main+0x3c0>)
 8007ae8:	f7f9 fb06 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_UINT16toUINT8_LE(&batteryData,aesk_nrf24_data.TxBuffer, &indexTx);
 8007aec:	1d3a      	adds	r2, r7, #4
 8007aee:	1dbb      	adds	r3, r7, #6
 8007af0:	4949      	ldr	r1, [pc, #292]	; (8007c18 <main+0x390>)
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7f9 fa7a 	bl	8000fec <AESK_UINT16toUINT8_LE>
		AESK_UINT16toUINT8_LE(&LIDAR_Data.LIDAR_Pack.Distance,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	461a      	mov	r2, r3
 8007afc:	4946      	ldr	r1, [pc, #280]	; (8007c18 <main+0x390>)
 8007afe:	4853      	ldr	r0, [pc, #332]	; (8007c4c <main+0x3c4>)
 8007b00:	f7f9 fa74 	bl	8000fec <AESK_UINT16toUINT8_LE>

		AESK_FLOAT32toUINT8_LE(&UBX_Data.ubx_PVT.latitude,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b04:	1d3b      	adds	r3, r7, #4
 8007b06:	461a      	mov	r2, r3
 8007b08:	4943      	ldr	r1, [pc, #268]	; (8007c18 <main+0x390>)
 8007b0a:	4851      	ldr	r0, [pc, #324]	; (8007c50 <main+0x3c8>)
 8007b0c:	f7f9 faf4 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&UBX_Data.ubx_PVT.longitude,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b10:	1d3b      	adds	r3, r7, #4
 8007b12:	461a      	mov	r2, r3
 8007b14:	4940      	ldr	r1, [pc, #256]	; (8007c18 <main+0x390>)
 8007b16:	484f      	ldr	r0, [pc, #316]	; (8007c54 <main+0x3cc>)
 8007b18:	f7f9 faee 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_UINT32toUINT8_LE(&UBX_Data.ubx_PVT.hAcc,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	461a      	mov	r2, r3
 8007b20:	493d      	ldr	r1, [pc, #244]	; (8007c18 <main+0x390>)
 8007b22:	484d      	ldr	r0, [pc, #308]	; (8007c58 <main+0x3d0>)
 8007b24:	f7f9 fa84 	bl	8001030 <AESK_UINT32toUINT8_LE>
		AESK_INT32toUINT8_LE(&UBX_Data.ubx_PVT.velN,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b28:	1d3b      	adds	r3, r7, #4
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	493a      	ldr	r1, [pc, #232]	; (8007c18 <main+0x390>)
 8007b2e:	484b      	ldr	r0, [pc, #300]	; (8007c5c <main+0x3d4>)
 8007b30:	f7f9 fab0 	bl	8001094 <AESK_INT32toUINT8_LE>
		AESK_INT32toUINT8_LE(&UBX_Data.ubx_PVT.velE,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b34:	1d3b      	adds	r3, r7, #4
 8007b36:	461a      	mov	r2, r3
 8007b38:	4937      	ldr	r1, [pc, #220]	; (8007c18 <main+0x390>)
 8007b3a:	4849      	ldr	r0, [pc, #292]	; (8007c60 <main+0x3d8>)
 8007b3c:	f7f9 faaa 	bl	8001094 <AESK_INT32toUINT8_LE>
		AESK_INT32toUINT8_LE(&UBX_Data.ubx_PVT.velD,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b40:	1d3b      	adds	r3, r7, #4
 8007b42:	461a      	mov	r2, r3
 8007b44:	4934      	ldr	r1, [pc, #208]	; (8007c18 <main+0x390>)
 8007b46:	4847      	ldr	r0, [pc, #284]	; (8007c64 <main+0x3dc>)
 8007b48:	f7f9 faa4 	bl	8001094 <AESK_INT32toUINT8_LE>
		AESK_FLOAT32toUINT8_LE(&UBX_Data.ubx_PVT.gSpeed,aesk_nrf24_data.TxBuffer ,&indexTx);
 8007b4c:	1d3b      	adds	r3, r7, #4
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4931      	ldr	r1, [pc, #196]	; (8007c18 <main+0x390>)
 8007b52:	4845      	ldr	r0, [pc, #276]	; (8007c68 <main+0x3e0>)
 8007b54:	f7f9 fad0 	bl	80010f8 <AESK_FLOAT32toUINT8_LE>
		AESK_UINT8toUINT8CODE(&UBX_Data.ubx_PVT.numSV, aesk_nrf24_data.TxBuffer, &indexTx);
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	492e      	ldr	r1, [pc, #184]	; (8007c18 <main+0x390>)
 8007b5e:	4843      	ldr	r0, [pc, #268]	; (8007c6c <main+0x3e4>)
 8007b60:	f7f9 fafc 	bl	800115c <AESK_UINT8toUINT8CODE>
//	    AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc7,aesk_nrf24_data.TxBuffer,&indexTx);
//	    AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc8,aesk_nrf24_data.TxBuffer,&indexTx);
//	    AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc9,aesk_nrf24_data.TxBuffer,&indexTx);
//	    AESK_UINT16toUINT8_LE(&aesk_Rx_Datas_Int.adc10,aesk_nrf24_data.TxBuffer,&indexTx);

		aesk_nrf24_data.TxBuffer[0] = 'A';
 8007b64:	4b42      	ldr	r3, [pc, #264]	; (8007c70 <main+0x3e8>)
 8007b66:	2241      	movs	r2, #65	; 0x41
 8007b68:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		aesk_nrf24_data.TxBuffer[1] = indexTx;
 8007b6c:	88bb      	ldrh	r3, [r7, #4]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	4b3f      	ldr	r3, [pc, #252]	; (8007c70 <main+0x3e8>)
 8007b72:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

		AESK_NRF24_WritePack(aesk_nrf24_data.TxBuffer, indexTx, nodeGCS);
 8007b76:	88b9      	ldrh	r1, [r7, #4]
 8007b78:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <main+0x34c>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	4826      	ldr	r0, [pc, #152]	; (8007c18 <main+0x390>)
 8007b80:	f7fa fdea 	bl	8002758 <AESK_NRF24_WritePack>

		Time.Task.Hz_20=0;
 8007b84:	4a16      	ldr	r2, [pc, #88]	; (8007be0 <main+0x358>)
 8007b86:	7813      	ldrb	r3, [r2, #0]
 8007b88:	f36f 1304 	bfc	r3, #4, #1
 8007b8c:	7013      	strb	r3, [r2, #0]
	}
	if(Time.Task.Hz_5==1)
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <main+0x358>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f43f aeb7 	beq.w	800790c <main+0x84>
	{
		LogAsString(&SdLogData,&UBX_Data);
 8007b9e:	491a      	ldr	r1, [pc, #104]	; (8007c08 <main+0x380>)
 8007ba0:	4807      	ldr	r0, [pc, #28]	; (8007bc0 <main+0x338>)
 8007ba2:	f7f9 fc93 	bl	80014cc <LogAsString>
 8007ba6:	e065      	b.n	8007c74 <main+0x3ec>
 8007ba8:	223344aa 	.word	0x223344aa
 8007bac:	00000011 	.word	0x00000011
 8007bb0:	223344bb 	.word	0x223344bb
 8007bb4:	00000011 	.word	0x00000011
 8007bb8:	20001e1c 	.word	0x20001e1c
 8007bbc:	20001578 	.word	0x20001578
 8007bc0:	2000286c 	.word	0x2000286c
 8007bc4:	20000f88 	.word	0x20000f88
 8007bc8:	200022c8 	.word	0x200022c8
 8007bcc:	200027c8 	.word	0x200027c8
 8007bd0:	200014d8 	.word	0x200014d8
 8007bd4:	200016c8 	.word	0x200016c8
 8007bd8:	200014c8 	.word	0x200014c8
 8007bdc:	20002280 	.word	0x20002280
 8007be0:	20001690 	.word	0x20001690
 8007be4:	20001180 	.word	0x20001180
 8007be8:	200016e8 	.word	0x200016e8
 8007bec:	20000cd4 	.word	0x20000cd4
 8007bf0:	200013f0 	.word	0x200013f0
 8007bf4:	200007f8 	.word	0x200007f8
 8007bf8:	20000bf8 	.word	0x20000bf8
 8007bfc:	20002730 	.word	0x20002730
 8007c00:	200003f4 	.word	0x200003f4
 8007c04:	200007f4 	.word	0x200007f4
 8007c08:	200019a8 	.word	0x200019a8
 8007c0c:	40020800 	.word	0x40020800
 8007c10:	20001444 	.word	0x20001444
 8007c14:	42c80000 	.word	0x42c80000
 8007c18:	20000e67 	.word	0x20000e67
 8007c1c:	20001498 	.word	0x20001498
 8007c20:	20000c40 	.word	0x20000c40
 8007c24:	20001220 	.word	0x20001220
 8007c28:	2000169c 	.word	0x2000169c
 8007c2c:	20001620 	.word	0x20001620
 8007c30:	20001624 	.word	0x20001624
 8007c34:	20001622 	.word	0x20001622
 8007c38:	20001626 	.word	0x20001626
 8007c3c:	200012fc 	.word	0x200012fc
 8007c40:	20001230 	.word	0x20001230
 8007c44:	20001754 	.word	0x20001754
 8007c48:	2000148c 	.word	0x2000148c
 8007c4c:	20002738 	.word	0x20002738
 8007c50:	20001dd8 	.word	0x20001dd8
 8007c54:	20001dd4 	.word	0x20001dd4
 8007c58:	20001de4 	.word	0x20001de4
 8007c5c:	20001dec 	.word	0x20001dec
 8007c60:	20001df0 	.word	0x20001df0
 8007c64:	20001df4 	.word	0x20001df4
 8007c68:	20001df8 	.word	0x20001df8
 8007c6c:	20001dd3 	.word	0x20001dd3
 8007c70:	20000d68 	.word	0x20000d68
		Time.Task.Hz_5=0;
 8007c74:	4a02      	ldr	r2, [pc, #8]	; (8007c80 <main+0x3f8>)
 8007c76:	7813      	ldrb	r3, [r2, #0]
 8007c78:	f36f 1386 	bfc	r3, #6, #1
 8007c7c:	7013      	strb	r3, [r2, #0]
  {
 8007c7e:	e645      	b.n	800790c <main+0x84>
 8007c80:	20001690 	.word	0x20001690

08007c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b094      	sub	sp, #80	; 0x50
 8007c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c8a:	f107 0320 	add.w	r3, r7, #32
 8007c8e:	2230      	movs	r2, #48	; 0x30
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f00b fb60 	bl	8013358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60bb      	str	r3, [r7, #8]
 8007cac:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <SystemClock_Config+0xcc>)
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	4a27      	ldr	r2, [pc, #156]	; (8007d50 <SystemClock_Config+0xcc>)
 8007cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <SystemClock_Config+0xcc>)
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	60bb      	str	r3, [r7, #8]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	4b22      	ldr	r3, [pc, #136]	; (8007d54 <SystemClock_Config+0xd0>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a21      	ldr	r2, [pc, #132]	; (8007d54 <SystemClock_Config+0xd0>)
 8007cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	4b1f      	ldr	r3, [pc, #124]	; (8007d54 <SystemClock_Config+0xd0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cdc:	607b      	str	r3, [r7, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cea:	2302      	movs	r3, #2
 8007cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8007cf4:	2319      	movs	r3, #25
 8007cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007cf8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007d02:	2307      	movs	r3, #7
 8007d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d06:	f107 0320 	add.w	r3, r7, #32
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f004 f9ca 	bl	800c0a4 <HAL_RCC_OscConfig>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007d16:	f000 fb37 	bl	8008388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d1a:	230f      	movs	r3, #15
 8007d1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007d32:	f107 030c 	add.w	r3, r7, #12
 8007d36:	2105      	movs	r1, #5
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f004 fc2b 	bl	800c594 <HAL_RCC_ClockConfig>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007d44:	f000 fb20 	bl	8008388 <Error_Handler>
  }
}
 8007d48:	bf00      	nop
 8007d4a:	3750      	adds	r7, #80	; 0x50
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	40023800 	.word	0x40023800
 8007d54:	40007000 	.word	0x40007000

08007d58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007d5e:	463b      	mov	r3, r7
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	609a      	str	r2, [r3, #8]
 8007d68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007d6a:	4b2f      	ldr	r3, [pc, #188]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d6c:	4a2f      	ldr	r2, [pc, #188]	; (8007e2c <MX_ADC1_Init+0xd4>)
 8007d6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007d70:	4b2d      	ldr	r3, [pc, #180]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d78:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8007d7e:	4b2a      	ldr	r3, [pc, #168]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007d84:	4b28      	ldr	r3, [pc, #160]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d8a:	4b27      	ldr	r3, [pc, #156]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d92:	4b25      	ldr	r3, [pc, #148]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d98:	4b23      	ldr	r3, [pc, #140]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007d9a:	4a25      	ldr	r2, [pc, #148]	; (8007e30 <MX_ADC1_Init+0xd8>)
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d9e:	4b22      	ldr	r3, [pc, #136]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8007da4:	4b20      	ldr	r3, [pc, #128]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007da6:	2203      	movs	r2, #3
 8007da8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007daa:	4b1f      	ldr	r3, [pc, #124]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007db8:	481b      	ldr	r0, [pc, #108]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007dba:	f001 f8e7 	bl	8008f8c <HAL_ADC_Init>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007dc4:	f000 fae0 	bl	8008388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007dc8:	2304      	movs	r3, #4
 8007dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8007dd0:	2305      	movs	r3, #5
 8007dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4813      	ldr	r0, [pc, #76]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007dda:	f001 fa3f 	bl	800925c <HAL_ADC_ConfigChannel>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007de4:	f000 fad0 	bl	8008388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007de8:	2308      	movs	r3, #8
 8007dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8007dec:	2302      	movs	r3, #2
 8007dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007df0:	463b      	mov	r3, r7
 8007df2:	4619      	mov	r1, r3
 8007df4:	480c      	ldr	r0, [pc, #48]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007df6:	f001 fa31 	bl	800925c <HAL_ADC_ConfigChannel>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007e00:	f000 fac2 	bl	8008388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007e04:	2309      	movs	r3, #9
 8007e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <MX_ADC1_Init+0xd0>)
 8007e12:	f001 fa23 	bl	800925c <HAL_ADC_ConfigChannel>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8007e1c:	f000 fab4 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20002280 	.word	0x20002280
 8007e2c:	40012000 	.word	0x40012000
 8007e30:	0f000001 	.word	0x0f000001

08007e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007e38:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e3a:	4a13      	ldr	r2, [pc, #76]	; (8007e88 <MX_I2C1_Init+0x54>)
 8007e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007e3e:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e40:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <MX_I2C1_Init+0x58>)
 8007e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007e4a:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e58:	4b0a      	ldr	r3, [pc, #40]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e70:	4804      	ldr	r0, [pc, #16]	; (8007e84 <MX_I2C1_Init+0x50>)
 8007e72:	f002 fe73 	bl	800ab5c <HAL_I2C_Init>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e7c:	f000 fa84 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007e80:	bf00      	nop
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000fec 	.word	0x20000fec
 8007e88:	40005400 	.word	0x40005400
 8007e8c:	00061a80 	.word	0x00061a80

08007e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007e96:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <MX_I2C2_Init+0x54>)
 8007e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007e9c:	4a12      	ldr	r2, [pc, #72]	; (8007ee8 <MX_I2C2_Init+0x58>)
 8007e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007ea6:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007eac:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007eb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007ec6:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007ecc:	4804      	ldr	r0, [pc, #16]	; (8007ee0 <MX_I2C2_Init+0x50>)
 8007ece:	f002 fe45 	bl	800ab5c <HAL_I2C_Init>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007ed8:	f000 fa56 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007edc:	bf00      	nop
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	200010a0 	.word	0x200010a0
 8007ee4:	40005800 	.word	0x40005800
 8007ee8:	00061a80 	.word	0x00061a80

08007eec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007ef2:	4a0d      	ldr	r2, [pc, #52]	; (8007f28 <MX_SDIO_SD_Init+0x3c>)
 8007ef4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007f02:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007f08:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8007f14:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <MX_SDIO_SD_Init+0x38>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8007f1a:	bf00      	nop
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	20002744 	.word	0x20002744
 8007f28:	40012c00 	.word	0x40012c00

08007f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007f30:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f32:	4a18      	ldr	r2, [pc, #96]	; (8007f94 <MX_SPI1_Init+0x68>)
 8007f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f44:	4b12      	ldr	r3, [pc, #72]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f4a:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f50:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007f56:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f60:	2218      	movs	r2, #24
 8007f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f64:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f78:	220a      	movs	r2, #10
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007f7c:	4804      	ldr	r0, [pc, #16]	; (8007f90 <MX_SPI1_Init+0x64>)
 8007f7e:	f005 fc5d 	bl	800d83c <HAL_SPI_Init>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007f88:	f000 f9fe 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007f8c:	bf00      	nop
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	200015bc 	.word	0x200015bc
 8007f94:	40013000 	.word	0x40013000

08007f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b092      	sub	sp, #72	; 0x48
 8007f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	611a      	str	r2, [r3, #16]
 8007fb8:	615a      	str	r2, [r3, #20]
 8007fba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f00b f9c8 	bl	8013358 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007fc8:	4b45      	ldr	r3, [pc, #276]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007fca:	4a46      	ldr	r2, [pc, #280]	; (80080e4 <MX_TIM1_Init+0x14c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8007fce:	4b44      	ldr	r3, [pc, #272]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007fd0:	22a7      	movs	r2, #167	; 0xa7
 8007fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fd4:	4b42      	ldr	r3, [pc, #264]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8007fda:	4b41      	ldr	r3, [pc, #260]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007fdc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8007fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fe2:	4b3f      	ldr	r3, [pc, #252]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007fe8:	4b3d      	ldr	r3, [pc, #244]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fee:	4b3c      	ldr	r3, [pc, #240]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007ff4:	483a      	ldr	r0, [pc, #232]	; (80080e0 <MX_TIM1_Init+0x148>)
 8007ff6:	f006 fa31 	bl	800e45c <HAL_TIM_PWM_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8008000:	f000 f9c2 	bl	8008388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008004:	2300      	movs	r3, #0
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008008:	2300      	movs	r3, #0
 800800a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800800c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008010:	4619      	mov	r1, r3
 8008012:	4833      	ldr	r0, [pc, #204]	; (80080e0 <MX_TIM1_Init+0x148>)
 8008014:	f006 fe72 	bl	800ecfc <HAL_TIMEx_MasterConfigSynchronization>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800801e:	f000 f9b3 	bl	8008388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008022:	2360      	movs	r3, #96	; 0x60
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800802a:	2300      	movs	r3, #0
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800802e:	2300      	movs	r3, #0
 8008030:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008032:	2300      	movs	r3, #0
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008036:	2300      	movs	r3, #0
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800803a:	2300      	movs	r3, #0
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800803e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008042:	2200      	movs	r2, #0
 8008044:	4619      	mov	r1, r3
 8008046:	4826      	ldr	r0, [pc, #152]	; (80080e0 <MX_TIM1_Init+0x148>)
 8008048:	f006 fb20 	bl	800e68c <HAL_TIM_PWM_ConfigChannel>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8008052:	f000 f999 	bl	8008388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805a:	2204      	movs	r2, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4820      	ldr	r0, [pc, #128]	; (80080e0 <MX_TIM1_Init+0x148>)
 8008060:	f006 fb14 	bl	800e68c <HAL_TIM_PWM_ConfigChannel>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800806a:	f000 f98d 	bl	8008388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800806e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008072:	2208      	movs	r2, #8
 8008074:	4619      	mov	r1, r3
 8008076:	481a      	ldr	r0, [pc, #104]	; (80080e0 <MX_TIM1_Init+0x148>)
 8008078:	f006 fb08 	bl	800e68c <HAL_TIM_PWM_ConfigChannel>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8008082:	f000 f981 	bl	8008388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800808a:	220c      	movs	r2, #12
 800808c:	4619      	mov	r1, r3
 800808e:	4814      	ldr	r0, [pc, #80]	; (80080e0 <MX_TIM1_Init+0x148>)
 8008090:	f006 fafc 	bl	800e68c <HAL_TIM_PWM_ConfigChannel>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800809a:	f000 f975 	bl	8008388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80080b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80080bc:	1d3b      	adds	r3, r7, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4807      	ldr	r0, [pc, #28]	; (80080e0 <MX_TIM1_Init+0x148>)
 80080c2:	f006 fe97 	bl	800edf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80080cc:	f000 f95c 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80080d0:	4803      	ldr	r0, [pc, #12]	; (80080e0 <MX_TIM1_Init+0x148>)
 80080d2:	f000 fb69 	bl	80087a8 <HAL_TIM_MspPostInit>

}
 80080d6:	bf00      	nop
 80080d8:	3748      	adds	r7, #72	; 0x48
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20001500 	.word	0x20001500
 80080e4:	40010000 	.word	0x40010000

080080e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80080ec:	4b11      	ldr	r3, [pc, #68]	; (8008134 <MX_UART4_Init+0x4c>)
 80080ee:	4a12      	ldr	r2, [pc, #72]	; (8008138 <MX_UART4_Init+0x50>)
 80080f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80080f2:	4b10      	ldr	r3, [pc, #64]	; (8008134 <MX_UART4_Init+0x4c>)
 80080f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80080f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80080fa:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <MX_UART4_Init+0x4c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008100:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <MX_UART4_Init+0x4c>)
 8008102:	2200      	movs	r2, #0
 8008104:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <MX_UART4_Init+0x4c>)
 8008108:	2200      	movs	r2, #0
 800810a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <MX_UART4_Init+0x4c>)
 800810e:	220c      	movs	r2, #12
 8008110:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008112:	4b08      	ldr	r3, [pc, #32]	; (8008134 <MX_UART4_Init+0x4c>)
 8008114:	2200      	movs	r2, #0
 8008116:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <MX_UART4_Init+0x4c>)
 800811a:	2200      	movs	r2, #0
 800811c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800811e:	4805      	ldr	r0, [pc, #20]	; (8008134 <MX_UART4_Init+0x4c>)
 8008120:	f006 feba 	bl	800ee98 <HAL_UART_Init>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800812a:	f000 f92d 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800812e:	bf00      	nop
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20001578 	.word	0x20001578
 8008138:	40004c00 	.word	0x40004c00

0800813c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008140:	4b11      	ldr	r3, [pc, #68]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008142:	4a12      	ldr	r2, [pc, #72]	; (800818c <MX_USART3_UART_Init+0x50>)
 8008144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008146:	4b10      	ldr	r3, [pc, #64]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800814c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800814e:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008150:	2200      	movs	r2, #0
 8008152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008154:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008156:	2200      	movs	r2, #0
 8008158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800815a:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 800815c:	2200      	movs	r2, #0
 800815e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008162:	220c      	movs	r2, #12
 8008164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008166:	4b08      	ldr	r3, [pc, #32]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008168:	2200      	movs	r2, #0
 800816a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800816c:	4b06      	ldr	r3, [pc, #24]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 800816e:	2200      	movs	r2, #0
 8008170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008172:	4805      	ldr	r0, [pc, #20]	; (8008188 <MX_USART3_UART_Init+0x4c>)
 8008174:	f006 fe90 	bl	800ee98 <HAL_UART_Init>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800817e:	f000 f903 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008182:	bf00      	nop
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000fa0 	.word	0x20000fa0
 800818c:	40004800 	.word	0x40004800

08008190 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008194:	4b11      	ldr	r3, [pc, #68]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 8008196:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <MX_USART6_UART_Init+0x50>)
 8008198:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800819a:	4b10      	ldr	r3, [pc, #64]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 800819c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80081a2:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80081a8:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80081ae:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081b6:	220c      	movs	r2, #12
 80081b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80081c6:	4805      	ldr	r0, [pc, #20]	; (80081dc <MX_USART6_UART_Init+0x4c>)
 80081c8:	f006 fe66 	bl	800ee98 <HAL_UART_Init>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80081d2:	f000 f8d9 	bl	8008388 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80081d6:	bf00      	nop
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200027c8 	.word	0x200027c8
 80081e0:	40011400 	.word	0x40011400

080081e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	4b23      	ldr	r3, [pc, #140]	; (800827c <MX_DMA_Init+0x98>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f2:	4a22      	ldr	r2, [pc, #136]	; (800827c <MX_DMA_Init+0x98>)
 80081f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081f8:	6313      	str	r3, [r2, #48]	; 0x30
 80081fa:	4b20      	ldr	r3, [pc, #128]	; (800827c <MX_DMA_Init+0x98>)
 80081fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008206:	2300      	movs	r3, #0
 8008208:	603b      	str	r3, [r7, #0]
 800820a:	4b1c      	ldr	r3, [pc, #112]	; (800827c <MX_DMA_Init+0x98>)
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	4a1b      	ldr	r2, [pc, #108]	; (800827c <MX_DMA_Init+0x98>)
 8008210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008214:	6313      	str	r3, [r2, #48]	; 0x30
 8008216:	4b19      	ldr	r3, [pc, #100]	; (800827c <MX_DMA_Init+0x98>)
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8008222:	2200      	movs	r2, #0
 8008224:	2100      	movs	r1, #0
 8008226:	200d      	movs	r0, #13
 8008228:	f001 fb93 	bl	8009952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800822c:	200d      	movs	r0, #13
 800822e:	f001 fbac 	bl	800998a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8008232:	2200      	movs	r2, #0
 8008234:	2100      	movs	r1, #0
 8008236:	200f      	movs	r0, #15
 8008238:	f001 fb8b 	bl	8009952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800823c:	200f      	movs	r0, #15
 800823e:	f001 fba4 	bl	800998a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	2038      	movs	r0, #56	; 0x38
 8008248:	f001 fb83 	bl	8009952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800824c:	2038      	movs	r0, #56	; 0x38
 800824e:	f001 fb9c 	bl	800998a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	2039      	movs	r0, #57	; 0x39
 8008258:	f001 fb7b 	bl	8009952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800825c:	2039      	movs	r0, #57	; 0x39
 800825e:	f001 fb94 	bl	800998a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	2046      	movs	r0, #70	; 0x46
 8008268:	f001 fb73 	bl	8009952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800826c:	2046      	movs	r0, #70	; 0x46
 800826e:	f001 fb8c 	bl	800998a <HAL_NVIC_EnableIRQ>

}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40023800 	.word	0x40023800

08008280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008286:	f107 0314 	add.w	r3, r7, #20
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	605a      	str	r2, [r3, #4]
 8008290:	609a      	str	r2, [r3, #8]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008296:	2300      	movs	r3, #0
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	4b39      	ldr	r3, [pc, #228]	; (8008380 <MX_GPIO_Init+0x100>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	4a38      	ldr	r2, [pc, #224]	; (8008380 <MX_GPIO_Init+0x100>)
 80082a0:	f043 0304 	orr.w	r3, r3, #4
 80082a4:	6313      	str	r3, [r2, #48]	; 0x30
 80082a6:	4b36      	ldr	r3, [pc, #216]	; (8008380 <MX_GPIO_Init+0x100>)
 80082a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	4b32      	ldr	r3, [pc, #200]	; (8008380 <MX_GPIO_Init+0x100>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	4a31      	ldr	r2, [pc, #196]	; (8008380 <MX_GPIO_Init+0x100>)
 80082bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c0:	6313      	str	r3, [r2, #48]	; 0x30
 80082c2:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <MX_GPIO_Init+0x100>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ce:	2300      	movs	r3, #0
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <MX_GPIO_Init+0x100>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	4a2a      	ldr	r2, [pc, #168]	; (8008380 <MX_GPIO_Init+0x100>)
 80082d8:	f043 0301 	orr.w	r3, r3, #1
 80082dc:	6313      	str	r3, [r2, #48]	; 0x30
 80082de:	4b28      	ldr	r3, [pc, #160]	; (8008380 <MX_GPIO_Init+0x100>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	60bb      	str	r3, [r7, #8]
 80082e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	4b24      	ldr	r3, [pc, #144]	; (8008380 <MX_GPIO_Init+0x100>)
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	4a23      	ldr	r2, [pc, #140]	; (8008380 <MX_GPIO_Init+0x100>)
 80082f4:	f043 0302 	orr.w	r3, r3, #2
 80082f8:	6313      	str	r3, [r2, #48]	; 0x30
 80082fa:	4b21      	ldr	r3, [pc, #132]	; (8008380 <MX_GPIO_Init+0x100>)
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	607b      	str	r3, [r7, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008306:	2300      	movs	r3, #0
 8008308:	603b      	str	r3, [r7, #0]
 800830a:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <MX_GPIO_Init+0x100>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <MX_GPIO_Init+0x100>)
 8008310:	f043 0308 	orr.w	r3, r3, #8
 8008314:	6313      	str	r3, [r2, #48]	; 0x30
 8008316:	4b1a      	ldr	r3, [pc, #104]	; (8008380 <MX_GPIO_Init+0x100>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CSN_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8008322:	2200      	movs	r2, #0
 8008324:	f242 012f 	movw	r1, #8239	; 0x202f
 8008328:	4816      	ldr	r0, [pc, #88]	; (8008384 <MX_GPIO_Init+0x104>)
 800832a:	f002 fbcb 	bl	800aac4 <HAL_GPIO_WritePin>
                          |LED_Pin|NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRF_CSN_Pin Led1_Pin Led2_Pin Led3_Pin
                           LED_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800832e:	f242 032f 	movw	r3, #8239	; 0x202f
 8008332:	617b      	str	r3, [r7, #20]
                          |LED_Pin|NRF_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008334:	2301      	movs	r3, #1
 8008336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008338:	2300      	movs	r3, #0
 800833a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800833c:	2300      	movs	r3, #0
 800833e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008340:	f107 0314 	add.w	r3, r7, #20
 8008344:	4619      	mov	r1, r3
 8008346:	480f      	ldr	r0, [pc, #60]	; (8008384 <MX_GPIO_Init+0x104>)
 8008348:	f002 fa20 	bl	800a78c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800834c:	2310      	movs	r3, #16
 800834e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008350:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008356:	2301      	movs	r3, #1
 8008358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800835a:	f107 0314 	add.w	r3, r7, #20
 800835e:	4619      	mov	r1, r3
 8008360:	4808      	ldr	r0, [pc, #32]	; (8008384 <MX_GPIO_Init+0x104>)
 8008362:	f002 fa13 	bl	800a78c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	200a      	movs	r0, #10
 800836c:	f001 faf1 	bl	8009952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008370:	200a      	movs	r0, #10
 8008372:	f001 fb0a 	bl	800998a <HAL_NVIC_EnableIRQ>

}
 8008376:	bf00      	nop
 8008378:	3728      	adds	r7, #40	; 0x28
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40023800 	.word	0x40023800
 8008384:	40020800 	.word	0x40020800

08008388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800838c:	b672      	cpsid	i
}
 800838e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008390:	e7fe      	b.n	8008390 <Error_Handler+0x8>
	...

08008394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800839a:	2300      	movs	r3, #0
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <HAL_MspInit+0x4c>)
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <HAL_MspInit+0x4c>)
 80083a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a8:	6453      	str	r3, [r2, #68]	; 0x44
 80083aa:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <HAL_MspInit+0x4c>)
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b2:	607b      	str	r3, [r7, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083b6:	2300      	movs	r3, #0
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_MspInit+0x4c>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	4a08      	ldr	r2, [pc, #32]	; (80083e0 <HAL_MspInit+0x4c>)
 80083c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c4:	6413      	str	r3, [r2, #64]	; 0x40
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <HAL_MspInit+0x4c>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40023800 	.word	0x40023800

080083e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	; 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	609a      	str	r2, [r3, #8]
 80083f8:	60da      	str	r2, [r3, #12]
 80083fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a3c      	ldr	r2, [pc, #240]	; (80084f4 <HAL_ADC_MspInit+0x110>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d172      	bne.n	80084ec <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008406:	2300      	movs	r3, #0
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	4b3b      	ldr	r3, [pc, #236]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 800840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840e:	4a3a      	ldr	r2, [pc, #232]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008414:	6453      	str	r3, [r2, #68]	; 0x44
 8008416:	4b38      	ldr	r3, [pc, #224]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	4b34      	ldr	r3, [pc, #208]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	4a33      	ldr	r2, [pc, #204]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6313      	str	r3, [r2, #48]	; 0x30
 8008432:	4b31      	ldr	r3, [pc, #196]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	4b2d      	ldr	r3, [pc, #180]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	4a2c      	ldr	r2, [pc, #176]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008448:	f043 0302 	orr.w	r3, r3, #2
 800844c:	6313      	str	r3, [r2, #48]	; 0x30
 800844e:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <HAL_ADC_MspInit+0x114>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	60bb      	str	r3, [r7, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_voltage_Pin;
 800845a:	2310      	movs	r3, #16
 800845c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800845e:	2303      	movs	r3, #3
 8008460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_voltage_GPIO_Port, &GPIO_InitStruct);
 8008466:	f107 0314 	add.w	r3, r7, #20
 800846a:	4619      	mov	r1, r3
 800846c:	4823      	ldr	r0, [pc, #140]	; (80084fc <HAL_ADC_MspInit+0x118>)
 800846e:	f002 f98d 	bl	800a78c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_akim_Pin|ADC3_Pin;
 8008472:	2303      	movs	r3, #3
 8008474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008476:	2303      	movs	r3, #3
 8008478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847a:	2300      	movs	r3, #0
 800847c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800847e:	f107 0314 	add.w	r3, r7, #20
 8008482:	4619      	mov	r1, r3
 8008484:	481e      	ldr	r0, [pc, #120]	; (8008500 <HAL_ADC_MspInit+0x11c>)
 8008486:	f002 f981 	bl	800a78c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800848a:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <HAL_ADC_MspInit+0x120>)
 800848c:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <HAL_ADC_MspInit+0x124>)
 800848e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008490:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <HAL_ADC_MspInit+0x120>)
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <HAL_ADC_MspInit+0x120>)
 8008498:	2200      	movs	r2, #0
 800849a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800849c:	4b19      	ldr	r3, [pc, #100]	; (8008504 <HAL_ADC_MspInit+0x120>)
 800849e:	2200      	movs	r2, #0
 80084a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80084a2:	4b18      	ldr	r3, [pc, #96]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80084aa:	4b16      	ldr	r3, [pc, #88]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80084ba:	4b12      	ldr	r3, [pc, #72]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80084c2:	4b10      	ldr	r3, [pc, #64]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80084c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80084d0:	480c      	ldr	r0, [pc, #48]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084d2:	f001 fa75 	bl	80099c0 <HAL_DMA_Init>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80084dc:	f7ff ff54 	bl	8008388 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a08      	ldr	r2, [pc, #32]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
 80084e6:	4a07      	ldr	r2, [pc, #28]	; (8008504 <HAL_ADC_MspInit+0x120>)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80084ec:	bf00      	nop
 80084ee:	3728      	adds	r7, #40	; 0x28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	40012000 	.word	0x40012000
 80084f8:	40023800 	.word	0x40023800
 80084fc:	40020000 	.word	0x40020000
 8008500:	40020400 	.word	0x40020400
 8008504:	200026cc 	.word	0x200026cc
 8008508:	40026410 	.word	0x40026410

0800850c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08c      	sub	sp, #48	; 0x30
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008514:	f107 031c 	add.w	r3, r7, #28
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	609a      	str	r2, [r3, #8]
 8008520:	60da      	str	r2, [r3, #12]
 8008522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a32      	ldr	r2, [pc, #200]	; (80085f4 <HAL_I2C_MspInit+0xe8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d12c      	bne.n	8008588 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	4b31      	ldr	r3, [pc, #196]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	6313      	str	r3, [r2, #48]	; 0x30
 800853e:	4b2e      	ldr	r3, [pc, #184]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800854a:	23c0      	movs	r3, #192	; 0xc0
 800854c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800854e:	2312      	movs	r3, #18
 8008550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008552:	2300      	movs	r3, #0
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008556:	2303      	movs	r3, #3
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800855a:	2304      	movs	r3, #4
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800855e:	f107 031c 	add.w	r3, r7, #28
 8008562:	4619      	mov	r1, r3
 8008564:	4825      	ldr	r0, [pc, #148]	; (80085fc <HAL_I2C_MspInit+0xf0>)
 8008566:	f002 f911 	bl	800a78c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	4b22      	ldr	r3, [pc, #136]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	4a21      	ldr	r2, [pc, #132]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 8008574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008578:	6413      	str	r3, [r2, #64]	; 0x40
 800857a:	4b1f      	ldr	r3, [pc, #124]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008586:	e031      	b.n	80085ec <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <HAL_I2C_MspInit+0xf4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d12c      	bne.n	80085ec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	4a17      	ldr	r2, [pc, #92]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 800859c:	f043 0302 	orr.w	r3, r3, #2
 80085a0:	6313      	str	r3, [r2, #48]	; 0x30
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80085ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80085b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085b4:	2312      	movs	r3, #18
 80085b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085bc:	2303      	movs	r3, #3
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80085c0:	2304      	movs	r3, #4
 80085c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085c4:	f107 031c 	add.w	r3, r7, #28
 80085c8:	4619      	mov	r1, r3
 80085ca:	480c      	ldr	r0, [pc, #48]	; (80085fc <HAL_I2C_MspInit+0xf0>)
 80085cc:	f002 f8de 	bl	800a78c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	4a07      	ldr	r2, [pc, #28]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 80085da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085de:	6413      	str	r3, [r2, #64]	; 0x40
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <HAL_I2C_MspInit+0xec>)
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	bf00      	nop
 80085ee:	3730      	adds	r7, #48	; 0x30
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40005400 	.word	0x40005400
 80085f8:	40023800 	.word	0x40023800
 80085fc:	40020400 	.word	0x40020400
 8008600:	40005800 	.word	0x40005800

08008604 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08a      	sub	sp, #40	; 0x28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	605a      	str	r2, [r3, #4]
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a28      	ldr	r2, [pc, #160]	; (80086c4 <HAL_SD_MspInit+0xc0>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d14a      	bne.n	80086bc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	4b27      	ldr	r3, [pc, #156]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	4a26      	ldr	r2, [pc, #152]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008634:	6453      	str	r3, [r2, #68]	; 0x44
 8008636:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	4b20      	ldr	r3, [pc, #128]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	4a1f      	ldr	r2, [pc, #124]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 800864c:	f043 0304 	orr.w	r3, r3, #4
 8008650:	6313      	str	r3, [r2, #48]	; 0x30
 8008652:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	f003 0304 	and.w	r3, r3, #4
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008668:	f043 0308 	orr.w	r3, r3, #8
 800866c:	6313      	str	r3, [r2, #48]	; 0x30
 800866e:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_SD_MspInit+0xc4>)
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	60bb      	str	r3, [r7, #8]
 8008678:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800867a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800867e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008680:	2302      	movs	r3, #2
 8008682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008684:	2300      	movs	r3, #0
 8008686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008688:	2303      	movs	r3, #3
 800868a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800868c:	230c      	movs	r3, #12
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	4619      	mov	r1, r3
 8008696:	480d      	ldr	r0, [pc, #52]	; (80086cc <HAL_SD_MspInit+0xc8>)
 8008698:	f002 f878 	bl	800a78c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800869c:	2304      	movs	r3, #4
 800869e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a0:	2302      	movs	r3, #2
 80086a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a8:	2303      	movs	r3, #3
 80086aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80086ac:	230c      	movs	r3, #12
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086b0:	f107 0314 	add.w	r3, r7, #20
 80086b4:	4619      	mov	r1, r3
 80086b6:	4806      	ldr	r0, [pc, #24]	; (80086d0 <HAL_SD_MspInit+0xcc>)
 80086b8:	f002 f868 	bl	800a78c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80086bc:	bf00      	nop
 80086be:	3728      	adds	r7, #40	; 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40023800 	.word	0x40023800
 80086cc:	40020800 	.word	0x40020800
 80086d0:	40020c00 	.word	0x40020c00

080086d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08a      	sub	sp, #40	; 0x28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a19      	ldr	r2, [pc, #100]	; (8008758 <HAL_SPI_MspInit+0x84>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d12b      	bne.n	800874e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80086f6:	2300      	movs	r3, #0
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	4b18      	ldr	r3, [pc, #96]	; (800875c <HAL_SPI_MspInit+0x88>)
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_SPI_MspInit+0x88>)
 8008700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008704:	6453      	str	r3, [r2, #68]	; 0x44
 8008706:	4b15      	ldr	r3, [pc, #84]	; (800875c <HAL_SPI_MspInit+0x88>)
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <HAL_SPI_MspInit+0x88>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	4a10      	ldr	r2, [pc, #64]	; (800875c <HAL_SPI_MspInit+0x88>)
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	6313      	str	r3, [r2, #48]	; 0x30
 8008722:	4b0e      	ldr	r3, [pc, #56]	; (800875c <HAL_SPI_MspInit+0x88>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800872e:	23e0      	movs	r3, #224	; 0xe0
 8008730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008732:	2302      	movs	r3, #2
 8008734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008736:	2300      	movs	r3, #0
 8008738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800873a:	2303      	movs	r3, #3
 800873c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800873e:	2305      	movs	r3, #5
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008742:	f107 0314 	add.w	r3, r7, #20
 8008746:	4619      	mov	r1, r3
 8008748:	4805      	ldr	r0, [pc, #20]	; (8008760 <HAL_SPI_MspInit+0x8c>)
 800874a:	f002 f81f 	bl	800a78c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800874e:	bf00      	nop
 8008750:	3728      	adds	r7, #40	; 0x28
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40013000 	.word	0x40013000
 800875c:	40023800 	.word	0x40023800
 8008760:	40020000 	.word	0x40020000

08008764 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0b      	ldr	r2, [pc, #44]	; (80087a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d10d      	bne.n	8008792 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <HAL_TIM_PWM_MspInit+0x40>)
 800877c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <HAL_TIM_PWM_MspInit+0x40>)
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	6453      	str	r3, [r2, #68]	; 0x44
 8008786:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <HAL_TIM_PWM_MspInit+0x40>)
 8008788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008792:	bf00      	nop
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40023800 	.word	0x40023800

080087a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	609a      	str	r2, [r3, #8]
 80087bc:	60da      	str	r2, [r3, #12]
 80087be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a12      	ldr	r2, [pc, #72]	; (8008810 <HAL_TIM_MspPostInit+0x68>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d11e      	bne.n	8008808 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ca:	2300      	movs	r3, #0
 80087cc:	60bb      	str	r3, [r7, #8]
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <HAL_TIM_MspPostInit+0x6c>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <HAL_TIM_MspPostInit+0x6c>)
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	6313      	str	r3, [r2, #48]	; 0x30
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <HAL_TIM_MspPostInit+0x6c>)
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80087e6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80087ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ec:	2302      	movs	r3, #2
 80087ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80087f8:	2301      	movs	r3, #1
 80087fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087fc:	f107 030c 	add.w	r3, r7, #12
 8008800:	4619      	mov	r1, r3
 8008802:	4805      	ldr	r0, [pc, #20]	; (8008818 <HAL_TIM_MspPostInit+0x70>)
 8008804:	f001 ffc2 	bl	800a78c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008808:	bf00      	nop
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40010000 	.word	0x40010000
 8008814:	40023800 	.word	0x40023800
 8008818:	40020000 	.word	0x40020000

0800881c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08e      	sub	sp, #56	; 0x38
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	60da      	str	r2, [r3, #12]
 8008832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a68      	ldr	r2, [pc, #416]	; (80089dc <HAL_UART_MspInit+0x1c0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	f040 8093 	bne.w	8008966 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008840:	2300      	movs	r3, #0
 8008842:	623b      	str	r3, [r7, #32]
 8008844:	4b66      	ldr	r3, [pc, #408]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	4a65      	ldr	r2, [pc, #404]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 800884a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800884e:	6413      	str	r3, [r2, #64]	; 0x40
 8008850:	4b63      	ldr	r3, [pc, #396]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008858:	623b      	str	r3, [r7, #32]
 800885a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800885c:	2300      	movs	r3, #0
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	4b5f      	ldr	r3, [pc, #380]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	4a5e      	ldr	r2, [pc, #376]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	6313      	str	r3, [r2, #48]	; 0x30
 800886c:	4b5c      	ldr	r3, [pc, #368]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008878:	2303      	movs	r3, #3
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800887c:	2302      	movs	r3, #2
 800887e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008880:	2300      	movs	r3, #0
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008884:	2303      	movs	r3, #3
 8008886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008888:	2308      	movs	r3, #8
 800888a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800888c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008890:	4619      	mov	r1, r3
 8008892:	4854      	ldr	r0, [pc, #336]	; (80089e4 <HAL_UART_MspInit+0x1c8>)
 8008894:	f001 ff7a 	bl	800a78c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008898:	4b53      	ldr	r3, [pc, #332]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 800889a:	4a54      	ldr	r2, [pc, #336]	; (80089ec <HAL_UART_MspInit+0x1d0>)
 800889c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800889e:	4b52      	ldr	r3, [pc, #328]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088a6:	4b50      	ldr	r3, [pc, #320]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088ac:	4b4e      	ldr	r3, [pc, #312]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088b2:	4b4d      	ldr	r3, [pc, #308]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088b8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80088ba:	4b4b      	ldr	r3, [pc, #300]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088bc:	2200      	movs	r2, #0
 80088be:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088c0:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80088c6:	4b48      	ldr	r3, [pc, #288]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088cc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80088ce:	4b46      	ldr	r3, [pc, #280]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088d4:	4b44      	ldr	r3, [pc, #272]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80088da:	4843      	ldr	r0, [pc, #268]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088dc:	f001 f870 	bl	80099c0 <HAL_DMA_Init>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80088e6:	f7ff fd4f 	bl	8008388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a3e      	ldr	r2, [pc, #248]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
 80088f0:	4a3d      	ldr	r2, [pc, #244]	; (80089e8 <HAL_UART_MspInit+0x1cc>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80088f6:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 80088f8:	4a3e      	ldr	r2, [pc, #248]	; (80089f4 <HAL_UART_MspInit+0x1d8>)
 80088fa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80088fc:	4b3c      	ldr	r3, [pc, #240]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 80088fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008902:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008904:	4b3a      	ldr	r3, [pc, #232]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 8008906:	2240      	movs	r2, #64	; 0x40
 8008908:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800890a:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 800890c:	2200      	movs	r2, #0
 800890e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008910:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 8008912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008916:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008918:	4b35      	ldr	r3, [pc, #212]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 800891a:	2200      	movs	r2, #0
 800891c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800891e:	4b34      	ldr	r3, [pc, #208]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 8008920:	2200      	movs	r2, #0
 8008922:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 8008924:	4b32      	ldr	r3, [pc, #200]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 8008926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800892a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800892c:	4b30      	ldr	r3, [pc, #192]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 800892e:	2200      	movs	r2, #0
 8008930:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008932:	4b2f      	ldr	r3, [pc, #188]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 8008934:	2200      	movs	r2, #0
 8008936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008938:	482d      	ldr	r0, [pc, #180]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 800893a:	f001 f841 	bl	80099c0 <HAL_DMA_Init>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8008944:	f7ff fd20 	bl	8008388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a29      	ldr	r2, [pc, #164]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 800894c:	635a      	str	r2, [r3, #52]	; 0x34
 800894e:	4a28      	ldr	r2, [pc, #160]	; (80089f0 <HAL_UART_MspInit+0x1d4>)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	2034      	movs	r0, #52	; 0x34
 800895a:	f000 fffa 	bl	8009952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800895e:	2034      	movs	r0, #52	; 0x34
 8008960:	f001 f813 	bl	800998a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8008964:	e0e4      	b.n	8008b30 <HAL_UART_MspInit+0x314>
  else if(huart->Instance==USART3)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a23      	ldr	r2, [pc, #140]	; (80089f8 <HAL_UART_MspInit+0x1dc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d147      	bne.n	8008a00 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008970:	2300      	movs	r3, #0
 8008972:	61bb      	str	r3, [r7, #24]
 8008974:	4b1a      	ldr	r3, [pc, #104]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 800897a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800897e:	6413      	str	r3, [r2, #64]	; 0x40
 8008980:	4b17      	ldr	r3, [pc, #92]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	4a12      	ldr	r2, [pc, #72]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 8008996:	f043 0304 	orr.w	r3, r3, #4
 800899a:	6313      	str	r3, [r2, #48]	; 0x30
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <HAL_UART_MspInit+0x1c4>)
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80089a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ae:	2302      	movs	r3, #2
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b6:	2303      	movs	r3, #3
 80089b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80089ba:	2307      	movs	r3, #7
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089c2:	4619      	mov	r1, r3
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <HAL_UART_MspInit+0x1e0>)
 80089c6:	f001 fee1 	bl	800a78c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	2027      	movs	r0, #39	; 0x27
 80089d0:	f000 ffbf 	bl	8009952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80089d4:	2027      	movs	r0, #39	; 0x27
 80089d6:	f000 ffd8 	bl	800998a <HAL_NVIC_EnableIRQ>
}
 80089da:	e0a9      	b.n	8008b30 <HAL_UART_MspInit+0x314>
 80089dc:	40004c00 	.word	0x40004c00
 80089e0:	40023800 	.word	0x40023800
 80089e4:	40020000 	.word	0x40020000
 80089e8:	200018e4 	.word	0x200018e4
 80089ec:	40026040 	.word	0x40026040
 80089f0:	2000280c 	.word	0x2000280c
 80089f4:	40026070 	.word	0x40026070
 80089f8:	40004800 	.word	0x40004800
 80089fc:	40020800 	.word	0x40020800
  else if(huart->Instance==USART6)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a4c      	ldr	r2, [pc, #304]	; (8008b38 <HAL_UART_MspInit+0x31c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	f040 8092 	bne.w	8008b30 <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	4b4a      	ldr	r3, [pc, #296]	; (8008b3c <HAL_UART_MspInit+0x320>)
 8008a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a14:	4a49      	ldr	r2, [pc, #292]	; (8008b3c <HAL_UART_MspInit+0x320>)
 8008a16:	f043 0320 	orr.w	r3, r3, #32
 8008a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8008a1c:	4b47      	ldr	r3, [pc, #284]	; (8008b3c <HAL_UART_MspInit+0x320>)
 8008a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	4b43      	ldr	r3, [pc, #268]	; (8008b3c <HAL_UART_MspInit+0x320>)
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a30:	4a42      	ldr	r2, [pc, #264]	; (8008b3c <HAL_UART_MspInit+0x320>)
 8008a32:	f043 0304 	orr.w	r3, r3, #4
 8008a36:	6313      	str	r3, [r2, #48]	; 0x30
 8008a38:	4b40      	ldr	r3, [pc, #256]	; (8008b3c <HAL_UART_MspInit+0x320>)
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008a44:	23c0      	movs	r3, #192	; 0xc0
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a50:	2303      	movs	r3, #3
 8008a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008a54:	2308      	movs	r3, #8
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4838      	ldr	r0, [pc, #224]	; (8008b40 <HAL_UART_MspInit+0x324>)
 8008a60:	f001 fe94 	bl	800a78c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8008a64:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a66:	4a38      	ldr	r2, [pc, #224]	; (8008b48 <HAL_UART_MspInit+0x32c>)
 8008a68:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008a6a:	4b36      	ldr	r3, [pc, #216]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a6c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008a70:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a72:	4b34      	ldr	r3, [pc, #208]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a78:	4b32      	ldr	r3, [pc, #200]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a7e:	4b31      	ldr	r3, [pc, #196]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a84:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a86:	4b2f      	ldr	r3, [pc, #188]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a8c:	4b2d      	ldr	r3, [pc, #180]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8008a92:	4b2c      	ldr	r3, [pc, #176]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a98:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008a9a:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008aa0:	4b28      	ldr	r3, [pc, #160]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008aa6:	4827      	ldr	r0, [pc, #156]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008aa8:	f000 ff8a 	bl	80099c0 <HAL_DMA_Init>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_UART_MspInit+0x29a>
      Error_Handler();
 8008ab2:	f7ff fc69 	bl	8008388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a22      	ldr	r2, [pc, #136]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38
 8008abc:	4a21      	ldr	r2, [pc, #132]	; (8008b44 <HAL_UART_MspInit+0x328>)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008ac4:	4a22      	ldr	r2, [pc, #136]	; (8008b50 <HAL_UART_MspInit+0x334>)
 8008ac6:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8008ac8:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008aca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008ace:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ad0:	4b1e      	ldr	r3, [pc, #120]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008ad2:	2240      	movs	r2, #64	; 0x40
 8008ad4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ae2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ae4:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008aea:	4b18      	ldr	r3, [pc, #96]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8008af0:	4b16      	ldr	r3, [pc, #88]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008af6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008af8:	4b14      	ldr	r3, [pc, #80]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8008b04:	4811      	ldr	r0, [pc, #68]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008b06:	f000 ff5b 	bl	80099c0 <HAL_DMA_Init>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 8008b10:	f7ff fc3a 	bl	8008388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a0d      	ldr	r2, [pc, #52]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008b18:	635a      	str	r2, [r3, #52]	; 0x34
 8008b1a:	4a0c      	ldr	r2, [pc, #48]	; (8008b4c <HAL_UART_MspInit+0x330>)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008b20:	2200      	movs	r2, #0
 8008b22:	2100      	movs	r1, #0
 8008b24:	2047      	movs	r0, #71	; 0x47
 8008b26:	f000 ff14 	bl	8009952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008b2a:	2047      	movs	r0, #71	; 0x47
 8008b2c:	f000 ff2d 	bl	800998a <HAL_NVIC_EnableIRQ>
}
 8008b30:	bf00      	nop
 8008b32:	3738      	adds	r7, #56	; 0x38
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	40011400 	.word	0x40011400
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	40020800 	.word	0x40020800
 8008b44:	20001944 	.word	0x20001944
 8008b48:	40026428 	.word	0x40026428
 8008b4c:	20002220 	.word	0x20002220
 8008b50:	400264b8 	.word	0x400264b8

08008b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b58:	e7fe      	b.n	8008b58 <NMI_Handler+0x4>

08008b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b5e:	e7fe      	b.n	8008b5e <HardFault_Handler+0x4>

08008b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b64:	e7fe      	b.n	8008b64 <MemManage_Handler+0x4>

08008b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b66:	b480      	push	{r7}
 8008b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b6a:	e7fe      	b.n	8008b6a <BusFault_Handler+0x4>

08008b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b70:	e7fe      	b.n	8008b70 <UsageFault_Handler+0x4>

08008b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b72:	b480      	push	{r7}
 8008b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b84:	bf00      	nop
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ba0:	f000 f9b0 	bl	8008f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8008ba4:	f7fd fcca 	bl	800653c <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8008ba8:	bf00      	nop
 8008baa:	bd80      	pop	{r7, pc}

08008bac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC1_voltage_Pin);
 8008bb0:	2010      	movs	r0, #16
 8008bb2:	f001 ffbb 	bl	800ab2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008bb6:	bf00      	nop
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8008bc0:	4802      	ldr	r0, [pc, #8]	; (8008bcc <DMA1_Stream2_IRQHandler+0x10>)
 8008bc2:	f001 f895 	bl	8009cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008bc6:	bf00      	nop
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200018e4 	.word	0x200018e4

08008bd0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8008bd4:	4802      	ldr	r0, [pc, #8]	; (8008be0 <DMA1_Stream4_IRQHandler+0x10>)
 8008bd6:	f001 f88b 	bl	8009cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008bda:	bf00      	nop
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2000280c 	.word	0x2000280c

08008be4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008be8:	4802      	ldr	r0, [pc, #8]	; (8008bf4 <USART3_IRQHandler+0x10>)
 8008bea:	f006 fa95 	bl	800f118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008bee:	bf00      	nop
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000fa0 	.word	0x20000fa0

08008bf8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008bfc:	4802      	ldr	r0, [pc, #8]	; (8008c08 <UART4_IRQHandler+0x10>)
 8008bfe:	f006 fa8b 	bl	800f118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008c02:	bf00      	nop
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20001578 	.word	0x20001578

08008c0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008c10:	4802      	ldr	r0, [pc, #8]	; (8008c1c <DMA2_Stream0_IRQHandler+0x10>)
 8008c12:	f001 f86d 	bl	8009cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008c16:	bf00      	nop
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200026cc 	.word	0x200026cc

08008c20 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8008c24:	4802      	ldr	r0, [pc, #8]	; (8008c30 <DMA2_Stream1_IRQHandler+0x10>)
 8008c26:	f001 f863 	bl	8009cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20001944 	.word	0x20001944

08008c34 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8008c38:	4802      	ldr	r0, [pc, #8]	; (8008c44 <DMA2_Stream7_IRQHandler+0x10>)
 8008c3a:	f001 f859 	bl	8009cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20002220 	.word	0x20002220

08008c48 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008c4c:	4802      	ldr	r0, [pc, #8]	; (8008c58 <USART6_IRQHandler+0x10>)
 8008c4e:	f006 fa63 	bl	800f118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8008c52:	bf00      	nop
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200027c8 	.word	0x200027c8

08008c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
	return 1;
 8008c60:	2301      	movs	r3, #1
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <_kill>:

int _kill(int pid, int sig)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008c76:	f00a fb37 	bl	80132e8 <__errno>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2216      	movs	r2, #22
 8008c7e:	601a      	str	r2, [r3, #0]
	return -1;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <_exit>:

void _exit (int status)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c94:	f04f 31ff 	mov.w	r1, #4294967295
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ffe7 	bl	8008c6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c9e:	e7fe      	b.n	8008c9e <_exit+0x12>

08008ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cac:	2300      	movs	r3, #0
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	e00a      	b.n	8008cc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008cb2:	f3af 8000 	nop.w
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	60ba      	str	r2, [r7, #8]
 8008cbe:	b2ca      	uxtb	r2, r1
 8008cc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	dbf0      	blt.n	8008cb2 <_read+0x12>
	}

return len;
 8008cd0:	687b      	ldr	r3, [r7, #4]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b086      	sub	sp, #24
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e009      	b.n	8008d00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	60ba      	str	r2, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	dbf1      	blt.n	8008cec <_write+0x12>
	}
	return len;
 8008d08:	687b      	ldr	r3, [r7, #4]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_close>:

int _close(int file)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
	return -1;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <_isatty>:

int _isatty(int file)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
	return 1;
 8008d52:	2301      	movs	r3, #1
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
	return 0;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d84:	4a14      	ldr	r2, [pc, #80]	; (8008dd8 <_sbrk+0x5c>)
 8008d86:	4b15      	ldr	r3, [pc, #84]	; (8008ddc <_sbrk+0x60>)
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d90:	4b13      	ldr	r3, [pc, #76]	; (8008de0 <_sbrk+0x64>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d102      	bne.n	8008d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d98:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <_sbrk+0x64>)
 8008d9a:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <_sbrk+0x68>)
 8008d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <_sbrk+0x64>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d207      	bcs.n	8008dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008dac:	f00a fa9c 	bl	80132e8 <__errno>
 8008db0:	4603      	mov	r3, r0
 8008db2:	220c      	movs	r2, #12
 8008db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008db6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dba:	e009      	b.n	8008dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <_sbrk+0x64>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008dc2:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <_sbrk+0x64>)
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	4a05      	ldr	r2, [pc, #20]	; (8008de0 <_sbrk+0x64>)
 8008dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20020000 	.word	0x20020000
 8008ddc:	00000400 	.word	0x00000400
 8008de0:	20000bfc 	.word	0x20000bfc
 8008de4:	200035c8 	.word	0x200035c8

08008de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <SystemInit+0x20>)
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df2:	4a05      	ldr	r2, [pc, #20]	; (8008e08 <SystemInit+0x20>)
 8008df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008dfc:	bf00      	nop
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	e000ed00 	.word	0xe000ed00

08008e0c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8008e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e10:	480d      	ldr	r0, [pc, #52]	; (8008e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008e12:	490e      	ldr	r1, [pc, #56]	; (8008e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008e14:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e18:	e002      	b.n	8008e20 <LoopCopyDataInit>

08008e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e1e:	3304      	adds	r3, #4

08008e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e24:	d3f9      	bcc.n	8008e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e26:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008e28:	4c0b      	ldr	r4, [pc, #44]	; (8008e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e2c:	e001      	b.n	8008e32 <LoopFillZerobss>

08008e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e30:	3204      	adds	r2, #4

08008e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e34:	d3fb      	bcc.n	8008e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e36:	f7ff ffd7 	bl	8008de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e3a:	f00a fa5b 	bl	80132f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e3e:	f7fe fd23 	bl	8007888 <main>
  bx  lr    
 8008e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e4c:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8008e50:	0801b180 	.word	0x0801b180
  ldr r2, =_sbss
 8008e54:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8008e58:	200035c8 	.word	0x200035c8

08008e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e5c:	e7fe      	b.n	8008e5c <ADC_IRQHandler>
	...

08008e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <HAL_Init+0x40>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a0d      	ldr	r2, [pc, #52]	; (8008ea0 <HAL_Init+0x40>)
 8008e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_Init+0x40>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a0a      	ldr	r2, [pc, #40]	; (8008ea0 <HAL_Init+0x40>)
 8008e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e7c:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <HAL_Init+0x40>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <HAL_Init+0x40>)
 8008e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f000 fd57 	bl	800993c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e8e:	200f      	movs	r0, #15
 8008e90:	f000 f808 	bl	8008ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e94:	f7ff fa7e 	bl	8008394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023c00 	.word	0x40023c00

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <HAL_InitTick+0x54>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	4b12      	ldr	r3, [pc, #72]	; (8008efc <HAL_InitTick+0x58>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fd6f 	bl	80099a6 <HAL_SYSTICK_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e00e      	b.n	8008ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b0f      	cmp	r3, #15
 8008ed6:	d80a      	bhi.n	8008eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	f000 fd37 	bl	8009952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ee4:	4a06      	ldr	r2, [pc, #24]	; (8008f00 <HAL_InitTick+0x5c>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	e000      	b.n	8008ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000120 	.word	0x20000120
 8008efc:	20000128 	.word	0x20000128
 8008f00:	20000124 	.word	0x20000124

08008f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <HAL_IncTick+0x20>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <HAL_IncTick+0x24>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4413      	add	r3, r2
 8008f14:	4a04      	ldr	r2, [pc, #16]	; (8008f28 <HAL_IncTick+0x24>)
 8008f16:	6013      	str	r3, [r2, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000128 	.word	0x20000128
 8008f28:	2000312c 	.word	0x2000312c

08008f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <HAL_GetTick+0x14>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	2000312c 	.word	0x2000312c

08008f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f4c:	f7ff ffee 	bl	8008f2c <HAL_GetTick>
 8008f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d005      	beq.n	8008f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <HAL_Delay+0x44>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f6a:	bf00      	nop
 8008f6c:	f7ff ffde 	bl	8008f2c <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d8f7      	bhi.n	8008f6c <HAL_Delay+0x28>
  {
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000128 	.word	0x20000128

08008f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e033      	b.n	800900a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fa1a 	bl	80083e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f003 0310 	and.w	r3, r3, #16
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d118      	bne.n	8008ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008fd2:	f023 0302 	bic.w	r3, r3, #2
 8008fd6:	f043 0202 	orr.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa5e 	bl	80094a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	f043 0201 	orr.w	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8008ffa:	e001      	b.n	8009000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <HAL_ADC_Start_DMA+0x1e>
 800902e:	2302      	movs	r3, #2
 8009030:	e0e9      	b.n	8009206 <HAL_ADC_Start_DMA+0x1f2>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b01      	cmp	r3, #1
 8009046:	d018      	beq.n	800907a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009058:	4b6d      	ldr	r3, [pc, #436]	; (8009210 <HAL_ADC_Start_DMA+0x1fc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a6d      	ldr	r2, [pc, #436]	; (8009214 <HAL_ADC_Start_DMA+0x200>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0c9a      	lsrs	r2, r3, #18
 8009064:	4613      	mov	r3, r2
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	4413      	add	r3, r2
 800906a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800906c:	e002      	b.n	8009074 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3b01      	subs	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f9      	bne.n	800906e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009088:	d107      	bne.n	800909a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009098:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	f040 80a1 	bne.w	80091ec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80090b2:	f023 0301 	bic.w	r3, r3, #1
 80090b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80090d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e8:	d106      	bne.n	80090f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ee:	f023 0206 	bic.w	r2, r3, #6
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	645a      	str	r2, [r3, #68]	; 0x44
 80090f6:	e002      	b.n	80090fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009106:	4b44      	ldr	r3, [pc, #272]	; (8009218 <HAL_ADC_Start_DMA+0x204>)
 8009108:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	4a43      	ldr	r2, [pc, #268]	; (800921c <HAL_ADC_Start_DMA+0x208>)
 8009110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	4a42      	ldr	r2, [pc, #264]	; (8009220 <HAL_ADC_Start_DMA+0x20c>)
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	4a41      	ldr	r2, [pc, #260]	; (8009224 <HAL_ADC_Start_DMA+0x210>)
 8009120:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800912a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800913a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800914a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	334c      	adds	r3, #76	; 0x4c
 8009156:	4619      	mov	r1, r3
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f000 fcde 	bl	8009b1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2b00      	cmp	r3, #0
 800916a:	d12a      	bne.n	80091c2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <HAL_ADC_Start_DMA+0x214>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d015      	beq.n	80091a2 <HAL_ADC_Start_DMA+0x18e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a2c      	ldr	r2, [pc, #176]	; (800922c <HAL_ADC_Start_DMA+0x218>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d105      	bne.n	800918c <HAL_ADC_Start_DMA+0x178>
 8009180:	4b25      	ldr	r3, [pc, #148]	; (8009218 <HAL_ADC_Start_DMA+0x204>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a27      	ldr	r2, [pc, #156]	; (8009230 <HAL_ADC_Start_DMA+0x21c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d136      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <HAL_ADC_Start_DMA+0x204>)
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d130      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d129      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	e020      	b.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a18      	ldr	r2, [pc, #96]	; (8009228 <HAL_ADC_Start_DMA+0x214>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d11b      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d114      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80091e8:	609a      	str	r2, [r3, #8]
 80091ea:	e00b      	b.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	f043 0210 	orr.w	r2, r3, #16
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	f043 0201 	orr.w	r2, r3, #1
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000120 	.word	0x20000120
 8009214:	431bde83 	.word	0x431bde83
 8009218:	40012300 	.word	0x40012300
 800921c:	08009699 	.word	0x08009699
 8009220:	08009753 	.word	0x08009753
 8009224:	0800976f 	.word	0x0800976f
 8009228:	40012000 	.word	0x40012000
 800922c:	40012100 	.word	0x40012100
 8009230:	40012200 	.word	0x40012200

08009234 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_ADC_ConfigChannel+0x1c>
 8009274:	2302      	movs	r3, #2
 8009276:	e105      	b.n	8009484 <HAL_ADC_ConfigChannel+0x228>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b09      	cmp	r3, #9
 8009286:	d925      	bls.n	80092d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68d9      	ldr	r1, [r3, #12]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	4613      	mov	r3, r2
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4413      	add	r3, r2
 800929c:	3b1e      	subs	r3, #30
 800929e:	2207      	movs	r2, #7
 80092a0:	fa02 f303 	lsl.w	r3, r2, r3
 80092a4:	43da      	mvns	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	400a      	ands	r2, r1
 80092ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68d9      	ldr	r1, [r3, #12]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4618      	mov	r0, r3
 80092c0:	4603      	mov	r3, r0
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4403      	add	r3, r0
 80092c6:	3b1e      	subs	r3, #30
 80092c8:	409a      	lsls	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	e022      	b.n	800931a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6919      	ldr	r1, [r3, #16]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	4613      	mov	r3, r2
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	4413      	add	r3, r2
 80092e8:	2207      	movs	r2, #7
 80092ea:	fa02 f303 	lsl.w	r3, r2, r3
 80092ee:	43da      	mvns	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	400a      	ands	r2, r1
 80092f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6919      	ldr	r1, [r3, #16]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	4618      	mov	r0, r3
 800930a:	4603      	mov	r3, r0
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	4403      	add	r3, r0
 8009310:	409a      	lsls	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	2b06      	cmp	r3, #6
 8009320:	d824      	bhi.n	800936c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	3b05      	subs	r3, #5
 8009334:	221f      	movs	r2, #31
 8009336:	fa02 f303 	lsl.w	r3, r2, r3
 800933a:	43da      	mvns	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	400a      	ands	r2, r1
 8009342:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	4618      	mov	r0, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	3b05      	subs	r3, #5
 800935e:	fa00 f203 	lsl.w	r2, r0, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	635a      	str	r2, [r3, #52]	; 0x34
 800936a:	e04c      	b.n	8009406 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b0c      	cmp	r3, #12
 8009372:	d824      	bhi.n	80093be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	3b23      	subs	r3, #35	; 0x23
 8009386:	221f      	movs	r2, #31
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	43da      	mvns	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	400a      	ands	r2, r1
 8009394:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	4618      	mov	r0, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	3b23      	subs	r3, #35	; 0x23
 80093b0:	fa00 f203 	lsl.w	r2, r0, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	631a      	str	r2, [r3, #48]	; 0x30
 80093bc:	e023      	b.n	8009406 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	3b41      	subs	r3, #65	; 0x41
 80093d0:	221f      	movs	r2, #31
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	43da      	mvns	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	400a      	ands	r2, r1
 80093de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	4618      	mov	r0, r3
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	3b41      	subs	r3, #65	; 0x41
 80093fa:	fa00 f203 	lsl.w	r2, r0, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009406:	4b22      	ldr	r3, [pc, #136]	; (8009490 <HAL_ADC_ConfigChannel+0x234>)
 8009408:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a21      	ldr	r2, [pc, #132]	; (8009494 <HAL_ADC_ConfigChannel+0x238>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d109      	bne.n	8009428 <HAL_ADC_ConfigChannel+0x1cc>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b12      	cmp	r3, #18
 800941a:	d105      	bne.n	8009428 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a19      	ldr	r2, [pc, #100]	; (8009494 <HAL_ADC_ConfigChannel+0x238>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d123      	bne.n	800947a <HAL_ADC_ConfigChannel+0x21e>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b10      	cmp	r3, #16
 8009438:	d003      	beq.n	8009442 <HAL_ADC_ConfigChannel+0x1e6>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b11      	cmp	r3, #17
 8009440:	d11b      	bne.n	800947a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b10      	cmp	r3, #16
 8009454:	d111      	bne.n	800947a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009456:	4b10      	ldr	r3, [pc, #64]	; (8009498 <HAL_ADC_ConfigChannel+0x23c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a10      	ldr	r2, [pc, #64]	; (800949c <HAL_ADC_ConfigChannel+0x240>)
 800945c:	fba2 2303 	umull	r2, r3, r2, r3
 8009460:	0c9a      	lsrs	r2, r3, #18
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800946c:	e002      	b.n	8009474 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	3b01      	subs	r3, #1
 8009472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1f9      	bne.n	800946e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	40012300 	.word	0x40012300
 8009494:	40012000 	.word	0x40012000
 8009498:	20000120 	.word	0x20000120
 800949c:	431bde83 	.word	0x431bde83

080094a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80094a8:	4b79      	ldr	r3, [pc, #484]	; (8009690 <ADC_Init+0x1f0>)
 80094aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6859      	ldr	r1, [r3, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	021a      	lsls	r2, r3, #8
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80094f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6859      	ldr	r1, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800951a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6899      	ldr	r1, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	4a58      	ldr	r2, [pc, #352]	; (8009694 <ADC_Init+0x1f4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d022      	beq.n	800957e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009546:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6899      	ldr	r1, [r3, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6899      	ldr	r1, [r3, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	609a      	str	r2, [r3, #8]
 800957c:	e00f      	b.n	800959e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800958c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800959c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0202 	bic.w	r2, r2, #2
 80095ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6899      	ldr	r1, [r3, #8]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	7e1b      	ldrb	r3, [r3, #24]
 80095b8:	005a      	lsls	r2, r3, #1
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01b      	beq.n	8009604 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80095ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6859      	ldr	r1, [r3, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	3b01      	subs	r3, #1
 80095f8:	035a      	lsls	r2, r3, #13
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	e007      	b.n	8009614 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009612:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	3b01      	subs	r3, #1
 8009630:	051a      	lsls	r2, r3, #20
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6899      	ldr	r1, [r3, #8]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009656:	025a      	lsls	r2, r3, #9
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800966e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6899      	ldr	r1, [r3, #8]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	029a      	lsls	r2, r3, #10
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	609a      	str	r2, [r3, #8]
}
 8009684:	bf00      	nop
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	40012300 	.word	0x40012300
 8009694:	0f000001 	.word	0x0f000001

08009698 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d13c      	bne.n	800972c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d12b      	bne.n	8009724 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d127      	bne.n	8009724 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d006      	beq.n	80096f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d119      	bne.n	8009724 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0220 	bic.w	r2, r2, #32
 80096fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009704:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d105      	bne.n	8009724 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	f043 0201 	orr.w	r2, r3, #1
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7fe f88d 	bl	8007844 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800972a:	e00e      	b.n	800974a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	f003 0310 	and.w	r3, r3, #16
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fd85 	bl	8009248 <HAL_ADC_ErrorCallback>
}
 800973e:	e004      	b.n	800974a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f7ff fd67 	bl	8009234 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009766:	bf00      	nop
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2240      	movs	r2, #64	; 0x40
 8009780:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009786:	f043 0204 	orr.w	r2, r3, #4
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fd5a 	bl	8009248 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <__NVIC_SetPriorityGrouping>:
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097ac:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <__NVIC_SetPriorityGrouping+0x44>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80097b8:	4013      	ands	r3, r2
 80097ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80097ce:	4a04      	ldr	r2, [pc, #16]	; (80097e0 <__NVIC_SetPriorityGrouping+0x44>)
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	60d3      	str	r3, [r2, #12]
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	e000ed00 	.word	0xe000ed00

080097e4 <__NVIC_GetPriorityGrouping>:
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097e8:	4b04      	ldr	r3, [pc, #16]	; (80097fc <__NVIC_GetPriorityGrouping+0x18>)
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	0a1b      	lsrs	r3, r3, #8
 80097ee:	f003 0307 	and.w	r3, r3, #7
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	e000ed00 	.word	0xe000ed00

08009800 <__NVIC_EnableIRQ>:
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800980a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800980e:	2b00      	cmp	r3, #0
 8009810:	db0b      	blt.n	800982a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	f003 021f 	and.w	r2, r3, #31
 8009818:	4907      	ldr	r1, [pc, #28]	; (8009838 <__NVIC_EnableIRQ+0x38>)
 800981a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	2001      	movs	r0, #1
 8009822:	fa00 f202 	lsl.w	r2, r0, r2
 8009826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	e000e100 	.word	0xe000e100

0800983c <__NVIC_SetPriority>:
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800984c:	2b00      	cmp	r3, #0
 800984e:	db0a      	blt.n	8009866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	b2da      	uxtb	r2, r3
 8009854:	490c      	ldr	r1, [pc, #48]	; (8009888 <__NVIC_SetPriority+0x4c>)
 8009856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800985a:	0112      	lsls	r2, r2, #4
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	440b      	add	r3, r1
 8009860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009864:	e00a      	b.n	800987c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4908      	ldr	r1, [pc, #32]	; (800988c <__NVIC_SetPriority+0x50>)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	3b04      	subs	r3, #4
 8009874:	0112      	lsls	r2, r2, #4
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	440b      	add	r3, r1
 800987a:	761a      	strb	r2, [r3, #24]
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	e000e100 	.word	0xe000e100
 800988c:	e000ed00 	.word	0xe000ed00

08009890 <NVIC_EncodePriority>:
{
 8009890:	b480      	push	{r7}
 8009892:	b089      	sub	sp, #36	; 0x24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	f1c3 0307 	rsb	r3, r3, #7
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	bf28      	it	cs
 80098ae:	2304      	movcs	r3, #4
 80098b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	3304      	adds	r3, #4
 80098b6:	2b06      	cmp	r3, #6
 80098b8:	d902      	bls.n	80098c0 <NVIC_EncodePriority+0x30>
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	3b03      	subs	r3, #3
 80098be:	e000      	b.n	80098c2 <NVIC_EncodePriority+0x32>
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098c4:	f04f 32ff 	mov.w	r2, #4294967295
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	fa02 f303 	lsl.w	r3, r2, r3
 80098ce:	43da      	mvns	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	401a      	ands	r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098d8:	f04f 31ff 	mov.w	r1, #4294967295
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	fa01 f303 	lsl.w	r3, r1, r3
 80098e2:	43d9      	mvns	r1, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098e8:	4313      	orrs	r3, r2
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3724      	adds	r7, #36	; 0x24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3b01      	subs	r3, #1
 8009904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009908:	d301      	bcc.n	800990e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800990a:	2301      	movs	r3, #1
 800990c:	e00f      	b.n	800992e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800990e:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <SysTick_Config+0x40>)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3b01      	subs	r3, #1
 8009914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009916:	210f      	movs	r1, #15
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	f7ff ff8e 	bl	800983c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <SysTick_Config+0x40>)
 8009922:	2200      	movs	r2, #0
 8009924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009926:	4b04      	ldr	r3, [pc, #16]	; (8009938 <SysTick_Config+0x40>)
 8009928:	2207      	movs	r2, #7
 800992a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	e000e010 	.word	0xe000e010

0800993c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff ff29 	bl	800979c <__NVIC_SetPriorityGrouping>
}
 800994a:	bf00      	nop
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009952:	b580      	push	{r7, lr}
 8009954:	b086      	sub	sp, #24
 8009956:	af00      	add	r7, sp, #0
 8009958:	4603      	mov	r3, r0
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009964:	f7ff ff3e 	bl	80097e4 <__NVIC_GetPriorityGrouping>
 8009968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	6978      	ldr	r0, [r7, #20]
 8009970:	f7ff ff8e 	bl	8009890 <NVIC_EncodePriority>
 8009974:	4602      	mov	r2, r0
 8009976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f7ff ff5d 	bl	800983c <__NVIC_SetPriority>
}
 8009982:	bf00      	nop
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	4603      	mov	r3, r0
 8009992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff ff31 	bl	8009800 <__NVIC_EnableIRQ>
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff ffa2 	bl	80098f8 <SysTick_Config>
 80099b4:	4603      	mov	r3, r0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80099cc:	f7ff faae 	bl	8008f2c <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e099      	b.n	8009b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 0201 	bic.w	r2, r2, #1
 80099fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099fc:	e00f      	b.n	8009a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80099fe:	f7ff fa95 	bl	8008f2c <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	d908      	bls.n	8009a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2203      	movs	r2, #3
 8009a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e078      	b.n	8009b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e8      	bne.n	80099fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	4b38      	ldr	r3, [pc, #224]	; (8009b18 <HAL_DMA_Init+0x158>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d107      	bne.n	8009a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	4313      	orrs	r3, r2
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f023 0307 	bic.w	r3, r3, #7
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d117      	bne.n	8009ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00e      	beq.n	8009ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fb01 	bl	800a0cc <DMA_CheckFifoParam>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d008      	beq.n	8009ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2240      	movs	r2, #64	; 0x40
 8009ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e016      	b.n	8009b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fab8 	bl	800a060 <DMA_CalcBaseAndBitshift>
 8009af0:	4603      	mov	r3, r0
 8009af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af8:	223f      	movs	r2, #63	; 0x3f
 8009afa:	409a      	lsls	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	f010803f 	.word	0xf010803f

08009b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <HAL_DMA_Start_IT+0x26>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e040      	b.n	8009bc4 <HAL_DMA_Start_IT+0xa8>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d12f      	bne.n	8009bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 fa4a 	bl	800a004 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b74:	223f      	movs	r2, #63	; 0x3f
 8009b76:	409a      	lsls	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0216 	orr.w	r2, r2, #22
 8009b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d007      	beq.n	8009ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f042 0208 	orr.w	r2, r2, #8
 8009ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	e005      	b.n	8009bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009bda:	f7ff f9a7 	bl	8008f2c <HAL_GetTick>
 8009bde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d008      	beq.n	8009bfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2280      	movs	r2, #128	; 0x80
 8009bf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e052      	b.n	8009ca4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0216 	bic.w	r2, r2, #22
 8009c0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695a      	ldr	r2, [r3, #20]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d103      	bne.n	8009c2e <HAL_DMA_Abort+0x62>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d007      	beq.n	8009c3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0208 	bic.w	r2, r2, #8
 8009c3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0201 	bic.w	r2, r2, #1
 8009c4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c4e:	e013      	b.n	8009c78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c50:	f7ff f96c 	bl	8008f2c <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b05      	cmp	r3, #5
 8009c5c:	d90c      	bls.n	8009c78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2220      	movs	r2, #32
 8009c62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2203      	movs	r2, #3
 8009c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e015      	b.n	8009ca4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e4      	bne.n	8009c50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c8a:	223f      	movs	r2, #63	; 0x3f
 8009c8c:	409a      	lsls	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d004      	beq.n	8009cca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2280      	movs	r2, #128	; 0x80
 8009cc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e00c      	b.n	8009ce4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2205      	movs	r2, #5
 8009cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009cfc:	4b92      	ldr	r3, [pc, #584]	; (8009f48 <HAL_DMA_IRQHandler+0x258>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a92      	ldr	r2, [pc, #584]	; (8009f4c <HAL_DMA_IRQHandler+0x25c>)
 8009d02:	fba2 2303 	umull	r2, r3, r2, r3
 8009d06:	0a9b      	lsrs	r3, r3, #10
 8009d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	409a      	lsls	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4013      	ands	r3, r2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d01a      	beq.n	8009d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0304 	and.w	r3, r3, #4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d013      	beq.n	8009d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0204 	bic.w	r2, r2, #4
 8009d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d48:	2208      	movs	r2, #8
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d54:	f043 0201 	orr.w	r2, r3, #1
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d60:	2201      	movs	r2, #1
 8009d62:	409a      	lsls	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4013      	ands	r3, r2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d012      	beq.n	8009d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00b      	beq.n	8009d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7e:	2201      	movs	r2, #1
 8009d80:	409a      	lsls	r2, r3
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8a:	f043 0202 	orr.w	r2, r3, #2
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d96:	2204      	movs	r2, #4
 8009d98:	409a      	lsls	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d012      	beq.n	8009dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00b      	beq.n	8009dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db4:	2204      	movs	r2, #4
 8009db6:	409a      	lsls	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc0:	f043 0204 	orr.w	r2, r3, #4
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dcc:	2210      	movs	r2, #16
 8009dce:	409a      	lsls	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d043      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d03c      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dea:	2210      	movs	r2, #16
 8009dec:	409a      	lsls	r2, r3
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d018      	beq.n	8009e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d108      	bne.n	8009e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d024      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
 8009e1e:	e01f      	b.n	8009e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01b      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
 8009e30:	e016      	b.n	8009e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d107      	bne.n	8009e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0208 	bic.w	r2, r2, #8
 8009e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e64:	2220      	movs	r2, #32
 8009e66:	409a      	lsls	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 808e 	beq.w	8009f8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 8086 	beq.w	8009f8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e86:	2220      	movs	r2, #32
 8009e88:	409a      	lsls	r2, r3
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d136      	bne.n	8009f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0216 	bic.w	r2, r2, #22
 8009ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695a      	ldr	r2, [r3, #20]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d103      	bne.n	8009eca <HAL_DMA_IRQHandler+0x1da>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d007      	beq.n	8009eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0208 	bic.w	r2, r2, #8
 8009ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ede:	223f      	movs	r2, #63	; 0x3f
 8009ee0:	409a      	lsls	r2, r3
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d07d      	beq.n	8009ffa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	4798      	blx	r3
        }
        return;
 8009f06:	e078      	b.n	8009ffa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01c      	beq.n	8009f50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d108      	bne.n	8009f36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d030      	beq.n	8009f8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
 8009f34:	e02b      	b.n	8009f8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d027      	beq.n	8009f8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
 8009f46:	e022      	b.n	8009f8e <HAL_DMA_IRQHandler+0x29e>
 8009f48:	20000120 	.word	0x20000120
 8009f4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10f      	bne.n	8009f7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0210 	bic.w	r2, r2, #16
 8009f6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d032      	beq.n	8009ffc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d022      	beq.n	8009fe8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2205      	movs	r2, #5
 8009fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0201 	bic.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60bb      	str	r3, [r7, #8]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d307      	bcc.n	8009fd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1f2      	bne.n	8009fba <HAL_DMA_IRQHandler+0x2ca>
 8009fd4:	e000      	b.n	8009fd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009fd6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
 8009ff8:	e000      	b.n	8009ffc <HAL_DMA_IRQHandler+0x30c>
        return;
 8009ffa:	bf00      	nop
    }
  }
}
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop

0800a004 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a020:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	2b40      	cmp	r3, #64	; 0x40
 800a030:	d108      	bne.n	800a044 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a042:	e007      	b.n	800a054 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	60da      	str	r2, [r3, #12]
}
 800a054:	bf00      	nop
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	3b10      	subs	r3, #16
 800a070:	4a14      	ldr	r2, [pc, #80]	; (800a0c4 <DMA_CalcBaseAndBitshift+0x64>)
 800a072:	fba2 2303 	umull	r2, r3, r2, r3
 800a076:	091b      	lsrs	r3, r3, #4
 800a078:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a07a:	4a13      	ldr	r2, [pc, #76]	; (800a0c8 <DMA_CalcBaseAndBitshift+0x68>)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d909      	bls.n	800a0a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	659a      	str	r2, [r3, #88]	; 0x58
 800a0a0:	e007      	b.n	800a0b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	aaaaaaab 	.word	0xaaaaaaab
 800a0c8:	0801a990 	.word	0x0801a990

0800a0cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d11f      	bne.n	800a126 <DMA_CheckFifoParam+0x5a>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d856      	bhi.n	800a19a <DMA_CheckFifoParam+0xce>
 800a0ec:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <DMA_CheckFifoParam+0x28>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a105 	.word	0x0800a105
 800a0f8:	0800a117 	.word	0x0800a117
 800a0fc:	0800a105 	.word	0x0800a105
 800a100:	0800a19b 	.word	0x0800a19b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d046      	beq.n	800a19e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a114:	e043      	b.n	800a19e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a11e:	d140      	bne.n	800a1a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a124:	e03d      	b.n	800a1a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a12e:	d121      	bne.n	800a174 <DMA_CheckFifoParam+0xa8>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b03      	cmp	r3, #3
 800a134:	d837      	bhi.n	800a1a6 <DMA_CheckFifoParam+0xda>
 800a136:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <DMA_CheckFifoParam+0x70>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a153 	.word	0x0800a153
 800a144:	0800a14d 	.word	0x0800a14d
 800a148:	0800a165 	.word	0x0800a165
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
      break;
 800a150:	e030      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d025      	beq.n	800a1aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a162:	e022      	b.n	800a1aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a16c:	d11f      	bne.n	800a1ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a172:	e01c      	b.n	800a1ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d903      	bls.n	800a182 <DMA_CheckFifoParam+0xb6>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d003      	beq.n	800a188 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a180:	e018      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	73fb      	strb	r3, [r7, #15]
      break;
 800a186:	e015      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00e      	beq.n	800a1b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
      break;
 800a198:	e00b      	b.n	800a1b2 <DMA_CheckFifoParam+0xe6>
      break;
 800a19a:	bf00      	nop
 800a19c:	e00a      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      break;
 800a19e:	bf00      	nop
 800a1a0:	e008      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      break;
 800a1a2:	bf00      	nop
 800a1a4:	e006      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      break;
 800a1a6:	bf00      	nop
 800a1a8:	e004      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      break;
 800a1aa:	bf00      	nop
 800a1ac:	e002      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <DMA_CheckFifoParam+0xe8>
      break;
 800a1b2:	bf00      	nop
    }
  } 
  
  return status; 
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop

0800a1c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a1d6:	4b23      	ldr	r3, [pc, #140]	; (800a264 <HAL_FLASH_Program+0xa0>)
 800a1d8:	7e1b      	ldrb	r3, [r3, #24]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_FLASH_Program+0x1e>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e03b      	b.n	800a25a <HAL_FLASH_Program+0x96>
 800a1e2:	4b20      	ldr	r3, [pc, #128]	; (800a264 <HAL_FLASH_Program+0xa0>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a1ec:	f000 f87c 	bl	800a2e8 <FLASH_WaitForLastOperation>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d12b      	bne.n	800a252 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d105      	bne.n	800a20c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a200:	783b      	ldrb	r3, [r7, #0]
 800a202:	4619      	mov	r1, r3
 800a204:	68b8      	ldr	r0, [r7, #8]
 800a206:	f000 f927 	bl	800a458 <FLASH_Program_Byte>
 800a20a:	e016      	b.n	800a23a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d105      	bne.n	800a21e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a212:	883b      	ldrh	r3, [r7, #0]
 800a214:	4619      	mov	r1, r3
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f000 f8fa 	bl	800a410 <FLASH_Program_HalfWord>
 800a21c:	e00d      	b.n	800a23a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d105      	bne.n	800a230 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	4619      	mov	r1, r3
 800a228:	68b8      	ldr	r0, [r7, #8]
 800a22a:	f000 f8cf 	bl	800a3cc <FLASH_Program_Word>
 800a22e:	e004      	b.n	800a23a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a234:	68b8      	ldr	r0, [r7, #8]
 800a236:	f000 f897 	bl	800a368 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a23a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a23e:	f000 f853 	bl	800a2e8 <FLASH_WaitForLastOperation>
 800a242:	4603      	mov	r3, r0
 800a244:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a246:	4b08      	ldr	r3, [pc, #32]	; (800a268 <HAL_FLASH_Program+0xa4>)
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	4a07      	ldr	r2, [pc, #28]	; (800a268 <HAL_FLASH_Program+0xa4>)
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a252:	4b04      	ldr	r3, [pc, #16]	; (800a264 <HAL_FLASH_Program+0xa0>)
 800a254:	2200      	movs	r2, #0
 800a256:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20003130 	.word	0x20003130
 800a268:	40023c00 	.word	0x40023c00

0800a26c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a276:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <HAL_FLASH_Unlock+0x38>)
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da0b      	bge.n	800a296 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a27e:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <HAL_FLASH_Unlock+0x38>)
 800a280:	4a09      	ldr	r2, [pc, #36]	; (800a2a8 <HAL_FLASH_Unlock+0x3c>)
 800a282:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a284:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <HAL_FLASH_Unlock+0x38>)
 800a286:	4a09      	ldr	r2, [pc, #36]	; (800a2ac <HAL_FLASH_Unlock+0x40>)
 800a288:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a28a:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <HAL_FLASH_Unlock+0x38>)
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da01      	bge.n	800a296 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a296:	79fb      	ldrb	r3, [r7, #7]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	40023c00 	.word	0x40023c00
 800a2a8:	45670123 	.word	0x45670123
 800a2ac:	cdef89ab 	.word	0xcdef89ab

0800a2b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a2b4:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <HAL_FLASH_Lock+0x1c>)
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <HAL_FLASH_Lock+0x1c>)
 800a2ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	40023c00 	.word	0x40023c00

0800a2d0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a2d0:	b480      	push	{r7}
 800a2d2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <HAL_FLASH_GetError+0x14>)
 800a2d6:	69db      	ldr	r3, [r3, #28]
}  
 800a2d8:	4618      	mov	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20003130 	.word	0x20003130

0800a2e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2f4:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <FLASH_WaitForLastOperation+0x78>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a2fa:	f7fe fe17 	bl	8008f2c <HAL_GetTick>
 800a2fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a300:	e010      	b.n	800a324 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a308:	d00c      	beq.n	800a324 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d007      	beq.n	800a320 <FLASH_WaitForLastOperation+0x38>
 800a310:	f7fe fe0c 	bl	8008f2c <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d201      	bcs.n	800a324 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e019      	b.n	800a358 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <FLASH_WaitForLastOperation+0x7c>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e8      	bne.n	800a302 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a330:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <FLASH_WaitForLastOperation+0x7c>)
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a33c:	4b09      	ldr	r3, [pc, #36]	; (800a364 <FLASH_WaitForLastOperation+0x7c>)
 800a33e:	2201      	movs	r2, #1
 800a340:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a342:	4b08      	ldr	r3, [pc, #32]	; (800a364 <FLASH_WaitForLastOperation+0x7c>)
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a34e:	f000 f8a5 	bl	800a49c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a356:	2300      	movs	r3, #0
  
}  
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20003130 	.word	0x20003130
 800a364:	40023c00 	.word	0x40023c00

0800a368 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a374:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <FLASH_Program_DoubleWord+0x60>)
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	4a13      	ldr	r2, [pc, #76]	; (800a3c8 <FLASH_Program_DoubleWord+0x60>)
 800a37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a37e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a380:	4b11      	ldr	r3, [pc, #68]	; (800a3c8 <FLASH_Program_DoubleWord+0x60>)
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	4a10      	ldr	r2, [pc, #64]	; (800a3c8 <FLASH_Program_DoubleWord+0x60>)
 800a386:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a38a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a38c:	4b0e      	ldr	r3, [pc, #56]	; (800a3c8 <FLASH_Program_DoubleWord+0x60>)
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	4a0d      	ldr	r2, [pc, #52]	; (800a3c8 <FLASH_Program_DoubleWord+0x60>)
 800a392:	f043 0301 	orr.w	r3, r3, #1
 800a396:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a39e:	f3bf 8f6f 	isb	sy
}
 800a3a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a3a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	000a      	movs	r2, r1
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	68f9      	ldr	r1, [r7, #12]
 800a3b6:	3104      	adds	r1, #4
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	600b      	str	r3, [r1, #0]
}
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	40023c00 	.word	0x40023c00

0800a3cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3d6:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <FLASH_Program_Word+0x40>)
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	4a0c      	ldr	r2, [pc, #48]	; (800a40c <FLASH_Program_Word+0x40>)
 800a3dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a3e2:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <FLASH_Program_Word+0x40>)
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	4a09      	ldr	r2, [pc, #36]	; (800a40c <FLASH_Program_Word+0x40>)
 800a3e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3ee:	4b07      	ldr	r3, [pc, #28]	; (800a40c <FLASH_Program_Word+0x40>)
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	4a06      	ldr	r2, [pc, #24]	; (800a40c <FLASH_Program_Word+0x40>)
 800a3f4:	f043 0301 	orr.w	r3, r3, #1
 800a3f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	601a      	str	r2, [r3, #0]
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	40023c00 	.word	0x40023c00

0800a410 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <FLASH_Program_HalfWord+0x44>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	4a0c      	ldr	r2, [pc, #48]	; (800a454 <FLASH_Program_HalfWord+0x44>)
 800a422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <FLASH_Program_HalfWord+0x44>)
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	4a09      	ldr	r2, [pc, #36]	; (800a454 <FLASH_Program_HalfWord+0x44>)
 800a42e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a432:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a434:	4b07      	ldr	r3, [pc, #28]	; (800a454 <FLASH_Program_HalfWord+0x44>)
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	4a06      	ldr	r2, [pc, #24]	; (800a454 <FLASH_Program_HalfWord+0x44>)
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	887a      	ldrh	r2, [r7, #2]
 800a444:	801a      	strh	r2, [r3, #0]
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40023c00 	.word	0x40023c00

0800a458 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a464:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <FLASH_Program_Byte+0x40>)
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	4a0b      	ldr	r2, [pc, #44]	; (800a498 <FLASH_Program_Byte+0x40>)
 800a46a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a46e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a470:	4b09      	ldr	r3, [pc, #36]	; (800a498 <FLASH_Program_Byte+0x40>)
 800a472:	4a09      	ldr	r2, [pc, #36]	; (800a498 <FLASH_Program_Byte+0x40>)
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a478:	4b07      	ldr	r3, [pc, #28]	; (800a498 <FLASH_Program_Byte+0x40>)
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	4a06      	ldr	r2, [pc, #24]	; (800a498 <FLASH_Program_Byte+0x40>)
 800a47e:	f043 0301 	orr.w	r3, r3, #1
 800a482:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	701a      	strb	r2, [r3, #0]
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	40023c00 	.word	0x40023c00

0800a49c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a4a0:	4b27      	ldr	r3, [pc, #156]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d008      	beq.n	800a4be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a4ac:	4b25      	ldr	r3, [pc, #148]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	f043 0310 	orr.w	r3, r3, #16
 800a4b4:	4a23      	ldr	r2, [pc, #140]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a4b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a4b8:	4b21      	ldr	r3, [pc, #132]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4ba:	2210      	movs	r2, #16
 800a4bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a4be:	4b20      	ldr	r3, [pc, #128]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	f003 0320 	and.w	r3, r3, #32
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d008      	beq.n	800a4dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a4ca:	4b1e      	ldr	r3, [pc, #120]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	f043 0308 	orr.w	r3, r3, #8
 800a4d2:	4a1c      	ldr	r2, [pc, #112]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a4d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a4d6:	4b1a      	ldr	r3, [pc, #104]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4d8:	2220      	movs	r2, #32
 800a4da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a4dc:	4b18      	ldr	r3, [pc, #96]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d008      	beq.n	800a4fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a4e8:	4b16      	ldr	r3, [pc, #88]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	f043 0304 	orr.w	r3, r3, #4
 800a4f0:	4a14      	ldr	r2, [pc, #80]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a4f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a4f4:	4b12      	ldr	r3, [pc, #72]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4f6:	2240      	movs	r2, #64	; 0x40
 800a4f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a4fa:	4b11      	ldr	r3, [pc, #68]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a502:	2b00      	cmp	r3, #0
 800a504:	d008      	beq.n	800a518 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a506:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f043 0302 	orr.w	r3, r3, #2
 800a50e:	4a0d      	ldr	r2, [pc, #52]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a510:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a514:	2280      	movs	r2, #128	; 0x80
 800a516:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d008      	beq.n	800a536 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a524:	4b07      	ldr	r3, [pc, #28]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	f043 0320 	orr.w	r3, r3, #32
 800a52c:	4a05      	ldr	r2, [pc, #20]	; (800a544 <FLASH_SetErrorCode+0xa8>)
 800a52e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a530:	4b03      	ldr	r3, [pc, #12]	; (800a540 <FLASH_SetErrorCode+0xa4>)
 800a532:	2202      	movs	r2, #2
 800a534:	60da      	str	r2, [r3, #12]
  }
}
 800a536:	bf00      	nop
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	40023c00 	.word	0x40023c00
 800a544:	20003130 	.word	0x20003130

0800a548 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a55a:	4b31      	ldr	r3, [pc, #196]	; (800a620 <HAL_FLASHEx_Erase+0xd8>)
 800a55c:	7e1b      	ldrb	r3, [r3, #24]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_FLASHEx_Erase+0x1e>
 800a562:	2302      	movs	r3, #2
 800a564:	e058      	b.n	800a618 <HAL_FLASHEx_Erase+0xd0>
 800a566:	4b2e      	ldr	r3, [pc, #184]	; (800a620 <HAL_FLASHEx_Erase+0xd8>)
 800a568:	2201      	movs	r2, #1
 800a56a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a56c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a570:	f7ff feba 	bl	800a2e8 <FLASH_WaitForLastOperation>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d148      	bne.n	800a610 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f04f 32ff 	mov.w	r2, #4294967295
 800a584:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d115      	bne.n	800a5ba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	b2da      	uxtb	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f000 f844 	bl	800a628 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5a4:	f7ff fea0 	bl	800a2e8 <FLASH_WaitForLastOperation>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a5ac:	4b1d      	ldr	r3, [pc, #116]	; (800a624 <HAL_FLASHEx_Erase+0xdc>)
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	4a1c      	ldr	r2, [pc, #112]	; (800a624 <HAL_FLASHEx_Erase+0xdc>)
 800a5b2:	f023 0304 	bic.w	r3, r3, #4
 800a5b6:	6113      	str	r3, [r2, #16]
 800a5b8:	e028      	b.n	800a60c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	60bb      	str	r3, [r7, #8]
 800a5c0:	e01c      	b.n	800a5fc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	68b8      	ldr	r0, [r7, #8]
 800a5cc:	f000 f850 	bl	800a670 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5d4:	f7ff fe88 	bl	800a2e8 <FLASH_WaitForLastOperation>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a5dc:	4b11      	ldr	r3, [pc, #68]	; (800a624 <HAL_FLASHEx_Erase+0xdc>)
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	4a10      	ldr	r2, [pc, #64]	; (800a624 <HAL_FLASHEx_Erase+0xdc>)
 800a5e2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a5e6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	601a      	str	r2, [r3, #0]
          break;
 800a5f4:	e00a      	b.n	800a60c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	60bb      	str	r3, [r7, #8]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	4413      	add	r3, r2
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d3da      	bcc.n	800a5c2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a60c:	f000 f878 	bl	800a700 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a610:	4b03      	ldr	r3, [pc, #12]	; (800a620 <HAL_FLASHEx_Erase+0xd8>)
 800a612:	2200      	movs	r2, #0
 800a614:	761a      	strb	r2, [r3, #24]

  return status;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20003130 	.word	0x20003130
 800a624:	40023c00 	.word	0x40023c00

0800a628 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a634:	4b0d      	ldr	r3, [pc, #52]	; (800a66c <FLASH_MassErase+0x44>)
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	4a0c      	ldr	r2, [pc, #48]	; (800a66c <FLASH_MassErase+0x44>)
 800a63a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a63e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <FLASH_MassErase+0x44>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	4a09      	ldr	r2, [pc, #36]	; (800a66c <FLASH_MassErase+0x44>)
 800a646:	f043 0304 	orr.w	r3, r3, #4
 800a64a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a64c:	4b07      	ldr	r3, [pc, #28]	; (800a66c <FLASH_MassErase+0x44>)
 800a64e:	691a      	ldr	r2, [r3, #16]
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	4313      	orrs	r3, r2
 800a656:	4a05      	ldr	r2, [pc, #20]	; (800a66c <FLASH_MassErase+0x44>)
 800a658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a65c:	6113      	str	r3, [r2, #16]
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	40023c00 	.word	0x40023c00

0800a670 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e010      	b.n	800a6ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d103      	bne.n	800a69a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a692:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e009      	b.n	800a6ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d103      	bne.n	800a6a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a6a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	e002      	b.n	800a6ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a6a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a6ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	490f      	ldr	r1, [pc, #60]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	4a0c      	ldr	r2, [pc, #48]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a6d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a6d2:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6d4:	691a      	ldr	r2, [r3, #16]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	4a07      	ldr	r2, [pc, #28]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6de:	f043 0302 	orr.w	r3, r3, #2
 800a6e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a6e4:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4a04      	ldr	r2, [pc, #16]	; (800a6fc <FLASH_Erase_Sector+0x8c>)
 800a6ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6ee:	6113      	str	r3, [r2, #16]
}
 800a6f0:	bf00      	nop
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	40023c00 	.word	0x40023c00

0800a700 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a704:	4b20      	ldr	r3, [pc, #128]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d017      	beq.n	800a740 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a710:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a1c      	ldr	r2, [pc, #112]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a716:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a71a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a71c:	4b1a      	ldr	r3, [pc, #104]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a19      	ldr	r2, [pc, #100]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	4b17      	ldr	r3, [pc, #92]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a16      	ldr	r2, [pc, #88]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a72e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a732:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a734:	4b14      	ldr	r3, [pc, #80]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a13      	ldr	r2, [pc, #76]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a73a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a73e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a740:	4b11      	ldr	r3, [pc, #68]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d017      	beq.n	800a77c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a74c:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a0d      	ldr	r2, [pc, #52]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a756:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a758:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a0a      	ldr	r2, [pc, #40]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a75e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	4b08      	ldr	r3, [pc, #32]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a07      	ldr	r2, [pc, #28]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a76a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a76e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a04      	ldr	r2, [pc, #16]	; (800a788 <FLASH_FlushCaches+0x88>)
 800a776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a77a:	6013      	str	r3, [r2, #0]
  }
}
 800a77c:	bf00      	nop
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40023c00 	.word	0x40023c00

0800a78c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b089      	sub	sp, #36	; 0x24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	e16b      	b.n	800aa80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	f040 815a 	bne.w	800aa7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d005      	beq.n	800a7de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d130      	bne.n	800a840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ee:	43db      	mvns	r3, r3
 800a7f0:	69ba      	ldr	r2, [r7, #24]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	4313      	orrs	r3, r2
 800a806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	69ba      	ldr	r2, [r7, #24]
 800a80c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a814:	2201      	movs	r2, #1
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	43db      	mvns	r3, r3
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	4013      	ands	r3, r2
 800a822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	091b      	lsrs	r3, r3, #4
 800a82a:	f003 0201 	and.w	r2, r3, #1
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	fa02 f303 	lsl.w	r3, r2, r3
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	4313      	orrs	r3, r2
 800a838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d017      	beq.n	800a87c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	2203      	movs	r2, #3
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	43db      	mvns	r3, r3
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	4013      	ands	r3, r2
 800a862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	689a      	ldr	r2, [r3, #8]
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	fa02 f303 	lsl.w	r3, r2, r3
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	4313      	orrs	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	69ba      	ldr	r2, [r7, #24]
 800a87a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f003 0303 	and.w	r3, r3, #3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d123      	bne.n	800a8d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	08da      	lsrs	r2, r3, #3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3208      	adds	r2, #8
 800a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	f003 0307 	and.w	r3, r3, #7
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	220f      	movs	r2, #15
 800a8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a4:	43db      	mvns	r3, r3
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8bc:	69ba      	ldr	r2, [r7, #24]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	08da      	lsrs	r2, r3, #3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3208      	adds	r2, #8
 800a8ca:	69b9      	ldr	r1, [r7, #24]
 800a8cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	2203      	movs	r2, #3
 800a8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f003 0203 	and.w	r2, r3, #3
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	69ba      	ldr	r2, [r7, #24]
 800a902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80b4 	beq.w	800aa7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a912:	2300      	movs	r3, #0
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	4b60      	ldr	r3, [pc, #384]	; (800aa98 <HAL_GPIO_Init+0x30c>)
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	4a5f      	ldr	r2, [pc, #380]	; (800aa98 <HAL_GPIO_Init+0x30c>)
 800a91c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a920:	6453      	str	r3, [r2, #68]	; 0x44
 800a922:	4b5d      	ldr	r3, [pc, #372]	; (800aa98 <HAL_GPIO_Init+0x30c>)
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a92e:	4a5b      	ldr	r2, [pc, #364]	; (800aa9c <HAL_GPIO_Init+0x310>)
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	3302      	adds	r3, #2
 800a936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	220f      	movs	r2, #15
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	43db      	mvns	r3, r3
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	4013      	ands	r3, r2
 800a950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a52      	ldr	r2, [pc, #328]	; (800aaa0 <HAL_GPIO_Init+0x314>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d02b      	beq.n	800a9b2 <HAL_GPIO_Init+0x226>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a51      	ldr	r2, [pc, #324]	; (800aaa4 <HAL_GPIO_Init+0x318>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d025      	beq.n	800a9ae <HAL_GPIO_Init+0x222>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a50      	ldr	r2, [pc, #320]	; (800aaa8 <HAL_GPIO_Init+0x31c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d01f      	beq.n	800a9aa <HAL_GPIO_Init+0x21e>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a4f      	ldr	r2, [pc, #316]	; (800aaac <HAL_GPIO_Init+0x320>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d019      	beq.n	800a9a6 <HAL_GPIO_Init+0x21a>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a4e      	ldr	r2, [pc, #312]	; (800aab0 <HAL_GPIO_Init+0x324>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d013      	beq.n	800a9a2 <HAL_GPIO_Init+0x216>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a4d      	ldr	r2, [pc, #308]	; (800aab4 <HAL_GPIO_Init+0x328>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00d      	beq.n	800a99e <HAL_GPIO_Init+0x212>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a4c      	ldr	r2, [pc, #304]	; (800aab8 <HAL_GPIO_Init+0x32c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d007      	beq.n	800a99a <HAL_GPIO_Init+0x20e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a4b      	ldr	r2, [pc, #300]	; (800aabc <HAL_GPIO_Init+0x330>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d101      	bne.n	800a996 <HAL_GPIO_Init+0x20a>
 800a992:	2307      	movs	r3, #7
 800a994:	e00e      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a996:	2308      	movs	r3, #8
 800a998:	e00c      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a99a:	2306      	movs	r3, #6
 800a99c:	e00a      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a99e:	2305      	movs	r3, #5
 800a9a0:	e008      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	e006      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e004      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	e002      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e000      	b.n	800a9b4 <HAL_GPIO_Init+0x228>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	69fa      	ldr	r2, [r7, #28]
 800a9b6:	f002 0203 	and.w	r2, r2, #3
 800a9ba:	0092      	lsls	r2, r2, #2
 800a9bc:	4093      	lsls	r3, r2
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a9c4:	4935      	ldr	r1, [pc, #212]	; (800aa9c <HAL_GPIO_Init+0x310>)
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	089b      	lsrs	r3, r3, #2
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a9d2:	4b3b      	ldr	r3, [pc, #236]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	43db      	mvns	r3, r3
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9f6:	4a32      	ldr	r2, [pc, #200]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a9fc:	4b30      	ldr	r3, [pc, #192]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	43db      	mvns	r3, r3
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	4013      	ands	r3, r2
 800aa0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aa20:	4a27      	ldr	r2, [pc, #156]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aa26:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	43db      	mvns	r3, r3
 800aa30:	69ba      	ldr	r2, [r7, #24]
 800aa32:	4013      	ands	r3, r2
 800aa34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800aa42:	69ba      	ldr	r2, [r7, #24]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa4a:	4a1d      	ldr	r2, [pc, #116]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa50:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	43db      	mvns	r3, r3
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800aa6c:	69ba      	ldr	r2, [r7, #24]
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aa74:	4a12      	ldr	r2, [pc, #72]	; (800aac0 <HAL_GPIO_Init+0x334>)
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	2b0f      	cmp	r3, #15
 800aa84:	f67f ae90 	bls.w	800a7a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	3724      	adds	r7, #36	; 0x24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	40023800 	.word	0x40023800
 800aa9c:	40013800 	.word	0x40013800
 800aaa0:	40020000 	.word	0x40020000
 800aaa4:	40020400 	.word	0x40020400
 800aaa8:	40020800 	.word	0x40020800
 800aaac:	40020c00 	.word	0x40020c00
 800aab0:	40021000 	.word	0x40021000
 800aab4:	40021400 	.word	0x40021400
 800aab8:	40021800 	.word	0x40021800
 800aabc:	40021c00 	.word	0x40021c00
 800aac0:	40013c00 	.word	0x40013c00

0800aac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	807b      	strh	r3, [r7, #2]
 800aad0:	4613      	mov	r3, r2
 800aad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aad4:	787b      	ldrb	r3, [r7, #1]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aada:	887a      	ldrh	r2, [r7, #2]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aae0:	e003      	b.n	800aaea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aae2:	887b      	ldrh	r3, [r7, #2]
 800aae4:	041a      	lsls	r2, r3, #16
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	619a      	str	r2, [r3, #24]
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ab08:	887a      	ldrh	r2, [r7, #2]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	041a      	lsls	r2, r3, #16
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	43d9      	mvns	r1, r3
 800ab14:	887b      	ldrh	r3, [r7, #2]
 800ab16:	400b      	ands	r3, r1
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	619a      	str	r2, [r3, #24]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ab36:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab38:	695a      	ldr	r2, [r3, #20]
 800ab3a:	88fb      	ldrh	r3, [r7, #6]
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ab42:	4a05      	ldr	r2, [pc, #20]	; (800ab58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab44:	88fb      	ldrh	r3, [r7, #6]
 800ab46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ab48:	88fb      	ldrh	r3, [r7, #6]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fb fef0 	bl	8006930 <HAL_GPIO_EXTI_Callback>
  }
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	40013c00 	.word	0x40013c00

0800ab5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e12b      	b.n	800adc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7fd fcc2 	bl	800850c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2224      	movs	r2, #36	; 0x24
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f022 0201 	bic.w	r2, r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800abc0:	f001 fe90 	bl	800c8e4 <HAL_RCC_GetPCLK1Freq>
 800abc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	4a81      	ldr	r2, [pc, #516]	; (800add0 <HAL_I2C_Init+0x274>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d807      	bhi.n	800abe0 <HAL_I2C_Init+0x84>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a80      	ldr	r2, [pc, #512]	; (800add4 <HAL_I2C_Init+0x278>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	bf94      	ite	ls
 800abd8:	2301      	movls	r3, #1
 800abda:	2300      	movhi	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	e006      	b.n	800abee <HAL_I2C_Init+0x92>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a7d      	ldr	r2, [pc, #500]	; (800add8 <HAL_I2C_Init+0x27c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	bf94      	ite	ls
 800abe8:	2301      	movls	r3, #1
 800abea:	2300      	movhi	r3, #0
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e0e7      	b.n	800adc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4a78      	ldr	r2, [pc, #480]	; (800addc <HAL_I2C_Init+0x280>)
 800abfa:	fba2 2303 	umull	r2, r3, r2, r3
 800abfe:	0c9b      	lsrs	r3, r3, #18
 800ac00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4a6a      	ldr	r2, [pc, #424]	; (800add0 <HAL_I2C_Init+0x274>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d802      	bhi.n	800ac30 <HAL_I2C_Init+0xd4>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	e009      	b.n	800ac44 <HAL_I2C_Init+0xe8>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac36:	fb02 f303 	mul.w	r3, r2, r3
 800ac3a:	4a69      	ldr	r2, [pc, #420]	; (800ade0 <HAL_I2C_Init+0x284>)
 800ac3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac40:	099b      	lsrs	r3, r3, #6
 800ac42:	3301      	adds	r3, #1
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ac56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	495c      	ldr	r1, [pc, #368]	; (800add0 <HAL_I2C_Init+0x274>)
 800ac60:	428b      	cmp	r3, r1
 800ac62:	d819      	bhi.n	800ac98 <HAL_I2C_Init+0x13c>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	1e59      	subs	r1, r3, #1
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac72:	1c59      	adds	r1, r3, #1
 800ac74:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ac78:	400b      	ands	r3, r1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <HAL_I2C_Init+0x138>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	1e59      	subs	r1, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac92:	e051      	b.n	800ad38 <HAL_I2C_Init+0x1dc>
 800ac94:	2304      	movs	r3, #4
 800ac96:	e04f      	b.n	800ad38 <HAL_I2C_Init+0x1dc>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d111      	bne.n	800acc4 <HAL_I2C_Init+0x168>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	1e58      	subs	r0, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6859      	ldr	r1, [r3, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	440b      	add	r3, r1
 800acae:	fbb0 f3f3 	udiv	r3, r0, r3
 800acb2:	3301      	adds	r3, #1
 800acb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bf0c      	ite	eq
 800acbc:	2301      	moveq	r3, #1
 800acbe:	2300      	movne	r3, #0
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	e012      	b.n	800acea <HAL_I2C_Init+0x18e>
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	1e58      	subs	r0, r3, #1
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6859      	ldr	r1, [r3, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	0099      	lsls	r1, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	fbb0 f3f3 	udiv	r3, r0, r3
 800acda:	3301      	adds	r3, #1
 800acdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bf0c      	ite	eq
 800ace4:	2301      	moveq	r3, #1
 800ace6:	2300      	movne	r3, #0
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <HAL_I2C_Init+0x196>
 800acee:	2301      	movs	r3, #1
 800acf0:	e022      	b.n	800ad38 <HAL_I2C_Init+0x1dc>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10e      	bne.n	800ad18 <HAL_I2C_Init+0x1bc>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	1e58      	subs	r0, r3, #1
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6859      	ldr	r1, [r3, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	440b      	add	r3, r1
 800ad08:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad16:	e00f      	b.n	800ad38 <HAL_I2C_Init+0x1dc>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	1e58      	subs	r0, r3, #1
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6859      	ldr	r1, [r3, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	0099      	lsls	r1, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad2e:	3301      	adds	r3, #1
 800ad30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	6809      	ldr	r1, [r1, #0]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69da      	ldr	r2, [r3, #28]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	431a      	orrs	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ad66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	6911      	ldr	r1, [r2, #16]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	68d2      	ldr	r2, [r2, #12]
 800ad72:	4311      	orrs	r1, r2
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	695a      	ldr	r2, [r3, #20]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	000186a0 	.word	0x000186a0
 800add4:	001e847f 	.word	0x001e847f
 800add8:	003d08ff 	.word	0x003d08ff
 800addc:	431bde83 	.word	0x431bde83
 800ade0:	10624dd3 	.word	0x10624dd3

0800ade4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af02      	add	r7, sp, #8
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	461a      	mov	r2, r3
 800adf0:	460b      	mov	r3, r1
 800adf2:	817b      	strh	r3, [r7, #10]
 800adf4:	4613      	mov	r3, r2
 800adf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800adf8:	f7fe f898 	bl	8008f2c <HAL_GetTick>
 800adfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	f040 80e0 	bne.w	800afcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	2319      	movs	r3, #25
 800ae12:	2201      	movs	r2, #1
 800ae14:	4970      	ldr	r1, [pc, #448]	; (800afd8 <HAL_I2C_Master_Transmit+0x1f4>)
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 ff66 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ae22:	2302      	movs	r3, #2
 800ae24:	e0d3      	b.n	800afce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_I2C_Master_Transmit+0x50>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e0cc      	b.n	800afce <HAL_I2C_Master_Transmit+0x1ea>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d007      	beq.n	800ae5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f042 0201 	orr.w	r2, r2, #1
 800ae58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2221      	movs	r2, #33	; 0x21
 800ae6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2210      	movs	r2, #16
 800ae76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	893a      	ldrh	r2, [r7, #8]
 800ae8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	4a50      	ldr	r2, [pc, #320]	; (800afdc <HAL_I2C_Master_Transmit+0x1f8>)
 800ae9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ae9c:	8979      	ldrh	r1, [r7, #10]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	6a3a      	ldr	r2, [r7, #32]
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fce8 	bl	800b878 <I2C_MasterRequestWrite>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e08d      	b.n	800afce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	613b      	str	r3, [r7, #16]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	613b      	str	r3, [r7, #16]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800aec8:	e066      	b.n	800af98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	6a39      	ldr	r1, [r7, #32]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 ffe0 	bl	800be94 <I2C_WaitOnTXEFlagUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00d      	beq.n	800aef6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d107      	bne.n	800aef2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e06b      	b.n	800afce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefa:	781a      	ldrb	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af10:	b29b      	uxth	r3, r3
 800af12:	3b01      	subs	r3, #1
 800af14:	b29a      	uxth	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af1e:	3b01      	subs	r3, #1
 800af20:	b29a      	uxth	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b04      	cmp	r3, #4
 800af32:	d11b      	bne.n	800af6c <HAL_I2C_Master_Transmit+0x188>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d017      	beq.n	800af6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af56:	b29b      	uxth	r3, r3
 800af58:	3b01      	subs	r3, #1
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af64:	3b01      	subs	r3, #1
 800af66:	b29a      	uxth	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	6a39      	ldr	r1, [r7, #32]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 ffd0 	bl	800bf16 <I2C_WaitOnBTFFlagUntilTimeout>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00d      	beq.n	800af98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af80:	2b04      	cmp	r3, #4
 800af82:	d107      	bne.n	800af94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e01a      	b.n	800afce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d194      	bne.n	800aeca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	e000      	b.n	800afce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800afcc:	2302      	movs	r3, #2
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	00100002 	.word	0x00100002
 800afdc:	ffff0000 	.word	0xffff0000

0800afe0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08c      	sub	sp, #48	; 0x30
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	607a      	str	r2, [r7, #4]
 800afea:	461a      	mov	r2, r3
 800afec:	460b      	mov	r3, r1
 800afee:	817b      	strh	r3, [r7, #10]
 800aff0:	4613      	mov	r3, r2
 800aff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aff4:	f7fd ff9a 	bl	8008f2c <HAL_GetTick>
 800aff8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b20      	cmp	r3, #32
 800b004:	f040 820b 	bne.w	800b41e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	2319      	movs	r3, #25
 800b00e:	2201      	movs	r2, #1
 800b010:	497c      	ldr	r1, [pc, #496]	; (800b204 <HAL_I2C_Master_Receive+0x224>)
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fe68 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b01e:	2302      	movs	r3, #2
 800b020:	e1fe      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d101      	bne.n	800b030 <HAL_I2C_Master_Receive+0x50>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e1f7      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b01      	cmp	r3, #1
 800b044:	d007      	beq.n	800b056 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f042 0201 	orr.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2222      	movs	r2, #34	; 0x22
 800b06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2210      	movs	r2, #16
 800b072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	893a      	ldrh	r2, [r7, #8]
 800b086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4a5c      	ldr	r2, [pc, #368]	; (800b208 <HAL_I2C_Master_Receive+0x228>)
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b098:	8979      	ldrh	r1, [r7, #10]
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f000 fc6c 	bl	800b97c <I2C_MasterRequestRead>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e1b8      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d113      	bne.n	800b0de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	623b      	str	r3, [r7, #32]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	623b      	str	r3, [r7, #32]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	623b      	str	r3, [r7, #32]
 800b0ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	e18c      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d11b      	bne.n	800b11e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61fb      	str	r3, [r7, #28]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	61fb      	str	r3, [r7, #28]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	61fb      	str	r3, [r7, #28]
 800b10a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	e16c      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b122:	2b02      	cmp	r3, #2
 800b124:	d11b      	bne.n	800b15e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b134:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b146:	2300      	movs	r3, #0
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	61bb      	str	r3, [r7, #24]
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	e14c      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b16c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b184:	e138      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	f200 80f1 	bhi.w	800b372 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b194:	2b01      	cmp	r3, #1
 800b196:	d123      	bne.n	800b1e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fefb 	bl	800bf98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e139      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	691a      	ldr	r2, [r3, #16]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1de:	e10b      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d14e      	bne.n	800b286 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4906      	ldr	r1, [pc, #24]	; (800b20c <HAL_I2C_Master_Receive+0x22c>)
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 fd78 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d008      	beq.n	800b210 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e10e      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
 800b202:	bf00      	nop
 800b204:	00100002 	.word	0x00100002
 800b208:	ffff0000 	.word	0xffff0000
 800b20c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b21e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	691a      	ldr	r2, [r3, #16]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	b2d2      	uxtb	r2, r2
 800b25e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26e:	3b01      	subs	r3, #1
 800b270:	b29a      	uxth	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	3b01      	subs	r3, #1
 800b27e:	b29a      	uxth	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b284:	e0b8      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	2200      	movs	r2, #0
 800b28e:	4966      	ldr	r1, [pc, #408]	; (800b428 <HAL_I2C_Master_Receive+0x448>)
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 fd29 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e0bf      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691a      	ldr	r2, [r3, #16]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	b2d2      	uxtb	r2, r2
 800b2bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	494f      	ldr	r1, [pc, #316]	; (800b428 <HAL_I2C_Master_Receive+0x448>)
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fcfb 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e091      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b30a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b334:	b29b      	uxth	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	691a      	ldr	r2, [r3, #16]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35a:	3b01      	subs	r3, #1
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b366:	b29b      	uxth	r3, r3
 800b368:	3b01      	subs	r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b370:	e042      	b.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 fe0e 	bl	800bf98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e04c      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	d118      	bne.n	800b3f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f47f aec2 	bne.w	800b186 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2220      	movs	r2, #32
 800b406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	e000      	b.n	800b420 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b41e:	2302      	movs	r3, #2
  }
}
 800b420:	4618      	mov	r0, r3
 800b422:	3728      	adds	r7, #40	; 0x28
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	00010004 	.word	0x00010004

0800b42c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08c      	sub	sp, #48	; 0x30
 800b430:	af02      	add	r7, sp, #8
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	461a      	mov	r2, r3
 800b43a:	4603      	mov	r3, r0
 800b43c:	817b      	strh	r3, [r7, #10]
 800b43e:	460b      	mov	r3, r1
 800b440:	813b      	strh	r3, [r7, #8]
 800b442:	4613      	mov	r3, r2
 800b444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b446:	f7fd fd71 	bl	8008f2c <HAL_GetTick>
 800b44a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b20      	cmp	r3, #32
 800b456:	f040 8208 	bne.w	800b86a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	2319      	movs	r3, #25
 800b460:	2201      	movs	r2, #1
 800b462:	497b      	ldr	r1, [pc, #492]	; (800b650 <HAL_I2C_Mem_Read+0x224>)
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 fc3f 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
 800b472:	e1fb      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d101      	bne.n	800b482 <HAL_I2C_Mem_Read+0x56>
 800b47e:	2302      	movs	r3, #2
 800b480:	e1f4      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b01      	cmp	r3, #1
 800b496:	d007      	beq.n	800b4a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0201 	orr.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2222      	movs	r2, #34	; 0x22
 800b4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2240      	movs	r2, #64	; 0x40
 800b4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b4d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4a5b      	ldr	r2, [pc, #364]	; (800b654 <HAL_I2C_Mem_Read+0x228>)
 800b4e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b4ea:	88f8      	ldrh	r0, [r7, #6]
 800b4ec:	893a      	ldrh	r2, [r7, #8]
 800b4ee:	8979      	ldrh	r1, [r7, #10]
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 fb0c 	bl	800bb18 <I2C_RequestMemoryRead>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e1b0      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d113      	bne.n	800b53a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b512:	2300      	movs	r3, #0
 800b514:	623b      	str	r3, [r7, #32]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	623b      	str	r3, [r7, #32]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	623b      	str	r3, [r7, #32]
 800b526:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e184      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d11b      	bne.n	800b57a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	61fb      	str	r3, [r7, #28]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	61fb      	str	r3, [r7, #28]
 800b566:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	e164      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d11b      	bne.n	800b5ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b590:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	61bb      	str	r3, [r7, #24]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	61bb      	str	r3, [r7, #24]
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	e144      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	617b      	str	r3, [r7, #20]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	617b      	str	r3, [r7, #20]
 800b5ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b5d0:	e138      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	f200 80f1 	bhi.w	800b7be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d123      	bne.n	800b62c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 fcd5 	bl	800bf98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e139      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	691a      	ldr	r2, [r3, #16]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b602:	b2d2      	uxtb	r2, r2
 800b604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b614:	3b01      	subs	r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b620:	b29b      	uxth	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b62a:	e10b      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b630:	2b02      	cmp	r3, #2
 800b632:	d14e      	bne.n	800b6d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	2200      	movs	r2, #0
 800b63c:	4906      	ldr	r1, [pc, #24]	; (800b658 <HAL_I2C_Mem_Read+0x22c>)
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 fb52 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d008      	beq.n	800b65c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e10e      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
 800b64e:	bf00      	nop
 800b650:	00100002 	.word	0x00100002
 800b654:	ffff0000 	.word	0xffff0000
 800b658:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b66a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	691a      	ldr	r2, [r3, #16]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b688:	3b01      	subs	r3, #1
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b694:	b29b      	uxth	r3, r3
 800b696:	3b01      	subs	r3, #1
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6d0:	e0b8      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4966      	ldr	r1, [pc, #408]	; (800b874 <HAL_I2C_Mem_Read+0x448>)
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 fb03 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e0bf      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	691a      	ldr	r2, [r3, #16]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b718:	3b01      	subs	r3, #1
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b01      	subs	r3, #1
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	2200      	movs	r2, #0
 800b736:	494f      	ldr	r1, [pc, #316]	; (800b874 <HAL_I2C_Mem_Read+0x448>)
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fad5 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e091      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	691a      	ldr	r2, [r3, #16]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b780:	b29b      	uxth	r3, r3
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	691a      	ldr	r2, [r3, #16]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	b2d2      	uxtb	r2, r2
 800b796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7bc:	e042      	b.n	800b844 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 fbe8 	bl	800bf98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e04c      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691a      	ldr	r2, [r3, #16]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	b2d2      	uxtb	r2, r2
 800b7de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b04      	cmp	r3, #4
 800b810:	d118      	bne.n	800b844 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	691a      	ldr	r2, [r3, #16]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	b2d2      	uxtb	r2, r2
 800b81e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	3b01      	subs	r3, #1
 800b83e:	b29a      	uxth	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f47f aec2 	bne.w	800b5d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2220      	movs	r2, #32
 800b852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	e000      	b.n	800b86c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b86a:	2302      	movs	r3, #2
  }
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3728      	adds	r7, #40	; 0x28
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	00010004 	.word	0x00010004

0800b878 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	607a      	str	r2, [r7, #4]
 800b882:	603b      	str	r3, [r7, #0]
 800b884:	460b      	mov	r3, r1
 800b886:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b08      	cmp	r3, #8
 800b892:	d006      	beq.n	800b8a2 <I2C_MasterRequestWrite+0x2a>
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d003      	beq.n	800b8a2 <I2C_MasterRequestWrite+0x2a>
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8a0:	d108      	bne.n	800b8b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e00b      	b.n	800b8cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b8:	2b12      	cmp	r3, #18
 800b8ba:	d107      	bne.n	800b8cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fa05 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00d      	beq.n	800b900 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f2:	d103      	bne.n	800b8fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e035      	b.n	800b96c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b908:	d108      	bne.n	800b91c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b90a:	897b      	ldrh	r3, [r7, #10]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	461a      	mov	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b918:	611a      	str	r2, [r3, #16]
 800b91a:	e01b      	b.n	800b954 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b91c:	897b      	ldrh	r3, [r7, #10]
 800b91e:	11db      	asrs	r3, r3, #7
 800b920:	b2db      	uxtb	r3, r3
 800b922:	f003 0306 	and.w	r3, r3, #6
 800b926:	b2db      	uxtb	r3, r3
 800b928:	f063 030f 	orn	r3, r3, #15
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	490e      	ldr	r1, [pc, #56]	; (800b974 <I2C_MasterRequestWrite+0xfc>)
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 fa2b 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e010      	b.n	800b96c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b94a:	897b      	ldrh	r3, [r7, #10]
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	4907      	ldr	r1, [pc, #28]	; (800b978 <I2C_MasterRequestWrite+0x100>)
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 fa1b 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	00010008 	.word	0x00010008
 800b978:	00010002 	.word	0x00010002

0800b97c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af02      	add	r7, sp, #8
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	607a      	str	r2, [r7, #4]
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	460b      	mov	r3, r1
 800b98a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b990:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b08      	cmp	r3, #8
 800b9a6:	d006      	beq.n	800b9b6 <I2C_MasterRequestRead+0x3a>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d003      	beq.n	800b9b6 <I2C_MasterRequestRead+0x3a>
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9b4:	d108      	bne.n	800b9c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	e00b      	b.n	800b9e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9cc:	2b11      	cmp	r3, #17
 800b9ce:	d107      	bne.n	800b9e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 f97b 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00d      	beq.n	800ba14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba06:	d103      	bne.n	800ba10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e079      	b.n	800bb08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba1c:	d108      	bne.n	800ba30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ba1e:	897b      	ldrh	r3, [r7, #10]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	611a      	str	r2, [r3, #16]
 800ba2e:	e05f      	b.n	800baf0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ba30:	897b      	ldrh	r3, [r7, #10]
 800ba32:	11db      	asrs	r3, r3, #7
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	f003 0306 	and.w	r3, r3, #6
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	f063 030f 	orn	r3, r3, #15
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	4930      	ldr	r1, [pc, #192]	; (800bb10 <I2C_MasterRequestRead+0x194>)
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f000 f9a1 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e054      	b.n	800bb08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ba5e:	897b      	ldrh	r3, [r7, #10]
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4929      	ldr	r1, [pc, #164]	; (800bb14 <I2C_MasterRequestRead+0x198>)
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 f991 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e044      	b.n	800bb08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba7e:	2300      	movs	r3, #0
 800ba80:	613b      	str	r3, [r7, #16]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baa2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 f919 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00d      	beq.n	800bad8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baca:	d103      	bne.n	800bad4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bad2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e017      	b.n	800bb08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bad8:	897b      	ldrh	r3, [r7, #10]
 800bada:	11db      	asrs	r3, r3, #7
 800badc:	b2db      	uxtb	r3, r3
 800bade:	f003 0306 	and.w	r3, r3, #6
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	f063 030e 	orn	r3, r3, #14
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4907      	ldr	r1, [pc, #28]	; (800bb14 <I2C_MasterRequestRead+0x198>)
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 f94d 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e000      	b.n	800bb08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	00010008 	.word	0x00010008
 800bb14:	00010002 	.word	0x00010002

0800bb18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	4608      	mov	r0, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	817b      	strh	r3, [r7, #10]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	813b      	strh	r3, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f8c2 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00d      	beq.n	800bb86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb78:	d103      	bne.n	800bb82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e0aa      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bb86:	897b      	ldrh	r3, [r7, #10]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bb94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	6a3a      	ldr	r2, [r7, #32]
 800bb9a:	4952      	ldr	r1, [pc, #328]	; (800bce4 <I2C_RequestMemoryRead+0x1cc>)
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 f8fa 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e097      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbac:	2300      	movs	r3, #0
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbc4:	6a39      	ldr	r1, [r7, #32]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 f964 	bl	800be94 <I2C_WaitOnTXEFlagUntilTimeout>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00d      	beq.n	800bbee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d107      	bne.n	800bbea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e076      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d105      	bne.n	800bc00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bbf4:	893b      	ldrh	r3, [r7, #8]
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	611a      	str	r2, [r3, #16]
 800bbfe:	e021      	b.n	800bc44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bc00:	893b      	ldrh	r3, [r7, #8]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc10:	6a39      	ldr	r1, [r7, #32]
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 f93e 	bl	800be94 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00d      	beq.n	800bc3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc22:	2b04      	cmp	r3, #4
 800bc24:	d107      	bne.n	800bc36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e050      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bc3a:	893b      	ldrh	r3, [r7, #8]
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc46:	6a39      	ldr	r1, [r7, #32]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 f923 	bl	800be94 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00d      	beq.n	800bc70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d107      	bne.n	800bc6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e035      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f82b 	bl	800bce8 <I2C_WaitOnFlagUntilTimeout>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00d      	beq.n	800bcb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca6:	d103      	bne.n	800bcb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e013      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bcb4:	897b      	ldrh	r3, [r7, #10]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	f043 0301 	orr.w	r3, r3, #1
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	6a3a      	ldr	r2, [r7, #32]
 800bcc8:	4906      	ldr	r1, [pc, #24]	; (800bce4 <I2C_RequestMemoryRead+0x1cc>)
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 f863 	bl	800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e000      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	00010002 	.word	0x00010002

0800bce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcf8:	e025      	b.n	800bd46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd00:	d021      	beq.n	800bd46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd02:	f7fd f913 	bl	8008f2c <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d302      	bcc.n	800bd18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d116      	bne.n	800bd46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2220      	movs	r2, #32
 800bd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd32:	f043 0220 	orr.w	r2, r3, #32
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e023      	b.n	800bd8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	0c1b      	lsrs	r3, r3, #16
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10d      	bne.n	800bd6c <I2C_WaitOnFlagUntilTimeout+0x84>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	43da      	mvns	r2, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	bf0c      	ite	eq
 800bd62:	2301      	moveq	r3, #1
 800bd64:	2300      	movne	r3, #0
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	e00c      	b.n	800bd86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	43da      	mvns	r2, r3
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	4013      	ands	r3, r2
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bf0c      	ite	eq
 800bd7e:	2301      	moveq	r3, #1
 800bd80:	2300      	movne	r3, #0
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	461a      	mov	r2, r3
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d0b6      	beq.n	800bcfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	60b9      	str	r1, [r7, #8]
 800bda0:	607a      	str	r2, [r7, #4]
 800bda2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bda4:	e051      	b.n	800be4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdb4:	d123      	bne.n	800bdfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdea:	f043 0204 	orr.w	r2, r3, #4
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e046      	b.n	800be8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be04:	d021      	beq.n	800be4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be06:	f7fd f891 	bl	8008f2c <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d302      	bcc.n	800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d116      	bne.n	800be4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2220      	movs	r2, #32
 800be26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be36:	f043 0220 	orr.w	r2, r3, #32
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e020      	b.n	800be8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	0c1b      	lsrs	r3, r3, #16
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b01      	cmp	r3, #1
 800be52:	d10c      	bne.n	800be6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	43da      	mvns	r2, r3
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4013      	ands	r3, r2
 800be60:	b29b      	uxth	r3, r3
 800be62:	2b00      	cmp	r3, #0
 800be64:	bf14      	ite	ne
 800be66:	2301      	movne	r3, #1
 800be68:	2300      	moveq	r3, #0
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	e00b      	b.n	800be86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	43da      	mvns	r2, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4013      	ands	r3, r2
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	bf14      	ite	ne
 800be80:	2301      	movne	r3, #1
 800be82:	2300      	moveq	r3, #0
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d18d      	bne.n	800bda6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bea0:	e02d      	b.n	800befe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f8ce 	bl	800c044 <I2C_IsAcknowledgeFailed>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e02d      	b.n	800bf0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb8:	d021      	beq.n	800befe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beba:	f7fd f837 	bl	8008f2c <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d302      	bcc.n	800bed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d116      	bne.n	800befe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2220      	movs	r2, #32
 800beda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	f043 0220 	orr.w	r2, r3, #32
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e007      	b.n	800bf0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf08:	2b80      	cmp	r3, #128	; 0x80
 800bf0a:	d1ca      	bne.n	800bea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	60f8      	str	r0, [r7, #12]
 800bf1e:	60b9      	str	r1, [r7, #8]
 800bf20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf22:	e02d      	b.n	800bf80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 f88d 	bl	800c044 <I2C_IsAcknowledgeFailed>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e02d      	b.n	800bf90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d021      	beq.n	800bf80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf3c:	f7fc fff6 	bl	8008f2c <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d302      	bcc.n	800bf52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d116      	bne.n	800bf80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6c:	f043 0220 	orr.w	r2, r3, #32
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e007      	b.n	800bf90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	f003 0304 	and.w	r3, r3, #4
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d1ca      	bne.n	800bf24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfa4:	e042      	b.n	800c02c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	f003 0310 	and.w	r3, r3, #16
 800bfb0:	2b10      	cmp	r3, #16
 800bfb2:	d119      	bne.n	800bfe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f06f 0210 	mvn.w	r2, #16
 800bfbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e029      	b.n	800c03c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfe8:	f7fc ffa0 	bl	8008f2c <HAL_GetTick>
 800bfec:	4602      	mov	r2, r0
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d302      	bcc.n	800bffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d116      	bne.n	800c02c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2220      	movs	r2, #32
 800c008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c018:	f043 0220 	orr.w	r2, r3, #32
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e007      	b.n	800c03c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c036:	2b40      	cmp	r3, #64	; 0x40
 800c038:	d1b5      	bne.n	800bfa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c05a:	d11b      	bne.n	800c094 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c064:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2220      	movs	r2, #32
 800c070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	f043 0204 	orr.w	r2, r3, #4
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e000      	b.n	800c096 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e264      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d075      	beq.n	800c1ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c0c2:	4ba3      	ldr	r3, [pc, #652]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f003 030c 	and.w	r3, r3, #12
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d00c      	beq.n	800c0e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c0ce:	4ba0      	ldr	r3, [pc, #640]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c0d6:	2b08      	cmp	r3, #8
 800c0d8:	d112      	bne.n	800c100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c0da:	4b9d      	ldr	r3, [pc, #628]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0e6:	d10b      	bne.n	800c100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0e8:	4b99      	ldr	r3, [pc, #612]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d05b      	beq.n	800c1ac <HAL_RCC_OscConfig+0x108>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d157      	bne.n	800c1ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e23f      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c108:	d106      	bne.n	800c118 <HAL_RCC_OscConfig+0x74>
 800c10a:	4b91      	ldr	r3, [pc, #580]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a90      	ldr	r2, [pc, #576]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c114:	6013      	str	r3, [r2, #0]
 800c116:	e01d      	b.n	800c154 <HAL_RCC_OscConfig+0xb0>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c120:	d10c      	bne.n	800c13c <HAL_RCC_OscConfig+0x98>
 800c122:	4b8b      	ldr	r3, [pc, #556]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a8a      	ldr	r2, [pc, #552]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	4b88      	ldr	r3, [pc, #544]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a87      	ldr	r2, [pc, #540]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	e00b      	b.n	800c154 <HAL_RCC_OscConfig+0xb0>
 800c13c:	4b84      	ldr	r3, [pc, #528]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a83      	ldr	r2, [pc, #524]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	4b81      	ldr	r3, [pc, #516]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a80      	ldr	r2, [pc, #512]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c14e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d013      	beq.n	800c184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c15c:	f7fc fee6 	bl	8008f2c <HAL_GetTick>
 800c160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c162:	e008      	b.n	800c176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c164:	f7fc fee2 	bl	8008f2c <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b64      	cmp	r3, #100	; 0x64
 800c170:	d901      	bls.n	800c176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e204      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c176:	4b76      	ldr	r3, [pc, #472]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0f0      	beq.n	800c164 <HAL_RCC_OscConfig+0xc0>
 800c182:	e014      	b.n	800c1ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c184:	f7fc fed2 	bl	8008f2c <HAL_GetTick>
 800c188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c18a:	e008      	b.n	800c19e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c18c:	f7fc fece 	bl	8008f2c <HAL_GetTick>
 800c190:	4602      	mov	r2, r0
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	2b64      	cmp	r3, #100	; 0x64
 800c198:	d901      	bls.n	800c19e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	e1f0      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c19e:	4b6c      	ldr	r3, [pc, #432]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1f0      	bne.n	800c18c <HAL_RCC_OscConfig+0xe8>
 800c1aa:	e000      	b.n	800c1ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0302 	and.w	r3, r3, #2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d063      	beq.n	800c282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c1ba:	4b65      	ldr	r3, [pc, #404]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f003 030c 	and.w	r3, r3, #12
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00b      	beq.n	800c1de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c1c6:	4b62      	ldr	r3, [pc, #392]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c1ce:	2b08      	cmp	r3, #8
 800c1d0:	d11c      	bne.n	800c20c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c1d2:	4b5f      	ldr	r3, [pc, #380]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d116      	bne.n	800c20c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c1de:	4b5c      	ldr	r3, [pc, #368]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d005      	beq.n	800c1f6 <HAL_RCC_OscConfig+0x152>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d001      	beq.n	800c1f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e1c4      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1f6:	4b56      	ldr	r3, [pc, #344]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	4952      	ldr	r1, [pc, #328]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c206:	4313      	orrs	r3, r2
 800c208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c20a:	e03a      	b.n	800c282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d020      	beq.n	800c256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c214:	4b4f      	ldr	r3, [pc, #316]	; (800c354 <HAL_RCC_OscConfig+0x2b0>)
 800c216:	2201      	movs	r2, #1
 800c218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c21a:	f7fc fe87 	bl	8008f2c <HAL_GetTick>
 800c21e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c220:	e008      	b.n	800c234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c222:	f7fc fe83 	bl	8008f2c <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d901      	bls.n	800c234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e1a5      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c234:	4b46      	ldr	r3, [pc, #280]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0302 	and.w	r3, r3, #2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0f0      	beq.n	800c222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c240:	4b43      	ldr	r3, [pc, #268]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	4940      	ldr	r1, [pc, #256]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c250:	4313      	orrs	r3, r2
 800c252:	600b      	str	r3, [r1, #0]
 800c254:	e015      	b.n	800c282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c256:	4b3f      	ldr	r3, [pc, #252]	; (800c354 <HAL_RCC_OscConfig+0x2b0>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c25c:	f7fc fe66 	bl	8008f2c <HAL_GetTick>
 800c260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c262:	e008      	b.n	800c276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c264:	f7fc fe62 	bl	8008f2c <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d901      	bls.n	800c276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e184      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c276:	4b36      	ldr	r3, [pc, #216]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1f0      	bne.n	800c264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0308 	and.w	r3, r3, #8
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d030      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d016      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c296:	4b30      	ldr	r3, [pc, #192]	; (800c358 <HAL_RCC_OscConfig+0x2b4>)
 800c298:	2201      	movs	r2, #1
 800c29a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c29c:	f7fc fe46 	bl	8008f2c <HAL_GetTick>
 800c2a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c2a4:	f7fc fe42 	bl	8008f2c <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e164      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c2b6:	4b26      	ldr	r3, [pc, #152]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0f0      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x200>
 800c2c2:	e015      	b.n	800c2f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c2c4:	4b24      	ldr	r3, [pc, #144]	; (800c358 <HAL_RCC_OscConfig+0x2b4>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c2ca:	f7fc fe2f 	bl	8008f2c <HAL_GetTick>
 800c2ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2d0:	e008      	b.n	800c2e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c2d2:	f7fc fe2b 	bl	8008f2c <HAL_GetTick>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d901      	bls.n	800c2e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e14d      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2e4:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e8:	f003 0302 	and.w	r3, r3, #2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1f0      	bne.n	800c2d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 80a0 	beq.w	800c43e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2fe:	2300      	movs	r3, #0
 800c300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c302:	4b13      	ldr	r3, [pc, #76]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10f      	bne.n	800c32e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c30e:	2300      	movs	r3, #0
 800c310:	60bb      	str	r3, [r7, #8]
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	4a0e      	ldr	r2, [pc, #56]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c31c:	6413      	str	r3, [r2, #64]	; 0x40
 800c31e:	4b0c      	ldr	r3, [pc, #48]	; (800c350 <HAL_RCC_OscConfig+0x2ac>)
 800c320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c326:	60bb      	str	r3, [r7, #8]
 800c328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c32a:	2301      	movs	r3, #1
 800c32c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c32e:	4b0b      	ldr	r3, [pc, #44]	; (800c35c <HAL_RCC_OscConfig+0x2b8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c336:	2b00      	cmp	r3, #0
 800c338:	d121      	bne.n	800c37e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c33a:	4b08      	ldr	r3, [pc, #32]	; (800c35c <HAL_RCC_OscConfig+0x2b8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a07      	ldr	r2, [pc, #28]	; (800c35c <HAL_RCC_OscConfig+0x2b8>)
 800c340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c346:	f7fc fdf1 	bl	8008f2c <HAL_GetTick>
 800c34a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c34c:	e011      	b.n	800c372 <HAL_RCC_OscConfig+0x2ce>
 800c34e:	bf00      	nop
 800c350:	40023800 	.word	0x40023800
 800c354:	42470000 	.word	0x42470000
 800c358:	42470e80 	.word	0x42470e80
 800c35c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c360:	f7fc fde4 	bl	8008f2c <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e106      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c372:	4b85      	ldr	r3, [pc, #532]	; (800c588 <HAL_RCC_OscConfig+0x4e4>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0f0      	beq.n	800c360 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d106      	bne.n	800c394 <HAL_RCC_OscConfig+0x2f0>
 800c386:	4b81      	ldr	r3, [pc, #516]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38a:	4a80      	ldr	r2, [pc, #512]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c38c:	f043 0301 	orr.w	r3, r3, #1
 800c390:	6713      	str	r3, [r2, #112]	; 0x70
 800c392:	e01c      	b.n	800c3ce <HAL_RCC_OscConfig+0x32a>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	2b05      	cmp	r3, #5
 800c39a:	d10c      	bne.n	800c3b6 <HAL_RCC_OscConfig+0x312>
 800c39c:	4b7b      	ldr	r3, [pc, #492]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a0:	4a7a      	ldr	r2, [pc, #488]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3a2:	f043 0304 	orr.w	r3, r3, #4
 800c3a6:	6713      	str	r3, [r2, #112]	; 0x70
 800c3a8:	4b78      	ldr	r3, [pc, #480]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ac:	4a77      	ldr	r2, [pc, #476]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c3b4:	e00b      	b.n	800c3ce <HAL_RCC_OscConfig+0x32a>
 800c3b6:	4b75      	ldr	r3, [pc, #468]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ba:	4a74      	ldr	r2, [pc, #464]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3bc:	f023 0301 	bic.w	r3, r3, #1
 800c3c0:	6713      	str	r3, [r2, #112]	; 0x70
 800c3c2:	4b72      	ldr	r3, [pc, #456]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3c6:	4a71      	ldr	r2, [pc, #452]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3c8:	f023 0304 	bic.w	r3, r3, #4
 800c3cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d015      	beq.n	800c402 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3d6:	f7fc fda9 	bl	8008f2c <HAL_GetTick>
 800c3da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3dc:	e00a      	b.n	800c3f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3de:	f7fc fda5 	bl	8008f2c <HAL_GetTick>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d901      	bls.n	800c3f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e0c5      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3f4:	4b65      	ldr	r3, [pc, #404]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0ee      	beq.n	800c3de <HAL_RCC_OscConfig+0x33a>
 800c400:	e014      	b.n	800c42c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c402:	f7fc fd93 	bl	8008f2c <HAL_GetTick>
 800c406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c408:	e00a      	b.n	800c420 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c40a:	f7fc fd8f 	bl	8008f2c <HAL_GetTick>
 800c40e:	4602      	mov	r2, r0
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	f241 3288 	movw	r2, #5000	; 0x1388
 800c418:	4293      	cmp	r3, r2
 800c41a:	d901      	bls.n	800c420 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e0af      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c420:	4b5a      	ldr	r3, [pc, #360]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c424:	f003 0302 	and.w	r3, r3, #2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1ee      	bne.n	800c40a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d105      	bne.n	800c43e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c432:	4b56      	ldr	r3, [pc, #344]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c436:	4a55      	ldr	r2, [pc, #340]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c43c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 809b 	beq.w	800c57e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c448:	4b50      	ldr	r3, [pc, #320]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 030c 	and.w	r3, r3, #12
 800c450:	2b08      	cmp	r3, #8
 800c452:	d05c      	beq.n	800c50e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d141      	bne.n	800c4e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c45c:	4b4c      	ldr	r3, [pc, #304]	; (800c590 <HAL_RCC_OscConfig+0x4ec>)
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c462:	f7fc fd63 	bl	8008f2c <HAL_GetTick>
 800c466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c468:	e008      	b.n	800c47c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c46a:	f7fc fd5f 	bl	8008f2c <HAL_GetTick>
 800c46e:	4602      	mov	r2, r0
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	2b02      	cmp	r3, #2
 800c476:	d901      	bls.n	800c47c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	e081      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c47c:	4b43      	ldr	r3, [pc, #268]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1f0      	bne.n	800c46a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	69da      	ldr	r2, [r3, #28]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	431a      	orrs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	019b      	lsls	r3, r3, #6
 800c498:	431a      	orrs	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49e:	085b      	lsrs	r3, r3, #1
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	431a      	orrs	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4aa:	061b      	lsls	r3, r3, #24
 800c4ac:	4937      	ldr	r1, [pc, #220]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c4b2:	4b37      	ldr	r3, [pc, #220]	; (800c590 <HAL_RCC_OscConfig+0x4ec>)
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4b8:	f7fc fd38 	bl	8008f2c <HAL_GetTick>
 800c4bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4be:	e008      	b.n	800c4d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4c0:	f7fc fd34 	bl	8008f2c <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d901      	bls.n	800c4d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e056      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4d2:	4b2e      	ldr	r3, [pc, #184]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0f0      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x41c>
 800c4de:	e04e      	b.n	800c57e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4e0:	4b2b      	ldr	r3, [pc, #172]	; (800c590 <HAL_RCC_OscConfig+0x4ec>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4e6:	f7fc fd21 	bl	8008f2c <HAL_GetTick>
 800c4ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4ec:	e008      	b.n	800c500 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4ee:	f7fc fd1d 	bl	8008f2c <HAL_GetTick>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d901      	bls.n	800c500 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	e03f      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c500:	4b22      	ldr	r3, [pc, #136]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1f0      	bne.n	800c4ee <HAL_RCC_OscConfig+0x44a>
 800c50c:	e037      	b.n	800c57e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d101      	bne.n	800c51a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e032      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c51a:	4b1c      	ldr	r3, [pc, #112]	; (800c58c <HAL_RCC_OscConfig+0x4e8>)
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d028      	beq.n	800c57a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c532:	429a      	cmp	r2, r3
 800c534:	d121      	bne.n	800c57a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c540:	429a      	cmp	r2, r3
 800c542:	d11a      	bne.n	800c57a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c54a:	4013      	ands	r3, r2
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c550:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c552:	4293      	cmp	r3, r2
 800c554:	d111      	bne.n	800c57a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c560:	085b      	lsrs	r3, r3, #1
 800c562:	3b01      	subs	r3, #1
 800c564:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c566:	429a      	cmp	r2, r3
 800c568:	d107      	bne.n	800c57a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c576:	429a      	cmp	r2, r3
 800c578:	d001      	beq.n	800c57e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	40007000 	.word	0x40007000
 800c58c:	40023800 	.word	0x40023800
 800c590:	42470060 	.word	0x42470060

0800c594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e0cc      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c5a8:	4b68      	ldr	r3, [pc, #416]	; (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0307 	and.w	r3, r3, #7
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d90c      	bls.n	800c5d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5b6:	4b65      	ldr	r3, [pc, #404]	; (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	b2d2      	uxtb	r2, r2
 800c5bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5be:	4b63      	ldr	r3, [pc, #396]	; (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 0307 	and.w	r3, r3, #7
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d001      	beq.n	800c5d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e0b8      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0302 	and.w	r3, r3, #2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d020      	beq.n	800c61e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d005      	beq.n	800c5f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5e8:	4b59      	ldr	r3, [pc, #356]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	4a58      	ldr	r2, [pc, #352]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c5f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0308 	and.w	r3, r3, #8
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d005      	beq.n	800c60c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c600:	4b53      	ldr	r3, [pc, #332]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	4a52      	ldr	r2, [pc, #328]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c60a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c60c:	4b50      	ldr	r3, [pc, #320]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	494d      	ldr	r1, [pc, #308]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0301 	and.w	r3, r3, #1
 800c626:	2b00      	cmp	r3, #0
 800c628:	d044      	beq.n	800c6b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d107      	bne.n	800c642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c632:	4b47      	ldr	r3, [pc, #284]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d119      	bne.n	800c672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e07f      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	2b02      	cmp	r3, #2
 800c648:	d003      	beq.n	800c652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d107      	bne.n	800c662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c652:	4b3f      	ldr	r3, [pc, #252]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d109      	bne.n	800c672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e06f      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c662:	4b3b      	ldr	r3, [pc, #236]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	e067      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c672:	4b37      	ldr	r3, [pc, #220]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	f023 0203 	bic.w	r2, r3, #3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	4934      	ldr	r1, [pc, #208]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c680:	4313      	orrs	r3, r2
 800c682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c684:	f7fc fc52 	bl	8008f2c <HAL_GetTick>
 800c688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c68a:	e00a      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c68c:	f7fc fc4e 	bl	8008f2c <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	f241 3288 	movw	r2, #5000	; 0x1388
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e04f      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6a2:	4b2b      	ldr	r3, [pc, #172]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 020c 	and.w	r2, r3, #12
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d1eb      	bne.n	800c68c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c6b4:	4b25      	ldr	r3, [pc, #148]	; (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d20c      	bcs.n	800c6dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6c2:	4b22      	ldr	r3, [pc, #136]	; (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ca:	4b20      	ldr	r3, [pc, #128]	; (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d001      	beq.n	800c6dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e032      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d008      	beq.n	800c6fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6e8:	4b19      	ldr	r3, [pc, #100]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	4916      	ldr	r1, [pc, #88]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0308 	and.w	r3, r3, #8
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c706:	4b12      	ldr	r3, [pc, #72]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	490e      	ldr	r1, [pc, #56]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c716:	4313      	orrs	r3, r2
 800c718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c71a:	f000 f821 	bl	800c760 <HAL_RCC_GetSysClockFreq>
 800c71e:	4602      	mov	r2, r0
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	091b      	lsrs	r3, r3, #4
 800c726:	f003 030f 	and.w	r3, r3, #15
 800c72a:	490a      	ldr	r1, [pc, #40]	; (800c754 <HAL_RCC_ClockConfig+0x1c0>)
 800c72c:	5ccb      	ldrb	r3, [r1, r3]
 800c72e:	fa22 f303 	lsr.w	r3, r2, r3
 800c732:	4a09      	ldr	r2, [pc, #36]	; (800c758 <HAL_RCC_ClockConfig+0x1c4>)
 800c734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c736:	4b09      	ldr	r3, [pc, #36]	; (800c75c <HAL_RCC_ClockConfig+0x1c8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fc fbb2 	bl	8008ea4 <HAL_InitTick>

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40023c00 	.word	0x40023c00
 800c750:	40023800 	.word	0x40023800
 800c754:	0801a978 	.word	0x0801a978
 800c758:	20000120 	.word	0x20000120
 800c75c:	20000124 	.word	0x20000124

0800c760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c766:	2100      	movs	r1, #0
 800c768:	6079      	str	r1, [r7, #4]
 800c76a:	2100      	movs	r1, #0
 800c76c:	60f9      	str	r1, [r7, #12]
 800c76e:	2100      	movs	r1, #0
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c772:	2100      	movs	r1, #0
 800c774:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c776:	4952      	ldr	r1, [pc, #328]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800c778:	6889      	ldr	r1, [r1, #8]
 800c77a:	f001 010c 	and.w	r1, r1, #12
 800c77e:	2908      	cmp	r1, #8
 800c780:	d00d      	beq.n	800c79e <HAL_RCC_GetSysClockFreq+0x3e>
 800c782:	2908      	cmp	r1, #8
 800c784:	f200 8094 	bhi.w	800c8b0 <HAL_RCC_GetSysClockFreq+0x150>
 800c788:	2900      	cmp	r1, #0
 800c78a:	d002      	beq.n	800c792 <HAL_RCC_GetSysClockFreq+0x32>
 800c78c:	2904      	cmp	r1, #4
 800c78e:	d003      	beq.n	800c798 <HAL_RCC_GetSysClockFreq+0x38>
 800c790:	e08e      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c792:	4b4c      	ldr	r3, [pc, #304]	; (800c8c4 <HAL_RCC_GetSysClockFreq+0x164>)
 800c794:	60bb      	str	r3, [r7, #8]
       break;
 800c796:	e08e      	b.n	800c8b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c798:	4b4b      	ldr	r3, [pc, #300]	; (800c8c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800c79a:	60bb      	str	r3, [r7, #8]
      break;
 800c79c:	e08b      	b.n	800c8b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c79e:	4948      	ldr	r1, [pc, #288]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800c7a0:	6849      	ldr	r1, [r1, #4]
 800c7a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800c7a6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c7a8:	4945      	ldr	r1, [pc, #276]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800c7aa:	6849      	ldr	r1, [r1, #4]
 800c7ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c7b0:	2900      	cmp	r1, #0
 800c7b2:	d024      	beq.n	800c7fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7b4:	4942      	ldr	r1, [pc, #264]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800c7b6:	6849      	ldr	r1, [r1, #4]
 800c7b8:	0989      	lsrs	r1, r1, #6
 800c7ba:	4608      	mov	r0, r1
 800c7bc:	f04f 0100 	mov.w	r1, #0
 800c7c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c7c4:	f04f 0500 	mov.w	r5, #0
 800c7c8:	ea00 0204 	and.w	r2, r0, r4
 800c7cc:	ea01 0305 	and.w	r3, r1, r5
 800c7d0:	493d      	ldr	r1, [pc, #244]	; (800c8c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800c7d2:	fb01 f003 	mul.w	r0, r1, r3
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	fb01 f102 	mul.w	r1, r1, r2
 800c7dc:	1844      	adds	r4, r0, r1
 800c7de:	493a      	ldr	r1, [pc, #232]	; (800c8c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800c7e0:	fba2 0101 	umull	r0, r1, r2, r1
 800c7e4:	1863      	adds	r3, r4, r1
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f04f 0300 	mov.w	r3, #0
 800c7f0:	f7f4 fa4a 	bl	8000c88 <__aeabi_uldivmod>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	e04a      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7fe:	4b30      	ldr	r3, [pc, #192]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	099b      	lsrs	r3, r3, #6
 800c804:	461a      	mov	r2, r3
 800c806:	f04f 0300 	mov.w	r3, #0
 800c80a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c80e:	f04f 0100 	mov.w	r1, #0
 800c812:	ea02 0400 	and.w	r4, r2, r0
 800c816:	ea03 0501 	and.w	r5, r3, r1
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f04f 0200 	mov.w	r2, #0
 800c822:	f04f 0300 	mov.w	r3, #0
 800c826:	014b      	lsls	r3, r1, #5
 800c828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c82c:	0142      	lsls	r2, r0, #5
 800c82e:	4610      	mov	r0, r2
 800c830:	4619      	mov	r1, r3
 800c832:	1b00      	subs	r0, r0, r4
 800c834:	eb61 0105 	sbc.w	r1, r1, r5
 800c838:	f04f 0200 	mov.w	r2, #0
 800c83c:	f04f 0300 	mov.w	r3, #0
 800c840:	018b      	lsls	r3, r1, #6
 800c842:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c846:	0182      	lsls	r2, r0, #6
 800c848:	1a12      	subs	r2, r2, r0
 800c84a:	eb63 0301 	sbc.w	r3, r3, r1
 800c84e:	f04f 0000 	mov.w	r0, #0
 800c852:	f04f 0100 	mov.w	r1, #0
 800c856:	00d9      	lsls	r1, r3, #3
 800c858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c85c:	00d0      	lsls	r0, r2, #3
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	1912      	adds	r2, r2, r4
 800c864:	eb45 0303 	adc.w	r3, r5, r3
 800c868:	f04f 0000 	mov.w	r0, #0
 800c86c:	f04f 0100 	mov.w	r1, #0
 800c870:	0299      	lsls	r1, r3, #10
 800c872:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c876:	0290      	lsls	r0, r2, #10
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4610      	mov	r0, r2
 800c87e:	4619      	mov	r1, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	461a      	mov	r2, r3
 800c884:	f04f 0300 	mov.w	r3, #0
 800c888:	f7f4 f9fe 	bl	8000c88 <__aeabi_uldivmod>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4613      	mov	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c894:	4b0a      	ldr	r3, [pc, #40]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	0c1b      	lsrs	r3, r3, #16
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	3301      	adds	r3, #1
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ac:	60bb      	str	r3, [r7, #8]
      break;
 800c8ae:	e002      	b.n	800c8b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <HAL_RCC_GetSysClockFreq+0x164>)
 800c8b2:	60bb      	str	r3, [r7, #8]
      break;
 800c8b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bdb0      	pop	{r4, r5, r7, pc}
 800c8c0:	40023800 	.word	0x40023800
 800c8c4:	00f42400 	.word	0x00f42400
 800c8c8:	017d7840 	.word	0x017d7840

0800c8cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c8d0:	4b03      	ldr	r3, [pc, #12]	; (800c8e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20000120 	.word	0x20000120

0800c8e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c8e8:	f7ff fff0 	bl	800c8cc <HAL_RCC_GetHCLKFreq>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	4b05      	ldr	r3, [pc, #20]	; (800c904 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	0a9b      	lsrs	r3, r3, #10
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	4903      	ldr	r1, [pc, #12]	; (800c908 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c8fa:	5ccb      	ldrb	r3, [r1, r3]
 800c8fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c900:	4618      	mov	r0, r3
 800c902:	bd80      	pop	{r7, pc}
 800c904:	40023800 	.word	0x40023800
 800c908:	0801a988 	.word	0x0801a988

0800c90c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c910:	f7ff ffdc 	bl	800c8cc <HAL_RCC_GetHCLKFreq>
 800c914:	4602      	mov	r2, r0
 800c916:	4b05      	ldr	r3, [pc, #20]	; (800c92c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	0b5b      	lsrs	r3, r3, #13
 800c91c:	f003 0307 	and.w	r3, r3, #7
 800c920:	4903      	ldr	r1, [pc, #12]	; (800c930 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c922:	5ccb      	ldrb	r3, [r1, r3]
 800c924:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c928:	4618      	mov	r0, r3
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	40023800 	.word	0x40023800
 800c930:	0801a988 	.word	0x0801a988

0800c934 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e022      	b.n	800c98c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d105      	bne.n	800c95e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7fb fe53 	bl	8008604 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2203      	movs	r2, #3
 800c962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f814 	bl	800c994 <HAL_SD_InitCard>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	e00a      	b.n	800c98c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2201      	movs	r2, #1
 800c986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c994:	b5b0      	push	{r4, r5, r7, lr}
 800c996:	b08e      	sub	sp, #56	; 0x38
 800c998:	af04      	add	r7, sp, #16
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c99c:	2300      	movs	r3, #0
 800c99e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c9b0:	2376      	movs	r3, #118	; 0x76
 800c9b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681d      	ldr	r5, [r3, #0]
 800c9b8:	466c      	mov	r4, sp
 800c9ba:	f107 0314 	add.w	r3, r7, #20
 800c9be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f003 fc1f 	bl	8010210 <SDIO_Init>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e04c      	b.n	800ca7e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c9e4:	4b28      	ldr	r3, [pc, #160]	; (800ca88 <HAL_SD_InitCard+0xf4>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f003 fc57 	bl	80102a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c9f4:	4b24      	ldr	r3, [pc, #144]	; (800ca88 <HAL_SD_InitCard+0xf4>)
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fe68 	bl	800d6d0 <SD_PowerON>
 800ca00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca02:	6a3b      	ldr	r3, [r7, #32]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00b      	beq.n	800ca20 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e02e      	b.n	800ca7e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fd89 	bl	800d538 <SD_InitCard>
 800ca26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e01b      	b.n	800ca7e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f003 fcba 	bl	80103c8 <SDMMC_CmdBlockLength>
 800ca54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca56:	6a3b      	ldr	r3, [r7, #32]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00f      	beq.n	800ca7c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a0a      	ldr	r2, [pc, #40]	; (800ca8c <HAL_SD_InitCard+0xf8>)
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e000      	b.n	800ca7e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3728      	adds	r7, #40	; 0x28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bdb0      	pop	{r4, r5, r7, pc}
 800ca86:	bf00      	nop
 800ca88:	422580a0 	.word	0x422580a0
 800ca8c:	004005ff 	.word	0x004005ff

0800ca90 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b092      	sub	sp, #72	; 0x48
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca9e:	f7fc fa45 	bl	8008f2c <HAL_GetTick>
 800caa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d107      	bne.n	800cac2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e1bd      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b01      	cmp	r3, #1
 800cacc:	f040 81b0 	bne.w	800ce30 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	441a      	add	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d907      	bls.n	800caf4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e1a4      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2203      	movs	r2, #3
 800caf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2200      	movs	r2, #0
 800cb02:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d002      	beq.n	800cb12 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	025b      	lsls	r3, r3, #9
 800cb10:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb12:	f04f 33ff 	mov.w	r3, #4294967295
 800cb16:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	025b      	lsls	r3, r3, #9
 800cb1c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cb1e:	2390      	movs	r3, #144	; 0x90
 800cb20:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cb22:	2302      	movs	r3, #2
 800cb24:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f107 0214 	add.w	r2, r7, #20
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f003 fc19 	bl	8010370 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d90a      	bls.n	800cb5a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2202      	movs	r2, #2
 800cb48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb50:	4618      	mov	r0, r3
 800cb52:	f003 fc7d 	bl	8010450 <SDMMC_CmdReadMultiBlock>
 800cb56:	6478      	str	r0, [r7, #68]	; 0x44
 800cb58:	e009      	b.n	800cb6e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb66:	4618      	mov	r0, r3
 800cb68:	f003 fc50 	bl	801040c <SDMMC_CmdReadSingleBlock>
 800cb6c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d012      	beq.n	800cb9a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a7a      	ldr	r2, [pc, #488]	; (800cd64 <HAL_SD_ReadBlocks+0x2d4>)
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb82:	431a      	orrs	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e151      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800cb9e:	e061      	b.n	800cc64 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d03c      	beq.n	800cc28 <HAL_SD_ReadBlocks+0x198>
 800cbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d039      	beq.n	800cc28 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb8:	e033      	b.n	800cc22 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f003 fb51 	bl	8010266 <SDIO_ReadFIFO>
 800cbc4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbcc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cbd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	0a1b      	lsrs	r3, r3, #8
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbec:	3b01      	subs	r3, #1
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	0c1b      	lsrs	r3, r3, #16
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc02:	3b01      	subs	r3, #1
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	0e1b      	lsrs	r3, r3, #24
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc12:	3301      	adds	r3, #1
 800cc14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800cc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc1e:	3301      	adds	r3, #1
 800cc20:	643b      	str	r3, [r7, #64]	; 0x40
 800cc22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc24:	2b07      	cmp	r3, #7
 800cc26:	d9c8      	bls.n	800cbba <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cc28:	f7fc f980 	bl	8008f2c <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d902      	bls.n	800cc3e <HAL_SD_ReadBlocks+0x1ae>
 800cc38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d112      	bne.n	800cc64 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a48      	ldr	r2, [pc, #288]	; (800cd64 <HAL_SD_ReadBlocks+0x2d4>)
 800cc44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e0ec      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc6a:	f240 332a 	movw	r3, #810	; 0x32a
 800cc6e:	4013      	ands	r3, r2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d095      	beq.n	800cba0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d022      	beq.n	800ccc8 <HAL_SD_ReadBlocks+0x238>
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d91f      	bls.n	800ccc8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d01b      	beq.n	800ccc8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f003 fc41 	bl	801051c <SDMMC_CmdStopTransfer>
 800cc9a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d012      	beq.n	800ccc8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a2f      	ldr	r2, [pc, #188]	; (800cd64 <HAL_SD_ReadBlocks+0x2d4>)
 800cca8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e0ba      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccce:	f003 0308 	and.w	r3, r3, #8
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d012      	beq.n	800ccfc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a22      	ldr	r2, [pc, #136]	; (800cd64 <HAL_SD_ReadBlocks+0x2d4>)
 800ccdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce2:	f043 0208 	orr.w	r2, r3, #8
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e0a0      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd02:	f003 0302 	and.w	r3, r3, #2
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d012      	beq.n	800cd30 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a15      	ldr	r2, [pc, #84]	; (800cd64 <HAL_SD_ReadBlocks+0x2d4>)
 800cd10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	f043 0202 	orr.w	r2, r3, #2
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e086      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd36:	f003 0320 	and.w	r3, r3, #32
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d063      	beq.n	800ce06 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a08      	ldr	r2, [pc, #32]	; (800cd64 <HAL_SD_ReadBlocks+0x2d4>)
 800cd44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4a:	f043 0220 	orr.w	r2, r3, #32
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e06c      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
 800cd64:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f003 fa7a 	bl	8010266 <SDIO_ReadFIFO>
 800cd72:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	3301      	adds	r3, #1
 800cd80:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800cd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd84:	3b01      	subs	r3, #1
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	0a1b      	lsrs	r3, r3, #8
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd90:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd94:	3301      	adds	r3, #1
 800cd96:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800cd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	0c1b      	lsrs	r3, r3, #16
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdaa:	3301      	adds	r3, #1
 800cdac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800cdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	0e1b      	lsrs	r3, r3, #24
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cdca:	f7fc f8af 	bl	8008f2c <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d902      	bls.n	800cde0 <HAL_SD_ReadBlocks+0x350>
 800cdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d112      	bne.n	800ce06 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a18      	ldr	r2, [pc, #96]	; (800ce48 <HAL_SD_ReadBlocks+0x3b8>)
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e01b      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d002      	beq.n	800ce1a <HAL_SD_ReadBlocks+0x38a>
 800ce14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1a6      	bne.n	800cd68 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	e006      	b.n	800ce3e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
  }
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3748      	adds	r7, #72	; 0x48
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	004005ff 	.word	0x004005ff

0800ce4c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b092      	sub	sp, #72	; 0x48
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]
 800ce58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ce5a:	f7fc f867 	bl	8008f2c <HAL_GetTick>
 800ce5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d107      	bne.n	800ce7e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e166      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	f040 8159 	bne.w	800d13e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	441a      	add	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d907      	bls.n	800ceb0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e14d      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2200      	movs	r2, #0
 800cebe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d002      	beq.n	800cece <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	025b      	lsls	r3, r3, #9
 800cecc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cece:	f04f 33ff 	mov.w	r3, #4294967295
 800ced2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	025b      	lsls	r3, r3, #9
 800ced8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ceda:	2390      	movs	r3, #144	; 0x90
 800cedc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cede:	2300      	movs	r3, #0
 800cee0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800cee6:	2301      	movs	r3, #1
 800cee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f107 0218 	add.w	r2, r7, #24
 800cef2:	4611      	mov	r1, r2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f003 fa3b 	bl	8010370 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d90a      	bls.n	800cf16 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2220      	movs	r2, #32
 800cf04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f003 fae3 	bl	80104d8 <SDMMC_CmdWriteMultiBlock>
 800cf12:	6478      	str	r0, [r7, #68]	; 0x44
 800cf14:	e009      	b.n	800cf2a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2210      	movs	r2, #16
 800cf1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf22:	4618      	mov	r0, r3
 800cf24:	f003 fab6 	bl	8010494 <SDMMC_CmdWriteSingleBlock>
 800cf28:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d012      	beq.n	800cf56 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a87      	ldr	r2, [pc, #540]	; (800d154 <HAL_SD_WriteBlocks+0x308>)
 800cf36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e0fa      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800cf5a:	e065      	b.n	800d028 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d040      	beq.n	800cfec <HAL_SD_WriteBlocks+0x1a0>
 800cf6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d03d      	beq.n	800cfec <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cf70:	2300      	movs	r3, #0
 800cf72:	643b      	str	r3, [r7, #64]	; 0x40
 800cf74:	e037      	b.n	800cfe6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cf7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7e:	3301      	adds	r3, #1
 800cf80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cf82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf84:	3b01      	subs	r3, #1
 800cf86:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	021a      	lsls	r2, r3, #8
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	3301      	adds	r3, #1
 800cf98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	041a      	lsls	r2, r3, #16
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	3301      	adds	r3, #1
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	061a      	lsls	r2, r3, #24
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f107 0214 	add.w	r2, r7, #20
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f003 f950 	bl	8010280 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800cfe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	643b      	str	r3, [r7, #64]	; 0x40
 800cfe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe8:	2b07      	cmp	r3, #7
 800cfea:	d9c4      	bls.n	800cf76 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cfec:	f7fb ff9e 	bl	8008f2c <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d902      	bls.n	800d002 <HAL_SD_WriteBlocks+0x1b6>
 800cffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d112      	bne.n	800d028 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a53      	ldr	r2, [pc, #332]	; (800d154 <HAL_SD_WriteBlocks+0x308>)
 800d008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d00e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d010:	431a      	orrs	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d024:	2303      	movs	r3, #3
 800d026:	e091      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d02e:	f240 331a 	movw	r3, #794	; 0x31a
 800d032:	4013      	ands	r3, r2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d091      	beq.n	800cf5c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d042:	2b00      	cmp	r3, #0
 800d044:	d022      	beq.n	800d08c <HAL_SD_WriteBlocks+0x240>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d91f      	bls.n	800d08c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d050:	2b03      	cmp	r3, #3
 800d052:	d01b      	beq.n	800d08c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f003 fa5f 	bl	801051c <SDMMC_CmdStopTransfer>
 800d05e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d062:	2b00      	cmp	r3, #0
 800d064:	d012      	beq.n	800d08c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a3a      	ldr	r2, [pc, #232]	; (800d154 <HAL_SD_WriteBlocks+0x308>)
 800d06c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d074:	431a      	orrs	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e05f      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d092:	f003 0308 	and.w	r3, r3, #8
 800d096:	2b00      	cmp	r3, #0
 800d098:	d012      	beq.n	800d0c0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a2d      	ldr	r2, [pc, #180]	; (800d154 <HAL_SD_WriteBlocks+0x308>)
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	f043 0208 	orr.w	r2, r3, #8
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e045      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d012      	beq.n	800d0f4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a20      	ldr	r2, [pc, #128]	; (800d154 <HAL_SD_WriteBlocks+0x308>)
 800d0d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	f043 0202 	orr.w	r2, r3, #2
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e02b      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d012      	beq.n	800d128 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a13      	ldr	r2, [pc, #76]	; (800d154 <HAL_SD_WriteBlocks+0x308>)
 800d108:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10e:	f043 0210 	orr.w	r2, r3, #16
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2200      	movs	r2, #0
 800d122:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	e011      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d130:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	e006      	b.n	800d14c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
  }
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3748      	adds	r7, #72	; 0x48
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	004005ff 	.word	0x004005ff

0800d158 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d166:	0f9b      	lsrs	r3, r3, #30
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d172:	0e9b      	lsrs	r3, r3, #26
 800d174:	b2db      	uxtb	r3, r3
 800d176:	f003 030f 	and.w	r3, r3, #15
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d184:	0e1b      	lsrs	r3, r3, #24
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d196:	0c1b      	lsrs	r3, r3, #16
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a2:	0a1b      	lsrs	r3, r3, #8
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b8:	0d1b      	lsrs	r3, r3, #20
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1c4:	0c1b      	lsrs	r3, r3, #16
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 030f 	and.w	r3, r3, #15
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d6:	0bdb      	lsrs	r3, r3, #15
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e8:	0b9b      	lsrs	r3, r3, #14
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1fa:	0b5b      	lsrs	r3, r3, #13
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	b2da      	uxtb	r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d20c:	0b1b      	lsrs	r3, r3, #12
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	b2da      	uxtb	r2, r3
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2200      	movs	r2, #0
 800d21e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d224:	2b00      	cmp	r3, #0
 800d226:	d163      	bne.n	800d2f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d22c:	009a      	lsls	r2, r3, #2
 800d22e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d232:	4013      	ands	r3, r2
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d238:	0f92      	lsrs	r2, r2, #30
 800d23a:	431a      	orrs	r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d244:	0edb      	lsrs	r3, r3, #27
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f003 0307 	and.w	r3, r3, #7
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d256:	0e1b      	lsrs	r3, r3, #24
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	f003 0307 	and.w	r3, r3, #7
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d268:	0d5b      	lsrs	r3, r3, #21
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	f003 0307 	and.w	r3, r3, #7
 800d270:	b2da      	uxtb	r2, r3
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27a:	0c9b      	lsrs	r3, r3, #18
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	f003 0307 	and.w	r3, r3, #7
 800d282:	b2da      	uxtb	r2, r3
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d28c:	0bdb      	lsrs	r3, r3, #15
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	f003 0307 	and.w	r3, r3, #7
 800d294:	b2da      	uxtb	r2, r3
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	7e1b      	ldrb	r3, [r3, #24]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	f003 0307 	and.w	r3, r3, #7
 800d2ae:	3302      	adds	r3, #2
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d2ba:	fb02 f203 	mul.w	r2, r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	7a1b      	ldrb	r3, [r3, #8]
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	409a      	lsls	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d2dc:	0a52      	lsrs	r2, r2, #9
 800d2de:	fb02 f203 	mul.w	r2, r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2ec:	661a      	str	r2, [r3, #96]	; 0x60
 800d2ee:	e031      	b.n	800d354 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d11d      	bne.n	800d334 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2fc:	041b      	lsls	r3, r3, #16
 800d2fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d306:	0c1b      	lsrs	r3, r3, #16
 800d308:	431a      	orrs	r2, r3
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	3301      	adds	r3, #1
 800d314:	029a      	lsls	r2, r3, #10
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d328:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	661a      	str	r2, [r3, #96]	; 0x60
 800d332:	e00f      	b.n	800d354 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a58      	ldr	r2, [pc, #352]	; (800d49c <HAL_SD_GetCardCSD+0x344>)
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e09d      	b.n	800d490 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d358:	0b9b      	lsrs	r3, r3, #14
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	b2da      	uxtb	r2, r3
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d36a:	09db      	lsrs	r3, r3, #7
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d372:	b2da      	uxtb	r2, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d382:	b2da      	uxtb	r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d38c:	0fdb      	lsrs	r3, r3, #31
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d398:	0f5b      	lsrs	r3, r3, #29
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	f003 0303 	and.w	r3, r3, #3
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3aa:	0e9b      	lsrs	r3, r3, #26
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 0307 	and.w	r3, r3, #7
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3bc:	0d9b      	lsrs	r3, r3, #22
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	f003 030f 	and.w	r3, r3, #15
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ce:	0d5b      	lsrs	r3, r3, #21
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ea:	0c1b      	lsrs	r3, r3, #16
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fe:	0bdb      	lsrs	r3, r3, #15
 800d400:	b2db      	uxtb	r3, r3
 800d402:	f003 0301 	and.w	r3, r3, #1
 800d406:	b2da      	uxtb	r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d412:	0b9b      	lsrs	r3, r3, #14
 800d414:	b2db      	uxtb	r3, r3
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d426:	0b5b      	lsrs	r3, r3, #13
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43a:	0b1b      	lsrs	r3, r3, #12
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44e:	0a9b      	lsrs	r3, r3, #10
 800d450:	b2db      	uxtb	r3, r3
 800d452:	f003 0303 	and.w	r3, r3, #3
 800d456:	b2da      	uxtb	r2, r3
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d462:	0a1b      	lsrs	r3, r3, #8
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 0303 	and.w	r3, r3, #3
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d476:	085b      	lsrs	r3, r3, #1
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	004005ff 	.word	0x004005ff

0800d4a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d500:	2300      	movs	r3, #0
 800d502:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d504:	f107 030c 	add.w	r3, r7, #12
 800d508:	4619      	mov	r1, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f96e 	bl	800d7ec <SD_SendStatus>
 800d510:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d005      	beq.n	800d524 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	431a      	orrs	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	0a5b      	lsrs	r3, r3, #9
 800d528:	f003 030f 	and.w	r3, r3, #15
 800d52c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d52e:	693b      	ldr	r3, [r7, #16]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d538:	b5b0      	push	{r4, r5, r7, lr}
 800d53a:	b094      	sub	sp, #80	; 0x50
 800d53c:	af04      	add	r7, sp, #16
 800d53e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d540:	2301      	movs	r3, #1
 800d542:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4618      	mov	r0, r3
 800d54a:	f002 feb9 	bl	80102c0 <SDIO_GetPowerState>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d102      	bne.n	800d55a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d554:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d558:	e0b6      	b.n	800d6c8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d02f      	beq.n	800d5c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4618      	mov	r0, r3
 800d568:	f003 f89f 	bl	80106aa <SDMMC_CmdSendCID>
 800d56c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <SD_InitCard+0x40>
    {
      return errorstate;
 800d574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d576:	e0a7      	b.n	800d6c8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2100      	movs	r1, #0
 800d57e:	4618      	mov	r0, r3
 800d580:	f002 fee3 	bl	801034a <SDIO_GetResponse>
 800d584:	4602      	mov	r2, r0
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2104      	movs	r1, #4
 800d590:	4618      	mov	r0, r3
 800d592:	f002 feda 	bl	801034a <SDIO_GetResponse>
 800d596:	4602      	mov	r2, r0
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2108      	movs	r1, #8
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f002 fed1 	bl	801034a <SDIO_GetResponse>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	210c      	movs	r1, #12
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f002 fec8 	bl	801034a <SDIO_GetResponse>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d00d      	beq.n	800d5e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f107 020e 	add.w	r2, r7, #14
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f003 f8a5 	bl	8010724 <SDMMC_CmdSetRelAdd>
 800d5da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <SD_InitCard+0xae>
    {
      return errorstate;
 800d5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e4:	e070      	b.n	800d6c8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d036      	beq.n	800d65c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d5ee:	89fb      	ldrh	r3, [r7, #14]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5fe:	041b      	lsls	r3, r3, #16
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f003 f86f 	bl	80106e6 <SDMMC_CmdSendCSD>
 800d608:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d612:	e059      	b.n	800d6c8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2100      	movs	r1, #0
 800d61a:	4618      	mov	r0, r3
 800d61c:	f002 fe95 	bl	801034a <SDIO_GetResponse>
 800d620:	4602      	mov	r2, r0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2104      	movs	r1, #4
 800d62c:	4618      	mov	r0, r3
 800d62e:	f002 fe8c 	bl	801034a <SDIO_GetResponse>
 800d632:	4602      	mov	r2, r0
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2108      	movs	r1, #8
 800d63e:	4618      	mov	r0, r3
 800d640:	f002 fe83 	bl	801034a <SDIO_GetResponse>
 800d644:	4602      	mov	r2, r0
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	210c      	movs	r1, #12
 800d650:	4618      	mov	r0, r3
 800d652:	f002 fe7a 	bl	801034a <SDIO_GetResponse>
 800d656:	4602      	mov	r2, r0
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2104      	movs	r1, #4
 800d662:	4618      	mov	r0, r3
 800d664:	f002 fe71 	bl	801034a <SDIO_GetResponse>
 800d668:	4603      	mov	r3, r0
 800d66a:	0d1a      	lsrs	r2, r3, #20
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d670:	f107 0310 	add.w	r3, r7, #16
 800d674:	4619      	mov	r1, r3
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff fd6e 	bl	800d158 <HAL_SD_GetCardCSD>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d682:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d686:	e01f      	b.n	800d6c8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6819      	ldr	r1, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d690:	041b      	lsls	r3, r3, #16
 800d692:	461a      	mov	r2, r3
 800d694:	f04f 0300 	mov.w	r3, #0
 800d698:	4608      	mov	r0, r1
 800d69a:	f002 ff61 	bl	8010560 <SDMMC_CmdSelDesel>
 800d69e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <SD_InitCard+0x172>
  {
    return errorstate;
 800d6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a8:	e00e      	b.n	800d6c8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681d      	ldr	r5, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	466c      	mov	r4, sp
 800d6b2:	f103 0210 	add.w	r2, r3, #16
 800d6b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d6bc:	3304      	adds	r3, #4
 800d6be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f002 fda5 	bl	8010210 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3740      	adds	r7, #64	; 0x40
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bdb0      	pop	{r4, r5, r7, pc}

0800d6d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	617b      	str	r3, [r7, #20]
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f002 ff5c 	bl	80105a6 <SDMMC_CmdGoIdleState>
 800d6ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d001      	beq.n	800d6fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	e072      	b.n	800d7e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f002 ff6f 	bl	80105e2 <SDMMC_CmdOperCond>
 800d704:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00d      	beq.n	800d728 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	f002 ff45 	bl	80105a6 <SDMMC_CmdGoIdleState>
 800d71c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d004      	beq.n	800d72e <SD_PowerON+0x5e>
    {
      return errorstate;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	e05b      	b.n	800d7e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d732:	2b01      	cmp	r3, #1
 800d734:	d137      	bne.n	800d7a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2100      	movs	r1, #0
 800d73c:	4618      	mov	r0, r3
 800d73e:	f002 ff6f 	bl	8010620 <SDMMC_CmdAppCommand>
 800d742:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d02d      	beq.n	800d7a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d74a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d74e:	e047      	b.n	800d7e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2100      	movs	r1, #0
 800d756:	4618      	mov	r0, r3
 800d758:	f002 ff62 	bl	8010620 <SDMMC_CmdAppCommand>
 800d75c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <SD_PowerON+0x98>
    {
      return errorstate;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	e03b      	b.n	800d7e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	491e      	ldr	r1, [pc, #120]	; (800d7e8 <SD_PowerON+0x118>)
 800d76e:	4618      	mov	r0, r3
 800d770:	f002 ff78 	bl	8010664 <SDMMC_CmdAppOperCommand>
 800d774:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d77c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d780:	e02e      	b.n	800d7e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f002 fdde 	bl	801034a <SDIO_GetResponse>
 800d78e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	0fdb      	lsrs	r3, r3, #31
 800d794:	2b01      	cmp	r3, #1
 800d796:	d101      	bne.n	800d79c <SD_PowerON+0xcc>
 800d798:	2301      	movs	r3, #1
 800d79a:	e000      	b.n	800d79e <SD_PowerON+0xce>
 800d79c:	2300      	movs	r3, #0
 800d79e:	613b      	str	r3, [r7, #16]

    count++;
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d802      	bhi.n	800d7b6 <SD_PowerON+0xe6>
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d0cc      	beq.n	800d750 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d902      	bls.n	800d7c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d7c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d7c4:	e00c      	b.n	800d7e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d003      	beq.n	800d7d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	645a      	str	r2, [r3, #68]	; 0x44
 800d7d6:	e002      	b.n	800d7de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3718      	adds	r7, #24
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	c1100000 	.word	0xc1100000

0800d7ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d7fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d800:	e018      	b.n	800d834 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d80a:	041b      	lsls	r3, r3, #16
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f002 ffa9 	bl	8010766 <SDMMC_CmdSendStatus>
 800d814:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	e009      	b.n	800d834 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2100      	movs	r1, #0
 800d826:	4618      	mov	r0, r3
 800d828:	f002 fd8f 	bl	801034a <SDIO_GetResponse>
 800d82c:	4602      	mov	r2, r0
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e07b      	b.n	800d946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d852:	2b00      	cmp	r3, #0
 800d854:	d108      	bne.n	800d868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d85e:	d009      	beq.n	800d874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	61da      	str	r2, [r3, #28]
 800d866:	e005      	b.n	800d874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7fa ff20 	bl	80086d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2202      	movs	r2, #2
 800d898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8c6:	431a      	orrs	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	691b      	ldr	r3, [r3, #16]
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8e4:	431a      	orrs	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8ee:	431a      	orrs	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f8:	ea42 0103 	orr.w	r1, r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	430a      	orrs	r2, r1
 800d90a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	0c1b      	lsrs	r3, r3, #16
 800d912:	f003 0104 	and.w	r1, r3, #4
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	f003 0210 	and.w	r2, r3, #16
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	430a      	orrs	r2, r1
 800d924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	69da      	ldr	r2, [r3, #28]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b088      	sub	sp, #32
 800d952:	af00      	add	r7, sp, #0
 800d954:	60f8      	str	r0, [r7, #12]
 800d956:	60b9      	str	r1, [r7, #8]
 800d958:	603b      	str	r3, [r7, #0]
 800d95a:	4613      	mov	r3, r2
 800d95c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d101      	bne.n	800d970 <HAL_SPI_Transmit+0x22>
 800d96c:	2302      	movs	r3, #2
 800d96e:	e126      	b.n	800dbbe <HAL_SPI_Transmit+0x270>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d978:	f7fb fad8 	bl	8008f2c <HAL_GetTick>
 800d97c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d97e:	88fb      	ldrh	r3, [r7, #6]
 800d980:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d002      	beq.n	800d994 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d98e:	2302      	movs	r3, #2
 800d990:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d992:	e10b      	b.n	800dbac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d002      	beq.n	800d9a0 <HAL_SPI_Transmit+0x52>
 800d99a:	88fb      	ldrh	r3, [r7, #6]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d9a4:	e102      	b.n	800dbac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2203      	movs	r2, #3
 800d9aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	88fa      	ldrh	r2, [r7, #6]
 800d9be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	88fa      	ldrh	r2, [r7, #6]
 800d9c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ec:	d10f      	bne.n	800da0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da18:	2b40      	cmp	r3, #64	; 0x40
 800da1a:	d007      	beq.n	800da2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da34:	d14b      	bne.n	800dace <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <HAL_SPI_Transmit+0xf6>
 800da3e:	8afb      	ldrh	r3, [r7, #22]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d13e      	bne.n	800dac2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da48:	881a      	ldrh	r2, [r3, #0]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da54:	1c9a      	adds	r2, r3, #2
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800da5e:	b29b      	uxth	r3, r3
 800da60:	3b01      	subs	r3, #1
 800da62:	b29a      	uxth	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800da68:	e02b      	b.n	800dac2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f003 0302 	and.w	r3, r3, #2
 800da74:	2b02      	cmp	r3, #2
 800da76:	d112      	bne.n	800da9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da7c:	881a      	ldrh	r2, [r3, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da88:	1c9a      	adds	r2, r3, #2
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800da92:	b29b      	uxth	r3, r3
 800da94:	3b01      	subs	r3, #1
 800da96:	b29a      	uxth	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	86da      	strh	r2, [r3, #54]	; 0x36
 800da9c:	e011      	b.n	800dac2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da9e:	f7fb fa45 	bl	8008f2c <HAL_GetTick>
 800daa2:	4602      	mov	r2, r0
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d803      	bhi.n	800dab6 <HAL_SPI_Transmit+0x168>
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d102      	bne.n	800dabc <HAL_SPI_Transmit+0x16e>
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800dabc:	2303      	movs	r3, #3
 800dabe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dac0:	e074      	b.n	800dbac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1ce      	bne.n	800da6a <HAL_SPI_Transmit+0x11c>
 800dacc:	e04c      	b.n	800db68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <HAL_SPI_Transmit+0x18e>
 800dad6:	8afb      	ldrh	r3, [r7, #22]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d140      	bne.n	800db5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	330c      	adds	r3, #12
 800dae6:	7812      	ldrb	r2, [r2, #0]
 800dae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daee:	1c5a      	adds	r2, r3, #1
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	3b01      	subs	r3, #1
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800db02:	e02c      	b.n	800db5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f003 0302 	and.w	r3, r3, #2
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d113      	bne.n	800db3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	330c      	adds	r3, #12
 800db1c:	7812      	ldrb	r2, [r2, #0]
 800db1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db24:	1c5a      	adds	r2, r3, #1
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db2e:	b29b      	uxth	r3, r3
 800db30:	3b01      	subs	r3, #1
 800db32:	b29a      	uxth	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	86da      	strh	r2, [r3, #54]	; 0x36
 800db38:	e011      	b.n	800db5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db3a:	f7fb f9f7 	bl	8008f2c <HAL_GetTick>
 800db3e:	4602      	mov	r2, r0
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d803      	bhi.n	800db52 <HAL_SPI_Transmit+0x204>
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db50:	d102      	bne.n	800db58 <HAL_SPI_Transmit+0x20a>
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800db5c:	e026      	b.n	800dbac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db62:	b29b      	uxth	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1cd      	bne.n	800db04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f000 fbcb 	bl	800e308 <SPI_EndRxTxTransaction>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2220      	movs	r2, #32
 800db7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10a      	bne.n	800db9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db86:	2300      	movs	r3, #0
 800db88:	613b      	str	r3, [r7, #16]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	613b      	str	r3, [r7, #16]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	613b      	str	r3, [r7, #16]
 800db9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	77fb      	strb	r3, [r7, #31]
 800dba8:	e000      	b.n	800dbac <HAL_SPI_Transmit+0x25e>
  }

error:
 800dbaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dbbc:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b088      	sub	sp, #32
 800dbca:	af02      	add	r7, sp, #8
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	603b      	str	r3, [r7, #0]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbe2:	d112      	bne.n	800dc0a <HAL_SPI_Receive+0x44>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10e      	bne.n	800dc0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2204      	movs	r2, #4
 800dbf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dbf4:	88fa      	ldrh	r2, [r7, #6]
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 f8f1 	bl	800dde8 <HAL_SPI_TransmitReceive>
 800dc06:	4603      	mov	r3, r0
 800dc08:	e0ea      	b.n	800dde0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d101      	bne.n	800dc18 <HAL_SPI_Receive+0x52>
 800dc14:	2302      	movs	r3, #2
 800dc16:	e0e3      	b.n	800dde0 <HAL_SPI_Receive+0x21a>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc20:	f7fb f984 	bl	8008f2c <HAL_GetTick>
 800dc24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d002      	beq.n	800dc38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800dc32:	2302      	movs	r3, #2
 800dc34:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc36:	e0ca      	b.n	800ddce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <HAL_SPI_Receive+0x7e>
 800dc3e:	88fb      	ldrh	r3, [r7, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc48:	e0c1      	b.n	800ddce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	88fa      	ldrh	r2, [r7, #6]
 800dc62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	88fa      	ldrh	r2, [r7, #6]
 800dc68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc90:	d10f      	bne.n	800dcb2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dcb0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcbc:	2b40      	cmp	r3, #64	; 0x40
 800dcbe:	d007      	beq.n	800dcd0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d162      	bne.n	800dd9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dcd8:	e02e      	b.n	800dd38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d115      	bne.n	800dd14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f103 020c 	add.w	r2, r3, #12
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf4:	7812      	ldrb	r2, [r2, #0]
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfe:	1c5a      	adds	r2, r3, #1
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd12:	e011      	b.n	800dd38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd14:	f7fb f90a 	bl	8008f2c <HAL_GetTick>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d803      	bhi.n	800dd2c <HAL_SPI_Receive+0x166>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd2a:	d102      	bne.n	800dd32 <HAL_SPI_Receive+0x16c>
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d102      	bne.n	800dd38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800dd32:	2303      	movs	r3, #3
 800dd34:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dd36:	e04a      	b.n	800ddce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1cb      	bne.n	800dcda <HAL_SPI_Receive+0x114>
 800dd42:	e031      	b.n	800dda8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d113      	bne.n	800dd7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68da      	ldr	r2, [r3, #12]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd5c:	b292      	uxth	r2, r2
 800dd5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd64:	1c9a      	adds	r2, r3, #2
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd78:	e011      	b.n	800dd9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd7a:	f7fb f8d7 	bl	8008f2c <HAL_GetTick>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d803      	bhi.n	800dd92 <HAL_SPI_Receive+0x1cc>
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd90:	d102      	bne.n	800dd98 <HAL_SPI_Receive+0x1d2>
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dd9c:	e017      	b.n	800ddce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1cd      	bne.n	800dd44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dda8:	693a      	ldr	r2, [r7, #16]
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f000 fa45 	bl	800e23c <SPI_EndRxTransaction>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2220      	movs	r2, #32
 800ddbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d002      	beq.n	800ddcc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	75fb      	strb	r3, [r7, #23]
 800ddca:	e000      	b.n	800ddce <HAL_SPI_Receive+0x208>
  }

error :
 800ddcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08c      	sub	sp, #48	; 0x30
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800de06:	2b01      	cmp	r3, #1
 800de08:	d101      	bne.n	800de0e <HAL_SPI_TransmitReceive+0x26>
 800de0a:	2302      	movs	r3, #2
 800de0c:	e18a      	b.n	800e124 <HAL_SPI_TransmitReceive+0x33c>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de16:	f7fb f889 	bl	8008f2c <HAL_GetTick>
 800de1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800de2c:	887b      	ldrh	r3, [r7, #2]
 800de2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800de30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de34:	2b01      	cmp	r3, #1
 800de36:	d00f      	beq.n	800de58 <HAL_SPI_TransmitReceive+0x70>
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de3e:	d107      	bne.n	800de50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d103      	bne.n	800de50 <HAL_SPI_TransmitReceive+0x68>
 800de48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	d003      	beq.n	800de58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800de50:	2302      	movs	r3, #2
 800de52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800de56:	e15b      	b.n	800e110 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d005      	beq.n	800de6a <HAL_SPI_TransmitReceive+0x82>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d002      	beq.n	800de6a <HAL_SPI_TransmitReceive+0x82>
 800de64:	887b      	ldrh	r3, [r7, #2]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d103      	bne.n	800de72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800de6a:	2301      	movs	r3, #1
 800de6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800de70:	e14e      	b.n	800e110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b04      	cmp	r3, #4
 800de7c:	d003      	beq.n	800de86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2205      	movs	r2, #5
 800de82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	887a      	ldrh	r2, [r7, #2]
 800de96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	887a      	ldrh	r2, [r7, #2]
 800de9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	887a      	ldrh	r2, [r7, #2]
 800dea8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	887a      	ldrh	r2, [r7, #2]
 800deae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec6:	2b40      	cmp	r3, #64	; 0x40
 800dec8:	d007      	beq.n	800deda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ded8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dee2:	d178      	bne.n	800dfd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <HAL_SPI_TransmitReceive+0x10a>
 800deec:	8b7b      	ldrh	r3, [r7, #26]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d166      	bne.n	800dfc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def6:	881a      	ldrh	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df02:	1c9a      	adds	r2, r3, #2
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	3b01      	subs	r3, #1
 800df10:	b29a      	uxth	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df16:	e053      	b.n	800dfc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	f003 0302 	and.w	r3, r3, #2
 800df22:	2b02      	cmp	r3, #2
 800df24:	d11b      	bne.n	800df5e <HAL_SPI_TransmitReceive+0x176>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d016      	beq.n	800df5e <HAL_SPI_TransmitReceive+0x176>
 800df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df32:	2b01      	cmp	r3, #1
 800df34:	d113      	bne.n	800df5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3a:	881a      	ldrh	r2, [r3, #0]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df46:	1c9a      	adds	r2, r3, #2
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df50:	b29b      	uxth	r3, r3
 800df52:	3b01      	subs	r3, #1
 800df54:	b29a      	uxth	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800df5a:	2300      	movs	r3, #0
 800df5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d119      	bne.n	800dfa0 <HAL_SPI_TransmitReceive+0x1b8>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df70:	b29b      	uxth	r3, r3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d014      	beq.n	800dfa0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68da      	ldr	r2, [r3, #12]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df80:	b292      	uxth	r2, r2
 800df82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	1c9a      	adds	r2, r3, #2
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df92:	b29b      	uxth	r3, r3
 800df94:	3b01      	subs	r3, #1
 800df96:	b29a      	uxth	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800df9c:	2301      	movs	r3, #1
 800df9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dfa0:	f7fa ffc4 	bl	8008f2c <HAL_GetTick>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d807      	bhi.n	800dfc0 <HAL_SPI_TransmitReceive+0x1d8>
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb6:	d003      	beq.n	800dfc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dfbe:	e0a7      	b.n	800e110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1a6      	bne.n	800df18 <HAL_SPI_TransmitReceive+0x130>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1a1      	bne.n	800df18 <HAL_SPI_TransmitReceive+0x130>
 800dfd4:	e07c      	b.n	800e0d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <HAL_SPI_TransmitReceive+0x1fc>
 800dfde:	8b7b      	ldrh	r3, [r7, #26]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d16b      	bne.n	800e0bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	330c      	adds	r3, #12
 800dfee:	7812      	ldrb	r2, [r2, #0]
 800dff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e000:	b29b      	uxth	r3, r3
 800e002:	3b01      	subs	r3, #1
 800e004:	b29a      	uxth	r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e00a:	e057      	b.n	800e0bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	f003 0302 	and.w	r3, r3, #2
 800e016:	2b02      	cmp	r3, #2
 800e018:	d11c      	bne.n	800e054 <HAL_SPI_TransmitReceive+0x26c>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e01e:	b29b      	uxth	r3, r3
 800e020:	2b00      	cmp	r3, #0
 800e022:	d017      	beq.n	800e054 <HAL_SPI_TransmitReceive+0x26c>
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	2b01      	cmp	r3, #1
 800e028:	d114      	bne.n	800e054 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	330c      	adds	r3, #12
 800e034:	7812      	ldrb	r2, [r2, #0]
 800e036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e046:	b29b      	uxth	r3, r3
 800e048:	3b01      	subs	r3, #1
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e050:	2300      	movs	r3, #0
 800e052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	689b      	ldr	r3, [r3, #8]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d119      	bne.n	800e096 <HAL_SPI_TransmitReceive+0x2ae>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e066:	b29b      	uxth	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d014      	beq.n	800e096 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e076:	b2d2      	uxtb	r2, r2
 800e078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07e:	1c5a      	adds	r2, r3, #1
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e088:	b29b      	uxth	r3, r3
 800e08a:	3b01      	subs	r3, #1
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e092:	2301      	movs	r3, #1
 800e094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e096:	f7fa ff49 	bl	8008f2c <HAL_GetTick>
 800e09a:	4602      	mov	r2, r0
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	1ad3      	subs	r3, r2, r3
 800e0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d803      	bhi.n	800e0ae <HAL_SPI_TransmitReceive+0x2c6>
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ac:	d102      	bne.n	800e0b4 <HAL_SPI_TransmitReceive+0x2cc>
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d103      	bne.n	800e0bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e0ba:	e029      	b.n	800e110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d1a2      	bne.n	800e00c <HAL_SPI_TransmitReceive+0x224>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d19d      	bne.n	800e00c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f000 f917 	bl	800e308 <SPI_EndRxTxTransaction>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d006      	beq.n	800e0ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2220      	movs	r2, #32
 800e0ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e0ec:	e010      	b.n	800e110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d10b      	bne.n	800e10e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	617b      	str	r3, [r7, #20]
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	e000      	b.n	800e110 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e10e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e124:	4618      	mov	r0, r3
 800e126:	3730      	adds	r7, #48	; 0x30
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	603b      	str	r3, [r7, #0]
 800e138:	4613      	mov	r3, r2
 800e13a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e13c:	f7fa fef6 	bl	8008f2c <HAL_GetTick>
 800e140:	4602      	mov	r2, r0
 800e142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	683a      	ldr	r2, [r7, #0]
 800e148:	4413      	add	r3, r2
 800e14a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e14c:	f7fa feee 	bl	8008f2c <HAL_GetTick>
 800e150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e152:	4b39      	ldr	r3, [pc, #228]	; (800e238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	015b      	lsls	r3, r3, #5
 800e158:	0d1b      	lsrs	r3, r3, #20
 800e15a:	69fa      	ldr	r2, [r7, #28]
 800e15c:	fb02 f303 	mul.w	r3, r2, r3
 800e160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e162:	e054      	b.n	800e20e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16a:	d050      	beq.n	800e20e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e16c:	f7fa fede 	bl	8008f2c <HAL_GetTick>
 800e170:	4602      	mov	r2, r0
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	69fa      	ldr	r2, [r7, #28]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d902      	bls.n	800e182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d13d      	bne.n	800e1fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e19a:	d111      	bne.n	800e1c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1a4:	d004      	beq.n	800e1b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1ae:	d107      	bne.n	800e1c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1c8:	d10f      	bne.n	800e1ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	e017      	b.n	800e22e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e204:	2300      	movs	r3, #0
 800e206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	4013      	ands	r3, r2
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	bf0c      	ite	eq
 800e21e:	2301      	moveq	r3, #1
 800e220:	2300      	movne	r3, #0
 800e222:	b2db      	uxtb	r3, r3
 800e224:	461a      	mov	r2, r3
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d19b      	bne.n	800e164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3720      	adds	r7, #32
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	20000120 	.word	0x20000120

0800e23c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af02      	add	r7, sp, #8
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e250:	d111      	bne.n	800e276 <SPI_EndRxTransaction+0x3a>
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e25a:	d004      	beq.n	800e266 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e264:	d107      	bne.n	800e276 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e274:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e27e:	d12a      	bne.n	800e2d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e288:	d012      	beq.n	800e2b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2200      	movs	r2, #0
 800e292:	2180      	movs	r1, #128	; 0x80
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f7ff ff49 	bl	800e12c <SPI_WaitFlagStateUntilTimeout>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02d      	beq.n	800e2fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2a4:	f043 0220 	orr.w	r2, r3, #32
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e026      	b.n	800e2fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7ff ff36 	bl	800e12c <SPI_WaitFlagStateUntilTimeout>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d01a      	beq.n	800e2fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ca:	f043 0220 	orr.w	r2, r3, #32
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	e013      	b.n	800e2fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2101      	movs	r1, #1
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f7ff ff23 	bl	800e12c <SPI_WaitFlagStateUntilTimeout>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d007      	beq.n	800e2fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f0:	f043 0220 	orr.w	r2, r3, #32
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	e000      	b.n	800e2fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
	...

0800e308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b088      	sub	sp, #32
 800e30c:	af02      	add	r7, sp, #8
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e314:	4b1b      	ldr	r3, [pc, #108]	; (800e384 <SPI_EndRxTxTransaction+0x7c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a1b      	ldr	r2, [pc, #108]	; (800e388 <SPI_EndRxTxTransaction+0x80>)
 800e31a:	fba2 2303 	umull	r2, r3, r2, r3
 800e31e:	0d5b      	lsrs	r3, r3, #21
 800e320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e324:	fb02 f303 	mul.w	r3, r2, r3
 800e328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e332:	d112      	bne.n	800e35a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2200      	movs	r2, #0
 800e33c:	2180      	movs	r1, #128	; 0x80
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff fef4 	bl	800e12c <SPI_WaitFlagStateUntilTimeout>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d016      	beq.n	800e378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e34e:	f043 0220 	orr.w	r2, r3, #32
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e356:	2303      	movs	r3, #3
 800e358:	e00f      	b.n	800e37a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00a      	beq.n	800e376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	3b01      	subs	r3, #1
 800e364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e370:	2b80      	cmp	r3, #128	; 0x80
 800e372:	d0f2      	beq.n	800e35a <SPI_EndRxTxTransaction+0x52>
 800e374:	e000      	b.n	800e378 <SPI_EndRxTxTransaction+0x70>
        break;
 800e376:	bf00      	nop
  }

  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	20000120 	.word	0x20000120
 800e388:	165e9f81 	.word	0x165e9f81

0800e38c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d001      	beq.n	800e3a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e046      	b.n	800e432 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a23      	ldr	r2, [pc, #140]	; (800e440 <HAL_TIM_Base_Start+0xb4>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d022      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3be:	d01d      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a1f      	ldr	r2, [pc, #124]	; (800e444 <HAL_TIM_Base_Start+0xb8>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d018      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a1e      	ldr	r2, [pc, #120]	; (800e448 <HAL_TIM_Base_Start+0xbc>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d013      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a1c      	ldr	r2, [pc, #112]	; (800e44c <HAL_TIM_Base_Start+0xc0>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d00e      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a1b      	ldr	r2, [pc, #108]	; (800e450 <HAL_TIM_Base_Start+0xc4>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d009      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a19      	ldr	r2, [pc, #100]	; (800e454 <HAL_TIM_Base_Start+0xc8>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d004      	beq.n	800e3fc <HAL_TIM_Base_Start+0x70>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a18      	ldr	r2, [pc, #96]	; (800e458 <HAL_TIM_Base_Start+0xcc>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d111      	bne.n	800e420 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	f003 0307 	and.w	r3, r3, #7
 800e406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2b06      	cmp	r3, #6
 800e40c:	d010      	beq.n	800e430 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f042 0201 	orr.w	r2, r2, #1
 800e41c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e41e:	e007      	b.n	800e430 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f042 0201 	orr.w	r2, r2, #1
 800e42e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3714      	adds	r7, #20
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	40010000 	.word	0x40010000
 800e444:	40000400 	.word	0x40000400
 800e448:	40000800 	.word	0x40000800
 800e44c:	40000c00 	.word	0x40000c00
 800e450:	40010400 	.word	0x40010400
 800e454:	40014000 	.word	0x40014000
 800e458:	40001800 	.word	0x40001800

0800e45c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e041      	b.n	800e4f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7fa f96e 	bl	8008764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2202      	movs	r2, #2
 800e48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3304      	adds	r3, #4
 800e498:	4619      	mov	r1, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	f000 f9b8 	bl	800e810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e4f0:	2300      	movs	r3, #0
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
	...

0800e4fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d109      	bne.n	800e520 <HAL_TIM_PWM_Start+0x24>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b01      	cmp	r3, #1
 800e516:	bf14      	ite	ne
 800e518:	2301      	movne	r3, #1
 800e51a:	2300      	moveq	r3, #0
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	e022      	b.n	800e566 <HAL_TIM_PWM_Start+0x6a>
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2b04      	cmp	r3, #4
 800e524:	d109      	bne.n	800e53a <HAL_TIM_PWM_Start+0x3e>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b01      	cmp	r3, #1
 800e530:	bf14      	ite	ne
 800e532:	2301      	movne	r3, #1
 800e534:	2300      	moveq	r3, #0
 800e536:	b2db      	uxtb	r3, r3
 800e538:	e015      	b.n	800e566 <HAL_TIM_PWM_Start+0x6a>
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	2b08      	cmp	r3, #8
 800e53e:	d109      	bne.n	800e554 <HAL_TIM_PWM_Start+0x58>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e546:	b2db      	uxtb	r3, r3
 800e548:	2b01      	cmp	r3, #1
 800e54a:	bf14      	ite	ne
 800e54c:	2301      	movne	r3, #1
 800e54e:	2300      	moveq	r3, #0
 800e550:	b2db      	uxtb	r3, r3
 800e552:	e008      	b.n	800e566 <HAL_TIM_PWM_Start+0x6a>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	bf14      	ite	ne
 800e560:	2301      	movne	r3, #1
 800e562:	2300      	moveq	r3, #0
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	e07c      	b.n	800e668 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d104      	bne.n	800e57e <HAL_TIM_PWM_Start+0x82>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2202      	movs	r2, #2
 800e578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e57c:	e013      	b.n	800e5a6 <HAL_TIM_PWM_Start+0xaa>
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b04      	cmp	r3, #4
 800e582:	d104      	bne.n	800e58e <HAL_TIM_PWM_Start+0x92>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e58c:	e00b      	b.n	800e5a6 <HAL_TIM_PWM_Start+0xaa>
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	2b08      	cmp	r3, #8
 800e592:	d104      	bne.n	800e59e <HAL_TIM_PWM_Start+0xa2>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2202      	movs	r2, #2
 800e598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e59c:	e003      	b.n	800e5a6 <HAL_TIM_PWM_Start+0xaa>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2202      	movs	r2, #2
 800e5a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f000 fb7e 	bl	800ecb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a2d      	ldr	r2, [pc, #180]	; (800e670 <HAL_TIM_PWM_Start+0x174>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d004      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0xcc>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a2c      	ldr	r2, [pc, #176]	; (800e674 <HAL_TIM_PWM_Start+0x178>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d101      	bne.n	800e5cc <HAL_TIM_PWM_Start+0xd0>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e000      	b.n	800e5ce <HAL_TIM_PWM_Start+0xd2>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d007      	beq.n	800e5e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a22      	ldr	r2, [pc, #136]	; (800e670 <HAL_TIM_PWM_Start+0x174>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d022      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5f4:	d01d      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a1f      	ldr	r2, [pc, #124]	; (800e678 <HAL_TIM_PWM_Start+0x17c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d018      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1d      	ldr	r2, [pc, #116]	; (800e67c <HAL_TIM_PWM_Start+0x180>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d013      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a1c      	ldr	r2, [pc, #112]	; (800e680 <HAL_TIM_PWM_Start+0x184>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d00e      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a16      	ldr	r2, [pc, #88]	; (800e674 <HAL_TIM_PWM_Start+0x178>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d009      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a18      	ldr	r2, [pc, #96]	; (800e684 <HAL_TIM_PWM_Start+0x188>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d004      	beq.n	800e632 <HAL_TIM_PWM_Start+0x136>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a16      	ldr	r2, [pc, #88]	; (800e688 <HAL_TIM_PWM_Start+0x18c>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d111      	bne.n	800e656 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	f003 0307 	and.w	r3, r3, #7
 800e63c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b06      	cmp	r3, #6
 800e642:	d010      	beq.n	800e666 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f042 0201 	orr.w	r2, r2, #1
 800e652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e654:	e007      	b.n	800e666 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f042 0201 	orr.w	r2, r2, #1
 800e664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	40010000 	.word	0x40010000
 800e674:	40010400 	.word	0x40010400
 800e678:	40000400 	.word	0x40000400
 800e67c:	40000800 	.word	0x40000800
 800e680:	40000c00 	.word	0x40000c00
 800e684:	40014000 	.word	0x40014000
 800e688:	40001800 	.word	0x40001800

0800e68c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e698:	2300      	movs	r3, #0
 800e69a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d101      	bne.n	800e6aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	e0ae      	b.n	800e808 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b0c      	cmp	r3, #12
 800e6b6:	f200 809f 	bhi.w	800e7f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e6ba:	a201      	add	r2, pc, #4	; (adr r2, 800e6c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c0:	0800e6f5 	.word	0x0800e6f5
 800e6c4:	0800e7f9 	.word	0x0800e7f9
 800e6c8:	0800e7f9 	.word	0x0800e7f9
 800e6cc:	0800e7f9 	.word	0x0800e7f9
 800e6d0:	0800e735 	.word	0x0800e735
 800e6d4:	0800e7f9 	.word	0x0800e7f9
 800e6d8:	0800e7f9 	.word	0x0800e7f9
 800e6dc:	0800e7f9 	.word	0x0800e7f9
 800e6e0:	0800e777 	.word	0x0800e777
 800e6e4:	0800e7f9 	.word	0x0800e7f9
 800e6e8:	0800e7f9 	.word	0x0800e7f9
 800e6ec:	0800e7f9 	.word	0x0800e7f9
 800e6f0:	0800e7b7 	.word	0x0800e7b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68b9      	ldr	r1, [r7, #8]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 f928 	bl	800e950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0208 	orr.w	r2, r2, #8
 800e70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	699a      	ldr	r2, [r3, #24]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0204 	bic.w	r2, r2, #4
 800e71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6999      	ldr	r1, [r3, #24]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	691a      	ldr	r2, [r3, #16]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	619a      	str	r2, [r3, #24]
      break;
 800e732:	e064      	b.n	800e7fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	68b9      	ldr	r1, [r7, #8]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f000 f978 	bl	800ea30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	699a      	ldr	r2, [r3, #24]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	699a      	ldr	r2, [r3, #24]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6999      	ldr	r1, [r3, #24]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	021a      	lsls	r2, r3, #8
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	430a      	orrs	r2, r1
 800e772:	619a      	str	r2, [r3, #24]
      break;
 800e774:	e043      	b.n	800e7fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 f9cd 	bl	800eb1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	69da      	ldr	r2, [r3, #28]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f042 0208 	orr.w	r2, r2, #8
 800e790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	69da      	ldr	r2, [r3, #28]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0204 	bic.w	r2, r2, #4
 800e7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	69d9      	ldr	r1, [r3, #28]
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	430a      	orrs	r2, r1
 800e7b2:	61da      	str	r2, [r3, #28]
      break;
 800e7b4:	e023      	b.n	800e7fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fa21 	bl	800ec04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	69da      	ldr	r2, [r3, #28]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69da      	ldr	r2, [r3, #28]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	69d9      	ldr	r1, [r3, #28]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	021a      	lsls	r2, r3, #8
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	430a      	orrs	r2, r1
 800e7f4:	61da      	str	r2, [r3, #28]
      break;
 800e7f6:	e002      	b.n	800e7fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	75fb      	strb	r3, [r7, #23]
      break;
 800e7fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e806:	7dfb      	ldrb	r3, [r7, #23]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a40      	ldr	r2, [pc, #256]	; (800e924 <TIM_Base_SetConfig+0x114>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d013      	beq.n	800e850 <TIM_Base_SetConfig+0x40>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e82e:	d00f      	beq.n	800e850 <TIM_Base_SetConfig+0x40>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a3d      	ldr	r2, [pc, #244]	; (800e928 <TIM_Base_SetConfig+0x118>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d00b      	beq.n	800e850 <TIM_Base_SetConfig+0x40>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4a3c      	ldr	r2, [pc, #240]	; (800e92c <TIM_Base_SetConfig+0x11c>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d007      	beq.n	800e850 <TIM_Base_SetConfig+0x40>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a3b      	ldr	r2, [pc, #236]	; (800e930 <TIM_Base_SetConfig+0x120>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d003      	beq.n	800e850 <TIM_Base_SetConfig+0x40>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a3a      	ldr	r2, [pc, #232]	; (800e934 <TIM_Base_SetConfig+0x124>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d108      	bne.n	800e862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	4313      	orrs	r3, r2
 800e860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a2f      	ldr	r2, [pc, #188]	; (800e924 <TIM_Base_SetConfig+0x114>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d02b      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e870:	d027      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a2c      	ldr	r2, [pc, #176]	; (800e928 <TIM_Base_SetConfig+0x118>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d023      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a2b      	ldr	r2, [pc, #172]	; (800e92c <TIM_Base_SetConfig+0x11c>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d01f      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a2a      	ldr	r2, [pc, #168]	; (800e930 <TIM_Base_SetConfig+0x120>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d01b      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a29      	ldr	r2, [pc, #164]	; (800e934 <TIM_Base_SetConfig+0x124>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d017      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a28      	ldr	r2, [pc, #160]	; (800e938 <TIM_Base_SetConfig+0x128>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d013      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a27      	ldr	r2, [pc, #156]	; (800e93c <TIM_Base_SetConfig+0x12c>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d00f      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a26      	ldr	r2, [pc, #152]	; (800e940 <TIM_Base_SetConfig+0x130>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d00b      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a25      	ldr	r2, [pc, #148]	; (800e944 <TIM_Base_SetConfig+0x134>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d007      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a24      	ldr	r2, [pc, #144]	; (800e948 <TIM_Base_SetConfig+0x138>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d003      	beq.n	800e8c2 <TIM_Base_SetConfig+0xb2>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a23      	ldr	r2, [pc, #140]	; (800e94c <TIM_Base_SetConfig+0x13c>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d108      	bne.n	800e8d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	689a      	ldr	r2, [r3, #8]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a0a      	ldr	r2, [pc, #40]	; (800e924 <TIM_Base_SetConfig+0x114>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d003      	beq.n	800e908 <TIM_Base_SetConfig+0xf8>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a0c      	ldr	r2, [pc, #48]	; (800e934 <TIM_Base_SetConfig+0x124>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d103      	bne.n	800e910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	691a      	ldr	r2, [r3, #16]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	615a      	str	r2, [r3, #20]
}
 800e916:	bf00      	nop
 800e918:	3714      	adds	r7, #20
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	40010000 	.word	0x40010000
 800e928:	40000400 	.word	0x40000400
 800e92c:	40000800 	.word	0x40000800
 800e930:	40000c00 	.word	0x40000c00
 800e934:	40010400 	.word	0x40010400
 800e938:	40014000 	.word	0x40014000
 800e93c:	40014400 	.word	0x40014400
 800e940:	40014800 	.word	0x40014800
 800e944:	40001800 	.word	0x40001800
 800e948:	40001c00 	.word	0x40001c00
 800e94c:	40002000 	.word	0x40002000

0800e950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	f023 0201 	bic.w	r2, r3, #1
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	4313      	orrs	r3, r2
 800e990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f023 0302 	bic.w	r3, r3, #2
 800e998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a20      	ldr	r2, [pc, #128]	; (800ea28 <TIM_OC1_SetConfig+0xd8>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d003      	beq.n	800e9b4 <TIM_OC1_SetConfig+0x64>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a1f      	ldr	r2, [pc, #124]	; (800ea2c <TIM_OC1_SetConfig+0xdc>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d10c      	bne.n	800e9ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	f023 0308 	bic.w	r3, r3, #8
 800e9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	697a      	ldr	r2, [r7, #20]
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	f023 0304 	bic.w	r3, r3, #4
 800e9cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4a15      	ldr	r2, [pc, #84]	; (800ea28 <TIM_OC1_SetConfig+0xd8>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d003      	beq.n	800e9de <TIM_OC1_SetConfig+0x8e>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a14      	ldr	r2, [pc, #80]	; (800ea2c <TIM_OC1_SetConfig+0xdc>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d111      	bne.n	800ea02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	699b      	ldr	r3, [r3, #24]
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	693a      	ldr	r2, [r7, #16]
 800ea06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	685a      	ldr	r2, [r3, #4]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	621a      	str	r2, [r3, #32]
}
 800ea1c:	bf00      	nop
 800ea1e:	371c      	adds	r7, #28
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	40010000 	.word	0x40010000
 800ea2c:	40010400 	.word	0x40010400

0800ea30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b087      	sub	sp, #28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a1b      	ldr	r3, [r3, #32]
 800ea3e:	f023 0210 	bic.w	r2, r3, #16
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a1b      	ldr	r3, [r3, #32]
 800ea4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	699b      	ldr	r3, [r3, #24]
 800ea56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	021b      	lsls	r3, r3, #8
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f023 0320 	bic.w	r3, r3, #32
 800ea7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	011b      	lsls	r3, r3, #4
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	4a22      	ldr	r2, [pc, #136]	; (800eb14 <TIM_OC2_SetConfig+0xe4>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d003      	beq.n	800ea98 <TIM_OC2_SetConfig+0x68>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a21      	ldr	r2, [pc, #132]	; (800eb18 <TIM_OC2_SetConfig+0xe8>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d10d      	bne.n	800eab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	011b      	lsls	r3, r3, #4
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a17      	ldr	r2, [pc, #92]	; (800eb14 <TIM_OC2_SetConfig+0xe4>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d003      	beq.n	800eac4 <TIM_OC2_SetConfig+0x94>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a16      	ldr	r2, [pc, #88]	; (800eb18 <TIM_OC2_SetConfig+0xe8>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d113      	bne.n	800eaec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eaca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ead2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	693a      	ldr	r2, [r7, #16]
 800eadc:	4313      	orrs	r3, r2
 800eade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	699b      	ldr	r3, [r3, #24]
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	693a      	ldr	r2, [r7, #16]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	693a      	ldr	r2, [r7, #16]
 800eaf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	697a      	ldr	r2, [r7, #20]
 800eb04:	621a      	str	r2, [r3, #32]
}
 800eb06:	bf00      	nop
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	40010000 	.word	0x40010000
 800eb18:	40010400 	.word	0x40010400

0800eb1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a1b      	ldr	r3, [r3, #32]
 800eb2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	69db      	ldr	r3, [r3, #28]
 800eb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f023 0303 	bic.w	r3, r3, #3
 800eb52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	021b      	lsls	r3, r3, #8
 800eb6c:	697a      	ldr	r2, [r7, #20]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4a21      	ldr	r2, [pc, #132]	; (800ebfc <TIM_OC3_SetConfig+0xe0>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d003      	beq.n	800eb82 <TIM_OC3_SetConfig+0x66>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a20      	ldr	r2, [pc, #128]	; (800ec00 <TIM_OC3_SetConfig+0xe4>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d10d      	bne.n	800eb9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	021b      	lsls	r3, r3, #8
 800eb90:	697a      	ldr	r2, [r7, #20]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a16      	ldr	r2, [pc, #88]	; (800ebfc <TIM_OC3_SetConfig+0xe0>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d003      	beq.n	800ebae <TIM_OC3_SetConfig+0x92>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a15      	ldr	r2, [pc, #84]	; (800ec00 <TIM_OC3_SetConfig+0xe4>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d113      	bne.n	800ebd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	011b      	lsls	r3, r3, #4
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	697a      	ldr	r2, [r7, #20]
 800ebee:	621a      	str	r2, [r3, #32]
}
 800ebf0:	bf00      	nop
 800ebf2:	371c      	adds	r7, #28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	40010000 	.word	0x40010000
 800ec00:	40010400 	.word	0x40010400

0800ec04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b087      	sub	sp, #28
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a1b      	ldr	r3, [r3, #32]
 800ec12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	69db      	ldr	r3, [r3, #28]
 800ec2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	021b      	lsls	r3, r3, #8
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	031b      	lsls	r3, r3, #12
 800ec56:	693a      	ldr	r2, [r7, #16]
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a12      	ldr	r2, [pc, #72]	; (800eca8 <TIM_OC4_SetConfig+0xa4>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d003      	beq.n	800ec6c <TIM_OC4_SetConfig+0x68>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a11      	ldr	r2, [pc, #68]	; (800ecac <TIM_OC4_SetConfig+0xa8>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d109      	bne.n	800ec80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	695b      	ldr	r3, [r3, #20]
 800ec78:	019b      	lsls	r3, r3, #6
 800ec7a:	697a      	ldr	r2, [r7, #20]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	697a      	ldr	r2, [r7, #20]
 800ec84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	685a      	ldr	r2, [r3, #4]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	693a      	ldr	r2, [r7, #16]
 800ec98:	621a      	str	r2, [r3, #32]
}
 800ec9a:	bf00      	nop
 800ec9c:	371c      	adds	r7, #28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	40010000 	.word	0x40010000
 800ecac:	40010400 	.word	0x40010400

0800ecb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b087      	sub	sp, #28
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	f003 031f 	and.w	r3, r3, #31
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6a1a      	ldr	r2, [r3, #32]
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	43db      	mvns	r3, r3
 800ecd2:	401a      	ands	r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6a1a      	ldr	r2, [r3, #32]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	f003 031f 	and.w	r3, r3, #31
 800ece2:	6879      	ldr	r1, [r7, #4]
 800ece4:	fa01 f303 	lsl.w	r3, r1, r3
 800ece8:	431a      	orrs	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	621a      	str	r2, [r3, #32]
}
 800ecee:	bf00      	nop
 800ecf0:	371c      	adds	r7, #28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
	...

0800ecfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b085      	sub	sp, #20
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d101      	bne.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed10:	2302      	movs	r3, #2
 800ed12:	e05a      	b.n	800edca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a21      	ldr	r2, [pc, #132]	; (800edd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d022      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed60:	d01d      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a1d      	ldr	r2, [pc, #116]	; (800eddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d018      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a1b      	ldr	r2, [pc, #108]	; (800ede0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d013      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a1a      	ldr	r2, [pc, #104]	; (800ede4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d00e      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a18      	ldr	r2, [pc, #96]	; (800ede8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d009      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a17      	ldr	r2, [pc, #92]	; (800edec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d004      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a15      	ldr	r2, [pc, #84]	; (800edf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d10c      	bne.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eda4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4313      	orrs	r3, r2
 800edae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	40010000 	.word	0x40010000
 800eddc:	40000400 	.word	0x40000400
 800ede0:	40000800 	.word	0x40000800
 800ede4:	40000c00 	.word	0x40000c00
 800ede8:	40010400 	.word	0x40010400
 800edec:	40014000 	.word	0x40014000
 800edf0:	40001800 	.word	0x40001800

0800edf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800edfe:	2300      	movs	r3, #0
 800ee00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d101      	bne.n	800ee10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	e03d      	b.n	800ee8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	4313      	orrs	r3, r2
 800ee32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	691b      	ldr	r3, [r3, #16]
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	695b      	ldr	r3, [r3, #20]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	69db      	ldr	r3, [r3, #28]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3714      	adds	r7, #20
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e03f      	b.n	800ef2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d106      	bne.n	800eec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7f9 fcac 	bl	800881c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2224      	movs	r2, #36	; 0x24
 800eec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68da      	ldr	r2, [r3, #12]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eeda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 ffcf 	bl	800fe80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	691a      	ldr	r2, [r3, #16]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	695a      	ldr	r2, [r3, #20]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68da      	ldr	r2, [r3, #12]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2220      	movs	r2, #32
 800ef1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2220      	movs	r2, #32
 800ef24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b08a      	sub	sp, #40	; 0x28
 800ef36:	af02      	add	r7, sp, #8
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	60b9      	str	r1, [r7, #8]
 800ef3c:	603b      	str	r3, [r7, #0]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ef42:	2300      	movs	r3, #0
 800ef44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	2b20      	cmp	r3, #32
 800ef50:	d17c      	bne.n	800f04c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d002      	beq.n	800ef5e <HAL_UART_Transmit+0x2c>
 800ef58:	88fb      	ldrh	r3, [r7, #6]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e075      	b.n	800f04e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d101      	bne.n	800ef70 <HAL_UART_Transmit+0x3e>
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	e06e      	b.n	800f04e <HAL_UART_Transmit+0x11c>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2221      	movs	r2, #33	; 0x21
 800ef82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef86:	f7f9 ffd1 	bl	8008f2c <HAL_GetTick>
 800ef8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	88fa      	ldrh	r2, [r7, #6]
 800ef90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	88fa      	ldrh	r2, [r7, #6]
 800ef96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efa0:	d108      	bne.n	800efb4 <HAL_UART_Transmit+0x82>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	691b      	ldr	r3, [r3, #16]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d104      	bne.n	800efb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800efaa:	2300      	movs	r3, #0
 800efac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	61bb      	str	r3, [r7, #24]
 800efb2:	e003      	b.n	800efbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800efc4:	e02a      	b.n	800f01c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2200      	movs	r2, #0
 800efce:	2180      	movs	r1, #128	; 0x80
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f000 fc51 	bl	800f878 <UART_WaitOnFlagUntilTimeout>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800efdc:	2303      	movs	r3, #3
 800efde:	e036      	b.n	800f04e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10b      	bne.n	800effe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	881b      	ldrh	r3, [r3, #0]
 800efea:	461a      	mov	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	3302      	adds	r3, #2
 800effa:	61bb      	str	r3, [r7, #24]
 800effc:	e007      	b.n	800f00e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	781a      	ldrb	r2, [r3, #0]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	3301      	adds	r3, #1
 800f00c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f012:	b29b      	uxth	r3, r3
 800f014:	3b01      	subs	r3, #1
 800f016:	b29a      	uxth	r2, r3
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f020:	b29b      	uxth	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1cf      	bne.n	800efc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	2200      	movs	r2, #0
 800f02e:	2140      	movs	r1, #64	; 0x40
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f000 fc21 	bl	800f878 <UART_WaitOnFlagUntilTimeout>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f03c:	2303      	movs	r3, #3
 800f03e:	e006      	b.n	800f04e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2220      	movs	r2, #32
 800f044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	e000      	b.n	800f04e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f04c:	2302      	movs	r3, #2
  }
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3720      	adds	r7, #32
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b084      	sub	sp, #16
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	4613      	mov	r3, r2
 800f062:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b20      	cmp	r3, #32
 800f06e:	d11d      	bne.n	800f0ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d002      	beq.n	800f07c <HAL_UART_Receive_IT+0x26>
 800f076:	88fb      	ldrh	r3, [r7, #6]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e016      	b.n	800f0ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f086:	2b01      	cmp	r3, #1
 800f088:	d101      	bne.n	800f08e <HAL_UART_Receive_IT+0x38>
 800f08a:	2302      	movs	r3, #2
 800f08c:	e00f      	b.n	800f0ae <HAL_UART_Receive_IT+0x58>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f09c:	88fb      	ldrh	r3, [r7, #6]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 fc56 	bl	800f954 <UART_Start_Receive_IT>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	e000      	b.n	800f0ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f0ac:	2302      	movs	r3, #2
  }
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	60f8      	str	r0, [r7, #12]
 800f0be:	60b9      	str	r1, [r7, #8]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	2b20      	cmp	r3, #32
 800f0ce:	d11d      	bne.n	800f10c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d002      	beq.n	800f0dc <HAL_UART_Receive_DMA+0x26>
 800f0d6:	88fb      	ldrh	r3, [r7, #6]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e016      	b.n	800f10e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d101      	bne.n	800f0ee <HAL_UART_Receive_DMA+0x38>
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	e00f      	b.n	800f10e <HAL_UART_Receive_DMA+0x58>
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f0fc:	88fb      	ldrh	r3, [r7, #6]
 800f0fe:	461a      	mov	r2, r3
 800f100:	68b9      	ldr	r1, [r7, #8]
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f000 fc60 	bl	800f9c8 <UART_Start_Receive_DMA>
 800f108:	4603      	mov	r3, r0
 800f10a:	e000      	b.n	800f10e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f10c:	2302      	movs	r3, #2
  }
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b0ba      	sub	sp, #232	; 0xe8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	695b      	ldr	r3, [r3, #20]
 800f13a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f13e:	2300      	movs	r3, #0
 800f140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f144:	2300      	movs	r3, #0
 800f146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f14e:	f003 030f 	and.w	r3, r3, #15
 800f152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10f      	bne.n	800f17e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f162:	f003 0320 	and.w	r3, r3, #32
 800f166:	2b00      	cmp	r3, #0
 800f168:	d009      	beq.n	800f17e <HAL_UART_IRQHandler+0x66>
 800f16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f16e:	f003 0320 	and.w	r3, r3, #32
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fdc7 	bl	800fd0a <UART_Receive_IT>
      return;
 800f17c:	e256      	b.n	800f62c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f17e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 80de 	beq.w	800f344 <HAL_UART_IRQHandler+0x22c>
 800f188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d106      	bne.n	800f1a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f198:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f000 80d1 	beq.w	800f344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00b      	beq.n	800f1c6 <HAL_UART_IRQHandler+0xae>
 800f1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d005      	beq.n	800f1c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1be:	f043 0201 	orr.w	r2, r3, #1
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1ca:	f003 0304 	and.w	r3, r3, #4
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00b      	beq.n	800f1ea <HAL_UART_IRQHandler+0xd2>
 800f1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d005      	beq.n	800f1ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e2:	f043 0202 	orr.w	r2, r3, #2
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1ee:	f003 0302 	and.w	r3, r3, #2
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00b      	beq.n	800f20e <HAL_UART_IRQHandler+0xf6>
 800f1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d005      	beq.n	800f20e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f206:	f043 0204 	orr.w	r2, r3, #4
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f212:	f003 0308 	and.w	r3, r3, #8
 800f216:	2b00      	cmp	r3, #0
 800f218:	d011      	beq.n	800f23e <HAL_UART_IRQHandler+0x126>
 800f21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f21e:	f003 0320 	and.w	r3, r3, #32
 800f222:	2b00      	cmp	r3, #0
 800f224:	d105      	bne.n	800f232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d005      	beq.n	800f23e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f236:	f043 0208 	orr.w	r2, r3, #8
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f242:	2b00      	cmp	r3, #0
 800f244:	f000 81ed 	beq.w	800f622 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f24c:	f003 0320 	and.w	r3, r3, #32
 800f250:	2b00      	cmp	r3, #0
 800f252:	d008      	beq.n	800f266 <HAL_UART_IRQHandler+0x14e>
 800f254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f258:	f003 0320 	and.w	r3, r3, #32
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 fd52 	bl	800fd0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	695b      	ldr	r3, [r3, #20]
 800f26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f270:	2b40      	cmp	r3, #64	; 0x40
 800f272:	bf0c      	ite	eq
 800f274:	2301      	moveq	r3, #1
 800f276:	2300      	movne	r3, #0
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f282:	f003 0308 	and.w	r3, r3, #8
 800f286:	2b00      	cmp	r3, #0
 800f288:	d103      	bne.n	800f292 <HAL_UART_IRQHandler+0x17a>
 800f28a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d04f      	beq.n	800f332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fc5a 	bl	800fb4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	695b      	ldr	r3, [r3, #20]
 800f29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a2:	2b40      	cmp	r3, #64	; 0x40
 800f2a4:	d141      	bne.n	800f32a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3314      	adds	r3, #20
 800f2ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2b4:	e853 3f00 	ldrex	r3, [r3]
 800f2b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f2bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3314      	adds	r3, #20
 800f2ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f2d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f2de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1d9      	bne.n	800f2a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d013      	beq.n	800f322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2fe:	4a7d      	ldr	r2, [pc, #500]	; (800f4f4 <HAL_UART_IRQHandler+0x3dc>)
 800f300:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f306:	4618      	mov	r0, r3
 800f308:	f7fa fcd0 	bl	8009cac <HAL_DMA_Abort_IT>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d016      	beq.n	800f340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f31c:	4610      	mov	r0, r2
 800f31e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f320:	e00e      	b.n	800f340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f99a 	bl	800f65c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f328:	e00a      	b.n	800f340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 f996 	bl	800f65c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f330:	e006      	b.n	800f340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 f992 	bl	800f65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800f33e:	e170      	b.n	800f622 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f340:	bf00      	nop
    return;
 800f342:	e16e      	b.n	800f622 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f348:	2b01      	cmp	r3, #1
 800f34a:	f040 814a 	bne.w	800f5e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f352:	f003 0310 	and.w	r3, r3, #16
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 8143 	beq.w	800f5e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f360:	f003 0310 	and.w	r3, r3, #16
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 813c 	beq.w	800f5e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f36a:	2300      	movs	r3, #0
 800f36c:	60bb      	str	r3, [r7, #8]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60bb      	str	r3, [r7, #8]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	60bb      	str	r3, [r7, #8]
 800f37e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	695b      	ldr	r3, [r3, #20]
 800f386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f38a:	2b40      	cmp	r3, #64	; 0x40
 800f38c:	f040 80b4 	bne.w	800f4f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f39c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f000 8140 	beq.w	800f626 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f3aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	f080 8139 	bcs.w	800f626 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f3ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c0:	69db      	ldr	r3, [r3, #28]
 800f3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3c6:	f000 8088 	beq.w	800f4da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	330c      	adds	r3, #12
 800f3d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3d8:	e853 3f00 	ldrex	r3, [r3]
 800f3dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f3e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	330c      	adds	r3, #12
 800f3f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f3f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f3fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f406:	e841 2300 	strex	r3, r2, [r1]
 800f40a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f40e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1d9      	bne.n	800f3ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3314      	adds	r3, #20
 800f41c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f420:	e853 3f00 	ldrex	r3, [r3]
 800f424:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f428:	f023 0301 	bic.w	r3, r3, #1
 800f42c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3314      	adds	r3, #20
 800f436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f43a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f43e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f440:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f446:	e841 2300 	strex	r3, r2, [r1]
 800f44a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f44c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1e1      	bne.n	800f416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	3314      	adds	r3, #20
 800f458:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f45a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f45c:	e853 3f00 	ldrex	r3, [r3]
 800f460:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3314      	adds	r3, #20
 800f472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f476:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f478:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f47a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f47c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f47e:	e841 2300 	strex	r3, r2, [r1]
 800f482:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f486:	2b00      	cmp	r3, #0
 800f488:	d1e3      	bne.n	800f452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2220      	movs	r2, #32
 800f48e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	330c      	adds	r3, #12
 800f49e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a2:	e853 3f00 	ldrex	r3, [r3]
 800f4a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f4a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4aa:	f023 0310 	bic.w	r3, r3, #16
 800f4ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	330c      	adds	r3, #12
 800f4b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f4bc:	65ba      	str	r2, [r7, #88]	; 0x58
 800f4be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4c4:	e841 2300 	strex	r3, r2, [r1]
 800f4c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1e3      	bne.n	800f498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fa fb79 	bl	8009bcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 f8c0 	bl	800f670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f4f0:	e099      	b.n	800f626 <HAL_UART_IRQHandler+0x50e>
 800f4f2:	bf00      	nop
 800f4f4:	0800fc13 	.word	0x0800fc13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f500:	b29b      	uxth	r3, r3
 800f502:	1ad3      	subs	r3, r2, r3
 800f504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f000 808b 	beq.w	800f62a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800f514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 8086 	beq.w	800f62a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	330c      	adds	r3, #12
 800f524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f528:	e853 3f00 	ldrex	r3, [r3]
 800f52c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	330c      	adds	r3, #12
 800f53e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f542:	647a      	str	r2, [r7, #68]	; 0x44
 800f544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e3      	bne.n	800f51e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	3314      	adds	r3, #20
 800f55c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	623b      	str	r3, [r7, #32]
   return(result);
 800f566:	6a3b      	ldr	r3, [r7, #32]
 800f568:	f023 0301 	bic.w	r3, r3, #1
 800f56c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3314      	adds	r3, #20
 800f576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f57a:	633a      	str	r2, [r7, #48]	; 0x30
 800f57c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f582:	e841 2300 	strex	r3, r2, [r1]
 800f586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1e3      	bne.n	800f556 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2220      	movs	r2, #32
 800f592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	330c      	adds	r3, #12
 800f5a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	e853 3f00 	ldrex	r3, [r3]
 800f5aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f023 0310 	bic.w	r3, r3, #16
 800f5b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	330c      	adds	r3, #12
 800f5bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f5c0:	61fa      	str	r2, [r7, #28]
 800f5c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c4:	69b9      	ldr	r1, [r7, #24]
 800f5c6:	69fa      	ldr	r2, [r7, #28]
 800f5c8:	e841 2300 	strex	r3, r2, [r1]
 800f5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1e3      	bne.n	800f59c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f5d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f848 	bl	800f670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f5e0:	e023      	b.n	800f62a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <HAL_UART_IRQHandler+0x4ea>
 800f5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 fb1d 	bl	800fc3a <UART_Transmit_IT>
    return;
 800f600:	e014      	b.n	800f62c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00e      	beq.n	800f62c <HAL_UART_IRQHandler+0x514>
 800f60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f616:	2b00      	cmp	r3, #0
 800f618:	d008      	beq.n	800f62c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fb5d 	bl	800fcda <UART_EndTransmit_IT>
    return;
 800f620:	e004      	b.n	800f62c <HAL_UART_IRQHandler+0x514>
    return;
 800f622:	bf00      	nop
 800f624:	e002      	b.n	800f62c <HAL_UART_IRQHandler+0x514>
      return;
 800f626:	bf00      	nop
 800f628:	e000      	b.n	800f62c <HAL_UART_IRQHandler+0x514>
      return;
 800f62a:	bf00      	nop
  }
}
 800f62c:	37e8      	adds	r7, #232	; 0xe8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop

0800f634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f63c:	bf00      	nop
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f650:	bf00      	nop
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	460b      	mov	r3, r1
 800f67a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f67c:	bf00      	nop
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b09c      	sub	sp, #112	; 0x70
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f694:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d172      	bne.n	800f78a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	330c      	adds	r3, #12
 800f6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	330c      	adds	r3, #12
 800f6c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800f6cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f6d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6d2:	e841 2300 	strex	r3, r2, [r1]
 800f6d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1e5      	bne.n	800f6aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3314      	adds	r3, #20
 800f6e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e8:	e853 3f00 	ldrex	r3, [r3]
 800f6ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f0:	f023 0301 	bic.w	r3, r3, #1
 800f6f4:	667b      	str	r3, [r7, #100]	; 0x64
 800f6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3314      	adds	r3, #20
 800f6fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f6fe:	647a      	str	r2, [r7, #68]	; 0x44
 800f700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f706:	e841 2300 	strex	r3, r2, [r1]
 800f70a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d1e5      	bne.n	800f6de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	3314      	adds	r3, #20
 800f718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71c:	e853 3f00 	ldrex	r3, [r3]
 800f720:	623b      	str	r3, [r7, #32]
   return(result);
 800f722:	6a3b      	ldr	r3, [r7, #32]
 800f724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f728:	663b      	str	r3, [r7, #96]	; 0x60
 800f72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	3314      	adds	r3, #20
 800f730:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f732:	633a      	str	r2, [r7, #48]	; 0x30
 800f734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f73a:	e841 2300 	strex	r3, r2, [r1]
 800f73e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1e5      	bne.n	800f712 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f748:	2220      	movs	r2, #32
 800f74a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f74e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f752:	2b01      	cmp	r3, #1
 800f754:	d119      	bne.n	800f78a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	330c      	adds	r3, #12
 800f75c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	e853 3f00 	ldrex	r3, [r3]
 800f764:	60fb      	str	r3, [r7, #12]
   return(result);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f023 0310 	bic.w	r3, r3, #16
 800f76c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	330c      	adds	r3, #12
 800f774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f776:	61fa      	str	r2, [r7, #28]
 800f778:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f77a:	69b9      	ldr	r1, [r7, #24]
 800f77c:	69fa      	ldr	r2, [r7, #28]
 800f77e:	e841 2300 	strex	r3, r2, [r1]
 800f782:	617b      	str	r3, [r7, #20]
   return(result);
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d1e5      	bne.n	800f756 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d106      	bne.n	800f7a0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f796:	4619      	mov	r1, r3
 800f798:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f79a:	f7ff ff69 	bl	800f670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f79e:	e002      	b.n	800f7a6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800f7a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f7a2:	f7f6 ffb1 	bl	8006708 <HAL_UART_RxCpltCallback>
}
 800f7a6:	bf00      	nop
 800f7a8:	3770      	adds	r7, #112	; 0x70
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d108      	bne.n	800f7d6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f7c8:	085b      	lsrs	r3, r3, #1
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f7ff ff4e 	bl	800f670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f7d4:	e002      	b.n	800f7dc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f7ff ff36 	bl	800f648 <HAL_UART_RxHalfCpltCallback>
}
 800f7dc:	bf00      	nop
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	695b      	ldr	r3, [r3, #20]
 800f7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f800:	2b80      	cmp	r3, #128	; 0x80
 800f802:	bf0c      	ite	eq
 800f804:	2301      	moveq	r3, #1
 800f806:	2300      	movne	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b21      	cmp	r3, #33	; 0x21
 800f816:	d108      	bne.n	800f82a <UART_DMAError+0x46>
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d005      	beq.n	800f82a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2200      	movs	r2, #0
 800f822:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f824:	68b8      	ldr	r0, [r7, #8]
 800f826:	f000 f969 	bl	800fafc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	695b      	ldr	r3, [r3, #20]
 800f830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f834:	2b40      	cmp	r3, #64	; 0x40
 800f836:	bf0c      	ite	eq
 800f838:	2301      	moveq	r3, #1
 800f83a:	2300      	movne	r3, #0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b22      	cmp	r3, #34	; 0x22
 800f84a:	d108      	bne.n	800f85e <UART_DMAError+0x7a>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d005      	beq.n	800f85e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	2200      	movs	r2, #0
 800f856:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f858:	68b8      	ldr	r0, [r7, #8]
 800f85a:	f000 f977 	bl	800fb4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f862:	f043 0210 	orr.w	r2, r3, #16
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f86a:	68b8      	ldr	r0, [r7, #8]
 800f86c:	f7ff fef6 	bl	800f65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f870:	bf00      	nop
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b090      	sub	sp, #64	; 0x40
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	603b      	str	r3, [r7, #0]
 800f884:	4613      	mov	r3, r2
 800f886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f888:	e050      	b.n	800f92c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f890:	d04c      	beq.n	800f92c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f894:	2b00      	cmp	r3, #0
 800f896:	d007      	beq.n	800f8a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f898:	f7f9 fb48 	bl	8008f2c <HAL_GetTick>
 800f89c:	4602      	mov	r2, r0
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d241      	bcs.n	800f92c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	330c      	adds	r3, #12
 800f8ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b2:	e853 3f00 	ldrex	r3, [r3]
 800f8b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	330c      	adds	r3, #12
 800f8c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8c8:	637a      	str	r2, [r7, #52]	; 0x34
 800f8ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8d0:	e841 2300 	strex	r3, r2, [r1]
 800f8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1e5      	bne.n	800f8a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	3314      	adds	r3, #20
 800f8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	e853 3f00 	ldrex	r3, [r3]
 800f8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	f023 0301 	bic.w	r3, r3, #1
 800f8f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	3314      	adds	r3, #20
 800f8fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8fc:	623a      	str	r2, [r7, #32]
 800f8fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f900:	69f9      	ldr	r1, [r7, #28]
 800f902:	6a3a      	ldr	r2, [r7, #32]
 800f904:	e841 2300 	strex	r3, r2, [r1]
 800f908:	61bb      	str	r3, [r7, #24]
   return(result);
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1e5      	bne.n	800f8dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2220      	movs	r2, #32
 800f914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2220      	movs	r2, #32
 800f91c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f928:	2303      	movs	r3, #3
 800f92a:	e00f      	b.n	800f94c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	4013      	ands	r3, r2
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	429a      	cmp	r2, r3
 800f93a:	bf0c      	ite	eq
 800f93c:	2301      	moveq	r3, #1
 800f93e:	2300      	movne	r3, #0
 800f940:	b2db      	uxtb	r3, r3
 800f942:	461a      	mov	r2, r3
 800f944:	79fb      	ldrb	r3, [r7, #7]
 800f946:	429a      	cmp	r2, r3
 800f948:	d09f      	beq.n	800f88a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3740      	adds	r7, #64	; 0x40
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f954:	b480      	push	{r7}
 800f956:	b085      	sub	sp, #20
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	4613      	mov	r3, r2
 800f960:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	68ba      	ldr	r2, [r7, #8]
 800f966:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	88fa      	ldrh	r2, [r7, #6]
 800f96c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	88fa      	ldrh	r2, [r7, #6]
 800f972:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2222      	movs	r2, #34	; 0x22
 800f97e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2200      	movs	r2, #0
 800f986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f998:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	695a      	ldr	r2, [r3, #20]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f042 0201 	orr.w	r2, r2, #1
 800f9a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68da      	ldr	r2, [r3, #12]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f042 0220 	orr.w	r2, r2, #32
 800f9b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f9ba:	2300      	movs	r3, #0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3714      	adds	r7, #20
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b098      	sub	sp, #96	; 0x60
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	88fa      	ldrh	r2, [r7, #6]
 800f9e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2222      	movs	r2, #34	; 0x22
 800f9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f4:	4a3e      	ldr	r2, [pc, #248]	; (800faf0 <UART_Start_Receive_DMA+0x128>)
 800f9f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9fc:	4a3d      	ldr	r2, [pc, #244]	; (800faf4 <UART_Start_Receive_DMA+0x12c>)
 800f9fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa04:	4a3c      	ldr	r2, [pc, #240]	; (800faf8 <UART_Start_Receive_DMA+0x130>)
 800fa06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fa10:	f107 0308 	add.w	r3, r7, #8
 800fa14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	3304      	adds	r3, #4
 800fa20:	4619      	mov	r1, r3
 800fa22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	88fb      	ldrh	r3, [r7, #6]
 800fa28:	f7fa f878 	bl	8009b1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	613b      	str	r3, [r7, #16]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	330c      	adds	r3, #12
 800fa50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa54:	e853 3f00 	ldrex	r3, [r3]
 800fa58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa60:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	330c      	adds	r3, #12
 800fa68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fa6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa72:	e841 2300 	strex	r3, r2, [r1]
 800fa76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fa78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1e5      	bne.n	800fa4a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3314      	adds	r3, #20
 800fa84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	e853 3f00 	ldrex	r3, [r3]
 800fa8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa90:	f043 0301 	orr.w	r3, r3, #1
 800fa94:	657b      	str	r3, [r7, #84]	; 0x54
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	3314      	adds	r3, #20
 800fa9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa9e:	63ba      	str	r2, [r7, #56]	; 0x38
 800faa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800faa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faa6:	e841 2300 	strex	r3, r2, [r1]
 800faaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800faac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d1e5      	bne.n	800fa7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	3314      	adds	r3, #20
 800fab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	e853 3f00 	ldrex	r3, [r3]
 800fac0:	617b      	str	r3, [r7, #20]
   return(result);
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac8:	653b      	str	r3, [r7, #80]	; 0x50
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3314      	adds	r3, #20
 800fad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fad2:	627a      	str	r2, [r7, #36]	; 0x24
 800fad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad6:	6a39      	ldr	r1, [r7, #32]
 800fad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fada:	e841 2300 	strex	r3, r2, [r1]
 800fade:	61fb      	str	r3, [r7, #28]
   return(result);
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d1e5      	bne.n	800fab2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fae6:	2300      	movs	r3, #0
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3760      	adds	r7, #96	; 0x60
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	0800f689 	.word	0x0800f689
 800faf4:	0800f7af 	.word	0x0800f7af
 800faf8:	0800f7e5 	.word	0x0800f7e5

0800fafc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b089      	sub	sp, #36	; 0x24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	330c      	adds	r3, #12
 800fb0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	e853 3f00 	ldrex	r3, [r3]
 800fb12:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb1a:	61fb      	str	r3, [r7, #28]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	330c      	adds	r3, #12
 800fb22:	69fa      	ldr	r2, [r7, #28]
 800fb24:	61ba      	str	r2, [r7, #24]
 800fb26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb28:	6979      	ldr	r1, [r7, #20]
 800fb2a:	69ba      	ldr	r2, [r7, #24]
 800fb2c:	e841 2300 	strex	r3, r2, [r1]
 800fb30:	613b      	str	r3, [r7, #16]
   return(result);
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1e5      	bne.n	800fb04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2220      	movs	r2, #32
 800fb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800fb40:	bf00      	nop
 800fb42:	3724      	adds	r7, #36	; 0x24
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b095      	sub	sp, #84	; 0x54
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	330c      	adds	r3, #12
 800fb5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5e:	e853 3f00 	ldrex	r3, [r3]
 800fb62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	330c      	adds	r3, #12
 800fb72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb74:	643a      	str	r2, [r7, #64]	; 0x40
 800fb76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb7c:	e841 2300 	strex	r3, r2, [r1]
 800fb80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1e5      	bne.n	800fb54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3314      	adds	r3, #20
 800fb8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	e853 3f00 	ldrex	r3, [r3]
 800fb96:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	f023 0301 	bic.w	r3, r3, #1
 800fb9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	3314      	adds	r3, #20
 800fba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbb0:	e841 2300 	strex	r3, r2, [r1]
 800fbb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d1e5      	bne.n	800fb88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d119      	bne.n	800fbf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	330c      	adds	r3, #12
 800fbca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	e853 3f00 	ldrex	r3, [r3]
 800fbd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	f023 0310 	bic.w	r3, r3, #16
 800fbda:	647b      	str	r3, [r7, #68]	; 0x44
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	330c      	adds	r3, #12
 800fbe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbe4:	61ba      	str	r2, [r7, #24]
 800fbe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe8:	6979      	ldr	r1, [r7, #20]
 800fbea:	69ba      	ldr	r2, [r7, #24]
 800fbec:	e841 2300 	strex	r3, r2, [r1]
 800fbf0:	613b      	str	r3, [r7, #16]
   return(result);
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1e5      	bne.n	800fbc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2220      	movs	r2, #32
 800fbfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fc06:	bf00      	nop
 800fc08:	3754      	adds	r7, #84	; 0x54
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc12:	b580      	push	{r7, lr}
 800fc14:	b084      	sub	sp, #16
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7ff fd15 	bl	800f65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc32:	bf00      	nop
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b085      	sub	sp, #20
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b21      	cmp	r3, #33	; 0x21
 800fc4c:	d13e      	bne.n	800fccc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc56:	d114      	bne.n	800fc82 <UART_Transmit_IT+0x48>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d110      	bne.n	800fc82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6a1b      	ldr	r3, [r3, #32]
 800fc64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	1c9a      	adds	r2, r3, #2
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	621a      	str	r2, [r3, #32]
 800fc80:	e008      	b.n	800fc94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	1c59      	adds	r1, r3, #1
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	6211      	str	r1, [r2, #32]
 800fc8c:	781a      	ldrb	r2, [r3, #0]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	4619      	mov	r1, r3
 800fca2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10f      	bne.n	800fcc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	68da      	ldr	r2, [r3, #12]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	68da      	ldr	r2, [r3, #12]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fcc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e000      	b.n	800fcce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fccc:	2302      	movs	r3, #2
  }
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68da      	ldr	r2, [r3, #12]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7ff fc9a 	bl	800f634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b08c      	sub	sp, #48	; 0x30
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	2b22      	cmp	r3, #34	; 0x22
 800fd1c:	f040 80ab 	bne.w	800fe76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd28:	d117      	bne.n	800fd5a <UART_Receive_IT+0x50>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d113      	bne.n	800fd5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800fd32:	2300      	movs	r3, #0
 800fd34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd52:	1c9a      	adds	r2, r3, #2
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	629a      	str	r2, [r3, #40]	; 0x28
 800fd58:	e026      	b.n	800fda8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800fd60:	2300      	movs	r3, #0
 800fd62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	689b      	ldr	r3, [r3, #8]
 800fd68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd6c:	d007      	beq.n	800fd7e <UART_Receive_IT+0x74>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d10a      	bne.n	800fd8c <UART_Receive_IT+0x82>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	691b      	ldr	r3, [r3, #16]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d106      	bne.n	800fd8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	b2da      	uxtb	r2, r3
 800fd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd88:	701a      	strb	r2, [r3, #0]
 800fd8a:	e008      	b.n	800fd9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	3b01      	subs	r3, #1
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d15a      	bne.n	800fe72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	68da      	ldr	r2, [r3, #12]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f022 0220 	bic.w	r2, r2, #32
 800fdca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68da      	ldr	r2, [r3, #12]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fdda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	695a      	ldr	r2, [r3, #20]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f022 0201 	bic.w	r2, r2, #1
 800fdea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d135      	bne.n	800fe68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	330c      	adds	r3, #12
 800fe08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	e853 3f00 	ldrex	r3, [r3]
 800fe10:	613b      	str	r3, [r7, #16]
   return(result);
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	f023 0310 	bic.w	r3, r3, #16
 800fe18:	627b      	str	r3, [r7, #36]	; 0x24
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	330c      	adds	r3, #12
 800fe20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe22:	623a      	str	r2, [r7, #32]
 800fe24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe26:	69f9      	ldr	r1, [r7, #28]
 800fe28:	6a3a      	ldr	r2, [r7, #32]
 800fe2a:	e841 2300 	strex	r3, r2, [r1]
 800fe2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d1e5      	bne.n	800fe02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f003 0310 	and.w	r3, r3, #16
 800fe40:	2b10      	cmp	r3, #16
 800fe42:	d10a      	bne.n	800fe5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fe44:	2300      	movs	r3, #0
 800fe46:	60fb      	str	r3, [r7, #12]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	60fb      	str	r3, [r7, #12]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	60fb      	str	r3, [r7, #12]
 800fe58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7ff fc05 	bl	800f670 <HAL_UARTEx_RxEventCallback>
 800fe66:	e002      	b.n	800fe6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7f6 fc4d 	bl	8006708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e002      	b.n	800fe78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	e000      	b.n	800fe78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800fe76:	2302      	movs	r3, #2
  }
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3730      	adds	r7, #48	; 0x30
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe84:	b09f      	sub	sp, #124	; 0x7c
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fe94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe96:	68d9      	ldr	r1, [r3, #12]
 800fe98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	ea40 0301 	orr.w	r3, r0, r1
 800fea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fea4:	689a      	ldr	r2, [r3, #8]
 800fea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	431a      	orrs	r2, r3
 800feac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feae:	695b      	ldr	r3, [r3, #20]
 800feb0:	431a      	orrs	r2, r3
 800feb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feb4:	69db      	ldr	r3, [r3, #28]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800feba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fec4:	f021 010c 	bic.w	r1, r1, #12
 800fec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fece:	430b      	orrs	r3, r1
 800fed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fede:	6999      	ldr	r1, [r3, #24]
 800fee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	ea40 0301 	orr.w	r3, r0, r1
 800fee8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800feea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	4bc5      	ldr	r3, [pc, #788]	; (8010204 <UART_SetConfig+0x384>)
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d004      	beq.n	800fefe <UART_SetConfig+0x7e>
 800fef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	4bc3      	ldr	r3, [pc, #780]	; (8010208 <UART_SetConfig+0x388>)
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d103      	bne.n	800ff06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fefe:	f7fc fd05 	bl	800c90c <HAL_RCC_GetPCLK2Freq>
 800ff02:	6778      	str	r0, [r7, #116]	; 0x74
 800ff04:	e002      	b.n	800ff0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ff06:	f7fc fced 	bl	800c8e4 <HAL_RCC_GetPCLK1Freq>
 800ff0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff0e:	69db      	ldr	r3, [r3, #28]
 800ff10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff14:	f040 80b6 	bne.w	8010084 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ff18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff1a:	461c      	mov	r4, r3
 800ff1c:	f04f 0500 	mov.w	r5, #0
 800ff20:	4622      	mov	r2, r4
 800ff22:	462b      	mov	r3, r5
 800ff24:	1891      	adds	r1, r2, r2
 800ff26:	6439      	str	r1, [r7, #64]	; 0x40
 800ff28:	415b      	adcs	r3, r3
 800ff2a:	647b      	str	r3, [r7, #68]	; 0x44
 800ff2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ff30:	1912      	adds	r2, r2, r4
 800ff32:	eb45 0303 	adc.w	r3, r5, r3
 800ff36:	f04f 0000 	mov.w	r0, #0
 800ff3a:	f04f 0100 	mov.w	r1, #0
 800ff3e:	00d9      	lsls	r1, r3, #3
 800ff40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ff44:	00d0      	lsls	r0, r2, #3
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	1911      	adds	r1, r2, r4
 800ff4c:	6639      	str	r1, [r7, #96]	; 0x60
 800ff4e:	416b      	adcs	r3, r5
 800ff50:	667b      	str	r3, [r7, #100]	; 0x64
 800ff52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	461a      	mov	r2, r3
 800ff58:	f04f 0300 	mov.w	r3, #0
 800ff5c:	1891      	adds	r1, r2, r2
 800ff5e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ff60:	415b      	adcs	r3, r3
 800ff62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ff68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ff6c:	f7f0 fe8c 	bl	8000c88 <__aeabi_uldivmod>
 800ff70:	4602      	mov	r2, r0
 800ff72:	460b      	mov	r3, r1
 800ff74:	4ba5      	ldr	r3, [pc, #660]	; (801020c <UART_SetConfig+0x38c>)
 800ff76:	fba3 2302 	umull	r2, r3, r3, r2
 800ff7a:	095b      	lsrs	r3, r3, #5
 800ff7c:	011e      	lsls	r6, r3, #4
 800ff7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff80:	461c      	mov	r4, r3
 800ff82:	f04f 0500 	mov.w	r5, #0
 800ff86:	4622      	mov	r2, r4
 800ff88:	462b      	mov	r3, r5
 800ff8a:	1891      	adds	r1, r2, r2
 800ff8c:	6339      	str	r1, [r7, #48]	; 0x30
 800ff8e:	415b      	adcs	r3, r3
 800ff90:	637b      	str	r3, [r7, #52]	; 0x34
 800ff92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ff96:	1912      	adds	r2, r2, r4
 800ff98:	eb45 0303 	adc.w	r3, r5, r3
 800ff9c:	f04f 0000 	mov.w	r0, #0
 800ffa0:	f04f 0100 	mov.w	r1, #0
 800ffa4:	00d9      	lsls	r1, r3, #3
 800ffa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ffaa:	00d0      	lsls	r0, r2, #3
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	1911      	adds	r1, r2, r4
 800ffb2:	65b9      	str	r1, [r7, #88]	; 0x58
 800ffb4:	416b      	adcs	r3, r5
 800ffb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	f04f 0300 	mov.w	r3, #0
 800ffc2:	1891      	adds	r1, r2, r2
 800ffc4:	62b9      	str	r1, [r7, #40]	; 0x28
 800ffc6:	415b      	adcs	r3, r3
 800ffc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ffce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ffd2:	f7f0 fe59 	bl	8000c88 <__aeabi_uldivmod>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	460b      	mov	r3, r1
 800ffda:	4b8c      	ldr	r3, [pc, #560]	; (801020c <UART_SetConfig+0x38c>)
 800ffdc:	fba3 1302 	umull	r1, r3, r3, r2
 800ffe0:	095b      	lsrs	r3, r3, #5
 800ffe2:	2164      	movs	r1, #100	; 0x64
 800ffe4:	fb01 f303 	mul.w	r3, r1, r3
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	3332      	adds	r3, #50	; 0x32
 800ffee:	4a87      	ldr	r2, [pc, #540]	; (801020c <UART_SetConfig+0x38c>)
 800fff0:	fba2 2303 	umull	r2, r3, r2, r3
 800fff4:	095b      	lsrs	r3, r3, #5
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fffc:	441e      	add	r6, r3
 800fffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010000:	4618      	mov	r0, r3
 8010002:	f04f 0100 	mov.w	r1, #0
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	1894      	adds	r4, r2, r2
 801000c:	623c      	str	r4, [r7, #32]
 801000e:	415b      	adcs	r3, r3
 8010010:	627b      	str	r3, [r7, #36]	; 0x24
 8010012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010016:	1812      	adds	r2, r2, r0
 8010018:	eb41 0303 	adc.w	r3, r1, r3
 801001c:	f04f 0400 	mov.w	r4, #0
 8010020:	f04f 0500 	mov.w	r5, #0
 8010024:	00dd      	lsls	r5, r3, #3
 8010026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801002a:	00d4      	lsls	r4, r2, #3
 801002c:	4622      	mov	r2, r4
 801002e:	462b      	mov	r3, r5
 8010030:	1814      	adds	r4, r2, r0
 8010032:	653c      	str	r4, [r7, #80]	; 0x50
 8010034:	414b      	adcs	r3, r1
 8010036:	657b      	str	r3, [r7, #84]	; 0x54
 8010038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	461a      	mov	r2, r3
 801003e:	f04f 0300 	mov.w	r3, #0
 8010042:	1891      	adds	r1, r2, r2
 8010044:	61b9      	str	r1, [r7, #24]
 8010046:	415b      	adcs	r3, r3
 8010048:	61fb      	str	r3, [r7, #28]
 801004a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801004e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010052:	f7f0 fe19 	bl	8000c88 <__aeabi_uldivmod>
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	4b6c      	ldr	r3, [pc, #432]	; (801020c <UART_SetConfig+0x38c>)
 801005c:	fba3 1302 	umull	r1, r3, r3, r2
 8010060:	095b      	lsrs	r3, r3, #5
 8010062:	2164      	movs	r1, #100	; 0x64
 8010064:	fb01 f303 	mul.w	r3, r1, r3
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	00db      	lsls	r3, r3, #3
 801006c:	3332      	adds	r3, #50	; 0x32
 801006e:	4a67      	ldr	r2, [pc, #412]	; (801020c <UART_SetConfig+0x38c>)
 8010070:	fba2 2303 	umull	r2, r3, r2, r3
 8010074:	095b      	lsrs	r3, r3, #5
 8010076:	f003 0207 	and.w	r2, r3, #7
 801007a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4432      	add	r2, r6
 8010080:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010082:	e0b9      	b.n	80101f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010086:	461c      	mov	r4, r3
 8010088:	f04f 0500 	mov.w	r5, #0
 801008c:	4622      	mov	r2, r4
 801008e:	462b      	mov	r3, r5
 8010090:	1891      	adds	r1, r2, r2
 8010092:	6139      	str	r1, [r7, #16]
 8010094:	415b      	adcs	r3, r3
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801009c:	1912      	adds	r2, r2, r4
 801009e:	eb45 0303 	adc.w	r3, r5, r3
 80100a2:	f04f 0000 	mov.w	r0, #0
 80100a6:	f04f 0100 	mov.w	r1, #0
 80100aa:	00d9      	lsls	r1, r3, #3
 80100ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80100b0:	00d0      	lsls	r0, r2, #3
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	eb12 0804 	adds.w	r8, r2, r4
 80100ba:	eb43 0905 	adc.w	r9, r3, r5
 80100be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f04f 0100 	mov.w	r1, #0
 80100c8:	f04f 0200 	mov.w	r2, #0
 80100cc:	f04f 0300 	mov.w	r3, #0
 80100d0:	008b      	lsls	r3, r1, #2
 80100d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80100d6:	0082      	lsls	r2, r0, #2
 80100d8:	4640      	mov	r0, r8
 80100da:	4649      	mov	r1, r9
 80100dc:	f7f0 fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	4b49      	ldr	r3, [pc, #292]	; (801020c <UART_SetConfig+0x38c>)
 80100e6:	fba3 2302 	umull	r2, r3, r3, r2
 80100ea:	095b      	lsrs	r3, r3, #5
 80100ec:	011e      	lsls	r6, r3, #4
 80100ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100f0:	4618      	mov	r0, r3
 80100f2:	f04f 0100 	mov.w	r1, #0
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	1894      	adds	r4, r2, r2
 80100fc:	60bc      	str	r4, [r7, #8]
 80100fe:	415b      	adcs	r3, r3
 8010100:	60fb      	str	r3, [r7, #12]
 8010102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010106:	1812      	adds	r2, r2, r0
 8010108:	eb41 0303 	adc.w	r3, r1, r3
 801010c:	f04f 0400 	mov.w	r4, #0
 8010110:	f04f 0500 	mov.w	r5, #0
 8010114:	00dd      	lsls	r5, r3, #3
 8010116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801011a:	00d4      	lsls	r4, r2, #3
 801011c:	4622      	mov	r2, r4
 801011e:	462b      	mov	r3, r5
 8010120:	1814      	adds	r4, r2, r0
 8010122:	64bc      	str	r4, [r7, #72]	; 0x48
 8010124:	414b      	adcs	r3, r1
 8010126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	4618      	mov	r0, r3
 801012e:	f04f 0100 	mov.w	r1, #0
 8010132:	f04f 0200 	mov.w	r2, #0
 8010136:	f04f 0300 	mov.w	r3, #0
 801013a:	008b      	lsls	r3, r1, #2
 801013c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010140:	0082      	lsls	r2, r0, #2
 8010142:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010146:	f7f0 fd9f 	bl	8000c88 <__aeabi_uldivmod>
 801014a:	4602      	mov	r2, r0
 801014c:	460b      	mov	r3, r1
 801014e:	4b2f      	ldr	r3, [pc, #188]	; (801020c <UART_SetConfig+0x38c>)
 8010150:	fba3 1302 	umull	r1, r3, r3, r2
 8010154:	095b      	lsrs	r3, r3, #5
 8010156:	2164      	movs	r1, #100	; 0x64
 8010158:	fb01 f303 	mul.w	r3, r1, r3
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	011b      	lsls	r3, r3, #4
 8010160:	3332      	adds	r3, #50	; 0x32
 8010162:	4a2a      	ldr	r2, [pc, #168]	; (801020c <UART_SetConfig+0x38c>)
 8010164:	fba2 2303 	umull	r2, r3, r2, r3
 8010168:	095b      	lsrs	r3, r3, #5
 801016a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801016e:	441e      	add	r6, r3
 8010170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010172:	4618      	mov	r0, r3
 8010174:	f04f 0100 	mov.w	r1, #0
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	1894      	adds	r4, r2, r2
 801017e:	603c      	str	r4, [r7, #0]
 8010180:	415b      	adcs	r3, r3
 8010182:	607b      	str	r3, [r7, #4]
 8010184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010188:	1812      	adds	r2, r2, r0
 801018a:	eb41 0303 	adc.w	r3, r1, r3
 801018e:	f04f 0400 	mov.w	r4, #0
 8010192:	f04f 0500 	mov.w	r5, #0
 8010196:	00dd      	lsls	r5, r3, #3
 8010198:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801019c:	00d4      	lsls	r4, r2, #3
 801019e:	4622      	mov	r2, r4
 80101a0:	462b      	mov	r3, r5
 80101a2:	eb12 0a00 	adds.w	sl, r2, r0
 80101a6:	eb43 0b01 	adc.w	fp, r3, r1
 80101aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f04f 0100 	mov.w	r1, #0
 80101b4:	f04f 0200 	mov.w	r2, #0
 80101b8:	f04f 0300 	mov.w	r3, #0
 80101bc:	008b      	lsls	r3, r1, #2
 80101be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80101c2:	0082      	lsls	r2, r0, #2
 80101c4:	4650      	mov	r0, sl
 80101c6:	4659      	mov	r1, fp
 80101c8:	f7f0 fd5e 	bl	8000c88 <__aeabi_uldivmod>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4b0e      	ldr	r3, [pc, #56]	; (801020c <UART_SetConfig+0x38c>)
 80101d2:	fba3 1302 	umull	r1, r3, r3, r2
 80101d6:	095b      	lsrs	r3, r3, #5
 80101d8:	2164      	movs	r1, #100	; 0x64
 80101da:	fb01 f303 	mul.w	r3, r1, r3
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	011b      	lsls	r3, r3, #4
 80101e2:	3332      	adds	r3, #50	; 0x32
 80101e4:	4a09      	ldr	r2, [pc, #36]	; (801020c <UART_SetConfig+0x38c>)
 80101e6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ea:	095b      	lsrs	r3, r3, #5
 80101ec:	f003 020f 	and.w	r2, r3, #15
 80101f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4432      	add	r2, r6
 80101f6:	609a      	str	r2, [r3, #8]
}
 80101f8:	bf00      	nop
 80101fa:	377c      	adds	r7, #124	; 0x7c
 80101fc:	46bd      	mov	sp, r7
 80101fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010202:	bf00      	nop
 8010204:	40011000 	.word	0x40011000
 8010208:	40011400 	.word	0x40011400
 801020c:	51eb851f 	.word	0x51eb851f

08010210 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010210:	b084      	sub	sp, #16
 8010212:	b480      	push	{r7}
 8010214:	b085      	sub	sp, #20
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	f107 001c 	add.w	r0, r7, #28
 801021e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010222:	2300      	movs	r3, #0
 8010224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010226:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010228:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801022a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801022e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010230:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010232:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010236:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801023a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	4313      	orrs	r3, r2
 8010240:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801024a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	431a      	orrs	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3714      	adds	r7, #20
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	b004      	add	sp, #16
 8010264:	4770      	bx	lr

08010266 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010266:	b480      	push	{r7}
 8010268:	b083      	sub	sp, #12
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b082      	sub	sp, #8
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2203      	movs	r2, #3
 80102ae:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80102b0:	2002      	movs	r0, #2
 80102b2:	f7f8 fe47 	bl	8008f44 <HAL_Delay>
  
  return HAL_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f003 0303 	and.w	r3, r3, #3
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80102dc:	b480      	push	{r7}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80102e6:	2300      	movs	r3, #0
 80102e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010300:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010306:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	4313      	orrs	r3, r2
 801030c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010316:	f023 030f 	bic.w	r3, r3, #15
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	431a      	orrs	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	b2db      	uxtb	r3, r3
}
 801033e:	4618      	mov	r0, r3
 8010340:	370c      	adds	r7, #12
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr

0801034a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801034a:	b480      	push	{r7}
 801034c:	b085      	sub	sp, #20
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
 8010352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3314      	adds	r3, #20
 8010358:	461a      	mov	r2, r3
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	4413      	add	r3, r2
 801035e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
}  
 8010364:	4618      	mov	r0, r3
 8010366:	3714      	adds	r7, #20
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010370:	b480      	push	{r7}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	685a      	ldr	r2, [r3, #4]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010396:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801039c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80103a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	431a      	orrs	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80103ba:	2300      	movs	r3, #0

}
 80103bc:	4618      	mov	r0, r3
 80103be:	3714      	adds	r7, #20
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80103d6:	2310      	movs	r3, #16
 80103d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103da:	2340      	movs	r3, #64	; 0x40
 80103dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103de:	2300      	movs	r3, #0
 80103e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103e8:	f107 0308 	add.w	r3, r7, #8
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff ff74 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80103f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103f8:	2110      	movs	r1, #16
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 fa02 	bl	8010804 <SDMMC_GetCmdResp1>
 8010400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010402:	69fb      	ldr	r3, [r7, #28]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3720      	adds	r7, #32
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b088      	sub	sp, #32
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801041a:	2311      	movs	r3, #17
 801041c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801041e:	2340      	movs	r3, #64	; 0x40
 8010420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010422:	2300      	movs	r3, #0
 8010424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801042a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff ff52 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010438:	f241 3288 	movw	r2, #5000	; 0x1388
 801043c:	2111      	movs	r1, #17
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f9e0 	bl	8010804 <SDMMC_GetCmdResp1>
 8010444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010446:	69fb      	ldr	r3, [r7, #28]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3720      	adds	r7, #32
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801045e:	2312      	movs	r3, #18
 8010460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010462:	2340      	movs	r3, #64	; 0x40
 8010464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010466:	2300      	movs	r3, #0
 8010468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801046a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801046e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010470:	f107 0308 	add.w	r3, r7, #8
 8010474:	4619      	mov	r1, r3
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff ff30 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801047c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010480:	2112      	movs	r1, #18
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 f9be 	bl	8010804 <SDMMC_GetCmdResp1>
 8010488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801048a:	69fb      	ldr	r3, [r7, #28]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3720      	adds	r7, #32
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80104a2:	2318      	movs	r3, #24
 80104a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104a6:	2340      	movs	r3, #64	; 0x40
 80104a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104aa:	2300      	movs	r3, #0
 80104ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104b4:	f107 0308 	add.w	r3, r7, #8
 80104b8:	4619      	mov	r1, r3
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7ff ff0e 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80104c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80104c4:	2118      	movs	r1, #24
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f99c 	bl	8010804 <SDMMC_GetCmdResp1>
 80104cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ce:	69fb      	ldr	r3, [r7, #28]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3720      	adds	r7, #32
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80104e6:	2319      	movs	r3, #25
 80104e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104ea:	2340      	movs	r3, #64	; 0x40
 80104ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104ee:	2300      	movs	r3, #0
 80104f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104f8:	f107 0308 	add.w	r3, r7, #8
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff feec 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010504:	f241 3288 	movw	r2, #5000	; 0x1388
 8010508:	2119      	movs	r1, #25
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 f97a 	bl	8010804 <SDMMC_GetCmdResp1>
 8010510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010512:	69fb      	ldr	r3, [r7, #28]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3720      	adds	r7, #32
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b088      	sub	sp, #32
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010524:	2300      	movs	r3, #0
 8010526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010528:	230c      	movs	r3, #12
 801052a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801052c:	2340      	movs	r3, #64	; 0x40
 801052e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010530:	2300      	movs	r3, #0
 8010532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801053a:	f107 0308 	add.w	r3, r7, #8
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff fecb 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010546:	4a05      	ldr	r2, [pc, #20]	; (801055c <SDMMC_CmdStopTransfer+0x40>)
 8010548:	210c      	movs	r1, #12
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f95a 	bl	8010804 <SDMMC_GetCmdResp1>
 8010550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010552:	69fb      	ldr	r3, [r7, #28]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3720      	adds	r7, #32
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	05f5e100 	.word	0x05f5e100

08010560 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b08a      	sub	sp, #40	; 0x28
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010570:	2307      	movs	r3, #7
 8010572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010574:	2340      	movs	r3, #64	; 0x40
 8010576:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010578:	2300      	movs	r3, #0
 801057a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801057c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010580:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010582:	f107 0310 	add.w	r3, r7, #16
 8010586:	4619      	mov	r1, r3
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f7ff fea7 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801058e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010592:	2107      	movs	r1, #7
 8010594:	68f8      	ldr	r0, [r7, #12]
 8010596:	f000 f935 	bl	8010804 <SDMMC_GetCmdResp1>
 801059a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3728      	adds	r7, #40	; 0x28
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b088      	sub	sp, #32
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80105ae:	2300      	movs	r3, #0
 80105b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80105b2:	2300      	movs	r3, #0
 80105b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80105b6:	2300      	movs	r3, #0
 80105b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105c4:	f107 0308 	add.w	r3, r7, #8
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff fe86 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 f8eb 	bl	80107ac <SDMMC_GetCmdError>
 80105d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105d8:	69fb      	ldr	r3, [r7, #28]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3720      	adds	r7, #32
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b088      	sub	sp, #32
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80105ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80105ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80105f0:	2308      	movs	r3, #8
 80105f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105f4:	2340      	movs	r3, #64	; 0x40
 80105f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105f8:	2300      	movs	r3, #0
 80105fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010602:	f107 0308 	add.w	r3, r7, #8
 8010606:	4619      	mov	r1, r3
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7ff fe67 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 fae2 	bl	8010bd8 <SDMMC_GetCmdResp7>
 8010614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010616:	69fb      	ldr	r3, [r7, #28]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3720      	adds	r7, #32
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b088      	sub	sp, #32
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801062e:	2337      	movs	r3, #55	; 0x37
 8010630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010632:	2340      	movs	r3, #64	; 0x40
 8010634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010636:	2300      	movs	r3, #0
 8010638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801063e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010640:	f107 0308 	add.w	r3, r7, #8
 8010644:	4619      	mov	r1, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff fe48 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801064c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010650:	2137      	movs	r1, #55	; 0x37
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 f8d6 	bl	8010804 <SDMMC_GetCmdResp1>
 8010658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801065a:	69fb      	ldr	r3, [r7, #28]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3720      	adds	r7, #32
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b088      	sub	sp, #32
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801067a:	2329      	movs	r3, #41	; 0x29
 801067c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801067e:	2340      	movs	r3, #64	; 0x40
 8010680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010682:	2300      	movs	r3, #0
 8010684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801068a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801068c:	f107 0308 	add.w	r3, r7, #8
 8010690:	4619      	mov	r1, r3
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7ff fe22 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f000 f9e9 	bl	8010a70 <SDMMC_GetCmdResp3>
 801069e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106a0:	69fb      	ldr	r3, [r7, #28]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3720      	adds	r7, #32
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}

080106aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b088      	sub	sp, #32
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80106b2:	2300      	movs	r3, #0
 80106b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80106b6:	2302      	movs	r3, #2
 80106b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106ba:	23c0      	movs	r3, #192	; 0xc0
 80106bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106be:	2300      	movs	r3, #0
 80106c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106c8:	f107 0308 	add.w	r3, r7, #8
 80106cc:	4619      	mov	r1, r3
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7ff fe04 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 f983 	bl	80109e0 <SDMMC_GetCmdResp2>
 80106da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106dc:	69fb      	ldr	r3, [r7, #28]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3720      	adds	r7, #32
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80106e6:	b580      	push	{r7, lr}
 80106e8:	b088      	sub	sp, #32
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
 80106ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106f4:	2309      	movs	r3, #9
 80106f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106f8:	23c0      	movs	r3, #192	; 0xc0
 80106fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106fc:	2300      	movs	r3, #0
 80106fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010704:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	4619      	mov	r1, r3
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7ff fde5 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f964 	bl	80109e0 <SDMMC_GetCmdResp2>
 8010718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071a:	69fb      	ldr	r3, [r7, #28]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3720      	adds	r7, #32
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801072e:	2300      	movs	r3, #0
 8010730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010732:	2303      	movs	r3, #3
 8010734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010736:	2340      	movs	r3, #64	; 0x40
 8010738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801073a:	2300      	movs	r3, #0
 801073c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801073e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010744:	f107 0308 	add.w	r3, r7, #8
 8010748:	4619      	mov	r1, r3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7ff fdc6 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010750:	683a      	ldr	r2, [r7, #0]
 8010752:	2103      	movs	r1, #3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 f9c9 	bl	8010aec <SDMMC_GetCmdResp6>
 801075a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801075c:	69fb      	ldr	r3, [r7, #28]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3720      	adds	r7, #32
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}

08010766 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b088      	sub	sp, #32
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
 801076e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010774:	230d      	movs	r3, #13
 8010776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010778:	2340      	movs	r3, #64	; 0x40
 801077a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801077c:	2300      	movs	r3, #0
 801077e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010784:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010786:	f107 0308 	add.w	r3, r7, #8
 801078a:	4619      	mov	r1, r3
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f7ff fda5 	bl	80102dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010792:	f241 3288 	movw	r2, #5000	; 0x1388
 8010796:	210d      	movs	r1, #13
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 f833 	bl	8010804 <SDMMC_GetCmdResp1>
 801079e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107a0:	69fb      	ldr	r3, [r7, #28]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3720      	adds	r7, #32
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
	...

080107ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107b4:	4b11      	ldr	r3, [pc, #68]	; (80107fc <SDMMC_GetCmdError+0x50>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4a11      	ldr	r2, [pc, #68]	; (8010800 <SDMMC_GetCmdError+0x54>)
 80107ba:	fba2 2303 	umull	r2, r3, r2, r3
 80107be:	0a5b      	lsrs	r3, r3, #9
 80107c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c4:	fb02 f303 	mul.w	r3, r2, r3
 80107c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	1e5a      	subs	r2, r3, #1
 80107ce:	60fa      	str	r2, [r7, #12]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d102      	bne.n	80107da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107d8:	e009      	b.n	80107ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d0f1      	beq.n	80107ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	22c5      	movs	r2, #197	; 0xc5
 80107ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3714      	adds	r7, #20
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	20000120 	.word	0x20000120
 8010800:	10624dd3 	.word	0x10624dd3

08010804 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b088      	sub	sp, #32
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	460b      	mov	r3, r1
 801080e:	607a      	str	r2, [r7, #4]
 8010810:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010812:	4b70      	ldr	r3, [pc, #448]	; (80109d4 <SDMMC_GetCmdResp1+0x1d0>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4a70      	ldr	r2, [pc, #448]	; (80109d8 <SDMMC_GetCmdResp1+0x1d4>)
 8010818:	fba2 2303 	umull	r2, r3, r2, r3
 801081c:	0a5a      	lsrs	r2, r3, #9
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	fb02 f303 	mul.w	r3, r2, r3
 8010824:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	1e5a      	subs	r2, r3, #1
 801082a:	61fa      	str	r2, [r7, #28]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d102      	bne.n	8010836 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010834:	e0c9      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010842:	2b00      	cmp	r3, #0
 8010844:	d0ef      	beq.n	8010826 <SDMMC_GetCmdResp1+0x22>
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1ea      	bne.n	8010826 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010854:	f003 0304 	and.w	r3, r3, #4
 8010858:	2b00      	cmp	r3, #0
 801085a:	d004      	beq.n	8010866 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2204      	movs	r2, #4
 8010860:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010862:	2304      	movs	r3, #4
 8010864:	e0b1      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801086a:	f003 0301 	and.w	r3, r3, #1
 801086e:	2b00      	cmp	r3, #0
 8010870:	d004      	beq.n	801087c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2201      	movs	r2, #1
 8010876:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010878:	2301      	movs	r3, #1
 801087a:	e0a6      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	22c5      	movs	r2, #197	; 0xc5
 8010880:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f7ff fd54 	bl	8010330 <SDIO_GetCommandResponse>
 8010888:	4603      	mov	r3, r0
 801088a:	461a      	mov	r2, r3
 801088c:	7afb      	ldrb	r3, [r7, #11]
 801088e:	4293      	cmp	r3, r2
 8010890:	d001      	beq.n	8010896 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010892:	2301      	movs	r3, #1
 8010894:	e099      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010896:	2100      	movs	r1, #0
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f7ff fd56 	bl	801034a <SDIO_GetResponse>
 801089e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	4b4e      	ldr	r3, [pc, #312]	; (80109dc <SDMMC_GetCmdResp1+0x1d8>)
 80108a4:	4013      	ands	r3, r2
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e08d      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	da02      	bge.n	80108ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80108b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80108b8:	e087      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d001      	beq.n	80108c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108c4:	2340      	movs	r3, #64	; 0x40
 80108c6:	e080      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80108d2:	2380      	movs	r3, #128	; 0x80
 80108d4:	e079      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108e4:	e071      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108f4:	e069      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010904:	e061      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010914:	e059      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010924:	e051      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010934:	e049      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010940:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010944:	e041      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010954:	e039      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010964:	e031      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010970:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010974:	e029      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010980:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010984:	e021      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010990:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010994:	e019      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80109a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80109a4:	e011      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80109b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80109b4:	e009      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f003 0308 	and.w	r3, r3, #8
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80109c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80109c4:	e001      	b.n	80109ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20000120 	.word	0x20000120
 80109d8:	10624dd3 	.word	0x10624dd3
 80109dc:	fdffe008 	.word	0xfdffe008

080109e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109e8:	4b1f      	ldr	r3, [pc, #124]	; (8010a68 <SDMMC_GetCmdResp2+0x88>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	4a1f      	ldr	r2, [pc, #124]	; (8010a6c <SDMMC_GetCmdResp2+0x8c>)
 80109ee:	fba2 2303 	umull	r2, r3, r2, r3
 80109f2:	0a5b      	lsrs	r3, r3, #9
 80109f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109f8:	fb02 f303 	mul.w	r3, r2, r3
 80109fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	1e5a      	subs	r2, r3, #1
 8010a02:	60fa      	str	r2, [r7, #12]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a0c:	e026      	b.n	8010a5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d0ef      	beq.n	80109fe <SDMMC_GetCmdResp2+0x1e>
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1ea      	bne.n	80109fe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2c:	f003 0304 	and.w	r3, r3, #4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d004      	beq.n	8010a3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2204      	movs	r2, #4
 8010a38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a3a:	2304      	movs	r3, #4
 8010a3c:	e00e      	b.n	8010a5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d004      	beq.n	8010a54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a50:	2301      	movs	r3, #1
 8010a52:	e003      	b.n	8010a5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	22c5      	movs	r2, #197	; 0xc5
 8010a58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3714      	adds	r7, #20
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr
 8010a68:	20000120 	.word	0x20000120
 8010a6c:	10624dd3 	.word	0x10624dd3

08010a70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a78:	4b1a      	ldr	r3, [pc, #104]	; (8010ae4 <SDMMC_GetCmdResp3+0x74>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a1a      	ldr	r2, [pc, #104]	; (8010ae8 <SDMMC_GetCmdResp3+0x78>)
 8010a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a82:	0a5b      	lsrs	r3, r3, #9
 8010a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a88:	fb02 f303 	mul.w	r3, r2, r3
 8010a8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	1e5a      	subs	r2, r3, #1
 8010a92:	60fa      	str	r2, [r7, #12]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d102      	bne.n	8010a9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a9c:	e01b      	b.n	8010ad6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d0ef      	beq.n	8010a8e <SDMMC_GetCmdResp3+0x1e>
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1ea      	bne.n	8010a8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010abc:	f003 0304 	and.w	r3, r3, #4
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d004      	beq.n	8010ace <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2204      	movs	r2, #4
 8010ac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010aca:	2304      	movs	r3, #4
 8010acc:	e003      	b.n	8010ad6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	22c5      	movs	r2, #197	; 0xc5
 8010ad2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	20000120 	.word	0x20000120
 8010ae8:	10624dd3 	.word	0x10624dd3

08010aec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b088      	sub	sp, #32
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	460b      	mov	r3, r1
 8010af6:	607a      	str	r2, [r7, #4]
 8010af8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010afa:	4b35      	ldr	r3, [pc, #212]	; (8010bd0 <SDMMC_GetCmdResp6+0xe4>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4a35      	ldr	r2, [pc, #212]	; (8010bd4 <SDMMC_GetCmdResp6+0xe8>)
 8010b00:	fba2 2303 	umull	r2, r3, r2, r3
 8010b04:	0a5b      	lsrs	r3, r3, #9
 8010b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b0a:	fb02 f303 	mul.w	r3, r2, r3
 8010b0e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	1e5a      	subs	r2, r3, #1
 8010b14:	61fa      	str	r2, [r7, #28]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d102      	bne.n	8010b20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b1e:	e052      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b24:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d0ef      	beq.n	8010b10 <SDMMC_GetCmdResp6+0x24>
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d1ea      	bne.n	8010b10 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b3e:	f003 0304 	and.w	r3, r3, #4
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d004      	beq.n	8010b50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2204      	movs	r2, #4
 8010b4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b4c:	2304      	movs	r3, #4
 8010b4e:	e03a      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b54:	f003 0301 	and.w	r3, r3, #1
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d004      	beq.n	8010b66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e02f      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f7ff fbe2 	bl	8010330 <SDIO_GetCommandResponse>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	461a      	mov	r2, r3
 8010b70:	7afb      	ldrb	r3, [r7, #11]
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d001      	beq.n	8010b7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b76:	2301      	movs	r3, #1
 8010b78:	e025      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	22c5      	movs	r2, #197	; 0xc5
 8010b7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b80:	2100      	movs	r1, #0
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f7ff fbe1 	bl	801034a <SDIO_GetResponse>
 8010b88:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d106      	bne.n	8010ba2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	0c1b      	lsrs	r3, r3, #16
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e011      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d002      	beq.n	8010bb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bb0:	e009      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d002      	beq.n	8010bc2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bc0:	e001      	b.n	8010bc6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3720      	adds	r7, #32
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	20000120 	.word	0x20000120
 8010bd4:	10624dd3 	.word	0x10624dd3

08010bd8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010be0:	4b22      	ldr	r3, [pc, #136]	; (8010c6c <SDMMC_GetCmdResp7+0x94>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a22      	ldr	r2, [pc, #136]	; (8010c70 <SDMMC_GetCmdResp7+0x98>)
 8010be6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bea:	0a5b      	lsrs	r3, r3, #9
 8010bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bf0:	fb02 f303 	mul.w	r3, r2, r3
 8010bf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	1e5a      	subs	r2, r3, #1
 8010bfa:	60fa      	str	r2, [r7, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d102      	bne.n	8010c06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c04:	e02c      	b.n	8010c60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d0ef      	beq.n	8010bf6 <SDMMC_GetCmdResp7+0x1e>
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1ea      	bne.n	8010bf6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c24:	f003 0304 	and.w	r3, r3, #4
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d004      	beq.n	8010c36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2204      	movs	r2, #4
 8010c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c32:	2304      	movs	r3, #4
 8010c34:	e014      	b.n	8010c60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3a:	f003 0301 	and.w	r3, r3, #1
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d004      	beq.n	8010c4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2201      	movs	r2, #1
 8010c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e009      	b.n	8010c60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2240      	movs	r2, #64	; 0x40
 8010c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c5e:	2300      	movs	r3, #0
  
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	20000120 	.word	0x20000120
 8010c70:	10624dd3 	.word	0x10624dd3

08010c74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c78:	4904      	ldr	r1, [pc, #16]	; (8010c8c <MX_FATFS_Init+0x18>)
 8010c7a:	4805      	ldr	r0, [pc, #20]	; (8010c90 <MX_FATFS_Init+0x1c>)
 8010c7c:	f002 fb24 	bl	80132c8 <FATFS_LinkDriver>
 8010c80:	4603      	mov	r3, r0
 8010c82:	461a      	mov	r2, r3
 8010c84:	4b03      	ldr	r3, [pc, #12]	; (8010c94 <MX_FATFS_Init+0x20>)
 8010c86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c88:	bf00      	nop
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20003154 	.word	0x20003154
 8010c90:	0801a998 	.word	0x0801a998
 8010c94:	20003150 	.word	0x20003150

08010c98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010c9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cb2:	f000 f86b 	bl	8010d8c <BSP_SD_IsDetected>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d001      	beq.n	8010cc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e005      	b.n	8010ccc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010cc0:	4804      	ldr	r0, [pc, #16]	; (8010cd4 <BSP_SD_Init+0x2c>)
 8010cc2:	f7fb fe37 	bl	800c934 <HAL_SD_Init>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8010cca:	79fb      	ldrb	r3, [r7, #7]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20002744 	.word	0x20002744

08010cd8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b088      	sub	sp, #32
 8010cdc:	af02      	add	r7, sp, #8
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	9300      	str	r3, [sp, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	68ba      	ldr	r2, [r7, #8]
 8010cf2:	68f9      	ldr	r1, [r7, #12]
 8010cf4:	4806      	ldr	r0, [pc, #24]	; (8010d10 <BSP_SD_ReadBlocks+0x38>)
 8010cf6:	f7fb fecb 	bl	800ca90 <HAL_SD_ReadBlocks>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010d00:	2301      	movs	r3, #1
 8010d02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3718      	adds	r7, #24
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20002744 	.word	0x20002744

08010d14 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b088      	sub	sp, #32
 8010d18:	af02      	add	r7, sp, #8
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	68ba      	ldr	r2, [r7, #8]
 8010d2e:	68f9      	ldr	r1, [r7, #12]
 8010d30:	4806      	ldr	r0, [pc, #24]	; (8010d4c <BSP_SD_WriteBlocks+0x38>)
 8010d32:	f7fc f88b 	bl	800ce4c <HAL_SD_WriteBlocks>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d001      	beq.n	8010d40 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3718      	adds	r7, #24
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20002744 	.word	0x20002744

08010d50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d54:	4805      	ldr	r0, [pc, #20]	; (8010d6c <BSP_SD_GetCardState+0x1c>)
 8010d56:	f7fc fbcf 	bl	800d4f8 <HAL_SD_GetCardState>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b04      	cmp	r3, #4
 8010d5e:	bf14      	ite	ne
 8010d60:	2301      	movne	r3, #1
 8010d62:	2300      	moveq	r3, #0
 8010d64:	b2db      	uxtb	r3, r3
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	20002744 	.word	0x20002744

08010d70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010d78:	6879      	ldr	r1, [r7, #4]
 8010d7a:	4803      	ldr	r0, [pc, #12]	; (8010d88 <BSP_SD_GetCardInfo+0x18>)
 8010d7c:	f7fc fb90 	bl	800d4a0 <HAL_SD_GetCardInfo>
}
 8010d80:	bf00      	nop
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	20002744 	.word	0x20002744

08010d8c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010d92:	2301      	movs	r3, #1
 8010d94:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8010d96:	79fb      	ldrb	r3, [r7, #7]
 8010d98:	b2db      	uxtb	r3, r3
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	370c      	adds	r7, #12
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
	...

08010da8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	4603      	mov	r3, r0
 8010db0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010db2:	4b0b      	ldr	r3, [pc, #44]	; (8010de0 <SD_CheckStatus+0x38>)
 8010db4:	2201      	movs	r2, #1
 8010db6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010db8:	f7ff ffca 	bl	8010d50 <BSP_SD_GetCardState>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d107      	bne.n	8010dd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010dc2:	4b07      	ldr	r3, [pc, #28]	; (8010de0 <SD_CheckStatus+0x38>)
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	f023 0301 	bic.w	r3, r3, #1
 8010dcc:	b2da      	uxtb	r2, r3
 8010dce:	4b04      	ldr	r3, [pc, #16]	; (8010de0 <SD_CheckStatus+0x38>)
 8010dd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010dd2:	4b03      	ldr	r3, [pc, #12]	; (8010de0 <SD_CheckStatus+0x38>)
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	b2db      	uxtb	r3, r3
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	20000129 	.word	0x20000129

08010de4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010dee:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <SD_initialize+0x38>)
 8010df0:	2201      	movs	r2, #1
 8010df2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010df4:	f7ff ff58 	bl	8010ca8 <BSP_SD_Init>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d107      	bne.n	8010e0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010dfe:	79fb      	ldrb	r3, [r7, #7]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff ffd1 	bl	8010da8 <SD_CheckStatus>
 8010e06:	4603      	mov	r3, r0
 8010e08:	461a      	mov	r2, r3
 8010e0a:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <SD_initialize+0x38>)
 8010e0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e0e:	4b03      	ldr	r3, [pc, #12]	; (8010e1c <SD_initialize+0x38>)
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	b2db      	uxtb	r3, r3
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	20000129 	.word	0x20000129

08010e20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010e2a:	79fb      	ldrb	r3, [r7, #7]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff ffbb 	bl	8010da8 <SD_CheckStatus>
 8010e32:	4603      	mov	r3, r0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b086      	sub	sp, #24
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	607a      	str	r2, [r7, #4]
 8010e46:	603b      	str	r3, [r7, #0]
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010e50:	f04f 33ff 	mov.w	r3, #4294967295
 8010e54:	683a      	ldr	r2, [r7, #0]
 8010e56:	6879      	ldr	r1, [r7, #4]
 8010e58:	68b8      	ldr	r0, [r7, #8]
 8010e5a:	f7ff ff3d 	bl	8010cd8 <BSP_SD_ReadBlocks>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d107      	bne.n	8010e74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010e64:	bf00      	nop
 8010e66:	f7ff ff73 	bl	8010d50 <BSP_SD_GetCardState>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1fa      	bne.n	8010e66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3718      	adds	r7, #24
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b086      	sub	sp, #24
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	603b      	str	r3, [r7, #0]
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010e92:	f04f 33ff 	mov.w	r3, #4294967295
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	6879      	ldr	r1, [r7, #4]
 8010e9a:	68b8      	ldr	r0, [r7, #8]
 8010e9c:	f7ff ff3a 	bl	8010d14 <BSP_SD_WriteBlocks>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d107      	bne.n	8010eb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010ea6:	bf00      	nop
 8010ea8:	f7ff ff52 	bl	8010d50 <BSP_SD_GetCardState>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1fa      	bne.n	8010ea8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3718      	adds	r7, #24
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08c      	sub	sp, #48	; 0x30
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	603a      	str	r2, [r7, #0]
 8010eca:	71fb      	strb	r3, [r7, #7]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010ed6:	4b25      	ldr	r3, [pc, #148]	; (8010f6c <SD_ioctl+0xac>)
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	f003 0301 	and.w	r3, r3, #1
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <SD_ioctl+0x28>
 8010ee4:	2303      	movs	r3, #3
 8010ee6:	e03c      	b.n	8010f62 <SD_ioctl+0xa2>

  switch (cmd)
 8010ee8:	79bb      	ldrb	r3, [r7, #6]
 8010eea:	2b03      	cmp	r3, #3
 8010eec:	d834      	bhi.n	8010f58 <SD_ioctl+0x98>
 8010eee:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <SD_ioctl+0x34>)
 8010ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef4:	08010f05 	.word	0x08010f05
 8010ef8:	08010f0d 	.word	0x08010f0d
 8010efc:	08010f25 	.word	0x08010f25
 8010f00:	08010f3f 	.word	0x08010f3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010f04:	2300      	movs	r3, #0
 8010f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f0a:	e028      	b.n	8010f5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f0c:	f107 030c 	add.w	r3, r7, #12
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ff ff2d 	bl	8010d70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f22:	e01c      	b.n	8010f5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f24:	f107 030c 	add.w	r3, r7, #12
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7ff ff21 	bl	8010d70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010f36:	2300      	movs	r3, #0
 8010f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f3c:	e00f      	b.n	8010f5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f3e:	f107 030c 	add.w	r3, r7, #12
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff ff14 	bl	8010d70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4a:	0a5a      	lsrs	r2, r3, #9
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f50:	2300      	movs	r3, #0
 8010f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f56:	e002      	b.n	8010f5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010f58:	2304      	movs	r3, #4
 8010f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3730      	adds	r7, #48	; 0x30
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	20000129 	.word	0x20000129

08010f70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	4603      	mov	r3, r0
 8010f78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	4a08      	ldr	r2, [pc, #32]	; (8010fa0 <disk_status+0x30>)
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4413      	add	r3, r2
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	79fa      	ldrb	r2, [r7, #7]
 8010f88:	4905      	ldr	r1, [pc, #20]	; (8010fa0 <disk_status+0x30>)
 8010f8a:	440a      	add	r2, r1
 8010f8c:	7a12      	ldrb	r2, [r2, #8]
 8010f8e:	4610      	mov	r0, r2
 8010f90:	4798      	blx	r3
 8010f92:	4603      	mov	r3, r0
 8010f94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	20000c28 	.word	0x20000c28

08010fa4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	4a0d      	ldr	r2, [pc, #52]	; (8010fec <disk_initialize+0x48>)
 8010fb6:	5cd3      	ldrb	r3, [r2, r3]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d111      	bne.n	8010fe0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	4a0b      	ldr	r2, [pc, #44]	; (8010fec <disk_initialize+0x48>)
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010fc4:	79fb      	ldrb	r3, [r7, #7]
 8010fc6:	4a09      	ldr	r2, [pc, #36]	; (8010fec <disk_initialize+0x48>)
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	4413      	add	r3, r2
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	79fa      	ldrb	r2, [r7, #7]
 8010fd2:	4906      	ldr	r1, [pc, #24]	; (8010fec <disk_initialize+0x48>)
 8010fd4:	440a      	add	r2, r1
 8010fd6:	7a12      	ldrb	r2, [r2, #8]
 8010fd8:	4610      	mov	r0, r2
 8010fda:	4798      	blx	r3
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	20000c28 	.word	0x20000c28

08010ff0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010ff0:	b590      	push	{r4, r7, lr}
 8010ff2:	b087      	sub	sp, #28
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60b9      	str	r1, [r7, #8]
 8010ff8:	607a      	str	r2, [r7, #4]
 8010ffa:	603b      	str	r3, [r7, #0]
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011000:	7bfb      	ldrb	r3, [r7, #15]
 8011002:	4a0a      	ldr	r2, [pc, #40]	; (801102c <disk_read+0x3c>)
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	4413      	add	r3, r2
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	689c      	ldr	r4, [r3, #8]
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	4a07      	ldr	r2, [pc, #28]	; (801102c <disk_read+0x3c>)
 8011010:	4413      	add	r3, r2
 8011012:	7a18      	ldrb	r0, [r3, #8]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	68b9      	ldr	r1, [r7, #8]
 801101a:	47a0      	blx	r4
 801101c:	4603      	mov	r3, r0
 801101e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011020:	7dfb      	ldrb	r3, [r7, #23]
}
 8011022:	4618      	mov	r0, r3
 8011024:	371c      	adds	r7, #28
 8011026:	46bd      	mov	sp, r7
 8011028:	bd90      	pop	{r4, r7, pc}
 801102a:	bf00      	nop
 801102c:	20000c28 	.word	0x20000c28

08011030 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011030:	b590      	push	{r4, r7, lr}
 8011032:	b087      	sub	sp, #28
 8011034:	af00      	add	r7, sp, #0
 8011036:	60b9      	str	r1, [r7, #8]
 8011038:	607a      	str	r2, [r7, #4]
 801103a:	603b      	str	r3, [r7, #0]
 801103c:	4603      	mov	r3, r0
 801103e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011040:	7bfb      	ldrb	r3, [r7, #15]
 8011042:	4a0a      	ldr	r2, [pc, #40]	; (801106c <disk_write+0x3c>)
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	68dc      	ldr	r4, [r3, #12]
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	4a07      	ldr	r2, [pc, #28]	; (801106c <disk_write+0x3c>)
 8011050:	4413      	add	r3, r2
 8011052:	7a18      	ldrb	r0, [r3, #8]
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	68b9      	ldr	r1, [r7, #8]
 801105a:	47a0      	blx	r4
 801105c:	4603      	mov	r3, r0
 801105e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011060:	7dfb      	ldrb	r3, [r7, #23]
}
 8011062:	4618      	mov	r0, r3
 8011064:	371c      	adds	r7, #28
 8011066:	46bd      	mov	sp, r7
 8011068:	bd90      	pop	{r4, r7, pc}
 801106a:	bf00      	nop
 801106c:	20000c28 	.word	0x20000c28

08011070 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	4603      	mov	r3, r0
 8011078:	603a      	str	r2, [r7, #0]
 801107a:	71fb      	strb	r3, [r7, #7]
 801107c:	460b      	mov	r3, r1
 801107e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011080:	79fb      	ldrb	r3, [r7, #7]
 8011082:	4a09      	ldr	r2, [pc, #36]	; (80110a8 <disk_ioctl+0x38>)
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	4413      	add	r3, r2
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	79fa      	ldrb	r2, [r7, #7]
 801108e:	4906      	ldr	r1, [pc, #24]	; (80110a8 <disk_ioctl+0x38>)
 8011090:	440a      	add	r2, r1
 8011092:	7a10      	ldrb	r0, [r2, #8]
 8011094:	79b9      	ldrb	r1, [r7, #6]
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	4798      	blx	r3
 801109a:	4603      	mov	r3, r0
 801109c:	73fb      	strb	r3, [r7, #15]
  return res;
 801109e:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	20000c28 	.word	0x20000c28

080110ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	3301      	adds	r3, #1
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80110bc:	89fb      	ldrh	r3, [r7, #14]
 80110be:	021b      	lsls	r3, r3, #8
 80110c0:	b21a      	sxth	r2, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	b21b      	sxth	r3, r3
 80110c8:	4313      	orrs	r3, r2
 80110ca:	b21b      	sxth	r3, r3
 80110cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80110ce:	89fb      	ldrh	r3, [r7, #14]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	3303      	adds	r3, #3
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	021b      	lsls	r3, r3, #8
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	3202      	adds	r2, #2
 80110f4:	7812      	ldrb	r2, [r2, #0]
 80110f6:	4313      	orrs	r3, r2
 80110f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	3201      	adds	r2, #1
 8011102:	7812      	ldrb	r2, [r2, #0]
 8011104:	4313      	orrs	r3, r2
 8011106:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	021b      	lsls	r3, r3, #8
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	7812      	ldrb	r2, [r2, #0]
 8011110:	4313      	orrs	r3, r2
 8011112:	60fb      	str	r3, [r7, #12]
	return rv;
 8011114:	68fb      	ldr	r3, [r7, #12]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3714      	adds	r7, #20
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	887a      	ldrh	r2, [r7, #2]
 8011136:	b2d2      	uxtb	r2, r2
 8011138:	701a      	strb	r2, [r3, #0]
 801113a:	887b      	ldrh	r3, [r7, #2]
 801113c:	0a1b      	lsrs	r3, r3, #8
 801113e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	1c5a      	adds	r2, r3, #1
 8011144:	607a      	str	r2, [r7, #4]
 8011146:	887a      	ldrh	r2, [r7, #2]
 8011148:	b2d2      	uxtb	r2, r2
 801114a:	701a      	strb	r2, [r3, #0]
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	607a      	str	r2, [r7, #4]
 8011168:	683a      	ldr	r2, [r7, #0]
 801116a:	b2d2      	uxtb	r2, r2
 801116c:	701a      	strb	r2, [r3, #0]
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	0a1b      	lsrs	r3, r3, #8
 8011172:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	1c5a      	adds	r2, r3, #1
 8011178:	607a      	str	r2, [r7, #4]
 801117a:	683a      	ldr	r2, [r7, #0]
 801117c:	b2d2      	uxtb	r2, r2
 801117e:	701a      	strb	r2, [r3, #0]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	0a1b      	lsrs	r3, r3, #8
 8011184:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	1c5a      	adds	r2, r3, #1
 801118a:	607a      	str	r2, [r7, #4]
 801118c:	683a      	ldr	r2, [r7, #0]
 801118e:	b2d2      	uxtb	r2, r2
 8011190:	701a      	strb	r2, [r3, #0]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	0a1b      	lsrs	r3, r3, #8
 8011196:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	1c5a      	adds	r2, r3, #1
 801119c:	607a      	str	r2, [r7, #4]
 801119e:	683a      	ldr	r2, [r7, #0]
 80111a0:	b2d2      	uxtb	r2, r2
 80111a2:	701a      	strb	r2, [r3, #0]
}
 80111a4:	bf00      	nop
 80111a6:	370c      	adds	r7, #12
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80111b0:	b480      	push	{r7}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00d      	beq.n	80111e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80111ca:	693a      	ldr	r2, [r7, #16]
 80111cc:	1c53      	adds	r3, r2, #1
 80111ce:	613b      	str	r3, [r7, #16]
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	1c59      	adds	r1, r3, #1
 80111d4:	6179      	str	r1, [r7, #20]
 80111d6:	7812      	ldrb	r2, [r2, #0]
 80111d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3b01      	subs	r3, #1
 80111de:	607b      	str	r3, [r7, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1f1      	bne.n	80111ca <mem_cpy+0x1a>
	}
}
 80111e6:	bf00      	nop
 80111e8:	371c      	adds	r7, #28
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr

080111f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80111f2:	b480      	push	{r7}
 80111f4:	b087      	sub	sp, #28
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	60f8      	str	r0, [r7, #12]
 80111fa:	60b9      	str	r1, [r7, #8]
 80111fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	1c5a      	adds	r2, r3, #1
 8011206:	617a      	str	r2, [r7, #20]
 8011208:	68ba      	ldr	r2, [r7, #8]
 801120a:	b2d2      	uxtb	r2, r2
 801120c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	3b01      	subs	r3, #1
 8011212:	607b      	str	r3, [r7, #4]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1f3      	bne.n	8011202 <mem_set+0x10>
}
 801121a:	bf00      	nop
 801121c:	bf00      	nop
 801121e:	371c      	adds	r7, #28
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011228:	b480      	push	{r7}
 801122a:	b089      	sub	sp, #36	; 0x24
 801122c:	af00      	add	r7, sp, #0
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	61fb      	str	r3, [r7, #28]
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801123c:	2300      	movs	r3, #0
 801123e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	1c5a      	adds	r2, r3, #1
 8011244:	61fa      	str	r2, [r7, #28]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	4619      	mov	r1, r3
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	1c5a      	adds	r2, r3, #1
 801124e:	61ba      	str	r2, [r7, #24]
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	1acb      	subs	r3, r1, r3
 8011254:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	3b01      	subs	r3, #1
 801125a:	607b      	str	r3, [r7, #4]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d002      	beq.n	8011268 <mem_cmp+0x40>
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d0eb      	beq.n	8011240 <mem_cmp+0x18>

	return r;
 8011268:	697b      	ldr	r3, [r7, #20]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3724      	adds	r7, #36	; 0x24
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011276:	b480      	push	{r7}
 8011278:	b083      	sub	sp, #12
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011280:	e002      	b.n	8011288 <chk_chr+0x12>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	3301      	adds	r3, #1
 8011286:	607b      	str	r3, [r7, #4]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d005      	beq.n	801129c <chk_chr+0x26>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	461a      	mov	r2, r3
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	4293      	cmp	r3, r2
 801129a:	d1f2      	bne.n	8011282 <chk_chr+0xc>
	return *str;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	781b      	ldrb	r3, [r3, #0]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80112b6:	2300      	movs	r3, #0
 80112b8:	60bb      	str	r3, [r7, #8]
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	60fb      	str	r3, [r7, #12]
 80112be:	e029      	b.n	8011314 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80112c0:	4a27      	ldr	r2, [pc, #156]	; (8011360 <chk_lock+0xb4>)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	011b      	lsls	r3, r3, #4
 80112c6:	4413      	add	r3, r2
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d01d      	beq.n	801130a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80112ce:	4a24      	ldr	r2, [pc, #144]	; (8011360 <chk_lock+0xb4>)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	011b      	lsls	r3, r3, #4
 80112d4:	4413      	add	r3, r2
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d116      	bne.n	801130e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80112e0:	4a1f      	ldr	r2, [pc, #124]	; (8011360 <chk_lock+0xb4>)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	011b      	lsls	r3, r3, #4
 80112e6:	4413      	add	r3, r2
 80112e8:	3304      	adds	r3, #4
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d10c      	bne.n	801130e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80112f4:	4a1a      	ldr	r2, [pc, #104]	; (8011360 <chk_lock+0xb4>)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	011b      	lsls	r3, r3, #4
 80112fa:	4413      	add	r3, r2
 80112fc:	3308      	adds	r3, #8
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011304:	429a      	cmp	r2, r3
 8011306:	d102      	bne.n	801130e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011308:	e007      	b.n	801131a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801130a:	2301      	movs	r3, #1
 801130c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	3301      	adds	r3, #1
 8011312:	60fb      	str	r3, [r7, #12]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d9d2      	bls.n	80112c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2b02      	cmp	r3, #2
 801131e:	d109      	bne.n	8011334 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d102      	bne.n	801132c <chk_lock+0x80>
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	2b02      	cmp	r3, #2
 801132a:	d101      	bne.n	8011330 <chk_lock+0x84>
 801132c:	2300      	movs	r3, #0
 801132e:	e010      	b.n	8011352 <chk_lock+0xa6>
 8011330:	2312      	movs	r3, #18
 8011332:	e00e      	b.n	8011352 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d108      	bne.n	801134c <chk_lock+0xa0>
 801133a:	4a09      	ldr	r2, [pc, #36]	; (8011360 <chk_lock+0xb4>)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	011b      	lsls	r3, r3, #4
 8011340:	4413      	add	r3, r2
 8011342:	330c      	adds	r3, #12
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801134a:	d101      	bne.n	8011350 <chk_lock+0xa4>
 801134c:	2310      	movs	r3, #16
 801134e:	e000      	b.n	8011352 <chk_lock+0xa6>
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	20000c08 	.word	0x20000c08

08011364 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801136a:	2300      	movs	r3, #0
 801136c:	607b      	str	r3, [r7, #4]
 801136e:	e002      	b.n	8011376 <enq_lock+0x12>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	3301      	adds	r3, #1
 8011374:	607b      	str	r3, [r7, #4]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d806      	bhi.n	801138a <enq_lock+0x26>
 801137c:	4a09      	ldr	r2, [pc, #36]	; (80113a4 <enq_lock+0x40>)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	011b      	lsls	r3, r3, #4
 8011382:	4413      	add	r3, r2
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1f2      	bne.n	8011370 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2b02      	cmp	r3, #2
 801138e:	bf14      	ite	ne
 8011390:	2301      	movne	r3, #1
 8011392:	2300      	moveq	r3, #0
 8011394:	b2db      	uxtb	r3, r3
}
 8011396:	4618      	mov	r0, r3
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	20000c08 	.word	0x20000c08

080113a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80113b2:	2300      	movs	r3, #0
 80113b4:	60fb      	str	r3, [r7, #12]
 80113b6:	e01f      	b.n	80113f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80113b8:	4a41      	ldr	r2, [pc, #260]	; (80114c0 <inc_lock+0x118>)
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	4413      	add	r3, r2
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d113      	bne.n	80113f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80113ca:	4a3d      	ldr	r2, [pc, #244]	; (80114c0 <inc_lock+0x118>)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	011b      	lsls	r3, r3, #4
 80113d0:	4413      	add	r3, r2
 80113d2:	3304      	adds	r3, #4
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80113da:	429a      	cmp	r2, r3
 80113dc:	d109      	bne.n	80113f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80113de:	4a38      	ldr	r2, [pc, #224]	; (80114c0 <inc_lock+0x118>)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	011b      	lsls	r3, r3, #4
 80113e4:	4413      	add	r3, r2
 80113e6:	3308      	adds	r3, #8
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d006      	beq.n	8011400 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3301      	adds	r3, #1
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d9dc      	bls.n	80113b8 <inc_lock+0x10>
 80113fe:	e000      	b.n	8011402 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011400:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2b02      	cmp	r3, #2
 8011406:	d132      	bne.n	801146e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011408:	2300      	movs	r3, #0
 801140a:	60fb      	str	r3, [r7, #12]
 801140c:	e002      	b.n	8011414 <inc_lock+0x6c>
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	3301      	adds	r3, #1
 8011412:	60fb      	str	r3, [r7, #12]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2b01      	cmp	r3, #1
 8011418:	d806      	bhi.n	8011428 <inc_lock+0x80>
 801141a:	4a29      	ldr	r2, [pc, #164]	; (80114c0 <inc_lock+0x118>)
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	011b      	lsls	r3, r3, #4
 8011420:	4413      	add	r3, r2
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1f2      	bne.n	801140e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2b02      	cmp	r3, #2
 801142c:	d101      	bne.n	8011432 <inc_lock+0x8a>
 801142e:	2300      	movs	r3, #0
 8011430:	e040      	b.n	80114b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	4922      	ldr	r1, [pc, #136]	; (80114c0 <inc_lock+0x118>)
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	011b      	lsls	r3, r3, #4
 801143c:	440b      	add	r3, r1
 801143e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	689a      	ldr	r2, [r3, #8]
 8011444:	491e      	ldr	r1, [pc, #120]	; (80114c0 <inc_lock+0x118>)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	011b      	lsls	r3, r3, #4
 801144a:	440b      	add	r3, r1
 801144c:	3304      	adds	r3, #4
 801144e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	695a      	ldr	r2, [r3, #20]
 8011454:	491a      	ldr	r1, [pc, #104]	; (80114c0 <inc_lock+0x118>)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	011b      	lsls	r3, r3, #4
 801145a:	440b      	add	r3, r1
 801145c:	3308      	adds	r3, #8
 801145e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011460:	4a17      	ldr	r2, [pc, #92]	; (80114c0 <inc_lock+0x118>)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	011b      	lsls	r3, r3, #4
 8011466:	4413      	add	r3, r2
 8011468:	330c      	adds	r3, #12
 801146a:	2200      	movs	r2, #0
 801146c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d009      	beq.n	8011488 <inc_lock+0xe0>
 8011474:	4a12      	ldr	r2, [pc, #72]	; (80114c0 <inc_lock+0x118>)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	011b      	lsls	r3, r3, #4
 801147a:	4413      	add	r3, r2
 801147c:	330c      	adds	r3, #12
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <inc_lock+0xe0>
 8011484:	2300      	movs	r3, #0
 8011486:	e015      	b.n	80114b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d108      	bne.n	80114a0 <inc_lock+0xf8>
 801148e:	4a0c      	ldr	r2, [pc, #48]	; (80114c0 <inc_lock+0x118>)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	011b      	lsls	r3, r3, #4
 8011494:	4413      	add	r3, r2
 8011496:	330c      	adds	r3, #12
 8011498:	881b      	ldrh	r3, [r3, #0]
 801149a:	3301      	adds	r3, #1
 801149c:	b29a      	uxth	r2, r3
 801149e:	e001      	b.n	80114a4 <inc_lock+0xfc>
 80114a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80114a4:	4906      	ldr	r1, [pc, #24]	; (80114c0 <inc_lock+0x118>)
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	011b      	lsls	r3, r3, #4
 80114aa:	440b      	add	r3, r1
 80114ac:	330c      	adds	r3, #12
 80114ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	3301      	adds	r3, #1
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	20000c08 	.word	0x20000c08

080114c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	607b      	str	r3, [r7, #4]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d825      	bhi.n	8011524 <dec_lock+0x60>
		n = Files[i].ctr;
 80114d8:	4a17      	ldr	r2, [pc, #92]	; (8011538 <dec_lock+0x74>)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	011b      	lsls	r3, r3, #4
 80114de:	4413      	add	r3, r2
 80114e0:	330c      	adds	r3, #12
 80114e2:	881b      	ldrh	r3, [r3, #0]
 80114e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80114e6:	89fb      	ldrh	r3, [r7, #14]
 80114e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114ec:	d101      	bne.n	80114f2 <dec_lock+0x2e>
 80114ee:	2300      	movs	r3, #0
 80114f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80114f2:	89fb      	ldrh	r3, [r7, #14]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d002      	beq.n	80114fe <dec_lock+0x3a>
 80114f8:	89fb      	ldrh	r3, [r7, #14]
 80114fa:	3b01      	subs	r3, #1
 80114fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80114fe:	4a0e      	ldr	r2, [pc, #56]	; (8011538 <dec_lock+0x74>)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	011b      	lsls	r3, r3, #4
 8011504:	4413      	add	r3, r2
 8011506:	330c      	adds	r3, #12
 8011508:	89fa      	ldrh	r2, [r7, #14]
 801150a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801150c:	89fb      	ldrh	r3, [r7, #14]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d105      	bne.n	801151e <dec_lock+0x5a>
 8011512:	4a09      	ldr	r2, [pc, #36]	; (8011538 <dec_lock+0x74>)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	011b      	lsls	r3, r3, #4
 8011518:	4413      	add	r3, r2
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801151e:	2300      	movs	r3, #0
 8011520:	737b      	strb	r3, [r7, #13]
 8011522:	e001      	b.n	8011528 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011524:	2302      	movs	r3, #2
 8011526:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011528:	7b7b      	ldrb	r3, [r7, #13]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3714      	adds	r7, #20
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	20000c08 	.word	0x20000c08

0801153c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011544:	2300      	movs	r3, #0
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	e010      	b.n	801156c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801154a:	4a0d      	ldr	r2, [pc, #52]	; (8011580 <clear_lock+0x44>)
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	011b      	lsls	r3, r3, #4
 8011550:	4413      	add	r3, r2
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	429a      	cmp	r2, r3
 8011558:	d105      	bne.n	8011566 <clear_lock+0x2a>
 801155a:	4a09      	ldr	r2, [pc, #36]	; (8011580 <clear_lock+0x44>)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	011b      	lsls	r3, r3, #4
 8011560:	4413      	add	r3, r2
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	3301      	adds	r3, #1
 801156a:	60fb      	str	r3, [r7, #12]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2b01      	cmp	r3, #1
 8011570:	d9eb      	bls.n	801154a <clear_lock+0xe>
	}
}
 8011572:	bf00      	nop
 8011574:	bf00      	nop
 8011576:	3714      	adds	r7, #20
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr
 8011580:	20000c08 	.word	0x20000c08

08011584 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801158c:	2300      	movs	r3, #0
 801158e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	78db      	ldrb	r3, [r3, #3]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d034      	beq.n	8011602 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801159c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	7858      	ldrb	r0, [r3, #1]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115a8:	2301      	movs	r3, #1
 80115aa:	697a      	ldr	r2, [r7, #20]
 80115ac:	f7ff fd40 	bl	8011030 <disk_write>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d002      	beq.n	80115bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80115b6:	2301      	movs	r3, #1
 80115b8:	73fb      	strb	r3, [r7, #15]
 80115ba:	e022      	b.n	8011602 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2200      	movs	r2, #0
 80115c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a1b      	ldr	r3, [r3, #32]
 80115c6:	697a      	ldr	r2, [r7, #20]
 80115c8:	1ad2      	subs	r2, r2, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	699b      	ldr	r3, [r3, #24]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d217      	bcs.n	8011602 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	789b      	ldrb	r3, [r3, #2]
 80115d6:	613b      	str	r3, [r7, #16]
 80115d8:	e010      	b.n	80115fc <sync_window+0x78>
					wsect += fs->fsize;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	699b      	ldr	r3, [r3, #24]
 80115de:	697a      	ldr	r2, [r7, #20]
 80115e0:	4413      	add	r3, r2
 80115e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	7858      	ldrb	r0, [r3, #1]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115ee:	2301      	movs	r3, #1
 80115f0:	697a      	ldr	r2, [r7, #20]
 80115f2:	f7ff fd1d 	bl	8011030 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	3b01      	subs	r3, #1
 80115fa:	613b      	str	r3, [r7, #16]
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d8eb      	bhi.n	80115da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011602:	7bfb      	ldrb	r3, [r7, #15]
}
 8011604:	4618      	mov	r0, r3
 8011606:	3718      	adds	r7, #24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011616:	2300      	movs	r3, #0
 8011618:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161e:	683a      	ldr	r2, [r7, #0]
 8011620:	429a      	cmp	r2, r3
 8011622:	d01b      	beq.n	801165c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff ffad 	bl	8011584 <sync_window>
 801162a:	4603      	mov	r3, r0
 801162c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801162e:	7bfb      	ldrb	r3, [r7, #15]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d113      	bne.n	801165c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	7858      	ldrb	r0, [r3, #1]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801163e:	2301      	movs	r3, #1
 8011640:	683a      	ldr	r2, [r7, #0]
 8011642:	f7ff fcd5 	bl	8010ff0 <disk_read>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d004      	beq.n	8011656 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801164c:	f04f 33ff 	mov.w	r3, #4294967295
 8011650:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011652:	2301      	movs	r3, #1
 8011654:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801165c:	7bfb      	ldrb	r3, [r7, #15]
}
 801165e:	4618      	mov	r0, r3
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
	...

08011668 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff ff87 	bl	8011584 <sync_window>
 8011676:	4603      	mov	r3, r0
 8011678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801167a:	7bfb      	ldrb	r3, [r7, #15]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d158      	bne.n	8011732 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	2b03      	cmp	r3, #3
 8011686:	d148      	bne.n	801171a <sync_fs+0xb2>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	791b      	ldrb	r3, [r3, #4]
 801168c:	2b01      	cmp	r3, #1
 801168e:	d144      	bne.n	801171a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	3330      	adds	r3, #48	; 0x30
 8011694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011698:	2100      	movs	r1, #0
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff fda9 	bl	80111f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	3330      	adds	r3, #48	; 0x30
 80116a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80116a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff fd38 	bl	8011122 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	3330      	adds	r3, #48	; 0x30
 80116b6:	4921      	ldr	r1, [pc, #132]	; (801173c <sync_fs+0xd4>)
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7ff fd4d 	bl	8011158 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	3330      	adds	r3, #48	; 0x30
 80116c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80116c6:	491e      	ldr	r1, [pc, #120]	; (8011740 <sync_fs+0xd8>)
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7ff fd45 	bl	8011158 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	3330      	adds	r3, #48	; 0x30
 80116d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	4619      	mov	r1, r3
 80116dc:	4610      	mov	r0, r2
 80116de:	f7ff fd3b 	bl	8011158 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	3330      	adds	r3, #48	; 0x30
 80116e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	4619      	mov	r1, r3
 80116f0:	4610      	mov	r0, r2
 80116f2:	f7ff fd31 	bl	8011158 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	69db      	ldr	r3, [r3, #28]
 80116fa:	1c5a      	adds	r2, r3, #1
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	7858      	ldrb	r0, [r3, #1]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801170e:	2301      	movs	r3, #1
 8011710:	f7ff fc8e 	bl	8011030 <disk_write>
			fs->fsi_flag = 0;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	785b      	ldrb	r3, [r3, #1]
 801171e:	2200      	movs	r2, #0
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f7ff fca4 	bl	8011070 <disk_ioctl>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d001      	beq.n	8011732 <sync_fs+0xca>
 801172e:	2301      	movs	r3, #1
 8011730:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011732:	7bfb      	ldrb	r3, [r7, #15]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	41615252 	.word	0x41615252
 8011740:	61417272 	.word	0x61417272

08011744 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	3b02      	subs	r3, #2
 8011752:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	695b      	ldr	r3, [r3, #20]
 8011758:	3b02      	subs	r3, #2
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	429a      	cmp	r2, r3
 801175e:	d301      	bcc.n	8011764 <clust2sect+0x20>
 8011760:	2300      	movs	r3, #0
 8011762:	e008      	b.n	8011776 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	895b      	ldrh	r3, [r3, #10]
 8011768:	461a      	mov	r2, r3
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	fb03 f202 	mul.w	r2, r3, r2
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011774:	4413      	add	r3, r2
}
 8011776:	4618      	mov	r0, r3
 8011778:	370c      	adds	r7, #12
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr

08011782 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b086      	sub	sp, #24
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
 801178a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d904      	bls.n	80117a2 <get_fat+0x20>
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d302      	bcc.n	80117a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80117a2:	2301      	movs	r3, #1
 80117a4:	617b      	str	r3, [r7, #20]
 80117a6:	e08f      	b.n	80118c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80117a8:	f04f 33ff 	mov.w	r3, #4294967295
 80117ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	2b03      	cmp	r3, #3
 80117b4:	d062      	beq.n	801187c <get_fat+0xfa>
 80117b6:	2b03      	cmp	r3, #3
 80117b8:	dc7c      	bgt.n	80118b4 <get_fat+0x132>
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d002      	beq.n	80117c4 <get_fat+0x42>
 80117be:	2b02      	cmp	r3, #2
 80117c0:	d042      	beq.n	8011848 <get_fat+0xc6>
 80117c2:	e077      	b.n	80118b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	60fb      	str	r3, [r7, #12]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	085b      	lsrs	r3, r3, #1
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	4413      	add	r3, r2
 80117d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	6a1a      	ldr	r2, [r3, #32]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	0a5b      	lsrs	r3, r3, #9
 80117da:	4413      	add	r3, r2
 80117dc:	4619      	mov	r1, r3
 80117de:	6938      	ldr	r0, [r7, #16]
 80117e0:	f7ff ff14 	bl	801160c <move_window>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d167      	bne.n	80118ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	1c5a      	adds	r2, r3, #1
 80117ee:	60fa      	str	r2, [r7, #12]
 80117f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117f4:	693a      	ldr	r2, [r7, #16]
 80117f6:	4413      	add	r3, r2
 80117f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	6a1a      	ldr	r2, [r3, #32]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	0a5b      	lsrs	r3, r3, #9
 8011806:	4413      	add	r3, r2
 8011808:	4619      	mov	r1, r3
 801180a:	6938      	ldr	r0, [r7, #16]
 801180c:	f7ff fefe 	bl	801160c <move_window>
 8011810:	4603      	mov	r3, r0
 8011812:	2b00      	cmp	r3, #0
 8011814:	d153      	bne.n	80118be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	4413      	add	r3, r2
 8011820:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011824:	021b      	lsls	r3, r3, #8
 8011826:	461a      	mov	r2, r3
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	4313      	orrs	r3, r2
 801182c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	f003 0301 	and.w	r3, r3, #1
 8011834:	2b00      	cmp	r3, #0
 8011836:	d002      	beq.n	801183e <get_fat+0xbc>
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	091b      	lsrs	r3, r3, #4
 801183c:	e002      	b.n	8011844 <get_fat+0xc2>
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011844:	617b      	str	r3, [r7, #20]
			break;
 8011846:	e03f      	b.n	80118c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	6a1a      	ldr	r2, [r3, #32]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	0a1b      	lsrs	r3, r3, #8
 8011850:	4413      	add	r3, r2
 8011852:	4619      	mov	r1, r3
 8011854:	6938      	ldr	r0, [r7, #16]
 8011856:	f7ff fed9 	bl	801160c <move_window>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d130      	bne.n	80118c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801186e:	4413      	add	r3, r2
 8011870:	4618      	mov	r0, r3
 8011872:	f7ff fc1b 	bl	80110ac <ld_word>
 8011876:	4603      	mov	r3, r0
 8011878:	617b      	str	r3, [r7, #20]
			break;
 801187a:	e025      	b.n	80118c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	6a1a      	ldr	r2, [r3, #32]
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	09db      	lsrs	r3, r3, #7
 8011884:	4413      	add	r3, r2
 8011886:	4619      	mov	r1, r3
 8011888:	6938      	ldr	r0, [r7, #16]
 801188a:	f7ff febf 	bl	801160c <move_window>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d118      	bne.n	80118c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80118a2:	4413      	add	r3, r2
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff fc19 	bl	80110dc <ld_dword>
 80118aa:	4603      	mov	r3, r0
 80118ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80118b0:	617b      	str	r3, [r7, #20]
			break;
 80118b2:	e009      	b.n	80118c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80118b4:	2301      	movs	r3, #1
 80118b6:	617b      	str	r3, [r7, #20]
 80118b8:	e006      	b.n	80118c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80118ba:	bf00      	nop
 80118bc:	e004      	b.n	80118c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80118be:	bf00      	nop
 80118c0:	e002      	b.n	80118c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80118c2:	bf00      	nop
 80118c4:	e000      	b.n	80118c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80118c6:	bf00      	nop
		}
	}

	return val;
 80118c8:	697b      	ldr	r3, [r7, #20]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3718      	adds	r7, #24
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}

080118d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80118d2:	b590      	push	{r4, r7, lr}
 80118d4:	b089      	sub	sp, #36	; 0x24
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	60f8      	str	r0, [r7, #12]
 80118da:	60b9      	str	r1, [r7, #8]
 80118dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80118de:	2302      	movs	r3, #2
 80118e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	f240 80d2 	bls.w	8011a8e <put_fat+0x1bc>
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	695b      	ldr	r3, [r3, #20]
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	f080 80cc 	bcs.w	8011a8e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	2b03      	cmp	r3, #3
 80118fc:	f000 8096 	beq.w	8011a2c <put_fat+0x15a>
 8011900:	2b03      	cmp	r3, #3
 8011902:	f300 80cd 	bgt.w	8011aa0 <put_fat+0x1ce>
 8011906:	2b01      	cmp	r3, #1
 8011908:	d002      	beq.n	8011910 <put_fat+0x3e>
 801190a:	2b02      	cmp	r3, #2
 801190c:	d06e      	beq.n	80119ec <put_fat+0x11a>
 801190e:	e0c7      	b.n	8011aa0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	61bb      	str	r3, [r7, #24]
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	085b      	lsrs	r3, r3, #1
 8011918:	69ba      	ldr	r2, [r7, #24]
 801191a:	4413      	add	r3, r2
 801191c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	6a1a      	ldr	r2, [r3, #32]
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	0a5b      	lsrs	r3, r3, #9
 8011926:	4413      	add	r3, r2
 8011928:	4619      	mov	r1, r3
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f7ff fe6e 	bl	801160c <move_window>
 8011930:	4603      	mov	r3, r0
 8011932:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011934:	7ffb      	ldrb	r3, [r7, #31]
 8011936:	2b00      	cmp	r3, #0
 8011938:	f040 80ab 	bne.w	8011a92 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	1c59      	adds	r1, r3, #1
 8011946:	61b9      	str	r1, [r7, #24]
 8011948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801194c:	4413      	add	r3, r2
 801194e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00d      	beq.n	8011976 <put_fat+0xa4>
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	b25b      	sxtb	r3, r3
 8011960:	f003 030f 	and.w	r3, r3, #15
 8011964:	b25a      	sxtb	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	b2db      	uxtb	r3, r3
 801196a:	011b      	lsls	r3, r3, #4
 801196c:	b25b      	sxtb	r3, r3
 801196e:	4313      	orrs	r3, r2
 8011970:	b25b      	sxtb	r3, r3
 8011972:	b2db      	uxtb	r3, r3
 8011974:	e001      	b.n	801197a <put_fat+0xa8>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	b2db      	uxtb	r3, r3
 801197a:	697a      	ldr	r2, [r7, #20]
 801197c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2201      	movs	r2, #1
 8011982:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6a1a      	ldr	r2, [r3, #32]
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	0a5b      	lsrs	r3, r3, #9
 801198c:	4413      	add	r3, r2
 801198e:	4619      	mov	r1, r3
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f7ff fe3b 	bl	801160c <move_window>
 8011996:	4603      	mov	r3, r0
 8011998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801199a:	7ffb      	ldrb	r3, [r7, #31]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d17a      	bne.n	8011a96 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119ac:	4413      	add	r3, r2
 80119ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	f003 0301 	and.w	r3, r3, #1
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d003      	beq.n	80119c2 <put_fat+0xf0>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	091b      	lsrs	r3, r3, #4
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	e00e      	b.n	80119e0 <put_fat+0x10e>
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	b25b      	sxtb	r3, r3
 80119c8:	f023 030f 	bic.w	r3, r3, #15
 80119cc:	b25a      	sxtb	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	0a1b      	lsrs	r3, r3, #8
 80119d2:	b25b      	sxtb	r3, r3
 80119d4:	f003 030f 	and.w	r3, r3, #15
 80119d8:	b25b      	sxtb	r3, r3
 80119da:	4313      	orrs	r3, r2
 80119dc:	b25b      	sxtb	r3, r3
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	697a      	ldr	r2, [r7, #20]
 80119e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2201      	movs	r2, #1
 80119e8:	70da      	strb	r2, [r3, #3]
			break;
 80119ea:	e059      	b.n	8011aa0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	6a1a      	ldr	r2, [r3, #32]
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	0a1b      	lsrs	r3, r3, #8
 80119f4:	4413      	add	r3, r2
 80119f6:	4619      	mov	r1, r3
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	f7ff fe07 	bl	801160c <move_window>
 80119fe:	4603      	mov	r3, r0
 8011a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a02:	7ffb      	ldrb	r3, [r7, #31]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d148      	bne.n	8011a9a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011a16:	4413      	add	r3, r2
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	b292      	uxth	r2, r2
 8011a1c:	4611      	mov	r1, r2
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7ff fb7f 	bl	8011122 <st_word>
			fs->wflag = 1;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2201      	movs	r2, #1
 8011a28:	70da      	strb	r2, [r3, #3]
			break;
 8011a2a:	e039      	b.n	8011aa0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	6a1a      	ldr	r2, [r3, #32]
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	09db      	lsrs	r3, r3, #7
 8011a34:	4413      	add	r3, r2
 8011a36:	4619      	mov	r1, r3
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f7ff fde7 	bl	801160c <move_window>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a42:	7ffb      	ldrb	r3, [r7, #31]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d12a      	bne.n	8011a9e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011a5c:	4413      	add	r3, r2
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7ff fb3c 	bl	80110dc <ld_dword>
 8011a64:	4603      	mov	r3, r0
 8011a66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011a6a:	4323      	orrs	r3, r4
 8011a6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011a7c:	4413      	add	r3, r2
 8011a7e:	6879      	ldr	r1, [r7, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff fb69 	bl	8011158 <st_dword>
			fs->wflag = 1;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2201      	movs	r2, #1
 8011a8a:	70da      	strb	r2, [r3, #3]
			break;
 8011a8c:	e008      	b.n	8011aa0 <put_fat+0x1ce>
		}
	}
 8011a8e:	bf00      	nop
 8011a90:	e006      	b.n	8011aa0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011a92:	bf00      	nop
 8011a94:	e004      	b.n	8011aa0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011a96:	bf00      	nop
 8011a98:	e002      	b.n	8011aa0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011a9a:	bf00      	nop
 8011a9c:	e000      	b.n	8011aa0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011a9e:	bf00      	nop
	return res;
 8011aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3724      	adds	r7, #36	; 0x24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd90      	pop	{r4, r7, pc}

08011aaa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b088      	sub	sp, #32
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	60f8      	str	r0, [r7, #12]
 8011ab2:	60b9      	str	r1, [r7, #8]
 8011ab4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d904      	bls.n	8011ad0 <remove_chain+0x26>
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	695b      	ldr	r3, [r3, #20]
 8011aca:	68ba      	ldr	r2, [r7, #8]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d301      	bcc.n	8011ad4 <remove_chain+0x2a>
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	e04b      	b.n	8011b6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00c      	beq.n	8011af4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011ada:	f04f 32ff 	mov.w	r2, #4294967295
 8011ade:	6879      	ldr	r1, [r7, #4]
 8011ae0:	69b8      	ldr	r0, [r7, #24]
 8011ae2:	f7ff fef6 	bl	80118d2 <put_fat>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011aea:	7ffb      	ldrb	r3, [r7, #31]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <remove_chain+0x4a>
 8011af0:	7ffb      	ldrb	r3, [r7, #31]
 8011af2:	e03b      	b.n	8011b6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f7ff fe43 	bl	8011782 <get_fat>
 8011afc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d031      	beq.n	8011b68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d101      	bne.n	8011b0e <remove_chain+0x64>
 8011b0a:	2302      	movs	r3, #2
 8011b0c:	e02e      	b.n	8011b6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b14:	d101      	bne.n	8011b1a <remove_chain+0x70>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e028      	b.n	8011b6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	68b9      	ldr	r1, [r7, #8]
 8011b1e:	69b8      	ldr	r0, [r7, #24]
 8011b20:	f7ff fed7 	bl	80118d2 <put_fat>
 8011b24:	4603      	mov	r3, r0
 8011b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011b28:	7ffb      	ldrb	r3, [r7, #31]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d001      	beq.n	8011b32 <remove_chain+0x88>
 8011b2e:	7ffb      	ldrb	r3, [r7, #31]
 8011b30:	e01c      	b.n	8011b6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	691a      	ldr	r2, [r3, #16]
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	695b      	ldr	r3, [r3, #20]
 8011b3a:	3b02      	subs	r3, #2
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d20b      	bcs.n	8011b58 <remove_chain+0xae>
			fs->free_clst++;
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	691b      	ldr	r3, [r3, #16]
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	791b      	ldrb	r3, [r3, #4]
 8011b4e:	f043 0301 	orr.w	r3, r3, #1
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	695b      	ldr	r3, [r3, #20]
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d3c6      	bcc.n	8011af4 <remove_chain+0x4a>
 8011b66:	e000      	b.n	8011b6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011b68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3720      	adds	r7, #32
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b088      	sub	sp, #32
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d10d      	bne.n	8011ba6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d004      	beq.n	8011ba0 <create_chain+0x2c>
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	695b      	ldr	r3, [r3, #20]
 8011b9a:	69ba      	ldr	r2, [r7, #24]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d31b      	bcc.n	8011bd8 <create_chain+0x64>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	61bb      	str	r3, [r7, #24]
 8011ba4:	e018      	b.n	8011bd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff fdea 	bl	8011782 <get_fat>
 8011bae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d801      	bhi.n	8011bba <create_chain+0x46>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e070      	b.n	8011c9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc0:	d101      	bne.n	8011bc6 <create_chain+0x52>
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	e06a      	b.n	8011c9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	68fa      	ldr	r2, [r7, #12]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d201      	bcs.n	8011bd4 <create_chain+0x60>
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	e063      	b.n	8011c9c <create_chain+0x128>
		scl = clst;
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	3301      	adds	r3, #1
 8011be0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	695b      	ldr	r3, [r3, #20]
 8011be6:	69fa      	ldr	r2, [r7, #28]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d307      	bcc.n	8011bfc <create_chain+0x88>
				ncl = 2;
 8011bec:	2302      	movs	r3, #2
 8011bee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011bf0:	69fa      	ldr	r2, [r7, #28]
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d901      	bls.n	8011bfc <create_chain+0x88>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e04f      	b.n	8011c9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011bfc:	69f9      	ldr	r1, [r7, #28]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7ff fdbf 	bl	8011782 <get_fat>
 8011c04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d00e      	beq.n	8011c2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	d003      	beq.n	8011c1a <create_chain+0xa6>
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c18:	d101      	bne.n	8011c1e <create_chain+0xaa>
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	e03e      	b.n	8011c9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011c1e:	69fa      	ldr	r2, [r7, #28]
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d1da      	bne.n	8011bdc <create_chain+0x68>
 8011c26:	2300      	movs	r3, #0
 8011c28:	e038      	b.n	8011c9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011c2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c30:	69f9      	ldr	r1, [r7, #28]
 8011c32:	6938      	ldr	r0, [r7, #16]
 8011c34:	f7ff fe4d 	bl	80118d2 <put_fat>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011c3c:	7dfb      	ldrb	r3, [r7, #23]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d109      	bne.n	8011c56 <create_chain+0xe2>
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d006      	beq.n	8011c56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011c48:	69fa      	ldr	r2, [r7, #28]
 8011c4a:	6839      	ldr	r1, [r7, #0]
 8011c4c:	6938      	ldr	r0, [r7, #16]
 8011c4e:	f7ff fe40 	bl	80118d2 <put_fat>
 8011c52:	4603      	mov	r3, r0
 8011c54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011c56:	7dfb      	ldrb	r3, [r7, #23]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d116      	bne.n	8011c8a <create_chain+0x116>
		fs->last_clst = ncl;
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	69fa      	ldr	r2, [r7, #28]
 8011c60:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	691a      	ldr	r2, [r3, #16]
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	695b      	ldr	r3, [r3, #20]
 8011c6a:	3b02      	subs	r3, #2
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d804      	bhi.n	8011c7a <create_chain+0x106>
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	691b      	ldr	r3, [r3, #16]
 8011c74:	1e5a      	subs	r2, r3, #1
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	791b      	ldrb	r3, [r3, #4]
 8011c7e:	f043 0301 	orr.w	r3, r3, #1
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	711a      	strb	r2, [r3, #4]
 8011c88:	e007      	b.n	8011c9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011c8a:	7dfb      	ldrb	r3, [r7, #23]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d102      	bne.n	8011c96 <create_chain+0x122>
 8011c90:	f04f 33ff 	mov.w	r3, #4294967295
 8011c94:	e000      	b.n	8011c98 <create_chain+0x124>
 8011c96:	2301      	movs	r3, #1
 8011c98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011c9a:	69fb      	ldr	r3, [r7, #28]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3720      	adds	r7, #32
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b087      	sub	sp, #28
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb8:	3304      	adds	r3, #4
 8011cba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	0a5b      	lsrs	r3, r3, #9
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	8952      	ldrh	r2, [r2, #10]
 8011cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cc8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	1d1a      	adds	r2, r3, #4
 8011cce:	613a      	str	r2, [r7, #16]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <clmt_clust+0x3a>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	e010      	b.n	8011d00 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011cde:	697a      	ldr	r2, [r7, #20]
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d307      	bcc.n	8011cf6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	617b      	str	r3, [r7, #20]
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011cf4:	e7e9      	b.n	8011cca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011cf6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	4413      	add	r3, r2
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	371c      	adds	r7, #28
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr

08011d0c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b086      	sub	sp, #24
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011d22:	d204      	bcs.n	8011d2e <dir_sdi+0x22>
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	f003 031f 	and.w	r3, r3, #31
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d001      	beq.n	8011d32 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011d2e:	2302      	movs	r3, #2
 8011d30:	e063      	b.n	8011dfa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	683a      	ldr	r2, [r7, #0]
 8011d36:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d106      	bne.n	8011d52 <dir_sdi+0x46>
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	2b02      	cmp	r3, #2
 8011d4a:	d902      	bls.n	8011d52 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d50:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10c      	bne.n	8011d72 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	095b      	lsrs	r3, r3, #5
 8011d5c:	693a      	ldr	r2, [r7, #16]
 8011d5e:	8912      	ldrh	r2, [r2, #8]
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d301      	bcc.n	8011d68 <dir_sdi+0x5c>
 8011d64:	2302      	movs	r3, #2
 8011d66:	e048      	b.n	8011dfa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	61da      	str	r2, [r3, #28]
 8011d70:	e029      	b.n	8011dc6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	895b      	ldrh	r3, [r3, #10]
 8011d76:	025b      	lsls	r3, r3, #9
 8011d78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d7a:	e019      	b.n	8011db0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6979      	ldr	r1, [r7, #20]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7ff fcfe 	bl	8011782 <get_fat>
 8011d86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d101      	bne.n	8011d94 <dir_sdi+0x88>
 8011d90:	2301      	movs	r3, #1
 8011d92:	e032      	b.n	8011dfa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d904      	bls.n	8011da4 <dir_sdi+0x98>
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	695b      	ldr	r3, [r3, #20]
 8011d9e:	697a      	ldr	r2, [r7, #20]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d301      	bcc.n	8011da8 <dir_sdi+0x9c>
 8011da4:	2302      	movs	r3, #2
 8011da6:	e028      	b.n	8011dfa <dir_sdi+0xee>
			ofs -= csz;
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011db0:	683a      	ldr	r2, [r7, #0]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d2e1      	bcs.n	8011d7c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011db8:	6979      	ldr	r1, [r7, #20]
 8011dba:	6938      	ldr	r0, [r7, #16]
 8011dbc:	f7ff fcc2 	bl	8011744 <clust2sect>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	697a      	ldr	r2, [r7, #20]
 8011dca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d101      	bne.n	8011dd8 <dir_sdi+0xcc>
 8011dd4:	2302      	movs	r3, #2
 8011dd6:	e010      	b.n	8011dfa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	69da      	ldr	r2, [r3, #28]
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	0a5b      	lsrs	r3, r3, #9
 8011de0:	441a      	add	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011df2:	441a      	add	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011df8:	2300      	movs	r3, #0
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3718      	adds	r7, #24
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}

08011e02 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011e02:	b580      	push	{r7, lr}
 8011e04:	b086      	sub	sp, #24
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	6078      	str	r0, [r7, #4]
 8011e0a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	695b      	ldr	r3, [r3, #20]
 8011e16:	3320      	adds	r3, #32
 8011e18:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	69db      	ldr	r3, [r3, #28]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d003      	beq.n	8011e2a <dir_next+0x28>
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e28:	d301      	bcc.n	8011e2e <dir_next+0x2c>
 8011e2a:	2304      	movs	r3, #4
 8011e2c:	e0aa      	b.n	8011f84 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	f040 8098 	bne.w	8011f6a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	69db      	ldr	r3, [r3, #28]
 8011e3e:	1c5a      	adds	r2, r3, #1
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	699b      	ldr	r3, [r3, #24]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d10b      	bne.n	8011e64 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	095b      	lsrs	r3, r3, #5
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	8912      	ldrh	r2, [r2, #8]
 8011e54:	4293      	cmp	r3, r2
 8011e56:	f0c0 8088 	bcc.w	8011f6a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	61da      	str	r2, [r3, #28]
 8011e60:	2304      	movs	r3, #4
 8011e62:	e08f      	b.n	8011f84 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	0a5b      	lsrs	r3, r3, #9
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	8952      	ldrh	r2, [r2, #10]
 8011e6c:	3a01      	subs	r2, #1
 8011e6e:	4013      	ands	r3, r2
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d17a      	bne.n	8011f6a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	699b      	ldr	r3, [r3, #24]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7ff fc80 	bl	8011782 <get_fat>
 8011e82:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d801      	bhi.n	8011e8e <dir_next+0x8c>
 8011e8a:	2302      	movs	r3, #2
 8011e8c:	e07a      	b.n	8011f84 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e94:	d101      	bne.n	8011e9a <dir_next+0x98>
 8011e96:	2301      	movs	r3, #1
 8011e98:	e074      	b.n	8011f84 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	695b      	ldr	r3, [r3, #20]
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d358      	bcc.n	8011f56 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d104      	bne.n	8011eb4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	61da      	str	r2, [r3, #28]
 8011eb0:	2304      	movs	r3, #4
 8011eb2:	e067      	b.n	8011f84 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011eb4:	687a      	ldr	r2, [r7, #4]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	699b      	ldr	r3, [r3, #24]
 8011eba:	4619      	mov	r1, r3
 8011ebc:	4610      	mov	r0, r2
 8011ebe:	f7ff fe59 	bl	8011b74 <create_chain>
 8011ec2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d101      	bne.n	8011ece <dir_next+0xcc>
 8011eca:	2307      	movs	r3, #7
 8011ecc:	e05a      	b.n	8011f84 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d101      	bne.n	8011ed8 <dir_next+0xd6>
 8011ed4:	2302      	movs	r3, #2
 8011ed6:	e055      	b.n	8011f84 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ede:	d101      	bne.n	8011ee4 <dir_next+0xe2>
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e04f      	b.n	8011f84 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	f7ff fb4d 	bl	8011584 <sync_window>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <dir_next+0xf2>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e047      	b.n	8011f84 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	3330      	adds	r3, #48	; 0x30
 8011ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011efc:	2100      	movs	r1, #0
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff f977 	bl	80111f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f04:	2300      	movs	r3, #0
 8011f06:	613b      	str	r3, [r7, #16]
 8011f08:	6979      	ldr	r1, [r7, #20]
 8011f0a:	68f8      	ldr	r0, [r7, #12]
 8011f0c:	f7ff fc1a 	bl	8011744 <clust2sect>
 8011f10:	4602      	mov	r2, r0
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8011f16:	e012      	b.n	8011f3e <dir_next+0x13c>
						fs->wflag = 1;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f7ff fb30 	bl	8011584 <sync_window>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <dir_next+0x12c>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e02a      	b.n	8011f84 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	3301      	adds	r3, #1
 8011f32:	613b      	str	r3, [r7, #16]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f38:	1c5a      	adds	r2, r3, #1
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	895b      	ldrh	r3, [r3, #10]
 8011f42:	461a      	mov	r2, r3
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	4293      	cmp	r3, r2
 8011f48:	d3e6      	bcc.n	8011f18 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	1ad2      	subs	r2, r2, r3
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	697a      	ldr	r2, [r7, #20]
 8011f5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011f5c:	6979      	ldr	r1, [r7, #20]
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f7ff fbf0 	bl	8011744 <clust2sect>
 8011f64:	4602      	mov	r2, r0
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f7c:	441a      	add	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011f82:	2300      	movs	r3, #0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3718      	adds	r7, #24
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ff feb4 	bl	8011d0c <dir_sdi>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fa8:	7dfb      	ldrb	r3, [r7, #23]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d12b      	bne.n	8012006 <dir_alloc+0x7a>
		n = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	69db      	ldr	r3, [r3, #28]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f7ff fb27 	bl	801160c <move_window>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d11d      	bne.n	8012004 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a1b      	ldr	r3, [r3, #32]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	2be5      	cmp	r3, #229	; 0xe5
 8011fd0:	d004      	beq.n	8011fdc <dir_alloc+0x50>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6a1b      	ldr	r3, [r3, #32]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d107      	bne.n	8011fec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	613b      	str	r3, [r7, #16]
 8011fe2:	693a      	ldr	r2, [r7, #16]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d102      	bne.n	8011ff0 <dir_alloc+0x64>
 8011fea:	e00c      	b.n	8012006 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011fec:	2300      	movs	r3, #0
 8011fee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f7ff ff05 	bl	8011e02 <dir_next>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011ffc:	7dfb      	ldrb	r3, [r7, #23]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d0d7      	beq.n	8011fb2 <dir_alloc+0x26>
 8012002:	e000      	b.n	8012006 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012004:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012006:	7dfb      	ldrb	r3, [r7, #23]
 8012008:	2b04      	cmp	r3, #4
 801200a:	d101      	bne.n	8012010 <dir_alloc+0x84>
 801200c:	2307      	movs	r3, #7
 801200e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012010:	7dfb      	ldrb	r3, [r7, #23]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3718      	adds	r7, #24
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b084      	sub	sp, #16
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
 8012022:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	331a      	adds	r3, #26
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff f83f 	bl	80110ac <ld_word>
 801202e:	4603      	mov	r3, r0
 8012030:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b03      	cmp	r3, #3
 8012038:	d109      	bne.n	801204e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	3314      	adds	r3, #20
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff f834 	bl	80110ac <ld_word>
 8012044:	4603      	mov	r3, r0
 8012046:	041b      	lsls	r3, r3, #16
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	4313      	orrs	r3, r2
 801204c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801204e:	68fb      	ldr	r3, [r7, #12]
}
 8012050:	4618      	mov	r0, r3
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	331a      	adds	r3, #26
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	b292      	uxth	r2, r2
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff f857 	bl	8011122 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	2b03      	cmp	r3, #3
 801207a:	d109      	bne.n	8012090 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	f103 0214 	add.w	r2, r3, #20
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	0c1b      	lsrs	r3, r3, #16
 8012086:	b29b      	uxth	r3, r3
 8012088:	4619      	mov	r1, r3
 801208a:	4610      	mov	r0, r2
 801208c:	f7ff f849 	bl	8011122 <st_word>
	}
}
 8012090:	bf00      	nop
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b086      	sub	sp, #24
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80120a6:	2100      	movs	r1, #0
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff fe2f 	bl	8011d0c <dir_sdi>
 80120ae:	4603      	mov	r3, r0
 80120b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80120b2:	7dfb      	ldrb	r3, [r7, #23]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d001      	beq.n	80120bc <dir_find+0x24>
 80120b8:	7dfb      	ldrb	r3, [r7, #23]
 80120ba:	e03e      	b.n	801213a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	69db      	ldr	r3, [r3, #28]
 80120c0:	4619      	mov	r1, r3
 80120c2:	6938      	ldr	r0, [r7, #16]
 80120c4:	f7ff faa2 	bl	801160c <move_window>
 80120c8:	4603      	mov	r3, r0
 80120ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120cc:	7dfb      	ldrb	r3, [r7, #23]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d12f      	bne.n	8012132 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6a1b      	ldr	r3, [r3, #32]
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80120da:	7bfb      	ldrb	r3, [r7, #15]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d102      	bne.n	80120e6 <dir_find+0x4e>
 80120e0:	2304      	movs	r3, #4
 80120e2:	75fb      	strb	r3, [r7, #23]
 80120e4:	e028      	b.n	8012138 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6a1b      	ldr	r3, [r3, #32]
 80120ea:	330b      	adds	r3, #11
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120f2:	b2da      	uxtb	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a1b      	ldr	r3, [r3, #32]
 80120fc:	330b      	adds	r3, #11
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	f003 0308 	and.w	r3, r3, #8
 8012104:	2b00      	cmp	r3, #0
 8012106:	d10a      	bne.n	801211e <dir_find+0x86>
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a18      	ldr	r0, [r3, #32]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	3324      	adds	r3, #36	; 0x24
 8012110:	220b      	movs	r2, #11
 8012112:	4619      	mov	r1, r3
 8012114:	f7ff f888 	bl	8011228 <mem_cmp>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00b      	beq.n	8012136 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801211e:	2100      	movs	r1, #0
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7ff fe6e 	bl	8011e02 <dir_next>
 8012126:	4603      	mov	r3, r0
 8012128:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801212a:	7dfb      	ldrb	r3, [r7, #23]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d0c5      	beq.n	80120bc <dir_find+0x24>
 8012130:	e002      	b.n	8012138 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012132:	bf00      	nop
 8012134:	e000      	b.n	8012138 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012136:	bf00      	nop

	return res;
 8012138:	7dfb      	ldrb	r3, [r7, #23]
}
 801213a:	4618      	mov	r0, r3
 801213c:	3718      	adds	r7, #24
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}

08012142 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012142:	b580      	push	{r7, lr}
 8012144:	b084      	sub	sp, #16
 8012146:	af00      	add	r7, sp, #0
 8012148:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012150:	2101      	movs	r1, #1
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f7ff ff1a 	bl	8011f8c <dir_alloc>
 8012158:	4603      	mov	r3, r0
 801215a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801215c:	7bfb      	ldrb	r3, [r7, #15]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d11c      	bne.n	801219c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	69db      	ldr	r3, [r3, #28]
 8012166:	4619      	mov	r1, r3
 8012168:	68b8      	ldr	r0, [r7, #8]
 801216a:	f7ff fa4f 	bl	801160c <move_window>
 801216e:	4603      	mov	r3, r0
 8012170:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012172:	7bfb      	ldrb	r3, [r7, #15]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d111      	bne.n	801219c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a1b      	ldr	r3, [r3, #32]
 801217c:	2220      	movs	r2, #32
 801217e:	2100      	movs	r1, #0
 8012180:	4618      	mov	r0, r3
 8012182:	f7ff f836 	bl	80111f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a18      	ldr	r0, [r3, #32]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	3324      	adds	r3, #36	; 0x24
 801218e:	220b      	movs	r2, #11
 8012190:	4619      	mov	r1, r3
 8012192:	f7ff f80d 	bl	80111b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	2201      	movs	r2, #1
 801219a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801219c:	7bfb      	ldrb	r3, [r7, #15]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
	...

080121a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b088      	sub	sp, #32
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	60fb      	str	r3, [r7, #12]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3324      	adds	r3, #36	; 0x24
 80121bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80121be:	220b      	movs	r2, #11
 80121c0:	2120      	movs	r1, #32
 80121c2:	68b8      	ldr	r0, [r7, #8]
 80121c4:	f7ff f815 	bl	80111f2 <mem_set>
	si = i = 0; ni = 8;
 80121c8:	2300      	movs	r3, #0
 80121ca:	613b      	str	r3, [r7, #16]
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	61fb      	str	r3, [r7, #28]
 80121d0:	2308      	movs	r3, #8
 80121d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	1c5a      	adds	r2, r3, #1
 80121d8:	61fa      	str	r2, [r7, #28]
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	4413      	add	r3, r2
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80121e2:	7efb      	ldrb	r3, [r7, #27]
 80121e4:	2b20      	cmp	r3, #32
 80121e6:	d94e      	bls.n	8012286 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80121e8:	7efb      	ldrb	r3, [r7, #27]
 80121ea:	2b2f      	cmp	r3, #47	; 0x2f
 80121ec:	d006      	beq.n	80121fc <create_name+0x54>
 80121ee:	7efb      	ldrb	r3, [r7, #27]
 80121f0:	2b5c      	cmp	r3, #92	; 0x5c
 80121f2:	d110      	bne.n	8012216 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80121f4:	e002      	b.n	80121fc <create_name+0x54>
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	3301      	adds	r3, #1
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	68fa      	ldr	r2, [r7, #12]
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	4413      	add	r3, r2
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	2b2f      	cmp	r3, #47	; 0x2f
 8012206:	d0f6      	beq.n	80121f6 <create_name+0x4e>
 8012208:	68fa      	ldr	r2, [r7, #12]
 801220a:	69fb      	ldr	r3, [r7, #28]
 801220c:	4413      	add	r3, r2
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	2b5c      	cmp	r3, #92	; 0x5c
 8012212:	d0f0      	beq.n	80121f6 <create_name+0x4e>
			break;
 8012214:	e038      	b.n	8012288 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012216:	7efb      	ldrb	r3, [r7, #27]
 8012218:	2b2e      	cmp	r3, #46	; 0x2e
 801221a:	d003      	beq.n	8012224 <create_name+0x7c>
 801221c:	693a      	ldr	r2, [r7, #16]
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	429a      	cmp	r2, r3
 8012222:	d30c      	bcc.n	801223e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	2b0b      	cmp	r3, #11
 8012228:	d002      	beq.n	8012230 <create_name+0x88>
 801222a:	7efb      	ldrb	r3, [r7, #27]
 801222c:	2b2e      	cmp	r3, #46	; 0x2e
 801222e:	d001      	beq.n	8012234 <create_name+0x8c>
 8012230:	2306      	movs	r3, #6
 8012232:	e044      	b.n	80122be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012234:	2308      	movs	r3, #8
 8012236:	613b      	str	r3, [r7, #16]
 8012238:	230b      	movs	r3, #11
 801223a:	617b      	str	r3, [r7, #20]
			continue;
 801223c:	e022      	b.n	8012284 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801223e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012242:	2b00      	cmp	r3, #0
 8012244:	da04      	bge.n	8012250 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012246:	7efb      	ldrb	r3, [r7, #27]
 8012248:	3b80      	subs	r3, #128	; 0x80
 801224a:	4a1f      	ldr	r2, [pc, #124]	; (80122c8 <create_name+0x120>)
 801224c:	5cd3      	ldrb	r3, [r2, r3]
 801224e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012250:	7efb      	ldrb	r3, [r7, #27]
 8012252:	4619      	mov	r1, r3
 8012254:	481d      	ldr	r0, [pc, #116]	; (80122cc <create_name+0x124>)
 8012256:	f7ff f80e 	bl	8011276 <chk_chr>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <create_name+0xbc>
 8012260:	2306      	movs	r3, #6
 8012262:	e02c      	b.n	80122be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012264:	7efb      	ldrb	r3, [r7, #27]
 8012266:	2b60      	cmp	r3, #96	; 0x60
 8012268:	d905      	bls.n	8012276 <create_name+0xce>
 801226a:	7efb      	ldrb	r3, [r7, #27]
 801226c:	2b7a      	cmp	r3, #122	; 0x7a
 801226e:	d802      	bhi.n	8012276 <create_name+0xce>
 8012270:	7efb      	ldrb	r3, [r7, #27]
 8012272:	3b20      	subs	r3, #32
 8012274:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	1c5a      	adds	r2, r3, #1
 801227a:	613a      	str	r2, [r7, #16]
 801227c:	68ba      	ldr	r2, [r7, #8]
 801227e:	4413      	add	r3, r2
 8012280:	7efa      	ldrb	r2, [r7, #27]
 8012282:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012284:	e7a6      	b.n	80121d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012286:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012288:	68fa      	ldr	r2, [r7, #12]
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	441a      	add	r2, r3
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d101      	bne.n	801229c <create_name+0xf4>
 8012298:	2306      	movs	r3, #6
 801229a:	e010      	b.n	80122be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2be5      	cmp	r3, #229	; 0xe5
 80122a2:	d102      	bne.n	80122aa <create_name+0x102>
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	2205      	movs	r2, #5
 80122a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80122aa:	7efb      	ldrb	r3, [r7, #27]
 80122ac:	2b20      	cmp	r3, #32
 80122ae:	d801      	bhi.n	80122b4 <create_name+0x10c>
 80122b0:	2204      	movs	r2, #4
 80122b2:	e000      	b.n	80122b6 <create_name+0x10e>
 80122b4:	2200      	movs	r2, #0
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	330b      	adds	r3, #11
 80122ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80122bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3720      	adds	r7, #32
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	0801a9ac 	.word	0x0801a9ac
 80122cc:	0801a934 	.word	0x0801a934

080122d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80122e4:	e002      	b.n	80122ec <follow_path+0x1c>
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	3301      	adds	r3, #1
 80122ea:	603b      	str	r3, [r7, #0]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b2f      	cmp	r3, #47	; 0x2f
 80122f2:	d0f8      	beq.n	80122e6 <follow_path+0x16>
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	2b5c      	cmp	r3, #92	; 0x5c
 80122fa:	d0f4      	beq.n	80122e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	2200      	movs	r2, #0
 8012300:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	2b1f      	cmp	r3, #31
 8012308:	d80a      	bhi.n	8012320 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2280      	movs	r2, #128	; 0x80
 801230e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012312:	2100      	movs	r1, #0
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7ff fcf9 	bl	8011d0c <dir_sdi>
 801231a:	4603      	mov	r3, r0
 801231c:	75fb      	strb	r3, [r7, #23]
 801231e:	e043      	b.n	80123a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012320:	463b      	mov	r3, r7
 8012322:	4619      	mov	r1, r3
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff ff3f 	bl	80121a8 <create_name>
 801232a:	4603      	mov	r3, r0
 801232c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801232e:	7dfb      	ldrb	r3, [r7, #23]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d134      	bne.n	801239e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7ff feaf 	bl	8012098 <dir_find>
 801233a:	4603      	mov	r3, r0
 801233c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012344:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00a      	beq.n	8012362 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801234c:	7dfb      	ldrb	r3, [r7, #23]
 801234e:	2b04      	cmp	r3, #4
 8012350:	d127      	bne.n	80123a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012352:	7afb      	ldrb	r3, [r7, #11]
 8012354:	f003 0304 	and.w	r3, r3, #4
 8012358:	2b00      	cmp	r3, #0
 801235a:	d122      	bne.n	80123a2 <follow_path+0xd2>
 801235c:	2305      	movs	r3, #5
 801235e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012360:	e01f      	b.n	80123a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012362:	7afb      	ldrb	r3, [r7, #11]
 8012364:	f003 0304 	and.w	r3, r3, #4
 8012368:	2b00      	cmp	r3, #0
 801236a:	d11c      	bne.n	80123a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	799b      	ldrb	r3, [r3, #6]
 8012370:	f003 0310 	and.w	r3, r3, #16
 8012374:	2b00      	cmp	r3, #0
 8012376:	d102      	bne.n	801237e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012378:	2305      	movs	r3, #5
 801237a:	75fb      	strb	r3, [r7, #23]
 801237c:	e014      	b.n	80123a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	695b      	ldr	r3, [r3, #20]
 8012388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801238c:	4413      	add	r3, r2
 801238e:	4619      	mov	r1, r3
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f7ff fe42 	bl	801201a <ld_clust>
 8012396:	4602      	mov	r2, r0
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801239c:	e7c0      	b.n	8012320 <follow_path+0x50>
			if (res != FR_OK) break;
 801239e:	bf00      	nop
 80123a0:	e002      	b.n	80123a8 <follow_path+0xd8>
				break;
 80123a2:	bf00      	nop
 80123a4:	e000      	b.n	80123a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80123a6:	bf00      	nop
			}
		}
	}

	return res;
 80123a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3718      	adds	r7, #24
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80123b2:	b480      	push	{r7}
 80123b4:	b087      	sub	sp, #28
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80123ba:	f04f 33ff 	mov.w	r3, #4294967295
 80123be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d031      	beq.n	801242c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	617b      	str	r3, [r7, #20]
 80123ce:	e002      	b.n	80123d6 <get_ldnumber+0x24>
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	3301      	adds	r3, #1
 80123d4:	617b      	str	r3, [r7, #20]
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	2b20      	cmp	r3, #32
 80123dc:	d903      	bls.n	80123e6 <get_ldnumber+0x34>
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	2b3a      	cmp	r3, #58	; 0x3a
 80123e4:	d1f4      	bne.n	80123d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	2b3a      	cmp	r3, #58	; 0x3a
 80123ec:	d11c      	bne.n	8012428 <get_ldnumber+0x76>
			tp = *path;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	1c5a      	adds	r2, r3, #1
 80123f8:	60fa      	str	r2, [r7, #12]
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	3b30      	subs	r3, #48	; 0x30
 80123fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	2b09      	cmp	r3, #9
 8012404:	d80e      	bhi.n	8012424 <get_ldnumber+0x72>
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	429a      	cmp	r2, r3
 801240c:	d10a      	bne.n	8012424 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d107      	bne.n	8012424 <get_ldnumber+0x72>
					vol = (int)i;
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	3301      	adds	r3, #1
 801241c:	617b      	str	r3, [r7, #20]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	697a      	ldr	r2, [r7, #20]
 8012422:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	e002      	b.n	801242e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012428:	2300      	movs	r3, #0
 801242a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801242c:	693b      	ldr	r3, [r7, #16]
}
 801242e:	4618      	mov	r0, r3
 8012430:	371c      	adds	r7, #28
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
	...

0801243c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	70da      	strb	r2, [r3, #3]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f04f 32ff 	mov.w	r2, #4294967295
 8012452:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012454:	6839      	ldr	r1, [r7, #0]
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff f8d8 	bl	801160c <move_window>
 801245c:	4603      	mov	r3, r0
 801245e:	2b00      	cmp	r3, #0
 8012460:	d001      	beq.n	8012466 <check_fs+0x2a>
 8012462:	2304      	movs	r3, #4
 8012464:	e038      	b.n	80124d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	3330      	adds	r3, #48	; 0x30
 801246a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801246e:	4618      	mov	r0, r3
 8012470:	f7fe fe1c 	bl	80110ac <ld_word>
 8012474:	4603      	mov	r3, r0
 8012476:	461a      	mov	r2, r3
 8012478:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801247c:	429a      	cmp	r2, r3
 801247e:	d001      	beq.n	8012484 <check_fs+0x48>
 8012480:	2303      	movs	r3, #3
 8012482:	e029      	b.n	80124d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801248a:	2be9      	cmp	r3, #233	; 0xe9
 801248c:	d009      	beq.n	80124a2 <check_fs+0x66>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012494:	2beb      	cmp	r3, #235	; 0xeb
 8012496:	d11e      	bne.n	80124d6 <check_fs+0x9a>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801249e:	2b90      	cmp	r3, #144	; 0x90
 80124a0:	d119      	bne.n	80124d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	3330      	adds	r3, #48	; 0x30
 80124a6:	3336      	adds	r3, #54	; 0x36
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7fe fe17 	bl	80110dc <ld_dword>
 80124ae:	4603      	mov	r3, r0
 80124b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80124b4:	4a0a      	ldr	r2, [pc, #40]	; (80124e0 <check_fs+0xa4>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d101      	bne.n	80124be <check_fs+0x82>
 80124ba:	2300      	movs	r3, #0
 80124bc:	e00c      	b.n	80124d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	3330      	adds	r3, #48	; 0x30
 80124c2:	3352      	adds	r3, #82	; 0x52
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fe fe09 	bl	80110dc <ld_dword>
 80124ca:	4603      	mov	r3, r0
 80124cc:	4a05      	ldr	r2, [pc, #20]	; (80124e4 <check_fs+0xa8>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d101      	bne.n	80124d6 <check_fs+0x9a>
 80124d2:	2300      	movs	r3, #0
 80124d4:	e000      	b.n	80124d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80124d6:	2302      	movs	r3, #2
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	00544146 	.word	0x00544146
 80124e4:	33544146 	.word	0x33544146

080124e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b096      	sub	sp, #88	; 0x58
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	4613      	mov	r3, r2
 80124f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2200      	movs	r2, #0
 80124fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7ff ff58 	bl	80123b2 <get_ldnumber>
 8012502:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012506:	2b00      	cmp	r3, #0
 8012508:	da01      	bge.n	801250e <find_volume+0x26>
 801250a:	230b      	movs	r3, #11
 801250c:	e22e      	b.n	801296c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801250e:	4aa8      	ldr	r2, [pc, #672]	; (80127b0 <find_volume+0x2c8>)
 8012510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012516:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251a:	2b00      	cmp	r3, #0
 801251c:	d101      	bne.n	8012522 <find_volume+0x3a>
 801251e:	230c      	movs	r3, #12
 8012520:	e224      	b.n	801296c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012526:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012528:	79fb      	ldrb	r3, [r7, #7]
 801252a:	f023 0301 	bic.w	r3, r3, #1
 801252e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d01a      	beq.n	801256e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	785b      	ldrb	r3, [r3, #1]
 801253c:	4618      	mov	r0, r3
 801253e:	f7fe fd17 	bl	8010f70 <disk_status>
 8012542:	4603      	mov	r3, r0
 8012544:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801254c:	f003 0301 	and.w	r3, r3, #1
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10c      	bne.n	801256e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012554:	79fb      	ldrb	r3, [r7, #7]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d007      	beq.n	801256a <find_volume+0x82>
 801255a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801255e:	f003 0304 	and.w	r3, r3, #4
 8012562:	2b00      	cmp	r3, #0
 8012564:	d001      	beq.n	801256a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012566:	230a      	movs	r3, #10
 8012568:	e200      	b.n	801296c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801256a:	2300      	movs	r3, #0
 801256c:	e1fe      	b.n	801296c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012570:	2200      	movs	r2, #0
 8012572:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012576:	b2da      	uxtb	r2, r3
 8012578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	785b      	ldrb	r3, [r3, #1]
 8012580:	4618      	mov	r0, r3
 8012582:	f7fe fd0f 	bl	8010fa4 <disk_initialize>
 8012586:	4603      	mov	r3, r0
 8012588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801258c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012590:	f003 0301 	and.w	r3, r3, #1
 8012594:	2b00      	cmp	r3, #0
 8012596:	d001      	beq.n	801259c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012598:	2303      	movs	r3, #3
 801259a:	e1e7      	b.n	801296c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801259c:	79fb      	ldrb	r3, [r7, #7]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d007      	beq.n	80125b2 <find_volume+0xca>
 80125a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125a6:	f003 0304 	and.w	r3, r3, #4
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80125ae:	230a      	movs	r3, #10
 80125b0:	e1dc      	b.n	801296c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80125b2:	2300      	movs	r3, #0
 80125b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80125b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125ba:	f7ff ff3f 	bl	801243c <check_fs>
 80125be:	4603      	mov	r3, r0
 80125c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80125c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d14b      	bne.n	8012664 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80125cc:	2300      	movs	r3, #0
 80125ce:	643b      	str	r3, [r7, #64]	; 0x40
 80125d0:	e01f      	b.n	8012612 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80125d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80125d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125da:	011b      	lsls	r3, r3, #4
 80125dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80125e0:	4413      	add	r3, r2
 80125e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80125e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e6:	3304      	adds	r3, #4
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d006      	beq.n	80125fc <find_volume+0x114>
 80125ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f0:	3308      	adds	r3, #8
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fe fd72 	bl	80110dc <ld_dword>
 80125f8:	4602      	mov	r2, r0
 80125fa:	e000      	b.n	80125fe <find_volume+0x116>
 80125fc:	2200      	movs	r2, #0
 80125fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012606:	440b      	add	r3, r1
 8012608:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801260e:	3301      	adds	r3, #1
 8012610:	643b      	str	r3, [r7, #64]	; 0x40
 8012612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012614:	2b03      	cmp	r3, #3
 8012616:	d9dc      	bls.n	80125d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012618:	2300      	movs	r3, #0
 801261a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801261c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801261e:	2b00      	cmp	r3, #0
 8012620:	d002      	beq.n	8012628 <find_volume+0x140>
 8012622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012624:	3b01      	subs	r3, #1
 8012626:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012630:	4413      	add	r3, r2
 8012632:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012636:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801263a:	2b00      	cmp	r3, #0
 801263c:	d005      	beq.n	801264a <find_volume+0x162>
 801263e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012640:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012642:	f7ff fefb 	bl	801243c <check_fs>
 8012646:	4603      	mov	r3, r0
 8012648:	e000      	b.n	801264c <find_volume+0x164>
 801264a:	2303      	movs	r3, #3
 801264c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012654:	2b01      	cmp	r3, #1
 8012656:	d905      	bls.n	8012664 <find_volume+0x17c>
 8012658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801265a:	3301      	adds	r3, #1
 801265c:	643b      	str	r3, [r7, #64]	; 0x40
 801265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012660:	2b03      	cmp	r3, #3
 8012662:	d9e1      	bls.n	8012628 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012668:	2b04      	cmp	r3, #4
 801266a:	d101      	bne.n	8012670 <find_volume+0x188>
 801266c:	2301      	movs	r3, #1
 801266e:	e17d      	b.n	801296c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012674:	2b01      	cmp	r3, #1
 8012676:	d901      	bls.n	801267c <find_volume+0x194>
 8012678:	230d      	movs	r3, #13
 801267a:	e177      	b.n	801296c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267e:	3330      	adds	r3, #48	; 0x30
 8012680:	330b      	adds	r3, #11
 8012682:	4618      	mov	r0, r3
 8012684:	f7fe fd12 	bl	80110ac <ld_word>
 8012688:	4603      	mov	r3, r0
 801268a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801268e:	d001      	beq.n	8012694 <find_volume+0x1ac>
 8012690:	230d      	movs	r3, #13
 8012692:	e16b      	b.n	801296c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012696:	3330      	adds	r3, #48	; 0x30
 8012698:	3316      	adds	r3, #22
 801269a:	4618      	mov	r0, r3
 801269c:	f7fe fd06 	bl	80110ac <ld_word>
 80126a0:	4603      	mov	r3, r0
 80126a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80126a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d106      	bne.n	80126b8 <find_volume+0x1d0>
 80126aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ac:	3330      	adds	r3, #48	; 0x30
 80126ae:	3324      	adds	r3, #36	; 0x24
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fe fd13 	bl	80110dc <ld_dword>
 80126b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80126b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80126bc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80126be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80126c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ca:	789b      	ldrb	r3, [r3, #2]
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d005      	beq.n	80126dc <find_volume+0x1f4>
 80126d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d2:	789b      	ldrb	r3, [r3, #2]
 80126d4:	2b02      	cmp	r3, #2
 80126d6:	d001      	beq.n	80126dc <find_volume+0x1f4>
 80126d8:	230d      	movs	r3, #13
 80126da:	e147      	b.n	801296c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80126dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126de:	789b      	ldrb	r3, [r3, #2]
 80126e0:	461a      	mov	r2, r3
 80126e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e4:	fb02 f303 	mul.w	r3, r2, r3
 80126e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80126ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80126f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f8:	895b      	ldrh	r3, [r3, #10]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d008      	beq.n	8012710 <find_volume+0x228>
 80126fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012700:	895b      	ldrh	r3, [r3, #10]
 8012702:	461a      	mov	r2, r3
 8012704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012706:	895b      	ldrh	r3, [r3, #10]
 8012708:	3b01      	subs	r3, #1
 801270a:	4013      	ands	r3, r2
 801270c:	2b00      	cmp	r3, #0
 801270e:	d001      	beq.n	8012714 <find_volume+0x22c>
 8012710:	230d      	movs	r3, #13
 8012712:	e12b      	b.n	801296c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012716:	3330      	adds	r3, #48	; 0x30
 8012718:	3311      	adds	r3, #17
 801271a:	4618      	mov	r0, r3
 801271c:	f7fe fcc6 	bl	80110ac <ld_word>
 8012720:	4603      	mov	r3, r0
 8012722:	461a      	mov	r2, r3
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272a:	891b      	ldrh	r3, [r3, #8]
 801272c:	f003 030f 	and.w	r3, r3, #15
 8012730:	b29b      	uxth	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	d001      	beq.n	801273a <find_volume+0x252>
 8012736:	230d      	movs	r3, #13
 8012738:	e118      	b.n	801296c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273c:	3330      	adds	r3, #48	; 0x30
 801273e:	3313      	adds	r3, #19
 8012740:	4618      	mov	r0, r3
 8012742:	f7fe fcb3 	bl	80110ac <ld_word>
 8012746:	4603      	mov	r3, r0
 8012748:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801274c:	2b00      	cmp	r3, #0
 801274e:	d106      	bne.n	801275e <find_volume+0x276>
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	3330      	adds	r3, #48	; 0x30
 8012754:	3320      	adds	r3, #32
 8012756:	4618      	mov	r0, r3
 8012758:	f7fe fcc0 	bl	80110dc <ld_dword>
 801275c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012760:	3330      	adds	r3, #48	; 0x30
 8012762:	330e      	adds	r3, #14
 8012764:	4618      	mov	r0, r3
 8012766:	f7fe fca1 	bl	80110ac <ld_word>
 801276a:	4603      	mov	r3, r0
 801276c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801276e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012770:	2b00      	cmp	r3, #0
 8012772:	d101      	bne.n	8012778 <find_volume+0x290>
 8012774:	230d      	movs	r3, #13
 8012776:	e0f9      	b.n	801296c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012778:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801277c:	4413      	add	r3, r2
 801277e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012780:	8912      	ldrh	r2, [r2, #8]
 8012782:	0912      	lsrs	r2, r2, #4
 8012784:	b292      	uxth	r2, r2
 8012786:	4413      	add	r3, r2
 8012788:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801278a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278e:	429a      	cmp	r2, r3
 8012790:	d201      	bcs.n	8012796 <find_volume+0x2ae>
 8012792:	230d      	movs	r3, #13
 8012794:	e0ea      	b.n	801296c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801279e:	8952      	ldrh	r2, [r2, #10]
 80127a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80127a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80127a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d103      	bne.n	80127b4 <find_volume+0x2cc>
 80127ac:	230d      	movs	r3, #13
 80127ae:	e0dd      	b.n	801296c <find_volume+0x484>
 80127b0:	20000c00 	.word	0x20000c00
		fmt = FS_FAT32;
 80127b4:	2303      	movs	r3, #3
 80127b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d802      	bhi.n	80127ca <find_volume+0x2e2>
 80127c4:	2302      	movs	r3, #2
 80127c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80127ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d802      	bhi.n	80127da <find_volume+0x2f2>
 80127d4:	2301      	movs	r3, #1
 80127d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80127da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127dc:	1c9a      	adds	r2, r3, #2
 80127de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80127e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127e6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80127e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80127ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ec:	441a      	add	r2, r3
 80127ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80127f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f6:	441a      	add	r2, r3
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80127fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012800:	2b03      	cmp	r3, #3
 8012802:	d11e      	bne.n	8012842 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012806:	3330      	adds	r3, #48	; 0x30
 8012808:	332a      	adds	r3, #42	; 0x2a
 801280a:	4618      	mov	r0, r3
 801280c:	f7fe fc4e 	bl	80110ac <ld_word>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <find_volume+0x332>
 8012816:	230d      	movs	r3, #13
 8012818:	e0a8      	b.n	801296c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281c:	891b      	ldrh	r3, [r3, #8]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d001      	beq.n	8012826 <find_volume+0x33e>
 8012822:	230d      	movs	r3, #13
 8012824:	e0a2      	b.n	801296c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012828:	3330      	adds	r3, #48	; 0x30
 801282a:	332c      	adds	r3, #44	; 0x2c
 801282c:	4618      	mov	r0, r3
 801282e:	f7fe fc55 	bl	80110dc <ld_dword>
 8012832:	4602      	mov	r2, r0
 8012834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012836:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801283a:	695b      	ldr	r3, [r3, #20]
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	647b      	str	r3, [r7, #68]	; 0x44
 8012840:	e01f      	b.n	8012882 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012844:	891b      	ldrh	r3, [r3, #8]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <find_volume+0x366>
 801284a:	230d      	movs	r3, #13
 801284c:	e08e      	b.n	801296c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012850:	6a1a      	ldr	r2, [r3, #32]
 8012852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012854:	441a      	add	r2, r3
 8012856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012858:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801285a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801285e:	2b02      	cmp	r3, #2
 8012860:	d103      	bne.n	801286a <find_volume+0x382>
 8012862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012864:	695b      	ldr	r3, [r3, #20]
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	e00a      	b.n	8012880 <find_volume+0x398>
 801286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286c:	695a      	ldr	r2, [r3, #20]
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	085a      	lsrs	r2, r3, #1
 8012876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012878:	695b      	ldr	r3, [r3, #20]
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012880:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012884:	699a      	ldr	r2, [r3, #24]
 8012886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012888:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801288c:	0a5b      	lsrs	r3, r3, #9
 801288e:	429a      	cmp	r2, r3
 8012890:	d201      	bcs.n	8012896 <find_volume+0x3ae>
 8012892:	230d      	movs	r3, #13
 8012894:	e06a      	b.n	801296c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012898:	f04f 32ff 	mov.w	r2, #4294967295
 801289c:	611a      	str	r2, [r3, #16]
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	691a      	ldr	r2, [r3, #16]
 80128a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80128a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a8:	2280      	movs	r2, #128	; 0x80
 80128aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80128ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128b0:	2b03      	cmp	r3, #3
 80128b2:	d149      	bne.n	8012948 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80128b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b6:	3330      	adds	r3, #48	; 0x30
 80128b8:	3330      	adds	r3, #48	; 0x30
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fe fbf6 	bl	80110ac <ld_word>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	d140      	bne.n	8012948 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80128c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c8:	3301      	adds	r3, #1
 80128ca:	4619      	mov	r1, r3
 80128cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128ce:	f7fe fe9d 	bl	801160c <move_window>
 80128d2:	4603      	mov	r3, r0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d137      	bne.n	8012948 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80128d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128da:	2200      	movs	r2, #0
 80128dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80128de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e0:	3330      	adds	r3, #48	; 0x30
 80128e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fe fbe0 	bl	80110ac <ld_word>
 80128ec:	4603      	mov	r3, r0
 80128ee:	461a      	mov	r2, r3
 80128f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d127      	bne.n	8012948 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80128f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fa:	3330      	adds	r3, #48	; 0x30
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fe fbed 	bl	80110dc <ld_dword>
 8012902:	4603      	mov	r3, r0
 8012904:	4a1b      	ldr	r2, [pc, #108]	; (8012974 <find_volume+0x48c>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d11e      	bne.n	8012948 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290c:	3330      	adds	r3, #48	; 0x30
 801290e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012912:	4618      	mov	r0, r3
 8012914:	f7fe fbe2 	bl	80110dc <ld_dword>
 8012918:	4603      	mov	r3, r0
 801291a:	4a17      	ldr	r2, [pc, #92]	; (8012978 <find_volume+0x490>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d113      	bne.n	8012948 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012922:	3330      	adds	r3, #48	; 0x30
 8012924:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012928:	4618      	mov	r0, r3
 801292a:	f7fe fbd7 	bl	80110dc <ld_dword>
 801292e:	4602      	mov	r2, r0
 8012930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012932:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012936:	3330      	adds	r3, #48	; 0x30
 8012938:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801293c:	4618      	mov	r0, r3
 801293e:	f7fe fbcd 	bl	80110dc <ld_dword>
 8012942:	4602      	mov	r2, r0
 8012944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012946:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801294e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012950:	4b0a      	ldr	r3, [pc, #40]	; (801297c <find_volume+0x494>)
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	3301      	adds	r3, #1
 8012956:	b29a      	uxth	r2, r3
 8012958:	4b08      	ldr	r3, [pc, #32]	; (801297c <find_volume+0x494>)
 801295a:	801a      	strh	r2, [r3, #0]
 801295c:	4b07      	ldr	r3, [pc, #28]	; (801297c <find_volume+0x494>)
 801295e:	881a      	ldrh	r2, [r3, #0]
 8012960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012962:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012966:	f7fe fde9 	bl	801153c <clear_lock>
#endif
	return FR_OK;
 801296a:	2300      	movs	r3, #0
}
 801296c:	4618      	mov	r0, r3
 801296e:	3758      	adds	r7, #88	; 0x58
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	41615252 	.word	0x41615252
 8012978:	61417272 	.word	0x61417272
 801297c:	20000c04 	.word	0x20000c04

08012980 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801298a:	2309      	movs	r3, #9
 801298c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d01c      	beq.n	80129ce <validate+0x4e>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d018      	beq.n	80129ce <validate+0x4e>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d013      	beq.n	80129ce <validate+0x4e>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	889a      	ldrh	r2, [r3, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	88db      	ldrh	r3, [r3, #6]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d10c      	bne.n	80129ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	785b      	ldrb	r3, [r3, #1]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe fad8 	bl	8010f70 <disk_status>
 80129c0:	4603      	mov	r3, r0
 80129c2:	f003 0301 	and.w	r3, r3, #1
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d101      	bne.n	80129ce <validate+0x4e>
			res = FR_OK;
 80129ca:	2300      	movs	r3, #0
 80129cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d102      	bne.n	80129da <validate+0x5a>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	e000      	b.n	80129dc <validate+0x5c>
 80129da:	2300      	movs	r3, #0
 80129dc:	683a      	ldr	r2, [r7, #0]
 80129de:	6013      	str	r3, [r2, #0]
	return res;
 80129e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b088      	sub	sp, #32
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	4613      	mov	r3, r2
 80129f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80129fe:	f107 0310 	add.w	r3, r7, #16
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff fcd5 	bl	80123b2 <get_ldnumber>
 8012a08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	da01      	bge.n	8012a14 <f_mount+0x28>
 8012a10:	230b      	movs	r3, #11
 8012a12:	e02b      	b.n	8012a6c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012a14:	4a17      	ldr	r2, [pc, #92]	; (8012a74 <f_mount+0x88>)
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012a1e:	69bb      	ldr	r3, [r7, #24]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d005      	beq.n	8012a30 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012a24:	69b8      	ldr	r0, [r7, #24]
 8012a26:	f7fe fd89 	bl	801153c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d002      	beq.n	8012a3c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	490d      	ldr	r1, [pc, #52]	; (8012a74 <f_mount+0x88>)
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d002      	beq.n	8012a52 <f_mount+0x66>
 8012a4c:	79fb      	ldrb	r3, [r7, #7]
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	d001      	beq.n	8012a56 <f_mount+0x6a>
 8012a52:	2300      	movs	r3, #0
 8012a54:	e00a      	b.n	8012a6c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012a56:	f107 010c 	add.w	r1, r7, #12
 8012a5a:	f107 0308 	add.w	r3, r7, #8
 8012a5e:	2200      	movs	r2, #0
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7ff fd41 	bl	80124e8 <find_volume>
 8012a66:	4603      	mov	r3, r0
 8012a68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3720      	adds	r7, #32
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	20000c00 	.word	0x20000c00

08012a78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b098      	sub	sp, #96	; 0x60
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	4613      	mov	r3, r2
 8012a84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d101      	bne.n	8012a90 <f_open+0x18>
 8012a8c:	2309      	movs	r3, #9
 8012a8e:	e1ad      	b.n	8012dec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012a90:	79fb      	ldrb	r3, [r7, #7]
 8012a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012a98:	79fa      	ldrb	r2, [r7, #7]
 8012a9a:	f107 0110 	add.w	r1, r7, #16
 8012a9e:	f107 0308 	add.w	r3, r7, #8
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7ff fd20 	bl	80124e8 <find_volume>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	f040 8191 	bne.w	8012dda <f_open+0x362>
		dj.obj.fs = fs;
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	4611      	mov	r1, r2
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7ff fc03 	bl	80122d0 <follow_path>
 8012aca:	4603      	mov	r3, r0
 8012acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d11a      	bne.n	8012b0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012ad8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012adc:	b25b      	sxtb	r3, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	da03      	bge.n	8012aea <f_open+0x72>
				res = FR_INVALID_NAME;
 8012ae2:	2306      	movs	r3, #6
 8012ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012ae8:	e011      	b.n	8012b0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012aea:	79fb      	ldrb	r3, [r7, #7]
 8012aec:	f023 0301 	bic.w	r3, r3, #1
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	bf14      	ite	ne
 8012af4:	2301      	movne	r3, #1
 8012af6:	2300      	moveq	r3, #0
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	461a      	mov	r2, r3
 8012afc:	f107 0314 	add.w	r3, r7, #20
 8012b00:	4611      	mov	r1, r2
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fe fbd2 	bl	80112ac <chk_lock>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b0e:	79fb      	ldrb	r3, [r7, #7]
 8012b10:	f003 031c 	and.w	r3, r3, #28
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d07f      	beq.n	8012c18 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d017      	beq.n	8012b50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b24:	2b04      	cmp	r3, #4
 8012b26:	d10e      	bne.n	8012b46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b28:	f7fe fc1c 	bl	8011364 <enq_lock>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d006      	beq.n	8012b40 <f_open+0xc8>
 8012b32:	f107 0314 	add.w	r3, r7, #20
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff fb03 	bl	8012142 <dir_register>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	e000      	b.n	8012b42 <f_open+0xca>
 8012b40:	2312      	movs	r3, #18
 8012b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b46:	79fb      	ldrb	r3, [r7, #7]
 8012b48:	f043 0308 	orr.w	r3, r3, #8
 8012b4c:	71fb      	strb	r3, [r7, #7]
 8012b4e:	e010      	b.n	8012b72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012b50:	7ebb      	ldrb	r3, [r7, #26]
 8012b52:	f003 0311 	and.w	r3, r3, #17
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d003      	beq.n	8012b62 <f_open+0xea>
					res = FR_DENIED;
 8012b5a:	2307      	movs	r3, #7
 8012b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b60:	e007      	b.n	8012b72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012b62:	79fb      	ldrb	r3, [r7, #7]
 8012b64:	f003 0304 	and.w	r3, r3, #4
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <f_open+0xfa>
 8012b6c:	2308      	movs	r3, #8
 8012b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d168      	bne.n	8012c4c <f_open+0x1d4>
 8012b7a:	79fb      	ldrb	r3, [r7, #7]
 8012b7c:	f003 0308 	and.w	r3, r3, #8
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d063      	beq.n	8012c4c <f_open+0x1d4>
				dw = GET_FATTIME();
 8012b84:	f7fe f888 	bl	8010c98 <get_fattime>
 8012b88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b8c:	330e      	adds	r3, #14
 8012b8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b90:	4618      	mov	r0, r3
 8012b92:	f7fe fae1 	bl	8011158 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b98:	3316      	adds	r3, #22
 8012b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fe fadb 	bl	8011158 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba4:	330b      	adds	r3, #11
 8012ba6:	2220      	movs	r2, #32
 8012ba8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7ff fa32 	bl	801201a <ld_clust>
 8012bb6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7ff fa4a 	bl	8012058 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc6:	331c      	adds	r3, #28
 8012bc8:	2100      	movs	r1, #0
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fe fac4 	bl	8011158 <st_dword>
					fs->wflag = 1;
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d037      	beq.n	8012c4c <f_open+0x1d4>
						dw = fs->winsect;
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012be2:	f107 0314 	add.w	r3, r7, #20
 8012be6:	2200      	movs	r2, #0
 8012be8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe ff5d 	bl	8011aaa <remove_chain>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d126      	bne.n	8012c4c <f_open+0x1d4>
							res = move_window(fs, dw);
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fe fd02 	bl	801160c <move_window>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c12:	3a01      	subs	r2, #1
 8012c14:	60da      	str	r2, [r3, #12]
 8012c16:	e019      	b.n	8012c4c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d115      	bne.n	8012c4c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012c20:	7ebb      	ldrb	r3, [r7, #26]
 8012c22:	f003 0310 	and.w	r3, r3, #16
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d003      	beq.n	8012c32 <f_open+0x1ba>
					res = FR_NO_FILE;
 8012c2a:	2304      	movs	r3, #4
 8012c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c30:	e00c      	b.n	8012c4c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	f003 0302 	and.w	r3, r3, #2
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d007      	beq.n	8012c4c <f_open+0x1d4>
 8012c3c:	7ebb      	ldrb	r3, [r7, #26]
 8012c3e:	f003 0301 	and.w	r3, r3, #1
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d002      	beq.n	8012c4c <f_open+0x1d4>
						res = FR_DENIED;
 8012c46:	2307      	movs	r3, #7
 8012c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d128      	bne.n	8012ca6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012c54:	79fb      	ldrb	r3, [r7, #7]
 8012c56:	f003 0308 	and.w	r3, r3, #8
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d003      	beq.n	8012c66 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012c5e:	79fb      	ldrb	r3, [r7, #7]
 8012c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	f023 0301 	bic.w	r3, r3, #1
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	bf14      	ite	ne
 8012c7e:	2301      	movne	r3, #1
 8012c80:	2300      	moveq	r3, #0
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	461a      	mov	r2, r3
 8012c86:	f107 0314 	add.w	r3, r7, #20
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7fe fb8b 	bl	80113a8 <inc_lock>
 8012c92:	4602      	mov	r2, r0
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d102      	bne.n	8012ca6 <f_open+0x22e>
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f040 8095 	bne.w	8012dda <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff f9af 	bl	801201a <ld_clust>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cc4:	331c      	adds	r3, #28
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fe fa08 	bl	80110dc <ld_dword>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012cd8:	693a      	ldr	r2, [r7, #16]
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	88da      	ldrh	r2, [r3, #6]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	79fa      	ldrb	r2, [r7, #7]
 8012cea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	3330      	adds	r3, #48	; 0x30
 8012d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d06:	2100      	movs	r1, #0
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7fe fa72 	bl	80111f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d0e:	79fb      	ldrb	r3, [r7, #7]
 8012d10:	f003 0320 	and.w	r3, r3, #32
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d060      	beq.n	8012dda <f_open+0x362>
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d05c      	beq.n	8012dda <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	68da      	ldr	r2, [r3, #12]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	895b      	ldrh	r3, [r3, #10]
 8012d2c:	025b      	lsls	r3, r3, #9
 8012d2e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8012d3c:	e016      	b.n	8012d6c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fe fd1d 	bl	8011782 <get_fat>
 8012d48:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d802      	bhi.n	8012d56 <f_open+0x2de>
 8012d50:	2302      	movs	r3, #2
 8012d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5c:	d102      	bne.n	8012d64 <f_open+0x2ec>
 8012d5e:	2301      	movs	r3, #1
 8012d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d68:	1ad3      	subs	r3, r2, r3
 8012d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8012d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d103      	bne.n	8012d7c <f_open+0x304>
 8012d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d8e0      	bhi.n	8012d3e <f_open+0x2c6>
				}
				fp->clust = clst;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d127      	bne.n	8012dda <f_open+0x362>
 8012d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d022      	beq.n	8012dda <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fe fcd3 	bl	8011744 <clust2sect>
 8012d9e:	6478      	str	r0, [r7, #68]	; 0x44
 8012da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d103      	bne.n	8012dae <f_open+0x336>
						res = FR_INT_ERR;
 8012da6:	2302      	movs	r3, #2
 8012da8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012dac:	e015      	b.n	8012dda <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db0:	0a5a      	lsrs	r2, r3, #9
 8012db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012db4:	441a      	add	r2, r3
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	7858      	ldrb	r0, [r3, #1]
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	6a1a      	ldr	r2, [r3, #32]
 8012dc8:	2301      	movs	r3, #1
 8012dca:	f7fe f911 	bl	8010ff0 <disk_read>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d002      	beq.n	8012dda <f_open+0x362>
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d002      	beq.n	8012de8 <f_open+0x370>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3760      	adds	r7, #96	; 0x60
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}

08012df4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b08c      	sub	sp, #48	; 0x30
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	60b9      	str	r1, [r7, #8]
 8012dfe:	607a      	str	r2, [r7, #4]
 8012e00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f107 0210 	add.w	r2, r7, #16
 8012e12:	4611      	mov	r1, r2
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7ff fdb3 	bl	8012980 <validate>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d107      	bne.n	8012e38 <f_write+0x44>
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	7d5b      	ldrb	r3, [r3, #21]
 8012e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <f_write+0x4a>
 8012e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e3c:	e14b      	b.n	80130d6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	7d1b      	ldrb	r3, [r3, #20]
 8012e42:	f003 0302 	and.w	r3, r3, #2
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d101      	bne.n	8012e4e <f_write+0x5a>
 8012e4a:	2307      	movs	r3, #7
 8012e4c:	e143      	b.n	80130d6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	699a      	ldr	r2, [r3, #24]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	441a      	add	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	699b      	ldr	r3, [r3, #24]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	f080 812d 	bcs.w	80130ba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	699b      	ldr	r3, [r3, #24]
 8012e64:	43db      	mvns	r3, r3
 8012e66:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012e68:	e127      	b.n	80130ba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	699b      	ldr	r3, [r3, #24]
 8012e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f040 80e3 	bne.w	801303e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	699b      	ldr	r3, [r3, #24]
 8012e7c:	0a5b      	lsrs	r3, r3, #9
 8012e7e:	693a      	ldr	r2, [r7, #16]
 8012e80:	8952      	ldrh	r2, [r2, #10]
 8012e82:	3a01      	subs	r2, #1
 8012e84:	4013      	ands	r3, r2
 8012e86:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d143      	bne.n	8012f16 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d10c      	bne.n	8012eb0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d11a      	bne.n	8012ed8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fe fe64 	bl	8011b74 <create_chain>
 8012eac:	62b8      	str	r0, [r7, #40]	; 0x28
 8012eae:	e013      	b.n	8012ed8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d007      	beq.n	8012ec8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	699b      	ldr	r3, [r3, #24]
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f7fe fef0 	bl	8011ca4 <clmt_clust>
 8012ec4:	62b8      	str	r0, [r7, #40]	; 0x28
 8012ec6:	e007      	b.n	8012ed8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	69db      	ldr	r3, [r3, #28]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4610      	mov	r0, r2
 8012ed2:	f7fe fe4f 	bl	8011b74 <create_chain>
 8012ed6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 80f2 	beq.w	80130c4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d104      	bne.n	8012ef0 <f_write+0xfc>
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2202      	movs	r2, #2
 8012eea:	755a      	strb	r2, [r3, #21]
 8012eec:	2302      	movs	r3, #2
 8012eee:	e0f2      	b.n	80130d6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef6:	d104      	bne.n	8012f02 <f_write+0x10e>
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2201      	movs	r2, #1
 8012efc:	755a      	strb	r2, [r3, #21]
 8012efe:	2301      	movs	r3, #1
 8012f00:	e0e9      	b.n	80130d6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f06:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d102      	bne.n	8012f16 <f_write+0x122>
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f14:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	7d1b      	ldrb	r3, [r3, #20]
 8012f1a:	b25b      	sxtb	r3, r3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	da18      	bge.n	8012f52 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	7858      	ldrb	r0, [r3, #1]
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	6a1a      	ldr	r2, [r3, #32]
 8012f2e:	2301      	movs	r3, #1
 8012f30:	f7fe f87e 	bl	8011030 <disk_write>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d004      	beq.n	8012f44 <f_write+0x150>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	755a      	strb	r2, [r3, #21]
 8012f40:	2301      	movs	r3, #1
 8012f42:	e0c8      	b.n	80130d6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	7d1b      	ldrb	r3, [r3, #20]
 8012f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f4c:	b2da      	uxtb	r2, r3
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f52:	693a      	ldr	r2, [r7, #16]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	69db      	ldr	r3, [r3, #28]
 8012f58:	4619      	mov	r1, r3
 8012f5a:	4610      	mov	r0, r2
 8012f5c:	f7fe fbf2 	bl	8011744 <clust2sect>
 8012f60:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d104      	bne.n	8012f72 <f_write+0x17e>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2202      	movs	r2, #2
 8012f6c:	755a      	strb	r2, [r3, #21]
 8012f6e:	2302      	movs	r3, #2
 8012f70:	e0b1      	b.n	80130d6 <f_write+0x2e2>
			sect += csect;
 8012f72:	697a      	ldr	r2, [r7, #20]
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	4413      	add	r3, r2
 8012f78:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	0a5b      	lsrs	r3, r3, #9
 8012f7e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012f80:	6a3b      	ldr	r3, [r7, #32]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d03c      	beq.n	8013000 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f86:	69ba      	ldr	r2, [r7, #24]
 8012f88:	6a3b      	ldr	r3, [r7, #32]
 8012f8a:	4413      	add	r3, r2
 8012f8c:	693a      	ldr	r2, [r7, #16]
 8012f8e:	8952      	ldrh	r2, [r2, #10]
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d905      	bls.n	8012fa0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	895b      	ldrh	r3, [r3, #10]
 8012f98:	461a      	mov	r2, r3
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	7858      	ldrb	r0, [r3, #1]
 8012fa4:	6a3b      	ldr	r3, [r7, #32]
 8012fa6:	697a      	ldr	r2, [r7, #20]
 8012fa8:	69f9      	ldr	r1, [r7, #28]
 8012faa:	f7fe f841 	bl	8011030 <disk_write>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d004      	beq.n	8012fbe <f_write+0x1ca>
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	755a      	strb	r2, [r3, #21]
 8012fba:	2301      	movs	r3, #1
 8012fbc:	e08b      	b.n	80130d6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	6a1a      	ldr	r2, [r3, #32]
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	1ad3      	subs	r3, r2, r3
 8012fc6:	6a3a      	ldr	r2, [r7, #32]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d915      	bls.n	8012ff8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	6a1a      	ldr	r2, [r3, #32]
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	025b      	lsls	r3, r3, #9
 8012fdc:	69fa      	ldr	r2, [r7, #28]
 8012fde:	4413      	add	r3, r2
 8012fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	f7fe f8e3 	bl	80111b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	7d1b      	ldrb	r3, [r3, #20]
 8012fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ff2:	b2da      	uxtb	r2, r3
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012ff8:	6a3b      	ldr	r3, [r7, #32]
 8012ffa:	025b      	lsls	r3, r3, #9
 8012ffc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012ffe:	e03f      	b.n	8013080 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6a1b      	ldr	r3, [r3, #32]
 8013004:	697a      	ldr	r2, [r7, #20]
 8013006:	429a      	cmp	r2, r3
 8013008:	d016      	beq.n	8013038 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	699a      	ldr	r2, [r3, #24]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013012:	429a      	cmp	r2, r3
 8013014:	d210      	bcs.n	8013038 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	7858      	ldrb	r0, [r3, #1]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013020:	2301      	movs	r3, #1
 8013022:	697a      	ldr	r2, [r7, #20]
 8013024:	f7fd ffe4 	bl	8010ff0 <disk_read>
 8013028:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801302a:	2b00      	cmp	r3, #0
 801302c:	d004      	beq.n	8013038 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2201      	movs	r2, #1
 8013032:	755a      	strb	r2, [r3, #21]
 8013034:	2301      	movs	r3, #1
 8013036:	e04e      	b.n	80130d6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	697a      	ldr	r2, [r7, #20]
 801303c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	699b      	ldr	r3, [r3, #24]
 8013042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013046:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801304a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	429a      	cmp	r2, r3
 8013052:	d901      	bls.n	8013058 <f_write+0x264>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	699b      	ldr	r3, [r3, #24]
 8013062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013066:	4413      	add	r3, r2
 8013068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801306a:	69f9      	ldr	r1, [r7, #28]
 801306c:	4618      	mov	r0, r3
 801306e:	f7fe f89f 	bl	80111b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	7d1b      	ldrb	r3, [r3, #20]
 8013076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801307a:	b2da      	uxtb	r2, r3
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013080:	69fa      	ldr	r2, [r7, #28]
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	4413      	add	r3, r2
 8013086:	61fb      	str	r3, [r7, #28]
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	699a      	ldr	r2, [r3, #24]
 801308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308e:	441a      	add	r2, r3
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	619a      	str	r2, [r3, #24]
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	68da      	ldr	r2, [r3, #12]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	699b      	ldr	r3, [r3, #24]
 801309c:	429a      	cmp	r2, r3
 801309e:	bf38      	it	cc
 80130a0:	461a      	movcc	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	60da      	str	r2, [r3, #12]
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	441a      	add	r2, r3
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	601a      	str	r2, [r3, #0]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b6:	1ad3      	subs	r3, r2, r3
 80130b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f47f aed4 	bne.w	8012e6a <f_write+0x76>
 80130c2:	e000      	b.n	80130c6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80130c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	7d1b      	ldrb	r3, [r3, #20]
 80130ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80130d4:	2300      	movs	r3, #0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3730      	adds	r7, #48	; 0x30
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}

080130de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80130de:	b580      	push	{r7, lr}
 80130e0:	b086      	sub	sp, #24
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f107 0208 	add.w	r2, r7, #8
 80130ec:	4611      	mov	r1, r2
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7ff fc46 	bl	8012980 <validate>
 80130f4:	4603      	mov	r3, r0
 80130f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80130f8:	7dfb      	ldrb	r3, [r7, #23]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d168      	bne.n	80131d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	7d1b      	ldrb	r3, [r3, #20]
 8013102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013106:	2b00      	cmp	r3, #0
 8013108:	d062      	beq.n	80131d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	7d1b      	ldrb	r3, [r3, #20]
 801310e:	b25b      	sxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	da15      	bge.n	8013140 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	7858      	ldrb	r0, [r3, #1]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6a1a      	ldr	r2, [r3, #32]
 8013122:	2301      	movs	r3, #1
 8013124:	f7fd ff84 	bl	8011030 <disk_write>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d001      	beq.n	8013132 <f_sync+0x54>
 801312e:	2301      	movs	r3, #1
 8013130:	e04f      	b.n	80131d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	7d1b      	ldrb	r3, [r3, #20]
 8013136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801313a:	b2da      	uxtb	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013140:	f7fd fdaa 	bl	8010c98 <get_fattime>
 8013144:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013146:	68ba      	ldr	r2, [r7, #8]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801314c:	4619      	mov	r1, r3
 801314e:	4610      	mov	r0, r2
 8013150:	f7fe fa5c 	bl	801160c <move_window>
 8013154:	4603      	mov	r3, r0
 8013156:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013158:	7dfb      	ldrb	r3, [r7, #23]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d138      	bne.n	80131d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013162:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	330b      	adds	r3, #11
 8013168:	781a      	ldrb	r2, [r3, #0]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	330b      	adds	r3, #11
 801316e:	f042 0220 	orr.w	r2, r2, #32
 8013172:	b2d2      	uxtb	r2, r2
 8013174:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6818      	ldr	r0, [r3, #0]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	461a      	mov	r2, r3
 8013180:	68f9      	ldr	r1, [r7, #12]
 8013182:	f7fe ff69 	bl	8012058 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f103 021c 	add.w	r2, r3, #28
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	4619      	mov	r1, r3
 8013192:	4610      	mov	r0, r2
 8013194:	f7fd ffe0 	bl	8011158 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	3316      	adds	r3, #22
 801319c:	6939      	ldr	r1, [r7, #16]
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fd ffda 	bl	8011158 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	3312      	adds	r3, #18
 80131a8:	2100      	movs	r1, #0
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fd ffb9 	bl	8011122 <st_word>
					fs->wflag = 1;
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	2201      	movs	r2, #1
 80131b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7fe fa55 	bl	8011668 <sync_fs>
 80131be:	4603      	mov	r3, r0
 80131c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	7d1b      	ldrb	r3, [r3, #20]
 80131c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80131ca:	b2da      	uxtb	r2, r3
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80131d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3718      	adds	r7, #24
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}

080131da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80131da:	b580      	push	{r7, lr}
 80131dc:	b084      	sub	sp, #16
 80131de:	af00      	add	r7, sp, #0
 80131e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f7ff ff7b 	bl	80130de <f_sync>
 80131e8:	4603      	mov	r3, r0
 80131ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80131ec:	7bfb      	ldrb	r3, [r7, #15]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d118      	bne.n	8013224 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f107 0208 	add.w	r2, r7, #8
 80131f8:	4611      	mov	r1, r2
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7ff fbc0 	bl	8012980 <validate>
 8013200:	4603      	mov	r3, r0
 8013202:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013204:	7bfb      	ldrb	r3, [r7, #15]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d10c      	bne.n	8013224 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe f958 	bl	80114c4 <dec_lock>
 8013214:	4603      	mov	r3, r0
 8013216:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013218:	7bfb      	ldrb	r3, [r7, #15]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d102      	bne.n	8013224 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2200      	movs	r2, #0
 8013222:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013224:	7bfb      	ldrb	r3, [r7, #15]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
	...

08013230 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013230:	b480      	push	{r7}
 8013232:	b087      	sub	sp, #28
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	4613      	mov	r3, r2
 801323c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801323e:	2301      	movs	r3, #1
 8013240:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013246:	4b1f      	ldr	r3, [pc, #124]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013248:	7a5b      	ldrb	r3, [r3, #9]
 801324a:	b2db      	uxtb	r3, r3
 801324c:	2b00      	cmp	r3, #0
 801324e:	d131      	bne.n	80132b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013250:	4b1c      	ldr	r3, [pc, #112]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013252:	7a5b      	ldrb	r3, [r3, #9]
 8013254:	b2db      	uxtb	r3, r3
 8013256:	461a      	mov	r2, r3
 8013258:	4b1a      	ldr	r3, [pc, #104]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 801325a:	2100      	movs	r1, #0
 801325c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801325e:	4b19      	ldr	r3, [pc, #100]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013260:	7a5b      	ldrb	r3, [r3, #9]
 8013262:	b2db      	uxtb	r3, r3
 8013264:	4a17      	ldr	r2, [pc, #92]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	4413      	add	r3, r2
 801326a:	68fa      	ldr	r2, [r7, #12]
 801326c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801326e:	4b15      	ldr	r3, [pc, #84]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013270:	7a5b      	ldrb	r3, [r3, #9]
 8013272:	b2db      	uxtb	r3, r3
 8013274:	461a      	mov	r2, r3
 8013276:	4b13      	ldr	r3, [pc, #76]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013278:	4413      	add	r3, r2
 801327a:	79fa      	ldrb	r2, [r7, #7]
 801327c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801327e:	4b11      	ldr	r3, [pc, #68]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 8013280:	7a5b      	ldrb	r3, [r3, #9]
 8013282:	b2db      	uxtb	r3, r3
 8013284:	1c5a      	adds	r2, r3, #1
 8013286:	b2d1      	uxtb	r1, r2
 8013288:	4a0e      	ldr	r2, [pc, #56]	; (80132c4 <FATFS_LinkDriverEx+0x94>)
 801328a:	7251      	strb	r1, [r2, #9]
 801328c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801328e:	7dbb      	ldrb	r3, [r7, #22]
 8013290:	3330      	adds	r3, #48	; 0x30
 8013292:	b2da      	uxtb	r2, r3
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	3301      	adds	r3, #1
 801329c:	223a      	movs	r2, #58	; 0x3a
 801329e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	3302      	adds	r3, #2
 80132a4:	222f      	movs	r2, #47	; 0x2f
 80132a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	3303      	adds	r3, #3
 80132ac:	2200      	movs	r2, #0
 80132ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80132b0:	2300      	movs	r3, #0
 80132b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	371c      	adds	r7, #28
 80132ba:	46bd      	mov	sp, r7
 80132bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	20000c28 	.word	0x20000c28

080132c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80132d2:	2200      	movs	r2, #0
 80132d4:	6839      	ldr	r1, [r7, #0]
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff ffaa 	bl	8013230 <FATFS_LinkDriverEx>
 80132dc:	4603      	mov	r3, r0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
	...

080132e8 <__errno>:
 80132e8:	4b01      	ldr	r3, [pc, #4]	; (80132f0 <__errno+0x8>)
 80132ea:	6818      	ldr	r0, [r3, #0]
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop
 80132f0:	2000012c 	.word	0x2000012c

080132f4 <__libc_init_array>:
 80132f4:	b570      	push	{r4, r5, r6, lr}
 80132f6:	4d0d      	ldr	r5, [pc, #52]	; (801332c <__libc_init_array+0x38>)
 80132f8:	4c0d      	ldr	r4, [pc, #52]	; (8013330 <__libc_init_array+0x3c>)
 80132fa:	1b64      	subs	r4, r4, r5
 80132fc:	10a4      	asrs	r4, r4, #2
 80132fe:	2600      	movs	r6, #0
 8013300:	42a6      	cmp	r6, r4
 8013302:	d109      	bne.n	8013318 <__libc_init_array+0x24>
 8013304:	4d0b      	ldr	r5, [pc, #44]	; (8013334 <__libc_init_array+0x40>)
 8013306:	4c0c      	ldr	r4, [pc, #48]	; (8013338 <__libc_init_array+0x44>)
 8013308:	f007 f8f8 	bl	801a4fc <_init>
 801330c:	1b64      	subs	r4, r4, r5
 801330e:	10a4      	asrs	r4, r4, #2
 8013310:	2600      	movs	r6, #0
 8013312:	42a6      	cmp	r6, r4
 8013314:	d105      	bne.n	8013322 <__libc_init_array+0x2e>
 8013316:	bd70      	pop	{r4, r5, r6, pc}
 8013318:	f855 3b04 	ldr.w	r3, [r5], #4
 801331c:	4798      	blx	r3
 801331e:	3601      	adds	r6, #1
 8013320:	e7ee      	b.n	8013300 <__libc_init_array+0xc>
 8013322:	f855 3b04 	ldr.w	r3, [r5], #4
 8013326:	4798      	blx	r3
 8013328:	3601      	adds	r6, #1
 801332a:	e7f2      	b.n	8013312 <__libc_init_array+0x1e>
 801332c:	0801b178 	.word	0x0801b178
 8013330:	0801b178 	.word	0x0801b178
 8013334:	0801b178 	.word	0x0801b178
 8013338:	0801b17c 	.word	0x0801b17c

0801333c <memcpy>:
 801333c:	440a      	add	r2, r1
 801333e:	4291      	cmp	r1, r2
 8013340:	f100 33ff 	add.w	r3, r0, #4294967295
 8013344:	d100      	bne.n	8013348 <memcpy+0xc>
 8013346:	4770      	bx	lr
 8013348:	b510      	push	{r4, lr}
 801334a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801334e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013352:	4291      	cmp	r1, r2
 8013354:	d1f9      	bne.n	801334a <memcpy+0xe>
 8013356:	bd10      	pop	{r4, pc}

08013358 <memset>:
 8013358:	4402      	add	r2, r0
 801335a:	4603      	mov	r3, r0
 801335c:	4293      	cmp	r3, r2
 801335e:	d100      	bne.n	8013362 <memset+0xa>
 8013360:	4770      	bx	lr
 8013362:	f803 1b01 	strb.w	r1, [r3], #1
 8013366:	e7f9      	b.n	801335c <memset+0x4>

08013368 <__cvt>:
 8013368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801336c:	ec55 4b10 	vmov	r4, r5, d0
 8013370:	2d00      	cmp	r5, #0
 8013372:	460e      	mov	r6, r1
 8013374:	4619      	mov	r1, r3
 8013376:	462b      	mov	r3, r5
 8013378:	bfbb      	ittet	lt
 801337a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801337e:	461d      	movlt	r5, r3
 8013380:	2300      	movge	r3, #0
 8013382:	232d      	movlt	r3, #45	; 0x2d
 8013384:	700b      	strb	r3, [r1, #0]
 8013386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801338c:	4691      	mov	r9, r2
 801338e:	f023 0820 	bic.w	r8, r3, #32
 8013392:	bfbc      	itt	lt
 8013394:	4622      	movlt	r2, r4
 8013396:	4614      	movlt	r4, r2
 8013398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801339c:	d005      	beq.n	80133aa <__cvt+0x42>
 801339e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80133a2:	d100      	bne.n	80133a6 <__cvt+0x3e>
 80133a4:	3601      	adds	r6, #1
 80133a6:	2102      	movs	r1, #2
 80133a8:	e000      	b.n	80133ac <__cvt+0x44>
 80133aa:	2103      	movs	r1, #3
 80133ac:	ab03      	add	r3, sp, #12
 80133ae:	9301      	str	r3, [sp, #4]
 80133b0:	ab02      	add	r3, sp, #8
 80133b2:	9300      	str	r3, [sp, #0]
 80133b4:	ec45 4b10 	vmov	d0, r4, r5
 80133b8:	4653      	mov	r3, sl
 80133ba:	4632      	mov	r2, r6
 80133bc:	f001 fea4 	bl	8015108 <_dtoa_r>
 80133c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80133c4:	4607      	mov	r7, r0
 80133c6:	d102      	bne.n	80133ce <__cvt+0x66>
 80133c8:	f019 0f01 	tst.w	r9, #1
 80133cc:	d022      	beq.n	8013414 <__cvt+0xac>
 80133ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133d2:	eb07 0906 	add.w	r9, r7, r6
 80133d6:	d110      	bne.n	80133fa <__cvt+0x92>
 80133d8:	783b      	ldrb	r3, [r7, #0]
 80133da:	2b30      	cmp	r3, #48	; 0x30
 80133dc:	d10a      	bne.n	80133f4 <__cvt+0x8c>
 80133de:	2200      	movs	r2, #0
 80133e0:	2300      	movs	r3, #0
 80133e2:	4620      	mov	r0, r4
 80133e4:	4629      	mov	r1, r5
 80133e6:	f7ed fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80133ea:	b918      	cbnz	r0, 80133f4 <__cvt+0x8c>
 80133ec:	f1c6 0601 	rsb	r6, r6, #1
 80133f0:	f8ca 6000 	str.w	r6, [sl]
 80133f4:	f8da 3000 	ldr.w	r3, [sl]
 80133f8:	4499      	add	r9, r3
 80133fa:	2200      	movs	r2, #0
 80133fc:	2300      	movs	r3, #0
 80133fe:	4620      	mov	r0, r4
 8013400:	4629      	mov	r1, r5
 8013402:	f7ed fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8013406:	b108      	cbz	r0, 801340c <__cvt+0xa4>
 8013408:	f8cd 900c 	str.w	r9, [sp, #12]
 801340c:	2230      	movs	r2, #48	; 0x30
 801340e:	9b03      	ldr	r3, [sp, #12]
 8013410:	454b      	cmp	r3, r9
 8013412:	d307      	bcc.n	8013424 <__cvt+0xbc>
 8013414:	9b03      	ldr	r3, [sp, #12]
 8013416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013418:	1bdb      	subs	r3, r3, r7
 801341a:	4638      	mov	r0, r7
 801341c:	6013      	str	r3, [r2, #0]
 801341e:	b004      	add	sp, #16
 8013420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013424:	1c59      	adds	r1, r3, #1
 8013426:	9103      	str	r1, [sp, #12]
 8013428:	701a      	strb	r2, [r3, #0]
 801342a:	e7f0      	b.n	801340e <__cvt+0xa6>

0801342c <__exponent>:
 801342c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801342e:	4603      	mov	r3, r0
 8013430:	2900      	cmp	r1, #0
 8013432:	bfb8      	it	lt
 8013434:	4249      	neglt	r1, r1
 8013436:	f803 2b02 	strb.w	r2, [r3], #2
 801343a:	bfb4      	ite	lt
 801343c:	222d      	movlt	r2, #45	; 0x2d
 801343e:	222b      	movge	r2, #43	; 0x2b
 8013440:	2909      	cmp	r1, #9
 8013442:	7042      	strb	r2, [r0, #1]
 8013444:	dd2a      	ble.n	801349c <__exponent+0x70>
 8013446:	f10d 0407 	add.w	r4, sp, #7
 801344a:	46a4      	mov	ip, r4
 801344c:	270a      	movs	r7, #10
 801344e:	46a6      	mov	lr, r4
 8013450:	460a      	mov	r2, r1
 8013452:	fb91 f6f7 	sdiv	r6, r1, r7
 8013456:	fb07 1516 	mls	r5, r7, r6, r1
 801345a:	3530      	adds	r5, #48	; 0x30
 801345c:	2a63      	cmp	r2, #99	; 0x63
 801345e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013462:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013466:	4631      	mov	r1, r6
 8013468:	dcf1      	bgt.n	801344e <__exponent+0x22>
 801346a:	3130      	adds	r1, #48	; 0x30
 801346c:	f1ae 0502 	sub.w	r5, lr, #2
 8013470:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013474:	1c44      	adds	r4, r0, #1
 8013476:	4629      	mov	r1, r5
 8013478:	4561      	cmp	r1, ip
 801347a:	d30a      	bcc.n	8013492 <__exponent+0x66>
 801347c:	f10d 0209 	add.w	r2, sp, #9
 8013480:	eba2 020e 	sub.w	r2, r2, lr
 8013484:	4565      	cmp	r5, ip
 8013486:	bf88      	it	hi
 8013488:	2200      	movhi	r2, #0
 801348a:	4413      	add	r3, r2
 801348c:	1a18      	subs	r0, r3, r0
 801348e:	b003      	add	sp, #12
 8013490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013496:	f804 2f01 	strb.w	r2, [r4, #1]!
 801349a:	e7ed      	b.n	8013478 <__exponent+0x4c>
 801349c:	2330      	movs	r3, #48	; 0x30
 801349e:	3130      	adds	r1, #48	; 0x30
 80134a0:	7083      	strb	r3, [r0, #2]
 80134a2:	70c1      	strb	r1, [r0, #3]
 80134a4:	1d03      	adds	r3, r0, #4
 80134a6:	e7f1      	b.n	801348c <__exponent+0x60>

080134a8 <_printf_float>:
 80134a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ac:	ed2d 8b02 	vpush	{d8}
 80134b0:	b08d      	sub	sp, #52	; 0x34
 80134b2:	460c      	mov	r4, r1
 80134b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80134b8:	4616      	mov	r6, r2
 80134ba:	461f      	mov	r7, r3
 80134bc:	4605      	mov	r5, r0
 80134be:	f003 f935 	bl	801672c <_localeconv_r>
 80134c2:	f8d0 a000 	ldr.w	sl, [r0]
 80134c6:	4650      	mov	r0, sl
 80134c8:	f7ec fe82 	bl	80001d0 <strlen>
 80134cc:	2300      	movs	r3, #0
 80134ce:	930a      	str	r3, [sp, #40]	; 0x28
 80134d0:	6823      	ldr	r3, [r4, #0]
 80134d2:	9305      	str	r3, [sp, #20]
 80134d4:	f8d8 3000 	ldr.w	r3, [r8]
 80134d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80134dc:	3307      	adds	r3, #7
 80134de:	f023 0307 	bic.w	r3, r3, #7
 80134e2:	f103 0208 	add.w	r2, r3, #8
 80134e6:	f8c8 2000 	str.w	r2, [r8]
 80134ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80134f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80134f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80134fa:	9307      	str	r3, [sp, #28]
 80134fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8013500:	ee08 0a10 	vmov	s16, r0
 8013504:	4b9f      	ldr	r3, [pc, #636]	; (8013784 <_printf_float+0x2dc>)
 8013506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801350a:	f04f 32ff 	mov.w	r2, #4294967295
 801350e:	f7ed fb0d 	bl	8000b2c <__aeabi_dcmpun>
 8013512:	bb88      	cbnz	r0, 8013578 <_printf_float+0xd0>
 8013514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013518:	4b9a      	ldr	r3, [pc, #616]	; (8013784 <_printf_float+0x2dc>)
 801351a:	f04f 32ff 	mov.w	r2, #4294967295
 801351e:	f7ed fae7 	bl	8000af0 <__aeabi_dcmple>
 8013522:	bb48      	cbnz	r0, 8013578 <_printf_float+0xd0>
 8013524:	2200      	movs	r2, #0
 8013526:	2300      	movs	r3, #0
 8013528:	4640      	mov	r0, r8
 801352a:	4649      	mov	r1, r9
 801352c:	f7ed fad6 	bl	8000adc <__aeabi_dcmplt>
 8013530:	b110      	cbz	r0, 8013538 <_printf_float+0x90>
 8013532:	232d      	movs	r3, #45	; 0x2d
 8013534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013538:	4b93      	ldr	r3, [pc, #588]	; (8013788 <_printf_float+0x2e0>)
 801353a:	4894      	ldr	r0, [pc, #592]	; (801378c <_printf_float+0x2e4>)
 801353c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013540:	bf94      	ite	ls
 8013542:	4698      	movls	r8, r3
 8013544:	4680      	movhi	r8, r0
 8013546:	2303      	movs	r3, #3
 8013548:	6123      	str	r3, [r4, #16]
 801354a:	9b05      	ldr	r3, [sp, #20]
 801354c:	f023 0204 	bic.w	r2, r3, #4
 8013550:	6022      	str	r2, [r4, #0]
 8013552:	f04f 0900 	mov.w	r9, #0
 8013556:	9700      	str	r7, [sp, #0]
 8013558:	4633      	mov	r3, r6
 801355a:	aa0b      	add	r2, sp, #44	; 0x2c
 801355c:	4621      	mov	r1, r4
 801355e:	4628      	mov	r0, r5
 8013560:	f000 f9d8 	bl	8013914 <_printf_common>
 8013564:	3001      	adds	r0, #1
 8013566:	f040 8090 	bne.w	801368a <_printf_float+0x1e2>
 801356a:	f04f 30ff 	mov.w	r0, #4294967295
 801356e:	b00d      	add	sp, #52	; 0x34
 8013570:	ecbd 8b02 	vpop	{d8}
 8013574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013578:	4642      	mov	r2, r8
 801357a:	464b      	mov	r3, r9
 801357c:	4640      	mov	r0, r8
 801357e:	4649      	mov	r1, r9
 8013580:	f7ed fad4 	bl	8000b2c <__aeabi_dcmpun>
 8013584:	b140      	cbz	r0, 8013598 <_printf_float+0xf0>
 8013586:	464b      	mov	r3, r9
 8013588:	2b00      	cmp	r3, #0
 801358a:	bfbc      	itt	lt
 801358c:	232d      	movlt	r3, #45	; 0x2d
 801358e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013592:	487f      	ldr	r0, [pc, #508]	; (8013790 <_printf_float+0x2e8>)
 8013594:	4b7f      	ldr	r3, [pc, #508]	; (8013794 <_printf_float+0x2ec>)
 8013596:	e7d1      	b.n	801353c <_printf_float+0x94>
 8013598:	6863      	ldr	r3, [r4, #4]
 801359a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801359e:	9206      	str	r2, [sp, #24]
 80135a0:	1c5a      	adds	r2, r3, #1
 80135a2:	d13f      	bne.n	8013624 <_printf_float+0x17c>
 80135a4:	2306      	movs	r3, #6
 80135a6:	6063      	str	r3, [r4, #4]
 80135a8:	9b05      	ldr	r3, [sp, #20]
 80135aa:	6861      	ldr	r1, [r4, #4]
 80135ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80135b0:	2300      	movs	r3, #0
 80135b2:	9303      	str	r3, [sp, #12]
 80135b4:	ab0a      	add	r3, sp, #40	; 0x28
 80135b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80135ba:	ab09      	add	r3, sp, #36	; 0x24
 80135bc:	ec49 8b10 	vmov	d0, r8, r9
 80135c0:	9300      	str	r3, [sp, #0]
 80135c2:	6022      	str	r2, [r4, #0]
 80135c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80135c8:	4628      	mov	r0, r5
 80135ca:	f7ff fecd 	bl	8013368 <__cvt>
 80135ce:	9b06      	ldr	r3, [sp, #24]
 80135d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135d2:	2b47      	cmp	r3, #71	; 0x47
 80135d4:	4680      	mov	r8, r0
 80135d6:	d108      	bne.n	80135ea <_printf_float+0x142>
 80135d8:	1cc8      	adds	r0, r1, #3
 80135da:	db02      	blt.n	80135e2 <_printf_float+0x13a>
 80135dc:	6863      	ldr	r3, [r4, #4]
 80135de:	4299      	cmp	r1, r3
 80135e0:	dd41      	ble.n	8013666 <_printf_float+0x1be>
 80135e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80135e6:	fa5f fb8b 	uxtb.w	fp, fp
 80135ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135ee:	d820      	bhi.n	8013632 <_printf_float+0x18a>
 80135f0:	3901      	subs	r1, #1
 80135f2:	465a      	mov	r2, fp
 80135f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80135f8:	9109      	str	r1, [sp, #36]	; 0x24
 80135fa:	f7ff ff17 	bl	801342c <__exponent>
 80135fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013600:	1813      	adds	r3, r2, r0
 8013602:	2a01      	cmp	r2, #1
 8013604:	4681      	mov	r9, r0
 8013606:	6123      	str	r3, [r4, #16]
 8013608:	dc02      	bgt.n	8013610 <_printf_float+0x168>
 801360a:	6822      	ldr	r2, [r4, #0]
 801360c:	07d2      	lsls	r2, r2, #31
 801360e:	d501      	bpl.n	8013614 <_printf_float+0x16c>
 8013610:	3301      	adds	r3, #1
 8013612:	6123      	str	r3, [r4, #16]
 8013614:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013618:	2b00      	cmp	r3, #0
 801361a:	d09c      	beq.n	8013556 <_printf_float+0xae>
 801361c:	232d      	movs	r3, #45	; 0x2d
 801361e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013622:	e798      	b.n	8013556 <_printf_float+0xae>
 8013624:	9a06      	ldr	r2, [sp, #24]
 8013626:	2a47      	cmp	r2, #71	; 0x47
 8013628:	d1be      	bne.n	80135a8 <_printf_float+0x100>
 801362a:	2b00      	cmp	r3, #0
 801362c:	d1bc      	bne.n	80135a8 <_printf_float+0x100>
 801362e:	2301      	movs	r3, #1
 8013630:	e7b9      	b.n	80135a6 <_printf_float+0xfe>
 8013632:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013636:	d118      	bne.n	801366a <_printf_float+0x1c2>
 8013638:	2900      	cmp	r1, #0
 801363a:	6863      	ldr	r3, [r4, #4]
 801363c:	dd0b      	ble.n	8013656 <_printf_float+0x1ae>
 801363e:	6121      	str	r1, [r4, #16]
 8013640:	b913      	cbnz	r3, 8013648 <_printf_float+0x1a0>
 8013642:	6822      	ldr	r2, [r4, #0]
 8013644:	07d0      	lsls	r0, r2, #31
 8013646:	d502      	bpl.n	801364e <_printf_float+0x1a6>
 8013648:	3301      	adds	r3, #1
 801364a:	440b      	add	r3, r1
 801364c:	6123      	str	r3, [r4, #16]
 801364e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013650:	f04f 0900 	mov.w	r9, #0
 8013654:	e7de      	b.n	8013614 <_printf_float+0x16c>
 8013656:	b913      	cbnz	r3, 801365e <_printf_float+0x1b6>
 8013658:	6822      	ldr	r2, [r4, #0]
 801365a:	07d2      	lsls	r2, r2, #31
 801365c:	d501      	bpl.n	8013662 <_printf_float+0x1ba>
 801365e:	3302      	adds	r3, #2
 8013660:	e7f4      	b.n	801364c <_printf_float+0x1a4>
 8013662:	2301      	movs	r3, #1
 8013664:	e7f2      	b.n	801364c <_printf_float+0x1a4>
 8013666:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801366a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801366c:	4299      	cmp	r1, r3
 801366e:	db05      	blt.n	801367c <_printf_float+0x1d4>
 8013670:	6823      	ldr	r3, [r4, #0]
 8013672:	6121      	str	r1, [r4, #16]
 8013674:	07d8      	lsls	r0, r3, #31
 8013676:	d5ea      	bpl.n	801364e <_printf_float+0x1a6>
 8013678:	1c4b      	adds	r3, r1, #1
 801367a:	e7e7      	b.n	801364c <_printf_float+0x1a4>
 801367c:	2900      	cmp	r1, #0
 801367e:	bfd4      	ite	le
 8013680:	f1c1 0202 	rsble	r2, r1, #2
 8013684:	2201      	movgt	r2, #1
 8013686:	4413      	add	r3, r2
 8013688:	e7e0      	b.n	801364c <_printf_float+0x1a4>
 801368a:	6823      	ldr	r3, [r4, #0]
 801368c:	055a      	lsls	r2, r3, #21
 801368e:	d407      	bmi.n	80136a0 <_printf_float+0x1f8>
 8013690:	6923      	ldr	r3, [r4, #16]
 8013692:	4642      	mov	r2, r8
 8013694:	4631      	mov	r1, r6
 8013696:	4628      	mov	r0, r5
 8013698:	47b8      	blx	r7
 801369a:	3001      	adds	r0, #1
 801369c:	d12c      	bne.n	80136f8 <_printf_float+0x250>
 801369e:	e764      	b.n	801356a <_printf_float+0xc2>
 80136a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80136a4:	f240 80e0 	bls.w	8013868 <_printf_float+0x3c0>
 80136a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136ac:	2200      	movs	r2, #0
 80136ae:	2300      	movs	r3, #0
 80136b0:	f7ed fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80136b4:	2800      	cmp	r0, #0
 80136b6:	d034      	beq.n	8013722 <_printf_float+0x27a>
 80136b8:	4a37      	ldr	r2, [pc, #220]	; (8013798 <_printf_float+0x2f0>)
 80136ba:	2301      	movs	r3, #1
 80136bc:	4631      	mov	r1, r6
 80136be:	4628      	mov	r0, r5
 80136c0:	47b8      	blx	r7
 80136c2:	3001      	adds	r0, #1
 80136c4:	f43f af51 	beq.w	801356a <_printf_float+0xc2>
 80136c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136cc:	429a      	cmp	r2, r3
 80136ce:	db02      	blt.n	80136d6 <_printf_float+0x22e>
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	07d8      	lsls	r0, r3, #31
 80136d4:	d510      	bpl.n	80136f8 <_printf_float+0x250>
 80136d6:	ee18 3a10 	vmov	r3, s16
 80136da:	4652      	mov	r2, sl
 80136dc:	4631      	mov	r1, r6
 80136de:	4628      	mov	r0, r5
 80136e0:	47b8      	blx	r7
 80136e2:	3001      	adds	r0, #1
 80136e4:	f43f af41 	beq.w	801356a <_printf_float+0xc2>
 80136e8:	f04f 0800 	mov.w	r8, #0
 80136ec:	f104 091a 	add.w	r9, r4, #26
 80136f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136f2:	3b01      	subs	r3, #1
 80136f4:	4543      	cmp	r3, r8
 80136f6:	dc09      	bgt.n	801370c <_printf_float+0x264>
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	079b      	lsls	r3, r3, #30
 80136fc:	f100 8105 	bmi.w	801390a <_printf_float+0x462>
 8013700:	68e0      	ldr	r0, [r4, #12]
 8013702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013704:	4298      	cmp	r0, r3
 8013706:	bfb8      	it	lt
 8013708:	4618      	movlt	r0, r3
 801370a:	e730      	b.n	801356e <_printf_float+0xc6>
 801370c:	2301      	movs	r3, #1
 801370e:	464a      	mov	r2, r9
 8013710:	4631      	mov	r1, r6
 8013712:	4628      	mov	r0, r5
 8013714:	47b8      	blx	r7
 8013716:	3001      	adds	r0, #1
 8013718:	f43f af27 	beq.w	801356a <_printf_float+0xc2>
 801371c:	f108 0801 	add.w	r8, r8, #1
 8013720:	e7e6      	b.n	80136f0 <_printf_float+0x248>
 8013722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013724:	2b00      	cmp	r3, #0
 8013726:	dc39      	bgt.n	801379c <_printf_float+0x2f4>
 8013728:	4a1b      	ldr	r2, [pc, #108]	; (8013798 <_printf_float+0x2f0>)
 801372a:	2301      	movs	r3, #1
 801372c:	4631      	mov	r1, r6
 801372e:	4628      	mov	r0, r5
 8013730:	47b8      	blx	r7
 8013732:	3001      	adds	r0, #1
 8013734:	f43f af19 	beq.w	801356a <_printf_float+0xc2>
 8013738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801373c:	4313      	orrs	r3, r2
 801373e:	d102      	bne.n	8013746 <_printf_float+0x29e>
 8013740:	6823      	ldr	r3, [r4, #0]
 8013742:	07d9      	lsls	r1, r3, #31
 8013744:	d5d8      	bpl.n	80136f8 <_printf_float+0x250>
 8013746:	ee18 3a10 	vmov	r3, s16
 801374a:	4652      	mov	r2, sl
 801374c:	4631      	mov	r1, r6
 801374e:	4628      	mov	r0, r5
 8013750:	47b8      	blx	r7
 8013752:	3001      	adds	r0, #1
 8013754:	f43f af09 	beq.w	801356a <_printf_float+0xc2>
 8013758:	f04f 0900 	mov.w	r9, #0
 801375c:	f104 0a1a 	add.w	sl, r4, #26
 8013760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013762:	425b      	negs	r3, r3
 8013764:	454b      	cmp	r3, r9
 8013766:	dc01      	bgt.n	801376c <_printf_float+0x2c4>
 8013768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801376a:	e792      	b.n	8013692 <_printf_float+0x1ea>
 801376c:	2301      	movs	r3, #1
 801376e:	4652      	mov	r2, sl
 8013770:	4631      	mov	r1, r6
 8013772:	4628      	mov	r0, r5
 8013774:	47b8      	blx	r7
 8013776:	3001      	adds	r0, #1
 8013778:	f43f aef7 	beq.w	801356a <_printf_float+0xc2>
 801377c:	f109 0901 	add.w	r9, r9, #1
 8013780:	e7ee      	b.n	8013760 <_printf_float+0x2b8>
 8013782:	bf00      	nop
 8013784:	7fefffff 	.word	0x7fefffff
 8013788:	0801aa30 	.word	0x0801aa30
 801378c:	0801aa34 	.word	0x0801aa34
 8013790:	0801aa3c 	.word	0x0801aa3c
 8013794:	0801aa38 	.word	0x0801aa38
 8013798:	0801aa40 	.word	0x0801aa40
 801379c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801379e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137a0:	429a      	cmp	r2, r3
 80137a2:	bfa8      	it	ge
 80137a4:	461a      	movge	r2, r3
 80137a6:	2a00      	cmp	r2, #0
 80137a8:	4691      	mov	r9, r2
 80137aa:	dc37      	bgt.n	801381c <_printf_float+0x374>
 80137ac:	f04f 0b00 	mov.w	fp, #0
 80137b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137b4:	f104 021a 	add.w	r2, r4, #26
 80137b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137ba:	9305      	str	r3, [sp, #20]
 80137bc:	eba3 0309 	sub.w	r3, r3, r9
 80137c0:	455b      	cmp	r3, fp
 80137c2:	dc33      	bgt.n	801382c <_printf_float+0x384>
 80137c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137c8:	429a      	cmp	r2, r3
 80137ca:	db3b      	blt.n	8013844 <_printf_float+0x39c>
 80137cc:	6823      	ldr	r3, [r4, #0]
 80137ce:	07da      	lsls	r2, r3, #31
 80137d0:	d438      	bmi.n	8013844 <_printf_float+0x39c>
 80137d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137d4:	9b05      	ldr	r3, [sp, #20]
 80137d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137d8:	1ad3      	subs	r3, r2, r3
 80137da:	eba2 0901 	sub.w	r9, r2, r1
 80137de:	4599      	cmp	r9, r3
 80137e0:	bfa8      	it	ge
 80137e2:	4699      	movge	r9, r3
 80137e4:	f1b9 0f00 	cmp.w	r9, #0
 80137e8:	dc35      	bgt.n	8013856 <_printf_float+0x3ae>
 80137ea:	f04f 0800 	mov.w	r8, #0
 80137ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137f2:	f104 0a1a 	add.w	sl, r4, #26
 80137f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137fa:	1a9b      	subs	r3, r3, r2
 80137fc:	eba3 0309 	sub.w	r3, r3, r9
 8013800:	4543      	cmp	r3, r8
 8013802:	f77f af79 	ble.w	80136f8 <_printf_float+0x250>
 8013806:	2301      	movs	r3, #1
 8013808:	4652      	mov	r2, sl
 801380a:	4631      	mov	r1, r6
 801380c:	4628      	mov	r0, r5
 801380e:	47b8      	blx	r7
 8013810:	3001      	adds	r0, #1
 8013812:	f43f aeaa 	beq.w	801356a <_printf_float+0xc2>
 8013816:	f108 0801 	add.w	r8, r8, #1
 801381a:	e7ec      	b.n	80137f6 <_printf_float+0x34e>
 801381c:	4613      	mov	r3, r2
 801381e:	4631      	mov	r1, r6
 8013820:	4642      	mov	r2, r8
 8013822:	4628      	mov	r0, r5
 8013824:	47b8      	blx	r7
 8013826:	3001      	adds	r0, #1
 8013828:	d1c0      	bne.n	80137ac <_printf_float+0x304>
 801382a:	e69e      	b.n	801356a <_printf_float+0xc2>
 801382c:	2301      	movs	r3, #1
 801382e:	4631      	mov	r1, r6
 8013830:	4628      	mov	r0, r5
 8013832:	9205      	str	r2, [sp, #20]
 8013834:	47b8      	blx	r7
 8013836:	3001      	adds	r0, #1
 8013838:	f43f ae97 	beq.w	801356a <_printf_float+0xc2>
 801383c:	9a05      	ldr	r2, [sp, #20]
 801383e:	f10b 0b01 	add.w	fp, fp, #1
 8013842:	e7b9      	b.n	80137b8 <_printf_float+0x310>
 8013844:	ee18 3a10 	vmov	r3, s16
 8013848:	4652      	mov	r2, sl
 801384a:	4631      	mov	r1, r6
 801384c:	4628      	mov	r0, r5
 801384e:	47b8      	blx	r7
 8013850:	3001      	adds	r0, #1
 8013852:	d1be      	bne.n	80137d2 <_printf_float+0x32a>
 8013854:	e689      	b.n	801356a <_printf_float+0xc2>
 8013856:	9a05      	ldr	r2, [sp, #20]
 8013858:	464b      	mov	r3, r9
 801385a:	4442      	add	r2, r8
 801385c:	4631      	mov	r1, r6
 801385e:	4628      	mov	r0, r5
 8013860:	47b8      	blx	r7
 8013862:	3001      	adds	r0, #1
 8013864:	d1c1      	bne.n	80137ea <_printf_float+0x342>
 8013866:	e680      	b.n	801356a <_printf_float+0xc2>
 8013868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801386a:	2a01      	cmp	r2, #1
 801386c:	dc01      	bgt.n	8013872 <_printf_float+0x3ca>
 801386e:	07db      	lsls	r3, r3, #31
 8013870:	d538      	bpl.n	80138e4 <_printf_float+0x43c>
 8013872:	2301      	movs	r3, #1
 8013874:	4642      	mov	r2, r8
 8013876:	4631      	mov	r1, r6
 8013878:	4628      	mov	r0, r5
 801387a:	47b8      	blx	r7
 801387c:	3001      	adds	r0, #1
 801387e:	f43f ae74 	beq.w	801356a <_printf_float+0xc2>
 8013882:	ee18 3a10 	vmov	r3, s16
 8013886:	4652      	mov	r2, sl
 8013888:	4631      	mov	r1, r6
 801388a:	4628      	mov	r0, r5
 801388c:	47b8      	blx	r7
 801388e:	3001      	adds	r0, #1
 8013890:	f43f ae6b 	beq.w	801356a <_printf_float+0xc2>
 8013894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013898:	2200      	movs	r2, #0
 801389a:	2300      	movs	r3, #0
 801389c:	f7ed f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80138a0:	b9d8      	cbnz	r0, 80138da <_printf_float+0x432>
 80138a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138a4:	f108 0201 	add.w	r2, r8, #1
 80138a8:	3b01      	subs	r3, #1
 80138aa:	4631      	mov	r1, r6
 80138ac:	4628      	mov	r0, r5
 80138ae:	47b8      	blx	r7
 80138b0:	3001      	adds	r0, #1
 80138b2:	d10e      	bne.n	80138d2 <_printf_float+0x42a>
 80138b4:	e659      	b.n	801356a <_printf_float+0xc2>
 80138b6:	2301      	movs	r3, #1
 80138b8:	4652      	mov	r2, sl
 80138ba:	4631      	mov	r1, r6
 80138bc:	4628      	mov	r0, r5
 80138be:	47b8      	blx	r7
 80138c0:	3001      	adds	r0, #1
 80138c2:	f43f ae52 	beq.w	801356a <_printf_float+0xc2>
 80138c6:	f108 0801 	add.w	r8, r8, #1
 80138ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138cc:	3b01      	subs	r3, #1
 80138ce:	4543      	cmp	r3, r8
 80138d0:	dcf1      	bgt.n	80138b6 <_printf_float+0x40e>
 80138d2:	464b      	mov	r3, r9
 80138d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80138d8:	e6dc      	b.n	8013694 <_printf_float+0x1ec>
 80138da:	f04f 0800 	mov.w	r8, #0
 80138de:	f104 0a1a 	add.w	sl, r4, #26
 80138e2:	e7f2      	b.n	80138ca <_printf_float+0x422>
 80138e4:	2301      	movs	r3, #1
 80138e6:	4642      	mov	r2, r8
 80138e8:	e7df      	b.n	80138aa <_printf_float+0x402>
 80138ea:	2301      	movs	r3, #1
 80138ec:	464a      	mov	r2, r9
 80138ee:	4631      	mov	r1, r6
 80138f0:	4628      	mov	r0, r5
 80138f2:	47b8      	blx	r7
 80138f4:	3001      	adds	r0, #1
 80138f6:	f43f ae38 	beq.w	801356a <_printf_float+0xc2>
 80138fa:	f108 0801 	add.w	r8, r8, #1
 80138fe:	68e3      	ldr	r3, [r4, #12]
 8013900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013902:	1a5b      	subs	r3, r3, r1
 8013904:	4543      	cmp	r3, r8
 8013906:	dcf0      	bgt.n	80138ea <_printf_float+0x442>
 8013908:	e6fa      	b.n	8013700 <_printf_float+0x258>
 801390a:	f04f 0800 	mov.w	r8, #0
 801390e:	f104 0919 	add.w	r9, r4, #25
 8013912:	e7f4      	b.n	80138fe <_printf_float+0x456>

08013914 <_printf_common>:
 8013914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013918:	4616      	mov	r6, r2
 801391a:	4699      	mov	r9, r3
 801391c:	688a      	ldr	r2, [r1, #8]
 801391e:	690b      	ldr	r3, [r1, #16]
 8013920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013924:	4293      	cmp	r3, r2
 8013926:	bfb8      	it	lt
 8013928:	4613      	movlt	r3, r2
 801392a:	6033      	str	r3, [r6, #0]
 801392c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013930:	4607      	mov	r7, r0
 8013932:	460c      	mov	r4, r1
 8013934:	b10a      	cbz	r2, 801393a <_printf_common+0x26>
 8013936:	3301      	adds	r3, #1
 8013938:	6033      	str	r3, [r6, #0]
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	0699      	lsls	r1, r3, #26
 801393e:	bf42      	ittt	mi
 8013940:	6833      	ldrmi	r3, [r6, #0]
 8013942:	3302      	addmi	r3, #2
 8013944:	6033      	strmi	r3, [r6, #0]
 8013946:	6825      	ldr	r5, [r4, #0]
 8013948:	f015 0506 	ands.w	r5, r5, #6
 801394c:	d106      	bne.n	801395c <_printf_common+0x48>
 801394e:	f104 0a19 	add.w	sl, r4, #25
 8013952:	68e3      	ldr	r3, [r4, #12]
 8013954:	6832      	ldr	r2, [r6, #0]
 8013956:	1a9b      	subs	r3, r3, r2
 8013958:	42ab      	cmp	r3, r5
 801395a:	dc26      	bgt.n	80139aa <_printf_common+0x96>
 801395c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013960:	1e13      	subs	r3, r2, #0
 8013962:	6822      	ldr	r2, [r4, #0]
 8013964:	bf18      	it	ne
 8013966:	2301      	movne	r3, #1
 8013968:	0692      	lsls	r2, r2, #26
 801396a:	d42b      	bmi.n	80139c4 <_printf_common+0xb0>
 801396c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013970:	4649      	mov	r1, r9
 8013972:	4638      	mov	r0, r7
 8013974:	47c0      	blx	r8
 8013976:	3001      	adds	r0, #1
 8013978:	d01e      	beq.n	80139b8 <_printf_common+0xa4>
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	68e5      	ldr	r5, [r4, #12]
 801397e:	6832      	ldr	r2, [r6, #0]
 8013980:	f003 0306 	and.w	r3, r3, #6
 8013984:	2b04      	cmp	r3, #4
 8013986:	bf08      	it	eq
 8013988:	1aad      	subeq	r5, r5, r2
 801398a:	68a3      	ldr	r3, [r4, #8]
 801398c:	6922      	ldr	r2, [r4, #16]
 801398e:	bf0c      	ite	eq
 8013990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013994:	2500      	movne	r5, #0
 8013996:	4293      	cmp	r3, r2
 8013998:	bfc4      	itt	gt
 801399a:	1a9b      	subgt	r3, r3, r2
 801399c:	18ed      	addgt	r5, r5, r3
 801399e:	2600      	movs	r6, #0
 80139a0:	341a      	adds	r4, #26
 80139a2:	42b5      	cmp	r5, r6
 80139a4:	d11a      	bne.n	80139dc <_printf_common+0xc8>
 80139a6:	2000      	movs	r0, #0
 80139a8:	e008      	b.n	80139bc <_printf_common+0xa8>
 80139aa:	2301      	movs	r3, #1
 80139ac:	4652      	mov	r2, sl
 80139ae:	4649      	mov	r1, r9
 80139b0:	4638      	mov	r0, r7
 80139b2:	47c0      	blx	r8
 80139b4:	3001      	adds	r0, #1
 80139b6:	d103      	bne.n	80139c0 <_printf_common+0xac>
 80139b8:	f04f 30ff 	mov.w	r0, #4294967295
 80139bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139c0:	3501      	adds	r5, #1
 80139c2:	e7c6      	b.n	8013952 <_printf_common+0x3e>
 80139c4:	18e1      	adds	r1, r4, r3
 80139c6:	1c5a      	adds	r2, r3, #1
 80139c8:	2030      	movs	r0, #48	; 0x30
 80139ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139ce:	4422      	add	r2, r4
 80139d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139d8:	3302      	adds	r3, #2
 80139da:	e7c7      	b.n	801396c <_printf_common+0x58>
 80139dc:	2301      	movs	r3, #1
 80139de:	4622      	mov	r2, r4
 80139e0:	4649      	mov	r1, r9
 80139e2:	4638      	mov	r0, r7
 80139e4:	47c0      	blx	r8
 80139e6:	3001      	adds	r0, #1
 80139e8:	d0e6      	beq.n	80139b8 <_printf_common+0xa4>
 80139ea:	3601      	adds	r6, #1
 80139ec:	e7d9      	b.n	80139a2 <_printf_common+0x8e>
	...

080139f0 <_printf_i>:
 80139f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139f4:	460c      	mov	r4, r1
 80139f6:	4691      	mov	r9, r2
 80139f8:	7e27      	ldrb	r7, [r4, #24]
 80139fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80139fc:	2f78      	cmp	r7, #120	; 0x78
 80139fe:	4680      	mov	r8, r0
 8013a00:	469a      	mov	sl, r3
 8013a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a06:	d807      	bhi.n	8013a18 <_printf_i+0x28>
 8013a08:	2f62      	cmp	r7, #98	; 0x62
 8013a0a:	d80a      	bhi.n	8013a22 <_printf_i+0x32>
 8013a0c:	2f00      	cmp	r7, #0
 8013a0e:	f000 80d8 	beq.w	8013bc2 <_printf_i+0x1d2>
 8013a12:	2f58      	cmp	r7, #88	; 0x58
 8013a14:	f000 80a3 	beq.w	8013b5e <_printf_i+0x16e>
 8013a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a20:	e03a      	b.n	8013a98 <_printf_i+0xa8>
 8013a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a26:	2b15      	cmp	r3, #21
 8013a28:	d8f6      	bhi.n	8013a18 <_printf_i+0x28>
 8013a2a:	a001      	add	r0, pc, #4	; (adr r0, 8013a30 <_printf_i+0x40>)
 8013a2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013a30:	08013a89 	.word	0x08013a89
 8013a34:	08013a9d 	.word	0x08013a9d
 8013a38:	08013a19 	.word	0x08013a19
 8013a3c:	08013a19 	.word	0x08013a19
 8013a40:	08013a19 	.word	0x08013a19
 8013a44:	08013a19 	.word	0x08013a19
 8013a48:	08013a9d 	.word	0x08013a9d
 8013a4c:	08013a19 	.word	0x08013a19
 8013a50:	08013a19 	.word	0x08013a19
 8013a54:	08013a19 	.word	0x08013a19
 8013a58:	08013a19 	.word	0x08013a19
 8013a5c:	08013ba9 	.word	0x08013ba9
 8013a60:	08013acd 	.word	0x08013acd
 8013a64:	08013b8b 	.word	0x08013b8b
 8013a68:	08013a19 	.word	0x08013a19
 8013a6c:	08013a19 	.word	0x08013a19
 8013a70:	08013bcb 	.word	0x08013bcb
 8013a74:	08013a19 	.word	0x08013a19
 8013a78:	08013acd 	.word	0x08013acd
 8013a7c:	08013a19 	.word	0x08013a19
 8013a80:	08013a19 	.word	0x08013a19
 8013a84:	08013b93 	.word	0x08013b93
 8013a88:	680b      	ldr	r3, [r1, #0]
 8013a8a:	1d1a      	adds	r2, r3, #4
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	600a      	str	r2, [r1, #0]
 8013a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a98:	2301      	movs	r3, #1
 8013a9a:	e0a3      	b.n	8013be4 <_printf_i+0x1f4>
 8013a9c:	6825      	ldr	r5, [r4, #0]
 8013a9e:	6808      	ldr	r0, [r1, #0]
 8013aa0:	062e      	lsls	r6, r5, #24
 8013aa2:	f100 0304 	add.w	r3, r0, #4
 8013aa6:	d50a      	bpl.n	8013abe <_printf_i+0xce>
 8013aa8:	6805      	ldr	r5, [r0, #0]
 8013aaa:	600b      	str	r3, [r1, #0]
 8013aac:	2d00      	cmp	r5, #0
 8013aae:	da03      	bge.n	8013ab8 <_printf_i+0xc8>
 8013ab0:	232d      	movs	r3, #45	; 0x2d
 8013ab2:	426d      	negs	r5, r5
 8013ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ab8:	485e      	ldr	r0, [pc, #376]	; (8013c34 <_printf_i+0x244>)
 8013aba:	230a      	movs	r3, #10
 8013abc:	e019      	b.n	8013af2 <_printf_i+0x102>
 8013abe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013ac2:	6805      	ldr	r5, [r0, #0]
 8013ac4:	600b      	str	r3, [r1, #0]
 8013ac6:	bf18      	it	ne
 8013ac8:	b22d      	sxthne	r5, r5
 8013aca:	e7ef      	b.n	8013aac <_printf_i+0xbc>
 8013acc:	680b      	ldr	r3, [r1, #0]
 8013ace:	6825      	ldr	r5, [r4, #0]
 8013ad0:	1d18      	adds	r0, r3, #4
 8013ad2:	6008      	str	r0, [r1, #0]
 8013ad4:	0628      	lsls	r0, r5, #24
 8013ad6:	d501      	bpl.n	8013adc <_printf_i+0xec>
 8013ad8:	681d      	ldr	r5, [r3, #0]
 8013ada:	e002      	b.n	8013ae2 <_printf_i+0xf2>
 8013adc:	0669      	lsls	r1, r5, #25
 8013ade:	d5fb      	bpl.n	8013ad8 <_printf_i+0xe8>
 8013ae0:	881d      	ldrh	r5, [r3, #0]
 8013ae2:	4854      	ldr	r0, [pc, #336]	; (8013c34 <_printf_i+0x244>)
 8013ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8013ae6:	bf0c      	ite	eq
 8013ae8:	2308      	moveq	r3, #8
 8013aea:	230a      	movne	r3, #10
 8013aec:	2100      	movs	r1, #0
 8013aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013af2:	6866      	ldr	r6, [r4, #4]
 8013af4:	60a6      	str	r6, [r4, #8]
 8013af6:	2e00      	cmp	r6, #0
 8013af8:	bfa2      	ittt	ge
 8013afa:	6821      	ldrge	r1, [r4, #0]
 8013afc:	f021 0104 	bicge.w	r1, r1, #4
 8013b00:	6021      	strge	r1, [r4, #0]
 8013b02:	b90d      	cbnz	r5, 8013b08 <_printf_i+0x118>
 8013b04:	2e00      	cmp	r6, #0
 8013b06:	d04d      	beq.n	8013ba4 <_printf_i+0x1b4>
 8013b08:	4616      	mov	r6, r2
 8013b0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b0e:	fb03 5711 	mls	r7, r3, r1, r5
 8013b12:	5dc7      	ldrb	r7, [r0, r7]
 8013b14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b18:	462f      	mov	r7, r5
 8013b1a:	42bb      	cmp	r3, r7
 8013b1c:	460d      	mov	r5, r1
 8013b1e:	d9f4      	bls.n	8013b0a <_printf_i+0x11a>
 8013b20:	2b08      	cmp	r3, #8
 8013b22:	d10b      	bne.n	8013b3c <_printf_i+0x14c>
 8013b24:	6823      	ldr	r3, [r4, #0]
 8013b26:	07df      	lsls	r7, r3, #31
 8013b28:	d508      	bpl.n	8013b3c <_printf_i+0x14c>
 8013b2a:	6923      	ldr	r3, [r4, #16]
 8013b2c:	6861      	ldr	r1, [r4, #4]
 8013b2e:	4299      	cmp	r1, r3
 8013b30:	bfde      	ittt	le
 8013b32:	2330      	movle	r3, #48	; 0x30
 8013b34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b3c:	1b92      	subs	r2, r2, r6
 8013b3e:	6122      	str	r2, [r4, #16]
 8013b40:	f8cd a000 	str.w	sl, [sp]
 8013b44:	464b      	mov	r3, r9
 8013b46:	aa03      	add	r2, sp, #12
 8013b48:	4621      	mov	r1, r4
 8013b4a:	4640      	mov	r0, r8
 8013b4c:	f7ff fee2 	bl	8013914 <_printf_common>
 8013b50:	3001      	adds	r0, #1
 8013b52:	d14c      	bne.n	8013bee <_printf_i+0x1fe>
 8013b54:	f04f 30ff 	mov.w	r0, #4294967295
 8013b58:	b004      	add	sp, #16
 8013b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b5e:	4835      	ldr	r0, [pc, #212]	; (8013c34 <_printf_i+0x244>)
 8013b60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b64:	6823      	ldr	r3, [r4, #0]
 8013b66:	680e      	ldr	r6, [r1, #0]
 8013b68:	061f      	lsls	r7, r3, #24
 8013b6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b6e:	600e      	str	r6, [r1, #0]
 8013b70:	d514      	bpl.n	8013b9c <_printf_i+0x1ac>
 8013b72:	07d9      	lsls	r1, r3, #31
 8013b74:	bf44      	itt	mi
 8013b76:	f043 0320 	orrmi.w	r3, r3, #32
 8013b7a:	6023      	strmi	r3, [r4, #0]
 8013b7c:	b91d      	cbnz	r5, 8013b86 <_printf_i+0x196>
 8013b7e:	6823      	ldr	r3, [r4, #0]
 8013b80:	f023 0320 	bic.w	r3, r3, #32
 8013b84:	6023      	str	r3, [r4, #0]
 8013b86:	2310      	movs	r3, #16
 8013b88:	e7b0      	b.n	8013aec <_printf_i+0xfc>
 8013b8a:	6823      	ldr	r3, [r4, #0]
 8013b8c:	f043 0320 	orr.w	r3, r3, #32
 8013b90:	6023      	str	r3, [r4, #0]
 8013b92:	2378      	movs	r3, #120	; 0x78
 8013b94:	4828      	ldr	r0, [pc, #160]	; (8013c38 <_printf_i+0x248>)
 8013b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b9a:	e7e3      	b.n	8013b64 <_printf_i+0x174>
 8013b9c:	065e      	lsls	r6, r3, #25
 8013b9e:	bf48      	it	mi
 8013ba0:	b2ad      	uxthmi	r5, r5
 8013ba2:	e7e6      	b.n	8013b72 <_printf_i+0x182>
 8013ba4:	4616      	mov	r6, r2
 8013ba6:	e7bb      	b.n	8013b20 <_printf_i+0x130>
 8013ba8:	680b      	ldr	r3, [r1, #0]
 8013baa:	6826      	ldr	r6, [r4, #0]
 8013bac:	6960      	ldr	r0, [r4, #20]
 8013bae:	1d1d      	adds	r5, r3, #4
 8013bb0:	600d      	str	r5, [r1, #0]
 8013bb2:	0635      	lsls	r5, r6, #24
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	d501      	bpl.n	8013bbc <_printf_i+0x1cc>
 8013bb8:	6018      	str	r0, [r3, #0]
 8013bba:	e002      	b.n	8013bc2 <_printf_i+0x1d2>
 8013bbc:	0671      	lsls	r1, r6, #25
 8013bbe:	d5fb      	bpl.n	8013bb8 <_printf_i+0x1c8>
 8013bc0:	8018      	strh	r0, [r3, #0]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	6123      	str	r3, [r4, #16]
 8013bc6:	4616      	mov	r6, r2
 8013bc8:	e7ba      	b.n	8013b40 <_printf_i+0x150>
 8013bca:	680b      	ldr	r3, [r1, #0]
 8013bcc:	1d1a      	adds	r2, r3, #4
 8013bce:	600a      	str	r2, [r1, #0]
 8013bd0:	681e      	ldr	r6, [r3, #0]
 8013bd2:	6862      	ldr	r2, [r4, #4]
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f7ec fb02 	bl	80001e0 <memchr>
 8013bdc:	b108      	cbz	r0, 8013be2 <_printf_i+0x1f2>
 8013bde:	1b80      	subs	r0, r0, r6
 8013be0:	6060      	str	r0, [r4, #4]
 8013be2:	6863      	ldr	r3, [r4, #4]
 8013be4:	6123      	str	r3, [r4, #16]
 8013be6:	2300      	movs	r3, #0
 8013be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bec:	e7a8      	b.n	8013b40 <_printf_i+0x150>
 8013bee:	6923      	ldr	r3, [r4, #16]
 8013bf0:	4632      	mov	r2, r6
 8013bf2:	4649      	mov	r1, r9
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	47d0      	blx	sl
 8013bf8:	3001      	adds	r0, #1
 8013bfa:	d0ab      	beq.n	8013b54 <_printf_i+0x164>
 8013bfc:	6823      	ldr	r3, [r4, #0]
 8013bfe:	079b      	lsls	r3, r3, #30
 8013c00:	d413      	bmi.n	8013c2a <_printf_i+0x23a>
 8013c02:	68e0      	ldr	r0, [r4, #12]
 8013c04:	9b03      	ldr	r3, [sp, #12]
 8013c06:	4298      	cmp	r0, r3
 8013c08:	bfb8      	it	lt
 8013c0a:	4618      	movlt	r0, r3
 8013c0c:	e7a4      	b.n	8013b58 <_printf_i+0x168>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	4632      	mov	r2, r6
 8013c12:	4649      	mov	r1, r9
 8013c14:	4640      	mov	r0, r8
 8013c16:	47d0      	blx	sl
 8013c18:	3001      	adds	r0, #1
 8013c1a:	d09b      	beq.n	8013b54 <_printf_i+0x164>
 8013c1c:	3501      	adds	r5, #1
 8013c1e:	68e3      	ldr	r3, [r4, #12]
 8013c20:	9903      	ldr	r1, [sp, #12]
 8013c22:	1a5b      	subs	r3, r3, r1
 8013c24:	42ab      	cmp	r3, r5
 8013c26:	dcf2      	bgt.n	8013c0e <_printf_i+0x21e>
 8013c28:	e7eb      	b.n	8013c02 <_printf_i+0x212>
 8013c2a:	2500      	movs	r5, #0
 8013c2c:	f104 0619 	add.w	r6, r4, #25
 8013c30:	e7f5      	b.n	8013c1e <_printf_i+0x22e>
 8013c32:	bf00      	nop
 8013c34:	0801aa42 	.word	0x0801aa42
 8013c38:	0801aa53 	.word	0x0801aa53

08013c3c <_scanf_float>:
 8013c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c40:	b087      	sub	sp, #28
 8013c42:	4617      	mov	r7, r2
 8013c44:	9303      	str	r3, [sp, #12]
 8013c46:	688b      	ldr	r3, [r1, #8]
 8013c48:	1e5a      	subs	r2, r3, #1
 8013c4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c4e:	bf83      	ittte	hi
 8013c50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c54:	195b      	addhi	r3, r3, r5
 8013c56:	9302      	strhi	r3, [sp, #8]
 8013c58:	2300      	movls	r3, #0
 8013c5a:	bf86      	itte	hi
 8013c5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c60:	608b      	strhi	r3, [r1, #8]
 8013c62:	9302      	strls	r3, [sp, #8]
 8013c64:	680b      	ldr	r3, [r1, #0]
 8013c66:	468b      	mov	fp, r1
 8013c68:	2500      	movs	r5, #0
 8013c6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013c6e:	f84b 3b1c 	str.w	r3, [fp], #28
 8013c72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013c76:	4680      	mov	r8, r0
 8013c78:	460c      	mov	r4, r1
 8013c7a:	465e      	mov	r6, fp
 8013c7c:	46aa      	mov	sl, r5
 8013c7e:	46a9      	mov	r9, r5
 8013c80:	9501      	str	r5, [sp, #4]
 8013c82:	68a2      	ldr	r2, [r4, #8]
 8013c84:	b152      	cbz	r2, 8013c9c <_scanf_float+0x60>
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8013c8c:	d864      	bhi.n	8013d58 <_scanf_float+0x11c>
 8013c8e:	2b40      	cmp	r3, #64	; 0x40
 8013c90:	d83c      	bhi.n	8013d0c <_scanf_float+0xd0>
 8013c92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013c96:	b2c8      	uxtb	r0, r1
 8013c98:	280e      	cmp	r0, #14
 8013c9a:	d93a      	bls.n	8013d12 <_scanf_float+0xd6>
 8013c9c:	f1b9 0f00 	cmp.w	r9, #0
 8013ca0:	d003      	beq.n	8013caa <_scanf_float+0x6e>
 8013ca2:	6823      	ldr	r3, [r4, #0]
 8013ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013ca8:	6023      	str	r3, [r4, #0]
 8013caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cae:	f1ba 0f01 	cmp.w	sl, #1
 8013cb2:	f200 8113 	bhi.w	8013edc <_scanf_float+0x2a0>
 8013cb6:	455e      	cmp	r6, fp
 8013cb8:	f200 8105 	bhi.w	8013ec6 <_scanf_float+0x28a>
 8013cbc:	2501      	movs	r5, #1
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	b007      	add	sp, #28
 8013cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013cca:	2a0d      	cmp	r2, #13
 8013ccc:	d8e6      	bhi.n	8013c9c <_scanf_float+0x60>
 8013cce:	a101      	add	r1, pc, #4	; (adr r1, 8013cd4 <_scanf_float+0x98>)
 8013cd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013cd4:	08013e13 	.word	0x08013e13
 8013cd8:	08013c9d 	.word	0x08013c9d
 8013cdc:	08013c9d 	.word	0x08013c9d
 8013ce0:	08013c9d 	.word	0x08013c9d
 8013ce4:	08013e73 	.word	0x08013e73
 8013ce8:	08013e4b 	.word	0x08013e4b
 8013cec:	08013c9d 	.word	0x08013c9d
 8013cf0:	08013c9d 	.word	0x08013c9d
 8013cf4:	08013e21 	.word	0x08013e21
 8013cf8:	08013c9d 	.word	0x08013c9d
 8013cfc:	08013c9d 	.word	0x08013c9d
 8013d00:	08013c9d 	.word	0x08013c9d
 8013d04:	08013c9d 	.word	0x08013c9d
 8013d08:	08013dd9 	.word	0x08013dd9
 8013d0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013d10:	e7db      	b.n	8013cca <_scanf_float+0x8e>
 8013d12:	290e      	cmp	r1, #14
 8013d14:	d8c2      	bhi.n	8013c9c <_scanf_float+0x60>
 8013d16:	a001      	add	r0, pc, #4	; (adr r0, 8013d1c <_scanf_float+0xe0>)
 8013d18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013d1c:	08013dcb 	.word	0x08013dcb
 8013d20:	08013c9d 	.word	0x08013c9d
 8013d24:	08013dcb 	.word	0x08013dcb
 8013d28:	08013e5f 	.word	0x08013e5f
 8013d2c:	08013c9d 	.word	0x08013c9d
 8013d30:	08013d79 	.word	0x08013d79
 8013d34:	08013db5 	.word	0x08013db5
 8013d38:	08013db5 	.word	0x08013db5
 8013d3c:	08013db5 	.word	0x08013db5
 8013d40:	08013db5 	.word	0x08013db5
 8013d44:	08013db5 	.word	0x08013db5
 8013d48:	08013db5 	.word	0x08013db5
 8013d4c:	08013db5 	.word	0x08013db5
 8013d50:	08013db5 	.word	0x08013db5
 8013d54:	08013db5 	.word	0x08013db5
 8013d58:	2b6e      	cmp	r3, #110	; 0x6e
 8013d5a:	d809      	bhi.n	8013d70 <_scanf_float+0x134>
 8013d5c:	2b60      	cmp	r3, #96	; 0x60
 8013d5e:	d8b2      	bhi.n	8013cc6 <_scanf_float+0x8a>
 8013d60:	2b54      	cmp	r3, #84	; 0x54
 8013d62:	d077      	beq.n	8013e54 <_scanf_float+0x218>
 8013d64:	2b59      	cmp	r3, #89	; 0x59
 8013d66:	d199      	bne.n	8013c9c <_scanf_float+0x60>
 8013d68:	2d07      	cmp	r5, #7
 8013d6a:	d197      	bne.n	8013c9c <_scanf_float+0x60>
 8013d6c:	2508      	movs	r5, #8
 8013d6e:	e029      	b.n	8013dc4 <_scanf_float+0x188>
 8013d70:	2b74      	cmp	r3, #116	; 0x74
 8013d72:	d06f      	beq.n	8013e54 <_scanf_float+0x218>
 8013d74:	2b79      	cmp	r3, #121	; 0x79
 8013d76:	e7f6      	b.n	8013d66 <_scanf_float+0x12a>
 8013d78:	6821      	ldr	r1, [r4, #0]
 8013d7a:	05c8      	lsls	r0, r1, #23
 8013d7c:	d51a      	bpl.n	8013db4 <_scanf_float+0x178>
 8013d7e:	9b02      	ldr	r3, [sp, #8]
 8013d80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013d84:	6021      	str	r1, [r4, #0]
 8013d86:	f109 0901 	add.w	r9, r9, #1
 8013d8a:	b11b      	cbz	r3, 8013d94 <_scanf_float+0x158>
 8013d8c:	3b01      	subs	r3, #1
 8013d8e:	3201      	adds	r2, #1
 8013d90:	9302      	str	r3, [sp, #8]
 8013d92:	60a2      	str	r2, [r4, #8]
 8013d94:	68a3      	ldr	r3, [r4, #8]
 8013d96:	3b01      	subs	r3, #1
 8013d98:	60a3      	str	r3, [r4, #8]
 8013d9a:	6923      	ldr	r3, [r4, #16]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	6123      	str	r3, [r4, #16]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	3b01      	subs	r3, #1
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	607b      	str	r3, [r7, #4]
 8013da8:	f340 8084 	ble.w	8013eb4 <_scanf_float+0x278>
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	3301      	adds	r3, #1
 8013db0:	603b      	str	r3, [r7, #0]
 8013db2:	e766      	b.n	8013c82 <_scanf_float+0x46>
 8013db4:	eb1a 0f05 	cmn.w	sl, r5
 8013db8:	f47f af70 	bne.w	8013c9c <_scanf_float+0x60>
 8013dbc:	6822      	ldr	r2, [r4, #0]
 8013dbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013dc2:	6022      	str	r2, [r4, #0]
 8013dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8013dc8:	e7e4      	b.n	8013d94 <_scanf_float+0x158>
 8013dca:	6822      	ldr	r2, [r4, #0]
 8013dcc:	0610      	lsls	r0, r2, #24
 8013dce:	f57f af65 	bpl.w	8013c9c <_scanf_float+0x60>
 8013dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013dd6:	e7f4      	b.n	8013dc2 <_scanf_float+0x186>
 8013dd8:	f1ba 0f00 	cmp.w	sl, #0
 8013ddc:	d10e      	bne.n	8013dfc <_scanf_float+0x1c0>
 8013dde:	f1b9 0f00 	cmp.w	r9, #0
 8013de2:	d10e      	bne.n	8013e02 <_scanf_float+0x1c6>
 8013de4:	6822      	ldr	r2, [r4, #0]
 8013de6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013dea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013dee:	d108      	bne.n	8013e02 <_scanf_float+0x1c6>
 8013df0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013df4:	6022      	str	r2, [r4, #0]
 8013df6:	f04f 0a01 	mov.w	sl, #1
 8013dfa:	e7e3      	b.n	8013dc4 <_scanf_float+0x188>
 8013dfc:	f1ba 0f02 	cmp.w	sl, #2
 8013e00:	d055      	beq.n	8013eae <_scanf_float+0x272>
 8013e02:	2d01      	cmp	r5, #1
 8013e04:	d002      	beq.n	8013e0c <_scanf_float+0x1d0>
 8013e06:	2d04      	cmp	r5, #4
 8013e08:	f47f af48 	bne.w	8013c9c <_scanf_float+0x60>
 8013e0c:	3501      	adds	r5, #1
 8013e0e:	b2ed      	uxtb	r5, r5
 8013e10:	e7d8      	b.n	8013dc4 <_scanf_float+0x188>
 8013e12:	f1ba 0f01 	cmp.w	sl, #1
 8013e16:	f47f af41 	bne.w	8013c9c <_scanf_float+0x60>
 8013e1a:	f04f 0a02 	mov.w	sl, #2
 8013e1e:	e7d1      	b.n	8013dc4 <_scanf_float+0x188>
 8013e20:	b97d      	cbnz	r5, 8013e42 <_scanf_float+0x206>
 8013e22:	f1b9 0f00 	cmp.w	r9, #0
 8013e26:	f47f af3c 	bne.w	8013ca2 <_scanf_float+0x66>
 8013e2a:	6822      	ldr	r2, [r4, #0]
 8013e2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013e30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013e34:	f47f af39 	bne.w	8013caa <_scanf_float+0x6e>
 8013e38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e3c:	6022      	str	r2, [r4, #0]
 8013e3e:	2501      	movs	r5, #1
 8013e40:	e7c0      	b.n	8013dc4 <_scanf_float+0x188>
 8013e42:	2d03      	cmp	r5, #3
 8013e44:	d0e2      	beq.n	8013e0c <_scanf_float+0x1d0>
 8013e46:	2d05      	cmp	r5, #5
 8013e48:	e7de      	b.n	8013e08 <_scanf_float+0x1cc>
 8013e4a:	2d02      	cmp	r5, #2
 8013e4c:	f47f af26 	bne.w	8013c9c <_scanf_float+0x60>
 8013e50:	2503      	movs	r5, #3
 8013e52:	e7b7      	b.n	8013dc4 <_scanf_float+0x188>
 8013e54:	2d06      	cmp	r5, #6
 8013e56:	f47f af21 	bne.w	8013c9c <_scanf_float+0x60>
 8013e5a:	2507      	movs	r5, #7
 8013e5c:	e7b2      	b.n	8013dc4 <_scanf_float+0x188>
 8013e5e:	6822      	ldr	r2, [r4, #0]
 8013e60:	0591      	lsls	r1, r2, #22
 8013e62:	f57f af1b 	bpl.w	8013c9c <_scanf_float+0x60>
 8013e66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013e6a:	6022      	str	r2, [r4, #0]
 8013e6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e70:	e7a8      	b.n	8013dc4 <_scanf_float+0x188>
 8013e72:	6822      	ldr	r2, [r4, #0]
 8013e74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013e78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013e7c:	d006      	beq.n	8013e8c <_scanf_float+0x250>
 8013e7e:	0550      	lsls	r0, r2, #21
 8013e80:	f57f af0c 	bpl.w	8013c9c <_scanf_float+0x60>
 8013e84:	f1b9 0f00 	cmp.w	r9, #0
 8013e88:	f43f af0f 	beq.w	8013caa <_scanf_float+0x6e>
 8013e8c:	0591      	lsls	r1, r2, #22
 8013e8e:	bf58      	it	pl
 8013e90:	9901      	ldrpl	r1, [sp, #4]
 8013e92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e96:	bf58      	it	pl
 8013e98:	eba9 0101 	subpl.w	r1, r9, r1
 8013e9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013ea0:	bf58      	it	pl
 8013ea2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013ea6:	6022      	str	r2, [r4, #0]
 8013ea8:	f04f 0900 	mov.w	r9, #0
 8013eac:	e78a      	b.n	8013dc4 <_scanf_float+0x188>
 8013eae:	f04f 0a03 	mov.w	sl, #3
 8013eb2:	e787      	b.n	8013dc4 <_scanf_float+0x188>
 8013eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013eb8:	4639      	mov	r1, r7
 8013eba:	4640      	mov	r0, r8
 8013ebc:	4798      	blx	r3
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	f43f aedf 	beq.w	8013c82 <_scanf_float+0x46>
 8013ec4:	e6ea      	b.n	8013c9c <_scanf_float+0x60>
 8013ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ece:	463a      	mov	r2, r7
 8013ed0:	4640      	mov	r0, r8
 8013ed2:	4798      	blx	r3
 8013ed4:	6923      	ldr	r3, [r4, #16]
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	e6ec      	b.n	8013cb6 <_scanf_float+0x7a>
 8013edc:	1e6b      	subs	r3, r5, #1
 8013ede:	2b06      	cmp	r3, #6
 8013ee0:	d825      	bhi.n	8013f2e <_scanf_float+0x2f2>
 8013ee2:	2d02      	cmp	r5, #2
 8013ee4:	d836      	bhi.n	8013f54 <_scanf_float+0x318>
 8013ee6:	455e      	cmp	r6, fp
 8013ee8:	f67f aee8 	bls.w	8013cbc <_scanf_float+0x80>
 8013eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ef0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ef4:	463a      	mov	r2, r7
 8013ef6:	4640      	mov	r0, r8
 8013ef8:	4798      	blx	r3
 8013efa:	6923      	ldr	r3, [r4, #16]
 8013efc:	3b01      	subs	r3, #1
 8013efe:	6123      	str	r3, [r4, #16]
 8013f00:	e7f1      	b.n	8013ee6 <_scanf_float+0x2aa>
 8013f02:	9802      	ldr	r0, [sp, #8]
 8013f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013f0c:	9002      	str	r0, [sp, #8]
 8013f0e:	463a      	mov	r2, r7
 8013f10:	4640      	mov	r0, r8
 8013f12:	4798      	blx	r3
 8013f14:	6923      	ldr	r3, [r4, #16]
 8013f16:	3b01      	subs	r3, #1
 8013f18:	6123      	str	r3, [r4, #16]
 8013f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f1e:	fa5f fa8a 	uxtb.w	sl, sl
 8013f22:	f1ba 0f02 	cmp.w	sl, #2
 8013f26:	d1ec      	bne.n	8013f02 <_scanf_float+0x2c6>
 8013f28:	3d03      	subs	r5, #3
 8013f2a:	b2ed      	uxtb	r5, r5
 8013f2c:	1b76      	subs	r6, r6, r5
 8013f2e:	6823      	ldr	r3, [r4, #0]
 8013f30:	05da      	lsls	r2, r3, #23
 8013f32:	d52f      	bpl.n	8013f94 <_scanf_float+0x358>
 8013f34:	055b      	lsls	r3, r3, #21
 8013f36:	d510      	bpl.n	8013f5a <_scanf_float+0x31e>
 8013f38:	455e      	cmp	r6, fp
 8013f3a:	f67f aebf 	bls.w	8013cbc <_scanf_float+0x80>
 8013f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f46:	463a      	mov	r2, r7
 8013f48:	4640      	mov	r0, r8
 8013f4a:	4798      	blx	r3
 8013f4c:	6923      	ldr	r3, [r4, #16]
 8013f4e:	3b01      	subs	r3, #1
 8013f50:	6123      	str	r3, [r4, #16]
 8013f52:	e7f1      	b.n	8013f38 <_scanf_float+0x2fc>
 8013f54:	46aa      	mov	sl, r5
 8013f56:	9602      	str	r6, [sp, #8]
 8013f58:	e7df      	b.n	8013f1a <_scanf_float+0x2de>
 8013f5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013f5e:	6923      	ldr	r3, [r4, #16]
 8013f60:	2965      	cmp	r1, #101	; 0x65
 8013f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f66:	f106 35ff 	add.w	r5, r6, #4294967295
 8013f6a:	6123      	str	r3, [r4, #16]
 8013f6c:	d00c      	beq.n	8013f88 <_scanf_float+0x34c>
 8013f6e:	2945      	cmp	r1, #69	; 0x45
 8013f70:	d00a      	beq.n	8013f88 <_scanf_float+0x34c>
 8013f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f76:	463a      	mov	r2, r7
 8013f78:	4640      	mov	r0, r8
 8013f7a:	4798      	blx	r3
 8013f7c:	6923      	ldr	r3, [r4, #16]
 8013f7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013f82:	3b01      	subs	r3, #1
 8013f84:	1eb5      	subs	r5, r6, #2
 8013f86:	6123      	str	r3, [r4, #16]
 8013f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f8c:	463a      	mov	r2, r7
 8013f8e:	4640      	mov	r0, r8
 8013f90:	4798      	blx	r3
 8013f92:	462e      	mov	r6, r5
 8013f94:	6825      	ldr	r5, [r4, #0]
 8013f96:	f015 0510 	ands.w	r5, r5, #16
 8013f9a:	d158      	bne.n	801404e <_scanf_float+0x412>
 8013f9c:	7035      	strb	r5, [r6, #0]
 8013f9e:	6823      	ldr	r3, [r4, #0]
 8013fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fa8:	d11c      	bne.n	8013fe4 <_scanf_float+0x3a8>
 8013faa:	9b01      	ldr	r3, [sp, #4]
 8013fac:	454b      	cmp	r3, r9
 8013fae:	eba3 0209 	sub.w	r2, r3, r9
 8013fb2:	d124      	bne.n	8013ffe <_scanf_float+0x3c2>
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	4659      	mov	r1, fp
 8013fb8:	4640      	mov	r0, r8
 8013fba:	f000 feab 	bl	8014d14 <_strtod_r>
 8013fbe:	9b03      	ldr	r3, [sp, #12]
 8013fc0:	6821      	ldr	r1, [r4, #0]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	f011 0f02 	tst.w	r1, #2
 8013fc8:	ec57 6b10 	vmov	r6, r7, d0
 8013fcc:	f103 0204 	add.w	r2, r3, #4
 8013fd0:	d020      	beq.n	8014014 <_scanf_float+0x3d8>
 8013fd2:	9903      	ldr	r1, [sp, #12]
 8013fd4:	600a      	str	r2, [r1, #0]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	e9c3 6700 	strd	r6, r7, [r3]
 8013fdc:	68e3      	ldr	r3, [r4, #12]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	60e3      	str	r3, [r4, #12]
 8013fe2:	e66c      	b.n	8013cbe <_scanf_float+0x82>
 8013fe4:	9b04      	ldr	r3, [sp, #16]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d0e4      	beq.n	8013fb4 <_scanf_float+0x378>
 8013fea:	9905      	ldr	r1, [sp, #20]
 8013fec:	230a      	movs	r3, #10
 8013fee:	462a      	mov	r2, r5
 8013ff0:	3101      	adds	r1, #1
 8013ff2:	4640      	mov	r0, r8
 8013ff4:	f000 ff18 	bl	8014e28 <_strtol_r>
 8013ff8:	9b04      	ldr	r3, [sp, #16]
 8013ffa:	9e05      	ldr	r6, [sp, #20]
 8013ffc:	1ac2      	subs	r2, r0, r3
 8013ffe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014002:	429e      	cmp	r6, r3
 8014004:	bf28      	it	cs
 8014006:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801400a:	4912      	ldr	r1, [pc, #72]	; (8014054 <_scanf_float+0x418>)
 801400c:	4630      	mov	r0, r6
 801400e:	f000 f82b 	bl	8014068 <siprintf>
 8014012:	e7cf      	b.n	8013fb4 <_scanf_float+0x378>
 8014014:	f011 0f04 	tst.w	r1, #4
 8014018:	9903      	ldr	r1, [sp, #12]
 801401a:	600a      	str	r2, [r1, #0]
 801401c:	d1db      	bne.n	8013fd6 <_scanf_float+0x39a>
 801401e:	f8d3 8000 	ldr.w	r8, [r3]
 8014022:	ee10 2a10 	vmov	r2, s0
 8014026:	ee10 0a10 	vmov	r0, s0
 801402a:	463b      	mov	r3, r7
 801402c:	4639      	mov	r1, r7
 801402e:	f7ec fd7d 	bl	8000b2c <__aeabi_dcmpun>
 8014032:	b128      	cbz	r0, 8014040 <_scanf_float+0x404>
 8014034:	4808      	ldr	r0, [pc, #32]	; (8014058 <_scanf_float+0x41c>)
 8014036:	f000 f811 	bl	801405c <nanf>
 801403a:	ed88 0a00 	vstr	s0, [r8]
 801403e:	e7cd      	b.n	8013fdc <_scanf_float+0x3a0>
 8014040:	4630      	mov	r0, r6
 8014042:	4639      	mov	r1, r7
 8014044:	f7ec fdd0 	bl	8000be8 <__aeabi_d2f>
 8014048:	f8c8 0000 	str.w	r0, [r8]
 801404c:	e7c6      	b.n	8013fdc <_scanf_float+0x3a0>
 801404e:	2500      	movs	r5, #0
 8014050:	e635      	b.n	8013cbe <_scanf_float+0x82>
 8014052:	bf00      	nop
 8014054:	0801aa64 	.word	0x0801aa64
 8014058:	0801aee0 	.word	0x0801aee0

0801405c <nanf>:
 801405c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014064 <nanf+0x8>
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	7fc00000 	.word	0x7fc00000

08014068 <siprintf>:
 8014068:	b40e      	push	{r1, r2, r3}
 801406a:	b500      	push	{lr}
 801406c:	b09c      	sub	sp, #112	; 0x70
 801406e:	ab1d      	add	r3, sp, #116	; 0x74
 8014070:	9002      	str	r0, [sp, #8]
 8014072:	9006      	str	r0, [sp, #24]
 8014074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014078:	4809      	ldr	r0, [pc, #36]	; (80140a0 <siprintf+0x38>)
 801407a:	9107      	str	r1, [sp, #28]
 801407c:	9104      	str	r1, [sp, #16]
 801407e:	4909      	ldr	r1, [pc, #36]	; (80140a4 <siprintf+0x3c>)
 8014080:	f853 2b04 	ldr.w	r2, [r3], #4
 8014084:	9105      	str	r1, [sp, #20]
 8014086:	6800      	ldr	r0, [r0, #0]
 8014088:	9301      	str	r3, [sp, #4]
 801408a:	a902      	add	r1, sp, #8
 801408c:	f003 f9a4 	bl	80173d8 <_svfiprintf_r>
 8014090:	9b02      	ldr	r3, [sp, #8]
 8014092:	2200      	movs	r2, #0
 8014094:	701a      	strb	r2, [r3, #0]
 8014096:	b01c      	add	sp, #112	; 0x70
 8014098:	f85d eb04 	ldr.w	lr, [sp], #4
 801409c:	b003      	add	sp, #12
 801409e:	4770      	bx	lr
 80140a0:	2000012c 	.word	0x2000012c
 80140a4:	ffff0208 	.word	0xffff0208

080140a8 <strcat>:
 80140a8:	b510      	push	{r4, lr}
 80140aa:	4602      	mov	r2, r0
 80140ac:	7814      	ldrb	r4, [r2, #0]
 80140ae:	4613      	mov	r3, r2
 80140b0:	3201      	adds	r2, #1
 80140b2:	2c00      	cmp	r4, #0
 80140b4:	d1fa      	bne.n	80140ac <strcat+0x4>
 80140b6:	3b01      	subs	r3, #1
 80140b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140c0:	2a00      	cmp	r2, #0
 80140c2:	d1f9      	bne.n	80140b8 <strcat+0x10>
 80140c4:	bd10      	pop	{r4, pc}

080140c6 <sulp>:
 80140c6:	b570      	push	{r4, r5, r6, lr}
 80140c8:	4604      	mov	r4, r0
 80140ca:	460d      	mov	r5, r1
 80140cc:	ec45 4b10 	vmov	d0, r4, r5
 80140d0:	4616      	mov	r6, r2
 80140d2:	f002 ff1d 	bl	8016f10 <__ulp>
 80140d6:	ec51 0b10 	vmov	r0, r1, d0
 80140da:	b17e      	cbz	r6, 80140fc <sulp+0x36>
 80140dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80140e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	dd09      	ble.n	80140fc <sulp+0x36>
 80140e8:	051b      	lsls	r3, r3, #20
 80140ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80140ee:	2400      	movs	r4, #0
 80140f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80140f4:	4622      	mov	r2, r4
 80140f6:	462b      	mov	r3, r5
 80140f8:	f7ec fa7e 	bl	80005f8 <__aeabi_dmul>
 80140fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08014100 <_strtod_l>:
 8014100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014104:	b0a3      	sub	sp, #140	; 0x8c
 8014106:	461f      	mov	r7, r3
 8014108:	2300      	movs	r3, #0
 801410a:	931e      	str	r3, [sp, #120]	; 0x78
 801410c:	4ba4      	ldr	r3, [pc, #656]	; (80143a0 <_strtod_l+0x2a0>)
 801410e:	9219      	str	r2, [sp, #100]	; 0x64
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	9307      	str	r3, [sp, #28]
 8014114:	4604      	mov	r4, r0
 8014116:	4618      	mov	r0, r3
 8014118:	4688      	mov	r8, r1
 801411a:	f7ec f859 	bl	80001d0 <strlen>
 801411e:	f04f 0a00 	mov.w	sl, #0
 8014122:	4605      	mov	r5, r0
 8014124:	f04f 0b00 	mov.w	fp, #0
 8014128:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801412c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801412e:	781a      	ldrb	r2, [r3, #0]
 8014130:	2a2b      	cmp	r2, #43	; 0x2b
 8014132:	d04c      	beq.n	80141ce <_strtod_l+0xce>
 8014134:	d839      	bhi.n	80141aa <_strtod_l+0xaa>
 8014136:	2a0d      	cmp	r2, #13
 8014138:	d832      	bhi.n	80141a0 <_strtod_l+0xa0>
 801413a:	2a08      	cmp	r2, #8
 801413c:	d832      	bhi.n	80141a4 <_strtod_l+0xa4>
 801413e:	2a00      	cmp	r2, #0
 8014140:	d03c      	beq.n	80141bc <_strtod_l+0xbc>
 8014142:	2300      	movs	r3, #0
 8014144:	930e      	str	r3, [sp, #56]	; 0x38
 8014146:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014148:	7833      	ldrb	r3, [r6, #0]
 801414a:	2b30      	cmp	r3, #48	; 0x30
 801414c:	f040 80b4 	bne.w	80142b8 <_strtod_l+0x1b8>
 8014150:	7873      	ldrb	r3, [r6, #1]
 8014152:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014156:	2b58      	cmp	r3, #88	; 0x58
 8014158:	d16c      	bne.n	8014234 <_strtod_l+0x134>
 801415a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801415c:	9301      	str	r3, [sp, #4]
 801415e:	ab1e      	add	r3, sp, #120	; 0x78
 8014160:	9702      	str	r7, [sp, #8]
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	4a8f      	ldr	r2, [pc, #572]	; (80143a4 <_strtod_l+0x2a4>)
 8014166:	ab1f      	add	r3, sp, #124	; 0x7c
 8014168:	a91d      	add	r1, sp, #116	; 0x74
 801416a:	4620      	mov	r0, r4
 801416c:	f001 ffd6 	bl	801611c <__gethex>
 8014170:	f010 0707 	ands.w	r7, r0, #7
 8014174:	4605      	mov	r5, r0
 8014176:	d005      	beq.n	8014184 <_strtod_l+0x84>
 8014178:	2f06      	cmp	r7, #6
 801417a:	d12a      	bne.n	80141d2 <_strtod_l+0xd2>
 801417c:	3601      	adds	r6, #1
 801417e:	2300      	movs	r3, #0
 8014180:	961d      	str	r6, [sp, #116]	; 0x74
 8014182:	930e      	str	r3, [sp, #56]	; 0x38
 8014184:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014186:	2b00      	cmp	r3, #0
 8014188:	f040 8596 	bne.w	8014cb8 <_strtod_l+0xbb8>
 801418c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801418e:	b1db      	cbz	r3, 80141c8 <_strtod_l+0xc8>
 8014190:	4652      	mov	r2, sl
 8014192:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014196:	ec43 2b10 	vmov	d0, r2, r3
 801419a:	b023      	add	sp, #140	; 0x8c
 801419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a0:	2a20      	cmp	r2, #32
 80141a2:	d1ce      	bne.n	8014142 <_strtod_l+0x42>
 80141a4:	3301      	adds	r3, #1
 80141a6:	931d      	str	r3, [sp, #116]	; 0x74
 80141a8:	e7c0      	b.n	801412c <_strtod_l+0x2c>
 80141aa:	2a2d      	cmp	r2, #45	; 0x2d
 80141ac:	d1c9      	bne.n	8014142 <_strtod_l+0x42>
 80141ae:	2201      	movs	r2, #1
 80141b0:	920e      	str	r2, [sp, #56]	; 0x38
 80141b2:	1c5a      	adds	r2, r3, #1
 80141b4:	921d      	str	r2, [sp, #116]	; 0x74
 80141b6:	785b      	ldrb	r3, [r3, #1]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d1c4      	bne.n	8014146 <_strtod_l+0x46>
 80141bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f040 8576 	bne.w	8014cb4 <_strtod_l+0xbb4>
 80141c8:	4652      	mov	r2, sl
 80141ca:	465b      	mov	r3, fp
 80141cc:	e7e3      	b.n	8014196 <_strtod_l+0x96>
 80141ce:	2200      	movs	r2, #0
 80141d0:	e7ee      	b.n	80141b0 <_strtod_l+0xb0>
 80141d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80141d4:	b13a      	cbz	r2, 80141e6 <_strtod_l+0xe6>
 80141d6:	2135      	movs	r1, #53	; 0x35
 80141d8:	a820      	add	r0, sp, #128	; 0x80
 80141da:	f002 ffa4 	bl	8017126 <__copybits>
 80141de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80141e0:	4620      	mov	r0, r4
 80141e2:	f002 fb69 	bl	80168b8 <_Bfree>
 80141e6:	3f01      	subs	r7, #1
 80141e8:	2f05      	cmp	r7, #5
 80141ea:	d807      	bhi.n	80141fc <_strtod_l+0xfc>
 80141ec:	e8df f007 	tbb	[pc, r7]
 80141f0:	1d180b0e 	.word	0x1d180b0e
 80141f4:	030e      	.short	0x030e
 80141f6:	f04f 0b00 	mov.w	fp, #0
 80141fa:	46da      	mov	sl, fp
 80141fc:	0728      	lsls	r0, r5, #28
 80141fe:	d5c1      	bpl.n	8014184 <_strtod_l+0x84>
 8014200:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014204:	e7be      	b.n	8014184 <_strtod_l+0x84>
 8014206:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801420a:	e7f7      	b.n	80141fc <_strtod_l+0xfc>
 801420c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014210:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014212:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014216:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801421a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801421e:	e7ed      	b.n	80141fc <_strtod_l+0xfc>
 8014220:	f8df b184 	ldr.w	fp, [pc, #388]	; 80143a8 <_strtod_l+0x2a8>
 8014224:	f04f 0a00 	mov.w	sl, #0
 8014228:	e7e8      	b.n	80141fc <_strtod_l+0xfc>
 801422a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801422e:	f04f 3aff 	mov.w	sl, #4294967295
 8014232:	e7e3      	b.n	80141fc <_strtod_l+0xfc>
 8014234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014236:	1c5a      	adds	r2, r3, #1
 8014238:	921d      	str	r2, [sp, #116]	; 0x74
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	2b30      	cmp	r3, #48	; 0x30
 801423e:	d0f9      	beq.n	8014234 <_strtod_l+0x134>
 8014240:	2b00      	cmp	r3, #0
 8014242:	d09f      	beq.n	8014184 <_strtod_l+0x84>
 8014244:	2301      	movs	r3, #1
 8014246:	f04f 0900 	mov.w	r9, #0
 801424a:	9304      	str	r3, [sp, #16]
 801424c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801424e:	930a      	str	r3, [sp, #40]	; 0x28
 8014250:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014254:	464f      	mov	r7, r9
 8014256:	220a      	movs	r2, #10
 8014258:	981d      	ldr	r0, [sp, #116]	; 0x74
 801425a:	7806      	ldrb	r6, [r0, #0]
 801425c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014260:	b2d9      	uxtb	r1, r3
 8014262:	2909      	cmp	r1, #9
 8014264:	d92a      	bls.n	80142bc <_strtod_l+0x1bc>
 8014266:	9907      	ldr	r1, [sp, #28]
 8014268:	462a      	mov	r2, r5
 801426a:	f003 fa10 	bl	801768e <strncmp>
 801426e:	b398      	cbz	r0, 80142d8 <_strtod_l+0x1d8>
 8014270:	2000      	movs	r0, #0
 8014272:	4633      	mov	r3, r6
 8014274:	463d      	mov	r5, r7
 8014276:	9007      	str	r0, [sp, #28]
 8014278:	4602      	mov	r2, r0
 801427a:	2b65      	cmp	r3, #101	; 0x65
 801427c:	d001      	beq.n	8014282 <_strtod_l+0x182>
 801427e:	2b45      	cmp	r3, #69	; 0x45
 8014280:	d118      	bne.n	80142b4 <_strtod_l+0x1b4>
 8014282:	b91d      	cbnz	r5, 801428c <_strtod_l+0x18c>
 8014284:	9b04      	ldr	r3, [sp, #16]
 8014286:	4303      	orrs	r3, r0
 8014288:	d098      	beq.n	80141bc <_strtod_l+0xbc>
 801428a:	2500      	movs	r5, #0
 801428c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014290:	f108 0301 	add.w	r3, r8, #1
 8014294:	931d      	str	r3, [sp, #116]	; 0x74
 8014296:	f898 3001 	ldrb.w	r3, [r8, #1]
 801429a:	2b2b      	cmp	r3, #43	; 0x2b
 801429c:	d075      	beq.n	801438a <_strtod_l+0x28a>
 801429e:	2b2d      	cmp	r3, #45	; 0x2d
 80142a0:	d07b      	beq.n	801439a <_strtod_l+0x29a>
 80142a2:	f04f 0c00 	mov.w	ip, #0
 80142a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80142aa:	2909      	cmp	r1, #9
 80142ac:	f240 8082 	bls.w	80143b4 <_strtod_l+0x2b4>
 80142b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80142b4:	2600      	movs	r6, #0
 80142b6:	e09d      	b.n	80143f4 <_strtod_l+0x2f4>
 80142b8:	2300      	movs	r3, #0
 80142ba:	e7c4      	b.n	8014246 <_strtod_l+0x146>
 80142bc:	2f08      	cmp	r7, #8
 80142be:	bfd8      	it	le
 80142c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80142c2:	f100 0001 	add.w	r0, r0, #1
 80142c6:	bfda      	itte	le
 80142c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80142cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80142ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80142d2:	3701      	adds	r7, #1
 80142d4:	901d      	str	r0, [sp, #116]	; 0x74
 80142d6:	e7bf      	b.n	8014258 <_strtod_l+0x158>
 80142d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142da:	195a      	adds	r2, r3, r5
 80142dc:	921d      	str	r2, [sp, #116]	; 0x74
 80142de:	5d5b      	ldrb	r3, [r3, r5]
 80142e0:	2f00      	cmp	r7, #0
 80142e2:	d037      	beq.n	8014354 <_strtod_l+0x254>
 80142e4:	9007      	str	r0, [sp, #28]
 80142e6:	463d      	mov	r5, r7
 80142e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80142ec:	2a09      	cmp	r2, #9
 80142ee:	d912      	bls.n	8014316 <_strtod_l+0x216>
 80142f0:	2201      	movs	r2, #1
 80142f2:	e7c2      	b.n	801427a <_strtod_l+0x17a>
 80142f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142f6:	1c5a      	adds	r2, r3, #1
 80142f8:	921d      	str	r2, [sp, #116]	; 0x74
 80142fa:	785b      	ldrb	r3, [r3, #1]
 80142fc:	3001      	adds	r0, #1
 80142fe:	2b30      	cmp	r3, #48	; 0x30
 8014300:	d0f8      	beq.n	80142f4 <_strtod_l+0x1f4>
 8014302:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014306:	2a08      	cmp	r2, #8
 8014308:	f200 84db 	bhi.w	8014cc2 <_strtod_l+0xbc2>
 801430c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801430e:	9007      	str	r0, [sp, #28]
 8014310:	2000      	movs	r0, #0
 8014312:	920a      	str	r2, [sp, #40]	; 0x28
 8014314:	4605      	mov	r5, r0
 8014316:	3b30      	subs	r3, #48	; 0x30
 8014318:	f100 0201 	add.w	r2, r0, #1
 801431c:	d014      	beq.n	8014348 <_strtod_l+0x248>
 801431e:	9907      	ldr	r1, [sp, #28]
 8014320:	4411      	add	r1, r2
 8014322:	9107      	str	r1, [sp, #28]
 8014324:	462a      	mov	r2, r5
 8014326:	eb00 0e05 	add.w	lr, r0, r5
 801432a:	210a      	movs	r1, #10
 801432c:	4572      	cmp	r2, lr
 801432e:	d113      	bne.n	8014358 <_strtod_l+0x258>
 8014330:	182a      	adds	r2, r5, r0
 8014332:	2a08      	cmp	r2, #8
 8014334:	f105 0501 	add.w	r5, r5, #1
 8014338:	4405      	add	r5, r0
 801433a:	dc1c      	bgt.n	8014376 <_strtod_l+0x276>
 801433c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801433e:	220a      	movs	r2, #10
 8014340:	fb02 3301 	mla	r3, r2, r1, r3
 8014344:	9309      	str	r3, [sp, #36]	; 0x24
 8014346:	2200      	movs	r2, #0
 8014348:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801434a:	1c59      	adds	r1, r3, #1
 801434c:	911d      	str	r1, [sp, #116]	; 0x74
 801434e:	785b      	ldrb	r3, [r3, #1]
 8014350:	4610      	mov	r0, r2
 8014352:	e7c9      	b.n	80142e8 <_strtod_l+0x1e8>
 8014354:	4638      	mov	r0, r7
 8014356:	e7d2      	b.n	80142fe <_strtod_l+0x1fe>
 8014358:	2a08      	cmp	r2, #8
 801435a:	dc04      	bgt.n	8014366 <_strtod_l+0x266>
 801435c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801435e:	434e      	muls	r6, r1
 8014360:	9609      	str	r6, [sp, #36]	; 0x24
 8014362:	3201      	adds	r2, #1
 8014364:	e7e2      	b.n	801432c <_strtod_l+0x22c>
 8014366:	f102 0c01 	add.w	ip, r2, #1
 801436a:	f1bc 0f10 	cmp.w	ip, #16
 801436e:	bfd8      	it	le
 8014370:	fb01 f909 	mulle.w	r9, r1, r9
 8014374:	e7f5      	b.n	8014362 <_strtod_l+0x262>
 8014376:	2d10      	cmp	r5, #16
 8014378:	bfdc      	itt	le
 801437a:	220a      	movle	r2, #10
 801437c:	fb02 3909 	mlale	r9, r2, r9, r3
 8014380:	e7e1      	b.n	8014346 <_strtod_l+0x246>
 8014382:	2300      	movs	r3, #0
 8014384:	9307      	str	r3, [sp, #28]
 8014386:	2201      	movs	r2, #1
 8014388:	e77c      	b.n	8014284 <_strtod_l+0x184>
 801438a:	f04f 0c00 	mov.w	ip, #0
 801438e:	f108 0302 	add.w	r3, r8, #2
 8014392:	931d      	str	r3, [sp, #116]	; 0x74
 8014394:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014398:	e785      	b.n	80142a6 <_strtod_l+0x1a6>
 801439a:	f04f 0c01 	mov.w	ip, #1
 801439e:	e7f6      	b.n	801438e <_strtod_l+0x28e>
 80143a0:	0801ad24 	.word	0x0801ad24
 80143a4:	0801aa6c 	.word	0x0801aa6c
 80143a8:	7ff00000 	.word	0x7ff00000
 80143ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143ae:	1c59      	adds	r1, r3, #1
 80143b0:	911d      	str	r1, [sp, #116]	; 0x74
 80143b2:	785b      	ldrb	r3, [r3, #1]
 80143b4:	2b30      	cmp	r3, #48	; 0x30
 80143b6:	d0f9      	beq.n	80143ac <_strtod_l+0x2ac>
 80143b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80143bc:	2908      	cmp	r1, #8
 80143be:	f63f af79 	bhi.w	80142b4 <_strtod_l+0x1b4>
 80143c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80143c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143c8:	9308      	str	r3, [sp, #32]
 80143ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143cc:	1c59      	adds	r1, r3, #1
 80143ce:	911d      	str	r1, [sp, #116]	; 0x74
 80143d0:	785b      	ldrb	r3, [r3, #1]
 80143d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80143d6:	2e09      	cmp	r6, #9
 80143d8:	d937      	bls.n	801444a <_strtod_l+0x34a>
 80143da:	9e08      	ldr	r6, [sp, #32]
 80143dc:	1b89      	subs	r1, r1, r6
 80143de:	2908      	cmp	r1, #8
 80143e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80143e4:	dc02      	bgt.n	80143ec <_strtod_l+0x2ec>
 80143e6:	4576      	cmp	r6, lr
 80143e8:	bfa8      	it	ge
 80143ea:	4676      	movge	r6, lr
 80143ec:	f1bc 0f00 	cmp.w	ip, #0
 80143f0:	d000      	beq.n	80143f4 <_strtod_l+0x2f4>
 80143f2:	4276      	negs	r6, r6
 80143f4:	2d00      	cmp	r5, #0
 80143f6:	d14f      	bne.n	8014498 <_strtod_l+0x398>
 80143f8:	9904      	ldr	r1, [sp, #16]
 80143fa:	4301      	orrs	r1, r0
 80143fc:	f47f aec2 	bne.w	8014184 <_strtod_l+0x84>
 8014400:	2a00      	cmp	r2, #0
 8014402:	f47f aedb 	bne.w	80141bc <_strtod_l+0xbc>
 8014406:	2b69      	cmp	r3, #105	; 0x69
 8014408:	d027      	beq.n	801445a <_strtod_l+0x35a>
 801440a:	dc24      	bgt.n	8014456 <_strtod_l+0x356>
 801440c:	2b49      	cmp	r3, #73	; 0x49
 801440e:	d024      	beq.n	801445a <_strtod_l+0x35a>
 8014410:	2b4e      	cmp	r3, #78	; 0x4e
 8014412:	f47f aed3 	bne.w	80141bc <_strtod_l+0xbc>
 8014416:	499e      	ldr	r1, [pc, #632]	; (8014690 <_strtod_l+0x590>)
 8014418:	a81d      	add	r0, sp, #116	; 0x74
 801441a:	f002 f8d7 	bl	80165cc <__match>
 801441e:	2800      	cmp	r0, #0
 8014420:	f43f aecc 	beq.w	80141bc <_strtod_l+0xbc>
 8014424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	2b28      	cmp	r3, #40	; 0x28
 801442a:	d12d      	bne.n	8014488 <_strtod_l+0x388>
 801442c:	4999      	ldr	r1, [pc, #612]	; (8014694 <_strtod_l+0x594>)
 801442e:	aa20      	add	r2, sp, #128	; 0x80
 8014430:	a81d      	add	r0, sp, #116	; 0x74
 8014432:	f002 f8df 	bl	80165f4 <__hexnan>
 8014436:	2805      	cmp	r0, #5
 8014438:	d126      	bne.n	8014488 <_strtod_l+0x388>
 801443a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801443c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014440:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014444:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014448:	e69c      	b.n	8014184 <_strtod_l+0x84>
 801444a:	210a      	movs	r1, #10
 801444c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014450:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014454:	e7b9      	b.n	80143ca <_strtod_l+0x2ca>
 8014456:	2b6e      	cmp	r3, #110	; 0x6e
 8014458:	e7db      	b.n	8014412 <_strtod_l+0x312>
 801445a:	498f      	ldr	r1, [pc, #572]	; (8014698 <_strtod_l+0x598>)
 801445c:	a81d      	add	r0, sp, #116	; 0x74
 801445e:	f002 f8b5 	bl	80165cc <__match>
 8014462:	2800      	cmp	r0, #0
 8014464:	f43f aeaa 	beq.w	80141bc <_strtod_l+0xbc>
 8014468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801446a:	498c      	ldr	r1, [pc, #560]	; (801469c <_strtod_l+0x59c>)
 801446c:	3b01      	subs	r3, #1
 801446e:	a81d      	add	r0, sp, #116	; 0x74
 8014470:	931d      	str	r3, [sp, #116]	; 0x74
 8014472:	f002 f8ab 	bl	80165cc <__match>
 8014476:	b910      	cbnz	r0, 801447e <_strtod_l+0x37e>
 8014478:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801447a:	3301      	adds	r3, #1
 801447c:	931d      	str	r3, [sp, #116]	; 0x74
 801447e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80146ac <_strtod_l+0x5ac>
 8014482:	f04f 0a00 	mov.w	sl, #0
 8014486:	e67d      	b.n	8014184 <_strtod_l+0x84>
 8014488:	4885      	ldr	r0, [pc, #532]	; (80146a0 <_strtod_l+0x5a0>)
 801448a:	f003 f8a5 	bl	80175d8 <nan>
 801448e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014492:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014496:	e675      	b.n	8014184 <_strtod_l+0x84>
 8014498:	9b07      	ldr	r3, [sp, #28]
 801449a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801449c:	1af3      	subs	r3, r6, r3
 801449e:	2f00      	cmp	r7, #0
 80144a0:	bf08      	it	eq
 80144a2:	462f      	moveq	r7, r5
 80144a4:	2d10      	cmp	r5, #16
 80144a6:	9308      	str	r3, [sp, #32]
 80144a8:	46a8      	mov	r8, r5
 80144aa:	bfa8      	it	ge
 80144ac:	f04f 0810 	movge.w	r8, #16
 80144b0:	f7ec f828 	bl	8000504 <__aeabi_ui2d>
 80144b4:	2d09      	cmp	r5, #9
 80144b6:	4682      	mov	sl, r0
 80144b8:	468b      	mov	fp, r1
 80144ba:	dd13      	ble.n	80144e4 <_strtod_l+0x3e4>
 80144bc:	4b79      	ldr	r3, [pc, #484]	; (80146a4 <_strtod_l+0x5a4>)
 80144be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80144c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80144c6:	f7ec f897 	bl	80005f8 <__aeabi_dmul>
 80144ca:	4682      	mov	sl, r0
 80144cc:	4648      	mov	r0, r9
 80144ce:	468b      	mov	fp, r1
 80144d0:	f7ec f818 	bl	8000504 <__aeabi_ui2d>
 80144d4:	4602      	mov	r2, r0
 80144d6:	460b      	mov	r3, r1
 80144d8:	4650      	mov	r0, sl
 80144da:	4659      	mov	r1, fp
 80144dc:	f7eb fed6 	bl	800028c <__adddf3>
 80144e0:	4682      	mov	sl, r0
 80144e2:	468b      	mov	fp, r1
 80144e4:	2d0f      	cmp	r5, #15
 80144e6:	dc38      	bgt.n	801455a <_strtod_l+0x45a>
 80144e8:	9b08      	ldr	r3, [sp, #32]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	f43f ae4a 	beq.w	8014184 <_strtod_l+0x84>
 80144f0:	dd24      	ble.n	801453c <_strtod_l+0x43c>
 80144f2:	2b16      	cmp	r3, #22
 80144f4:	dc0b      	bgt.n	801450e <_strtod_l+0x40e>
 80144f6:	4d6b      	ldr	r5, [pc, #428]	; (80146a4 <_strtod_l+0x5a4>)
 80144f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80144fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014500:	4652      	mov	r2, sl
 8014502:	465b      	mov	r3, fp
 8014504:	f7ec f878 	bl	80005f8 <__aeabi_dmul>
 8014508:	4682      	mov	sl, r0
 801450a:	468b      	mov	fp, r1
 801450c:	e63a      	b.n	8014184 <_strtod_l+0x84>
 801450e:	9a08      	ldr	r2, [sp, #32]
 8014510:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014514:	4293      	cmp	r3, r2
 8014516:	db20      	blt.n	801455a <_strtod_l+0x45a>
 8014518:	4c62      	ldr	r4, [pc, #392]	; (80146a4 <_strtod_l+0x5a4>)
 801451a:	f1c5 050f 	rsb	r5, r5, #15
 801451e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014522:	4652      	mov	r2, sl
 8014524:	465b      	mov	r3, fp
 8014526:	e9d1 0100 	ldrd	r0, r1, [r1]
 801452a:	f7ec f865 	bl	80005f8 <__aeabi_dmul>
 801452e:	9b08      	ldr	r3, [sp, #32]
 8014530:	1b5d      	subs	r5, r3, r5
 8014532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014536:	e9d4 2300 	ldrd	r2, r3, [r4]
 801453a:	e7e3      	b.n	8014504 <_strtod_l+0x404>
 801453c:	9b08      	ldr	r3, [sp, #32]
 801453e:	3316      	adds	r3, #22
 8014540:	db0b      	blt.n	801455a <_strtod_l+0x45a>
 8014542:	9b07      	ldr	r3, [sp, #28]
 8014544:	4a57      	ldr	r2, [pc, #348]	; (80146a4 <_strtod_l+0x5a4>)
 8014546:	1b9e      	subs	r6, r3, r6
 8014548:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801454c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014550:	4650      	mov	r0, sl
 8014552:	4659      	mov	r1, fp
 8014554:	f7ec f97a 	bl	800084c <__aeabi_ddiv>
 8014558:	e7d6      	b.n	8014508 <_strtod_l+0x408>
 801455a:	9b08      	ldr	r3, [sp, #32]
 801455c:	eba5 0808 	sub.w	r8, r5, r8
 8014560:	4498      	add	r8, r3
 8014562:	f1b8 0f00 	cmp.w	r8, #0
 8014566:	dd71      	ble.n	801464c <_strtod_l+0x54c>
 8014568:	f018 030f 	ands.w	r3, r8, #15
 801456c:	d00a      	beq.n	8014584 <_strtod_l+0x484>
 801456e:	494d      	ldr	r1, [pc, #308]	; (80146a4 <_strtod_l+0x5a4>)
 8014570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014574:	4652      	mov	r2, sl
 8014576:	465b      	mov	r3, fp
 8014578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801457c:	f7ec f83c 	bl	80005f8 <__aeabi_dmul>
 8014580:	4682      	mov	sl, r0
 8014582:	468b      	mov	fp, r1
 8014584:	f038 080f 	bics.w	r8, r8, #15
 8014588:	d04d      	beq.n	8014626 <_strtod_l+0x526>
 801458a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801458e:	dd22      	ble.n	80145d6 <_strtod_l+0x4d6>
 8014590:	2500      	movs	r5, #0
 8014592:	462e      	mov	r6, r5
 8014594:	9509      	str	r5, [sp, #36]	; 0x24
 8014596:	9507      	str	r5, [sp, #28]
 8014598:	2322      	movs	r3, #34	; 0x22
 801459a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80146ac <_strtod_l+0x5ac>
 801459e:	6023      	str	r3, [r4, #0]
 80145a0:	f04f 0a00 	mov.w	sl, #0
 80145a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	f43f adec 	beq.w	8014184 <_strtod_l+0x84>
 80145ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80145ae:	4620      	mov	r0, r4
 80145b0:	f002 f982 	bl	80168b8 <_Bfree>
 80145b4:	9907      	ldr	r1, [sp, #28]
 80145b6:	4620      	mov	r0, r4
 80145b8:	f002 f97e 	bl	80168b8 <_Bfree>
 80145bc:	4631      	mov	r1, r6
 80145be:	4620      	mov	r0, r4
 80145c0:	f002 f97a 	bl	80168b8 <_Bfree>
 80145c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145c6:	4620      	mov	r0, r4
 80145c8:	f002 f976 	bl	80168b8 <_Bfree>
 80145cc:	4629      	mov	r1, r5
 80145ce:	4620      	mov	r0, r4
 80145d0:	f002 f972 	bl	80168b8 <_Bfree>
 80145d4:	e5d6      	b.n	8014184 <_strtod_l+0x84>
 80145d6:	2300      	movs	r3, #0
 80145d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80145dc:	4650      	mov	r0, sl
 80145de:	4659      	mov	r1, fp
 80145e0:	4699      	mov	r9, r3
 80145e2:	f1b8 0f01 	cmp.w	r8, #1
 80145e6:	dc21      	bgt.n	801462c <_strtod_l+0x52c>
 80145e8:	b10b      	cbz	r3, 80145ee <_strtod_l+0x4ee>
 80145ea:	4682      	mov	sl, r0
 80145ec:	468b      	mov	fp, r1
 80145ee:	4b2e      	ldr	r3, [pc, #184]	; (80146a8 <_strtod_l+0x5a8>)
 80145f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80145f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80145f8:	4652      	mov	r2, sl
 80145fa:	465b      	mov	r3, fp
 80145fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014600:	f7eb fffa 	bl	80005f8 <__aeabi_dmul>
 8014604:	4b29      	ldr	r3, [pc, #164]	; (80146ac <_strtod_l+0x5ac>)
 8014606:	460a      	mov	r2, r1
 8014608:	400b      	ands	r3, r1
 801460a:	4929      	ldr	r1, [pc, #164]	; (80146b0 <_strtod_l+0x5b0>)
 801460c:	428b      	cmp	r3, r1
 801460e:	4682      	mov	sl, r0
 8014610:	d8be      	bhi.n	8014590 <_strtod_l+0x490>
 8014612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014616:	428b      	cmp	r3, r1
 8014618:	bf86      	itte	hi
 801461a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80146b4 <_strtod_l+0x5b4>
 801461e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014622:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014626:	2300      	movs	r3, #0
 8014628:	9304      	str	r3, [sp, #16]
 801462a:	e081      	b.n	8014730 <_strtod_l+0x630>
 801462c:	f018 0f01 	tst.w	r8, #1
 8014630:	d007      	beq.n	8014642 <_strtod_l+0x542>
 8014632:	4b1d      	ldr	r3, [pc, #116]	; (80146a8 <_strtod_l+0x5a8>)
 8014634:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801463c:	f7eb ffdc 	bl	80005f8 <__aeabi_dmul>
 8014640:	2301      	movs	r3, #1
 8014642:	f109 0901 	add.w	r9, r9, #1
 8014646:	ea4f 0868 	mov.w	r8, r8, asr #1
 801464a:	e7ca      	b.n	80145e2 <_strtod_l+0x4e2>
 801464c:	d0eb      	beq.n	8014626 <_strtod_l+0x526>
 801464e:	f1c8 0800 	rsb	r8, r8, #0
 8014652:	f018 020f 	ands.w	r2, r8, #15
 8014656:	d00a      	beq.n	801466e <_strtod_l+0x56e>
 8014658:	4b12      	ldr	r3, [pc, #72]	; (80146a4 <_strtod_l+0x5a4>)
 801465a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801465e:	4650      	mov	r0, sl
 8014660:	4659      	mov	r1, fp
 8014662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014666:	f7ec f8f1 	bl	800084c <__aeabi_ddiv>
 801466a:	4682      	mov	sl, r0
 801466c:	468b      	mov	fp, r1
 801466e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014672:	d0d8      	beq.n	8014626 <_strtod_l+0x526>
 8014674:	f1b8 0f1f 	cmp.w	r8, #31
 8014678:	dd1e      	ble.n	80146b8 <_strtod_l+0x5b8>
 801467a:	2500      	movs	r5, #0
 801467c:	462e      	mov	r6, r5
 801467e:	9509      	str	r5, [sp, #36]	; 0x24
 8014680:	9507      	str	r5, [sp, #28]
 8014682:	2322      	movs	r3, #34	; 0x22
 8014684:	f04f 0a00 	mov.w	sl, #0
 8014688:	f04f 0b00 	mov.w	fp, #0
 801468c:	6023      	str	r3, [r4, #0]
 801468e:	e789      	b.n	80145a4 <_strtod_l+0x4a4>
 8014690:	0801aa3d 	.word	0x0801aa3d
 8014694:	0801aa80 	.word	0x0801aa80
 8014698:	0801aa35 	.word	0x0801aa35
 801469c:	0801abc4 	.word	0x0801abc4
 80146a0:	0801aee0 	.word	0x0801aee0
 80146a4:	0801adc0 	.word	0x0801adc0
 80146a8:	0801ad98 	.word	0x0801ad98
 80146ac:	7ff00000 	.word	0x7ff00000
 80146b0:	7ca00000 	.word	0x7ca00000
 80146b4:	7fefffff 	.word	0x7fefffff
 80146b8:	f018 0310 	ands.w	r3, r8, #16
 80146bc:	bf18      	it	ne
 80146be:	236a      	movne	r3, #106	; 0x6a
 80146c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014a78 <_strtod_l+0x978>
 80146c4:	9304      	str	r3, [sp, #16]
 80146c6:	4650      	mov	r0, sl
 80146c8:	4659      	mov	r1, fp
 80146ca:	2300      	movs	r3, #0
 80146cc:	f018 0f01 	tst.w	r8, #1
 80146d0:	d004      	beq.n	80146dc <_strtod_l+0x5dc>
 80146d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80146d6:	f7eb ff8f 	bl	80005f8 <__aeabi_dmul>
 80146da:	2301      	movs	r3, #1
 80146dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80146e0:	f109 0908 	add.w	r9, r9, #8
 80146e4:	d1f2      	bne.n	80146cc <_strtod_l+0x5cc>
 80146e6:	b10b      	cbz	r3, 80146ec <_strtod_l+0x5ec>
 80146e8:	4682      	mov	sl, r0
 80146ea:	468b      	mov	fp, r1
 80146ec:	9b04      	ldr	r3, [sp, #16]
 80146ee:	b1bb      	cbz	r3, 8014720 <_strtod_l+0x620>
 80146f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80146f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	4659      	mov	r1, fp
 80146fc:	dd10      	ble.n	8014720 <_strtod_l+0x620>
 80146fe:	2b1f      	cmp	r3, #31
 8014700:	f340 8128 	ble.w	8014954 <_strtod_l+0x854>
 8014704:	2b34      	cmp	r3, #52	; 0x34
 8014706:	bfde      	ittt	le
 8014708:	3b20      	suble	r3, #32
 801470a:	f04f 32ff 	movle.w	r2, #4294967295
 801470e:	fa02 f303 	lslle.w	r3, r2, r3
 8014712:	f04f 0a00 	mov.w	sl, #0
 8014716:	bfcc      	ite	gt
 8014718:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801471c:	ea03 0b01 	andle.w	fp, r3, r1
 8014720:	2200      	movs	r2, #0
 8014722:	2300      	movs	r3, #0
 8014724:	4650      	mov	r0, sl
 8014726:	4659      	mov	r1, fp
 8014728:	f7ec f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 801472c:	2800      	cmp	r0, #0
 801472e:	d1a4      	bne.n	801467a <_strtod_l+0x57a>
 8014730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014732:	9300      	str	r3, [sp, #0]
 8014734:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014736:	462b      	mov	r3, r5
 8014738:	463a      	mov	r2, r7
 801473a:	4620      	mov	r0, r4
 801473c:	f002 f928 	bl	8016990 <__s2b>
 8014740:	9009      	str	r0, [sp, #36]	; 0x24
 8014742:	2800      	cmp	r0, #0
 8014744:	f43f af24 	beq.w	8014590 <_strtod_l+0x490>
 8014748:	9b07      	ldr	r3, [sp, #28]
 801474a:	1b9e      	subs	r6, r3, r6
 801474c:	9b08      	ldr	r3, [sp, #32]
 801474e:	2b00      	cmp	r3, #0
 8014750:	bfb4      	ite	lt
 8014752:	4633      	movlt	r3, r6
 8014754:	2300      	movge	r3, #0
 8014756:	9310      	str	r3, [sp, #64]	; 0x40
 8014758:	9b08      	ldr	r3, [sp, #32]
 801475a:	2500      	movs	r5, #0
 801475c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014760:	9318      	str	r3, [sp, #96]	; 0x60
 8014762:	462e      	mov	r6, r5
 8014764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014766:	4620      	mov	r0, r4
 8014768:	6859      	ldr	r1, [r3, #4]
 801476a:	f002 f865 	bl	8016838 <_Balloc>
 801476e:	9007      	str	r0, [sp, #28]
 8014770:	2800      	cmp	r0, #0
 8014772:	f43f af11 	beq.w	8014598 <_strtod_l+0x498>
 8014776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014778:	691a      	ldr	r2, [r3, #16]
 801477a:	3202      	adds	r2, #2
 801477c:	f103 010c 	add.w	r1, r3, #12
 8014780:	0092      	lsls	r2, r2, #2
 8014782:	300c      	adds	r0, #12
 8014784:	f7fe fdda 	bl	801333c <memcpy>
 8014788:	ec4b ab10 	vmov	d0, sl, fp
 801478c:	aa20      	add	r2, sp, #128	; 0x80
 801478e:	a91f      	add	r1, sp, #124	; 0x7c
 8014790:	4620      	mov	r0, r4
 8014792:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014796:	f002 fc37 	bl	8017008 <__d2b>
 801479a:	901e      	str	r0, [sp, #120]	; 0x78
 801479c:	2800      	cmp	r0, #0
 801479e:	f43f aefb 	beq.w	8014598 <_strtod_l+0x498>
 80147a2:	2101      	movs	r1, #1
 80147a4:	4620      	mov	r0, r4
 80147a6:	f002 f98d 	bl	8016ac4 <__i2b>
 80147aa:	4606      	mov	r6, r0
 80147ac:	2800      	cmp	r0, #0
 80147ae:	f43f aef3 	beq.w	8014598 <_strtod_l+0x498>
 80147b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80147b4:	9904      	ldr	r1, [sp, #16]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	bfab      	itete	ge
 80147ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80147bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80147be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80147c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80147c4:	bfac      	ite	ge
 80147c6:	eb03 0902 	addge.w	r9, r3, r2
 80147ca:	1ad7      	sublt	r7, r2, r3
 80147cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80147ce:	eba3 0801 	sub.w	r8, r3, r1
 80147d2:	4490      	add	r8, r2
 80147d4:	4ba3      	ldr	r3, [pc, #652]	; (8014a64 <_strtod_l+0x964>)
 80147d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80147da:	4598      	cmp	r8, r3
 80147dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80147e0:	f280 80cc 	bge.w	801497c <_strtod_l+0x87c>
 80147e4:	eba3 0308 	sub.w	r3, r3, r8
 80147e8:	2b1f      	cmp	r3, #31
 80147ea:	eba2 0203 	sub.w	r2, r2, r3
 80147ee:	f04f 0101 	mov.w	r1, #1
 80147f2:	f300 80b6 	bgt.w	8014962 <_strtod_l+0x862>
 80147f6:	fa01 f303 	lsl.w	r3, r1, r3
 80147fa:	9311      	str	r3, [sp, #68]	; 0x44
 80147fc:	2300      	movs	r3, #0
 80147fe:	930c      	str	r3, [sp, #48]	; 0x30
 8014800:	eb09 0802 	add.w	r8, r9, r2
 8014804:	9b04      	ldr	r3, [sp, #16]
 8014806:	45c1      	cmp	r9, r8
 8014808:	4417      	add	r7, r2
 801480a:	441f      	add	r7, r3
 801480c:	464b      	mov	r3, r9
 801480e:	bfa8      	it	ge
 8014810:	4643      	movge	r3, r8
 8014812:	42bb      	cmp	r3, r7
 8014814:	bfa8      	it	ge
 8014816:	463b      	movge	r3, r7
 8014818:	2b00      	cmp	r3, #0
 801481a:	bfc2      	ittt	gt
 801481c:	eba8 0803 	subgt.w	r8, r8, r3
 8014820:	1aff      	subgt	r7, r7, r3
 8014822:	eba9 0903 	subgt.w	r9, r9, r3
 8014826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014828:	2b00      	cmp	r3, #0
 801482a:	dd17      	ble.n	801485c <_strtod_l+0x75c>
 801482c:	4631      	mov	r1, r6
 801482e:	461a      	mov	r2, r3
 8014830:	4620      	mov	r0, r4
 8014832:	f002 fa03 	bl	8016c3c <__pow5mult>
 8014836:	4606      	mov	r6, r0
 8014838:	2800      	cmp	r0, #0
 801483a:	f43f aead 	beq.w	8014598 <_strtod_l+0x498>
 801483e:	4601      	mov	r1, r0
 8014840:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014842:	4620      	mov	r0, r4
 8014844:	f002 f954 	bl	8016af0 <__multiply>
 8014848:	900f      	str	r0, [sp, #60]	; 0x3c
 801484a:	2800      	cmp	r0, #0
 801484c:	f43f aea4 	beq.w	8014598 <_strtod_l+0x498>
 8014850:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014852:	4620      	mov	r0, r4
 8014854:	f002 f830 	bl	80168b8 <_Bfree>
 8014858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801485a:	931e      	str	r3, [sp, #120]	; 0x78
 801485c:	f1b8 0f00 	cmp.w	r8, #0
 8014860:	f300 8091 	bgt.w	8014986 <_strtod_l+0x886>
 8014864:	9b08      	ldr	r3, [sp, #32]
 8014866:	2b00      	cmp	r3, #0
 8014868:	dd08      	ble.n	801487c <_strtod_l+0x77c>
 801486a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801486c:	9907      	ldr	r1, [sp, #28]
 801486e:	4620      	mov	r0, r4
 8014870:	f002 f9e4 	bl	8016c3c <__pow5mult>
 8014874:	9007      	str	r0, [sp, #28]
 8014876:	2800      	cmp	r0, #0
 8014878:	f43f ae8e 	beq.w	8014598 <_strtod_l+0x498>
 801487c:	2f00      	cmp	r7, #0
 801487e:	dd08      	ble.n	8014892 <_strtod_l+0x792>
 8014880:	9907      	ldr	r1, [sp, #28]
 8014882:	463a      	mov	r2, r7
 8014884:	4620      	mov	r0, r4
 8014886:	f002 fa33 	bl	8016cf0 <__lshift>
 801488a:	9007      	str	r0, [sp, #28]
 801488c:	2800      	cmp	r0, #0
 801488e:	f43f ae83 	beq.w	8014598 <_strtod_l+0x498>
 8014892:	f1b9 0f00 	cmp.w	r9, #0
 8014896:	dd08      	ble.n	80148aa <_strtod_l+0x7aa>
 8014898:	4631      	mov	r1, r6
 801489a:	464a      	mov	r2, r9
 801489c:	4620      	mov	r0, r4
 801489e:	f002 fa27 	bl	8016cf0 <__lshift>
 80148a2:	4606      	mov	r6, r0
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f43f ae77 	beq.w	8014598 <_strtod_l+0x498>
 80148aa:	9a07      	ldr	r2, [sp, #28]
 80148ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80148ae:	4620      	mov	r0, r4
 80148b0:	f002 faa6 	bl	8016e00 <__mdiff>
 80148b4:	4605      	mov	r5, r0
 80148b6:	2800      	cmp	r0, #0
 80148b8:	f43f ae6e 	beq.w	8014598 <_strtod_l+0x498>
 80148bc:	68c3      	ldr	r3, [r0, #12]
 80148be:	930f      	str	r3, [sp, #60]	; 0x3c
 80148c0:	2300      	movs	r3, #0
 80148c2:	60c3      	str	r3, [r0, #12]
 80148c4:	4631      	mov	r1, r6
 80148c6:	f002 fa7f 	bl	8016dc8 <__mcmp>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	da65      	bge.n	801499a <_strtod_l+0x89a>
 80148ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148d0:	ea53 030a 	orrs.w	r3, r3, sl
 80148d4:	f040 8087 	bne.w	80149e6 <_strtod_l+0x8e6>
 80148d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148dc:	2b00      	cmp	r3, #0
 80148de:	f040 8082 	bne.w	80149e6 <_strtod_l+0x8e6>
 80148e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80148e6:	0d1b      	lsrs	r3, r3, #20
 80148e8:	051b      	lsls	r3, r3, #20
 80148ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80148ee:	d97a      	bls.n	80149e6 <_strtod_l+0x8e6>
 80148f0:	696b      	ldr	r3, [r5, #20]
 80148f2:	b913      	cbnz	r3, 80148fa <_strtod_l+0x7fa>
 80148f4:	692b      	ldr	r3, [r5, #16]
 80148f6:	2b01      	cmp	r3, #1
 80148f8:	dd75      	ble.n	80149e6 <_strtod_l+0x8e6>
 80148fa:	4629      	mov	r1, r5
 80148fc:	2201      	movs	r2, #1
 80148fe:	4620      	mov	r0, r4
 8014900:	f002 f9f6 	bl	8016cf0 <__lshift>
 8014904:	4631      	mov	r1, r6
 8014906:	4605      	mov	r5, r0
 8014908:	f002 fa5e 	bl	8016dc8 <__mcmp>
 801490c:	2800      	cmp	r0, #0
 801490e:	dd6a      	ble.n	80149e6 <_strtod_l+0x8e6>
 8014910:	9904      	ldr	r1, [sp, #16]
 8014912:	4a55      	ldr	r2, [pc, #340]	; (8014a68 <_strtod_l+0x968>)
 8014914:	465b      	mov	r3, fp
 8014916:	2900      	cmp	r1, #0
 8014918:	f000 8085 	beq.w	8014a26 <_strtod_l+0x926>
 801491c:	ea02 010b 	and.w	r1, r2, fp
 8014920:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014924:	dc7f      	bgt.n	8014a26 <_strtod_l+0x926>
 8014926:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801492a:	f77f aeaa 	ble.w	8014682 <_strtod_l+0x582>
 801492e:	4a4f      	ldr	r2, [pc, #316]	; (8014a6c <_strtod_l+0x96c>)
 8014930:	2300      	movs	r3, #0
 8014932:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014936:	4650      	mov	r0, sl
 8014938:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801493c:	4659      	mov	r1, fp
 801493e:	f7eb fe5b 	bl	80005f8 <__aeabi_dmul>
 8014942:	460b      	mov	r3, r1
 8014944:	4303      	orrs	r3, r0
 8014946:	bf08      	it	eq
 8014948:	2322      	moveq	r3, #34	; 0x22
 801494a:	4682      	mov	sl, r0
 801494c:	468b      	mov	fp, r1
 801494e:	bf08      	it	eq
 8014950:	6023      	streq	r3, [r4, #0]
 8014952:	e62b      	b.n	80145ac <_strtod_l+0x4ac>
 8014954:	f04f 32ff 	mov.w	r2, #4294967295
 8014958:	fa02 f303 	lsl.w	r3, r2, r3
 801495c:	ea03 0a0a 	and.w	sl, r3, sl
 8014960:	e6de      	b.n	8014720 <_strtod_l+0x620>
 8014962:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014966:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801496a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801496e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014972:	fa01 f308 	lsl.w	r3, r1, r8
 8014976:	930c      	str	r3, [sp, #48]	; 0x30
 8014978:	9111      	str	r1, [sp, #68]	; 0x44
 801497a:	e741      	b.n	8014800 <_strtod_l+0x700>
 801497c:	2300      	movs	r3, #0
 801497e:	930c      	str	r3, [sp, #48]	; 0x30
 8014980:	2301      	movs	r3, #1
 8014982:	9311      	str	r3, [sp, #68]	; 0x44
 8014984:	e73c      	b.n	8014800 <_strtod_l+0x700>
 8014986:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014988:	4642      	mov	r2, r8
 801498a:	4620      	mov	r0, r4
 801498c:	f002 f9b0 	bl	8016cf0 <__lshift>
 8014990:	901e      	str	r0, [sp, #120]	; 0x78
 8014992:	2800      	cmp	r0, #0
 8014994:	f47f af66 	bne.w	8014864 <_strtod_l+0x764>
 8014998:	e5fe      	b.n	8014598 <_strtod_l+0x498>
 801499a:	465f      	mov	r7, fp
 801499c:	d16e      	bne.n	8014a7c <_strtod_l+0x97c>
 801499e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149a4:	b342      	cbz	r2, 80149f8 <_strtod_l+0x8f8>
 80149a6:	4a32      	ldr	r2, [pc, #200]	; (8014a70 <_strtod_l+0x970>)
 80149a8:	4293      	cmp	r3, r2
 80149aa:	d128      	bne.n	80149fe <_strtod_l+0x8fe>
 80149ac:	9b04      	ldr	r3, [sp, #16]
 80149ae:	4650      	mov	r0, sl
 80149b0:	b1eb      	cbz	r3, 80149ee <_strtod_l+0x8ee>
 80149b2:	4a2d      	ldr	r2, [pc, #180]	; (8014a68 <_strtod_l+0x968>)
 80149b4:	403a      	ands	r2, r7
 80149b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80149ba:	f04f 31ff 	mov.w	r1, #4294967295
 80149be:	d819      	bhi.n	80149f4 <_strtod_l+0x8f4>
 80149c0:	0d12      	lsrs	r2, r2, #20
 80149c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80149c6:	fa01 f303 	lsl.w	r3, r1, r3
 80149ca:	4298      	cmp	r0, r3
 80149cc:	d117      	bne.n	80149fe <_strtod_l+0x8fe>
 80149ce:	4b29      	ldr	r3, [pc, #164]	; (8014a74 <_strtod_l+0x974>)
 80149d0:	429f      	cmp	r7, r3
 80149d2:	d102      	bne.n	80149da <_strtod_l+0x8da>
 80149d4:	3001      	adds	r0, #1
 80149d6:	f43f addf 	beq.w	8014598 <_strtod_l+0x498>
 80149da:	4b23      	ldr	r3, [pc, #140]	; (8014a68 <_strtod_l+0x968>)
 80149dc:	403b      	ands	r3, r7
 80149de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80149e2:	f04f 0a00 	mov.w	sl, #0
 80149e6:	9b04      	ldr	r3, [sp, #16]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d1a0      	bne.n	801492e <_strtod_l+0x82e>
 80149ec:	e5de      	b.n	80145ac <_strtod_l+0x4ac>
 80149ee:	f04f 33ff 	mov.w	r3, #4294967295
 80149f2:	e7ea      	b.n	80149ca <_strtod_l+0x8ca>
 80149f4:	460b      	mov	r3, r1
 80149f6:	e7e8      	b.n	80149ca <_strtod_l+0x8ca>
 80149f8:	ea53 030a 	orrs.w	r3, r3, sl
 80149fc:	d088      	beq.n	8014910 <_strtod_l+0x810>
 80149fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a00:	b1db      	cbz	r3, 8014a3a <_strtod_l+0x93a>
 8014a02:	423b      	tst	r3, r7
 8014a04:	d0ef      	beq.n	80149e6 <_strtod_l+0x8e6>
 8014a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a08:	9a04      	ldr	r2, [sp, #16]
 8014a0a:	4650      	mov	r0, sl
 8014a0c:	4659      	mov	r1, fp
 8014a0e:	b1c3      	cbz	r3, 8014a42 <_strtod_l+0x942>
 8014a10:	f7ff fb59 	bl	80140c6 <sulp>
 8014a14:	4602      	mov	r2, r0
 8014a16:	460b      	mov	r3, r1
 8014a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a1c:	f7eb fc36 	bl	800028c <__adddf3>
 8014a20:	4682      	mov	sl, r0
 8014a22:	468b      	mov	fp, r1
 8014a24:	e7df      	b.n	80149e6 <_strtod_l+0x8e6>
 8014a26:	4013      	ands	r3, r2
 8014a28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014a2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014a30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014a34:	f04f 3aff 	mov.w	sl, #4294967295
 8014a38:	e7d5      	b.n	80149e6 <_strtod_l+0x8e6>
 8014a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a3c:	ea13 0f0a 	tst.w	r3, sl
 8014a40:	e7e0      	b.n	8014a04 <_strtod_l+0x904>
 8014a42:	f7ff fb40 	bl	80140c6 <sulp>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a4e:	f7eb fc1b 	bl	8000288 <__aeabi_dsub>
 8014a52:	2200      	movs	r2, #0
 8014a54:	2300      	movs	r3, #0
 8014a56:	4682      	mov	sl, r0
 8014a58:	468b      	mov	fp, r1
 8014a5a:	f7ec f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d0c1      	beq.n	80149e6 <_strtod_l+0x8e6>
 8014a62:	e60e      	b.n	8014682 <_strtod_l+0x582>
 8014a64:	fffffc02 	.word	0xfffffc02
 8014a68:	7ff00000 	.word	0x7ff00000
 8014a6c:	39500000 	.word	0x39500000
 8014a70:	000fffff 	.word	0x000fffff
 8014a74:	7fefffff 	.word	0x7fefffff
 8014a78:	0801aa98 	.word	0x0801aa98
 8014a7c:	4631      	mov	r1, r6
 8014a7e:	4628      	mov	r0, r5
 8014a80:	f002 fb1e 	bl	80170c0 <__ratio>
 8014a84:	ec59 8b10 	vmov	r8, r9, d0
 8014a88:	ee10 0a10 	vmov	r0, s0
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014a92:	4649      	mov	r1, r9
 8014a94:	f7ec f82c 	bl	8000af0 <__aeabi_dcmple>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d07c      	beq.n	8014b96 <_strtod_l+0xa96>
 8014a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d04c      	beq.n	8014b3c <_strtod_l+0xa3c>
 8014aa2:	4b95      	ldr	r3, [pc, #596]	; (8014cf8 <_strtod_l+0xbf8>)
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014aaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014cf8 <_strtod_l+0xbf8>
 8014aae:	f04f 0800 	mov.w	r8, #0
 8014ab2:	4b92      	ldr	r3, [pc, #584]	; (8014cfc <_strtod_l+0xbfc>)
 8014ab4:	403b      	ands	r3, r7
 8014ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8014ab8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014aba:	4b91      	ldr	r3, [pc, #580]	; (8014d00 <_strtod_l+0xc00>)
 8014abc:	429a      	cmp	r2, r3
 8014abe:	f040 80b2 	bne.w	8014c26 <_strtod_l+0xb26>
 8014ac2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014aca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014ace:	ec4b ab10 	vmov	d0, sl, fp
 8014ad2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014ad6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ada:	f002 fa19 	bl	8016f10 <__ulp>
 8014ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ae2:	ec53 2b10 	vmov	r2, r3, d0
 8014ae6:	f7eb fd87 	bl	80005f8 <__aeabi_dmul>
 8014aea:	4652      	mov	r2, sl
 8014aec:	465b      	mov	r3, fp
 8014aee:	f7eb fbcd 	bl	800028c <__adddf3>
 8014af2:	460b      	mov	r3, r1
 8014af4:	4981      	ldr	r1, [pc, #516]	; (8014cfc <_strtod_l+0xbfc>)
 8014af6:	4a83      	ldr	r2, [pc, #524]	; (8014d04 <_strtod_l+0xc04>)
 8014af8:	4019      	ands	r1, r3
 8014afa:	4291      	cmp	r1, r2
 8014afc:	4682      	mov	sl, r0
 8014afe:	d95e      	bls.n	8014bbe <_strtod_l+0xabe>
 8014b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014b06:	4293      	cmp	r3, r2
 8014b08:	d103      	bne.n	8014b12 <_strtod_l+0xa12>
 8014b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	f43f ad43 	beq.w	8014598 <_strtod_l+0x498>
 8014b12:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014d10 <_strtod_l+0xc10>
 8014b16:	f04f 3aff 	mov.w	sl, #4294967295
 8014b1a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f001 fecb 	bl	80168b8 <_Bfree>
 8014b22:	9907      	ldr	r1, [sp, #28]
 8014b24:	4620      	mov	r0, r4
 8014b26:	f001 fec7 	bl	80168b8 <_Bfree>
 8014b2a:	4631      	mov	r1, r6
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f001 fec3 	bl	80168b8 <_Bfree>
 8014b32:	4629      	mov	r1, r5
 8014b34:	4620      	mov	r0, r4
 8014b36:	f001 febf 	bl	80168b8 <_Bfree>
 8014b3a:	e613      	b.n	8014764 <_strtod_l+0x664>
 8014b3c:	f1ba 0f00 	cmp.w	sl, #0
 8014b40:	d11b      	bne.n	8014b7a <_strtod_l+0xa7a>
 8014b42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b46:	b9f3      	cbnz	r3, 8014b86 <_strtod_l+0xa86>
 8014b48:	4b6b      	ldr	r3, [pc, #428]	; (8014cf8 <_strtod_l+0xbf8>)
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	4640      	mov	r0, r8
 8014b4e:	4649      	mov	r1, r9
 8014b50:	f7eb ffc4 	bl	8000adc <__aeabi_dcmplt>
 8014b54:	b9d0      	cbnz	r0, 8014b8c <_strtod_l+0xa8c>
 8014b56:	4640      	mov	r0, r8
 8014b58:	4649      	mov	r1, r9
 8014b5a:	4b6b      	ldr	r3, [pc, #428]	; (8014d08 <_strtod_l+0xc08>)
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	f7eb fd4b 	bl	80005f8 <__aeabi_dmul>
 8014b62:	4680      	mov	r8, r0
 8014b64:	4689      	mov	r9, r1
 8014b66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014b6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014b70:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014b74:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014b78:	e79b      	b.n	8014ab2 <_strtod_l+0x9b2>
 8014b7a:	f1ba 0f01 	cmp.w	sl, #1
 8014b7e:	d102      	bne.n	8014b86 <_strtod_l+0xa86>
 8014b80:	2f00      	cmp	r7, #0
 8014b82:	f43f ad7e 	beq.w	8014682 <_strtod_l+0x582>
 8014b86:	4b61      	ldr	r3, [pc, #388]	; (8014d0c <_strtod_l+0xc0c>)
 8014b88:	2200      	movs	r2, #0
 8014b8a:	e78c      	b.n	8014aa6 <_strtod_l+0x9a6>
 8014b8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014d08 <_strtod_l+0xc08>
 8014b90:	f04f 0800 	mov.w	r8, #0
 8014b94:	e7e7      	b.n	8014b66 <_strtod_l+0xa66>
 8014b96:	4b5c      	ldr	r3, [pc, #368]	; (8014d08 <_strtod_l+0xc08>)
 8014b98:	4640      	mov	r0, r8
 8014b9a:	4649      	mov	r1, r9
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	f7eb fd2b 	bl	80005f8 <__aeabi_dmul>
 8014ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ba4:	4680      	mov	r8, r0
 8014ba6:	4689      	mov	r9, r1
 8014ba8:	b933      	cbnz	r3, 8014bb8 <_strtod_l+0xab8>
 8014baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bae:	9012      	str	r0, [sp, #72]	; 0x48
 8014bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8014bb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014bb6:	e7dd      	b.n	8014b74 <_strtod_l+0xa74>
 8014bb8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014bbc:	e7f9      	b.n	8014bb2 <_strtod_l+0xab2>
 8014bbe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014bc2:	9b04      	ldr	r3, [sp, #16]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d1a8      	bne.n	8014b1a <_strtod_l+0xa1a>
 8014bc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014bcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014bce:	0d1b      	lsrs	r3, r3, #20
 8014bd0:	051b      	lsls	r3, r3, #20
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d1a1      	bne.n	8014b1a <_strtod_l+0xa1a>
 8014bd6:	4640      	mov	r0, r8
 8014bd8:	4649      	mov	r1, r9
 8014bda:	f7ec f86d 	bl	8000cb8 <__aeabi_d2lz>
 8014bde:	f7eb fcdd 	bl	800059c <__aeabi_l2d>
 8014be2:	4602      	mov	r2, r0
 8014be4:	460b      	mov	r3, r1
 8014be6:	4640      	mov	r0, r8
 8014be8:	4649      	mov	r1, r9
 8014bea:	f7eb fb4d 	bl	8000288 <__aeabi_dsub>
 8014bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014bf4:	ea43 030a 	orr.w	r3, r3, sl
 8014bf8:	4313      	orrs	r3, r2
 8014bfa:	4680      	mov	r8, r0
 8014bfc:	4689      	mov	r9, r1
 8014bfe:	d053      	beq.n	8014ca8 <_strtod_l+0xba8>
 8014c00:	a335      	add	r3, pc, #212	; (adr r3, 8014cd8 <_strtod_l+0xbd8>)
 8014c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c06:	f7eb ff69 	bl	8000adc <__aeabi_dcmplt>
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	f47f acce 	bne.w	80145ac <_strtod_l+0x4ac>
 8014c10:	a333      	add	r3, pc, #204	; (adr r3, 8014ce0 <_strtod_l+0xbe0>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	4640      	mov	r0, r8
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f7eb ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	f43f af7b 	beq.w	8014b1a <_strtod_l+0xa1a>
 8014c24:	e4c2      	b.n	80145ac <_strtod_l+0x4ac>
 8014c26:	9b04      	ldr	r3, [sp, #16]
 8014c28:	b333      	cbz	r3, 8014c78 <_strtod_l+0xb78>
 8014c2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c30:	d822      	bhi.n	8014c78 <_strtod_l+0xb78>
 8014c32:	a32d      	add	r3, pc, #180	; (adr r3, 8014ce8 <_strtod_l+0xbe8>)
 8014c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c38:	4640      	mov	r0, r8
 8014c3a:	4649      	mov	r1, r9
 8014c3c:	f7eb ff58 	bl	8000af0 <__aeabi_dcmple>
 8014c40:	b1a0      	cbz	r0, 8014c6c <_strtod_l+0xb6c>
 8014c42:	4649      	mov	r1, r9
 8014c44:	4640      	mov	r0, r8
 8014c46:	f7eb ffaf 	bl	8000ba8 <__aeabi_d2uiz>
 8014c4a:	2801      	cmp	r0, #1
 8014c4c:	bf38      	it	cc
 8014c4e:	2001      	movcc	r0, #1
 8014c50:	f7eb fc58 	bl	8000504 <__aeabi_ui2d>
 8014c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c56:	4680      	mov	r8, r0
 8014c58:	4689      	mov	r9, r1
 8014c5a:	bb13      	cbnz	r3, 8014ca2 <_strtod_l+0xba2>
 8014c5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c60:	9014      	str	r0, [sp, #80]	; 0x50
 8014c62:	9315      	str	r3, [sp, #84]	; 0x54
 8014c64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014c68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014c74:	1a9b      	subs	r3, r3, r2
 8014c76:	930d      	str	r3, [sp, #52]	; 0x34
 8014c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014c7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014c80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014c84:	f002 f944 	bl	8016f10 <__ulp>
 8014c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014c8c:	ec53 2b10 	vmov	r2, r3, d0
 8014c90:	f7eb fcb2 	bl	80005f8 <__aeabi_dmul>
 8014c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014c98:	f7eb faf8 	bl	800028c <__adddf3>
 8014c9c:	4682      	mov	sl, r0
 8014c9e:	468b      	mov	fp, r1
 8014ca0:	e78f      	b.n	8014bc2 <_strtod_l+0xac2>
 8014ca2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014ca6:	e7dd      	b.n	8014c64 <_strtod_l+0xb64>
 8014ca8:	a311      	add	r3, pc, #68	; (adr r3, 8014cf0 <_strtod_l+0xbf0>)
 8014caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cae:	f7eb ff15 	bl	8000adc <__aeabi_dcmplt>
 8014cb2:	e7b4      	b.n	8014c1e <_strtod_l+0xb1e>
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8014cb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014cba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014cbc:	6013      	str	r3, [r2, #0]
 8014cbe:	f7ff ba65 	b.w	801418c <_strtod_l+0x8c>
 8014cc2:	2b65      	cmp	r3, #101	; 0x65
 8014cc4:	f43f ab5d 	beq.w	8014382 <_strtod_l+0x282>
 8014cc8:	2b45      	cmp	r3, #69	; 0x45
 8014cca:	f43f ab5a 	beq.w	8014382 <_strtod_l+0x282>
 8014cce:	2201      	movs	r2, #1
 8014cd0:	f7ff bb92 	b.w	80143f8 <_strtod_l+0x2f8>
 8014cd4:	f3af 8000 	nop.w
 8014cd8:	94a03595 	.word	0x94a03595
 8014cdc:	3fdfffff 	.word	0x3fdfffff
 8014ce0:	35afe535 	.word	0x35afe535
 8014ce4:	3fe00000 	.word	0x3fe00000
 8014ce8:	ffc00000 	.word	0xffc00000
 8014cec:	41dfffff 	.word	0x41dfffff
 8014cf0:	94a03595 	.word	0x94a03595
 8014cf4:	3fcfffff 	.word	0x3fcfffff
 8014cf8:	3ff00000 	.word	0x3ff00000
 8014cfc:	7ff00000 	.word	0x7ff00000
 8014d00:	7fe00000 	.word	0x7fe00000
 8014d04:	7c9fffff 	.word	0x7c9fffff
 8014d08:	3fe00000 	.word	0x3fe00000
 8014d0c:	bff00000 	.word	0xbff00000
 8014d10:	7fefffff 	.word	0x7fefffff

08014d14 <_strtod_r>:
 8014d14:	4b01      	ldr	r3, [pc, #4]	; (8014d1c <_strtod_r+0x8>)
 8014d16:	f7ff b9f3 	b.w	8014100 <_strtod_l>
 8014d1a:	bf00      	nop
 8014d1c:	20000194 	.word	0x20000194

08014d20 <_strtol_l.isra.0>:
 8014d20:	2b01      	cmp	r3, #1
 8014d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d26:	d001      	beq.n	8014d2c <_strtol_l.isra.0+0xc>
 8014d28:	2b24      	cmp	r3, #36	; 0x24
 8014d2a:	d906      	bls.n	8014d3a <_strtol_l.isra.0+0x1a>
 8014d2c:	f7fe fadc 	bl	80132e8 <__errno>
 8014d30:	2316      	movs	r3, #22
 8014d32:	6003      	str	r3, [r0, #0]
 8014d34:	2000      	movs	r0, #0
 8014d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d3a:	4f3a      	ldr	r7, [pc, #232]	; (8014e24 <_strtol_l.isra.0+0x104>)
 8014d3c:	468e      	mov	lr, r1
 8014d3e:	4676      	mov	r6, lr
 8014d40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014d44:	5de5      	ldrb	r5, [r4, r7]
 8014d46:	f015 0508 	ands.w	r5, r5, #8
 8014d4a:	d1f8      	bne.n	8014d3e <_strtol_l.isra.0+0x1e>
 8014d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8014d4e:	d134      	bne.n	8014dba <_strtol_l.isra.0+0x9a>
 8014d50:	f89e 4000 	ldrb.w	r4, [lr]
 8014d54:	f04f 0801 	mov.w	r8, #1
 8014d58:	f106 0e02 	add.w	lr, r6, #2
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d05c      	beq.n	8014e1a <_strtol_l.isra.0+0xfa>
 8014d60:	2b10      	cmp	r3, #16
 8014d62:	d10c      	bne.n	8014d7e <_strtol_l.isra.0+0x5e>
 8014d64:	2c30      	cmp	r4, #48	; 0x30
 8014d66:	d10a      	bne.n	8014d7e <_strtol_l.isra.0+0x5e>
 8014d68:	f89e 4000 	ldrb.w	r4, [lr]
 8014d6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014d70:	2c58      	cmp	r4, #88	; 0x58
 8014d72:	d14d      	bne.n	8014e10 <_strtol_l.isra.0+0xf0>
 8014d74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014d78:	2310      	movs	r3, #16
 8014d7a:	f10e 0e02 	add.w	lr, lr, #2
 8014d7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014d82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014d86:	2600      	movs	r6, #0
 8014d88:	fbbc f9f3 	udiv	r9, ip, r3
 8014d8c:	4635      	mov	r5, r6
 8014d8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8014d92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014d96:	2f09      	cmp	r7, #9
 8014d98:	d818      	bhi.n	8014dcc <_strtol_l.isra.0+0xac>
 8014d9a:	463c      	mov	r4, r7
 8014d9c:	42a3      	cmp	r3, r4
 8014d9e:	dd24      	ble.n	8014dea <_strtol_l.isra.0+0xca>
 8014da0:	2e00      	cmp	r6, #0
 8014da2:	db1f      	blt.n	8014de4 <_strtol_l.isra.0+0xc4>
 8014da4:	45a9      	cmp	r9, r5
 8014da6:	d31d      	bcc.n	8014de4 <_strtol_l.isra.0+0xc4>
 8014da8:	d101      	bne.n	8014dae <_strtol_l.isra.0+0x8e>
 8014daa:	45a2      	cmp	sl, r4
 8014dac:	db1a      	blt.n	8014de4 <_strtol_l.isra.0+0xc4>
 8014dae:	fb05 4503 	mla	r5, r5, r3, r4
 8014db2:	2601      	movs	r6, #1
 8014db4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014db8:	e7eb      	b.n	8014d92 <_strtol_l.isra.0+0x72>
 8014dba:	2c2b      	cmp	r4, #43	; 0x2b
 8014dbc:	bf08      	it	eq
 8014dbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014dc2:	46a8      	mov	r8, r5
 8014dc4:	bf08      	it	eq
 8014dc6:	f106 0e02 	addeq.w	lr, r6, #2
 8014dca:	e7c7      	b.n	8014d5c <_strtol_l.isra.0+0x3c>
 8014dcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014dd0:	2f19      	cmp	r7, #25
 8014dd2:	d801      	bhi.n	8014dd8 <_strtol_l.isra.0+0xb8>
 8014dd4:	3c37      	subs	r4, #55	; 0x37
 8014dd6:	e7e1      	b.n	8014d9c <_strtol_l.isra.0+0x7c>
 8014dd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014ddc:	2f19      	cmp	r7, #25
 8014dde:	d804      	bhi.n	8014dea <_strtol_l.isra.0+0xca>
 8014de0:	3c57      	subs	r4, #87	; 0x57
 8014de2:	e7db      	b.n	8014d9c <_strtol_l.isra.0+0x7c>
 8014de4:	f04f 36ff 	mov.w	r6, #4294967295
 8014de8:	e7e4      	b.n	8014db4 <_strtol_l.isra.0+0x94>
 8014dea:	2e00      	cmp	r6, #0
 8014dec:	da05      	bge.n	8014dfa <_strtol_l.isra.0+0xda>
 8014dee:	2322      	movs	r3, #34	; 0x22
 8014df0:	6003      	str	r3, [r0, #0]
 8014df2:	4665      	mov	r5, ip
 8014df4:	b942      	cbnz	r2, 8014e08 <_strtol_l.isra.0+0xe8>
 8014df6:	4628      	mov	r0, r5
 8014df8:	e79d      	b.n	8014d36 <_strtol_l.isra.0+0x16>
 8014dfa:	f1b8 0f00 	cmp.w	r8, #0
 8014dfe:	d000      	beq.n	8014e02 <_strtol_l.isra.0+0xe2>
 8014e00:	426d      	negs	r5, r5
 8014e02:	2a00      	cmp	r2, #0
 8014e04:	d0f7      	beq.n	8014df6 <_strtol_l.isra.0+0xd6>
 8014e06:	b10e      	cbz	r6, 8014e0c <_strtol_l.isra.0+0xec>
 8014e08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014e0c:	6011      	str	r1, [r2, #0]
 8014e0e:	e7f2      	b.n	8014df6 <_strtol_l.isra.0+0xd6>
 8014e10:	2430      	movs	r4, #48	; 0x30
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d1b3      	bne.n	8014d7e <_strtol_l.isra.0+0x5e>
 8014e16:	2308      	movs	r3, #8
 8014e18:	e7b1      	b.n	8014d7e <_strtol_l.isra.0+0x5e>
 8014e1a:	2c30      	cmp	r4, #48	; 0x30
 8014e1c:	d0a4      	beq.n	8014d68 <_strtol_l.isra.0+0x48>
 8014e1e:	230a      	movs	r3, #10
 8014e20:	e7ad      	b.n	8014d7e <_strtol_l.isra.0+0x5e>
 8014e22:	bf00      	nop
 8014e24:	0801aac1 	.word	0x0801aac1

08014e28 <_strtol_r>:
 8014e28:	f7ff bf7a 	b.w	8014d20 <_strtol_l.isra.0>

08014e2c <_vsiprintf_r>:
 8014e2c:	b500      	push	{lr}
 8014e2e:	b09b      	sub	sp, #108	; 0x6c
 8014e30:	9100      	str	r1, [sp, #0]
 8014e32:	9104      	str	r1, [sp, #16]
 8014e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e38:	9105      	str	r1, [sp, #20]
 8014e3a:	9102      	str	r1, [sp, #8]
 8014e3c:	4905      	ldr	r1, [pc, #20]	; (8014e54 <_vsiprintf_r+0x28>)
 8014e3e:	9103      	str	r1, [sp, #12]
 8014e40:	4669      	mov	r1, sp
 8014e42:	f002 fac9 	bl	80173d8 <_svfiprintf_r>
 8014e46:	9b00      	ldr	r3, [sp, #0]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	701a      	strb	r2, [r3, #0]
 8014e4c:	b01b      	add	sp, #108	; 0x6c
 8014e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e52:	bf00      	nop
 8014e54:	ffff0208 	.word	0xffff0208

08014e58 <vsiprintf>:
 8014e58:	4613      	mov	r3, r2
 8014e5a:	460a      	mov	r2, r1
 8014e5c:	4601      	mov	r1, r0
 8014e5e:	4802      	ldr	r0, [pc, #8]	; (8014e68 <vsiprintf+0x10>)
 8014e60:	6800      	ldr	r0, [r0, #0]
 8014e62:	f7ff bfe3 	b.w	8014e2c <_vsiprintf_r>
 8014e66:	bf00      	nop
 8014e68:	2000012c 	.word	0x2000012c

08014e6c <__swbuf_r>:
 8014e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e6e:	460e      	mov	r6, r1
 8014e70:	4614      	mov	r4, r2
 8014e72:	4605      	mov	r5, r0
 8014e74:	b118      	cbz	r0, 8014e7e <__swbuf_r+0x12>
 8014e76:	6983      	ldr	r3, [r0, #24]
 8014e78:	b90b      	cbnz	r3, 8014e7e <__swbuf_r+0x12>
 8014e7a:	f001 f84b 	bl	8015f14 <__sinit>
 8014e7e:	4b21      	ldr	r3, [pc, #132]	; (8014f04 <__swbuf_r+0x98>)
 8014e80:	429c      	cmp	r4, r3
 8014e82:	d12b      	bne.n	8014edc <__swbuf_r+0x70>
 8014e84:	686c      	ldr	r4, [r5, #4]
 8014e86:	69a3      	ldr	r3, [r4, #24]
 8014e88:	60a3      	str	r3, [r4, #8]
 8014e8a:	89a3      	ldrh	r3, [r4, #12]
 8014e8c:	071a      	lsls	r2, r3, #28
 8014e8e:	d52f      	bpl.n	8014ef0 <__swbuf_r+0x84>
 8014e90:	6923      	ldr	r3, [r4, #16]
 8014e92:	b36b      	cbz	r3, 8014ef0 <__swbuf_r+0x84>
 8014e94:	6923      	ldr	r3, [r4, #16]
 8014e96:	6820      	ldr	r0, [r4, #0]
 8014e98:	1ac0      	subs	r0, r0, r3
 8014e9a:	6963      	ldr	r3, [r4, #20]
 8014e9c:	b2f6      	uxtb	r6, r6
 8014e9e:	4283      	cmp	r3, r0
 8014ea0:	4637      	mov	r7, r6
 8014ea2:	dc04      	bgt.n	8014eae <__swbuf_r+0x42>
 8014ea4:	4621      	mov	r1, r4
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f000 ffa0 	bl	8015dec <_fflush_r>
 8014eac:	bb30      	cbnz	r0, 8014efc <__swbuf_r+0x90>
 8014eae:	68a3      	ldr	r3, [r4, #8]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	60a3      	str	r3, [r4, #8]
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	1c5a      	adds	r2, r3, #1
 8014eb8:	6022      	str	r2, [r4, #0]
 8014eba:	701e      	strb	r6, [r3, #0]
 8014ebc:	6963      	ldr	r3, [r4, #20]
 8014ebe:	3001      	adds	r0, #1
 8014ec0:	4283      	cmp	r3, r0
 8014ec2:	d004      	beq.n	8014ece <__swbuf_r+0x62>
 8014ec4:	89a3      	ldrh	r3, [r4, #12]
 8014ec6:	07db      	lsls	r3, r3, #31
 8014ec8:	d506      	bpl.n	8014ed8 <__swbuf_r+0x6c>
 8014eca:	2e0a      	cmp	r6, #10
 8014ecc:	d104      	bne.n	8014ed8 <__swbuf_r+0x6c>
 8014ece:	4621      	mov	r1, r4
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	f000 ff8b 	bl	8015dec <_fflush_r>
 8014ed6:	b988      	cbnz	r0, 8014efc <__swbuf_r+0x90>
 8014ed8:	4638      	mov	r0, r7
 8014eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014edc:	4b0a      	ldr	r3, [pc, #40]	; (8014f08 <__swbuf_r+0x9c>)
 8014ede:	429c      	cmp	r4, r3
 8014ee0:	d101      	bne.n	8014ee6 <__swbuf_r+0x7a>
 8014ee2:	68ac      	ldr	r4, [r5, #8]
 8014ee4:	e7cf      	b.n	8014e86 <__swbuf_r+0x1a>
 8014ee6:	4b09      	ldr	r3, [pc, #36]	; (8014f0c <__swbuf_r+0xa0>)
 8014ee8:	429c      	cmp	r4, r3
 8014eea:	bf08      	it	eq
 8014eec:	68ec      	ldreq	r4, [r5, #12]
 8014eee:	e7ca      	b.n	8014e86 <__swbuf_r+0x1a>
 8014ef0:	4621      	mov	r1, r4
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	f000 f80c 	bl	8014f10 <__swsetup_r>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d0cb      	beq.n	8014e94 <__swbuf_r+0x28>
 8014efc:	f04f 37ff 	mov.w	r7, #4294967295
 8014f00:	e7ea      	b.n	8014ed8 <__swbuf_r+0x6c>
 8014f02:	bf00      	nop
 8014f04:	0801ac78 	.word	0x0801ac78
 8014f08:	0801ac98 	.word	0x0801ac98
 8014f0c:	0801ac58 	.word	0x0801ac58

08014f10 <__swsetup_r>:
 8014f10:	4b32      	ldr	r3, [pc, #200]	; (8014fdc <__swsetup_r+0xcc>)
 8014f12:	b570      	push	{r4, r5, r6, lr}
 8014f14:	681d      	ldr	r5, [r3, #0]
 8014f16:	4606      	mov	r6, r0
 8014f18:	460c      	mov	r4, r1
 8014f1a:	b125      	cbz	r5, 8014f26 <__swsetup_r+0x16>
 8014f1c:	69ab      	ldr	r3, [r5, #24]
 8014f1e:	b913      	cbnz	r3, 8014f26 <__swsetup_r+0x16>
 8014f20:	4628      	mov	r0, r5
 8014f22:	f000 fff7 	bl	8015f14 <__sinit>
 8014f26:	4b2e      	ldr	r3, [pc, #184]	; (8014fe0 <__swsetup_r+0xd0>)
 8014f28:	429c      	cmp	r4, r3
 8014f2a:	d10f      	bne.n	8014f4c <__swsetup_r+0x3c>
 8014f2c:	686c      	ldr	r4, [r5, #4]
 8014f2e:	89a3      	ldrh	r3, [r4, #12]
 8014f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f34:	0719      	lsls	r1, r3, #28
 8014f36:	d42c      	bmi.n	8014f92 <__swsetup_r+0x82>
 8014f38:	06dd      	lsls	r5, r3, #27
 8014f3a:	d411      	bmi.n	8014f60 <__swsetup_r+0x50>
 8014f3c:	2309      	movs	r3, #9
 8014f3e:	6033      	str	r3, [r6, #0]
 8014f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014f44:	81a3      	strh	r3, [r4, #12]
 8014f46:	f04f 30ff 	mov.w	r0, #4294967295
 8014f4a:	e03e      	b.n	8014fca <__swsetup_r+0xba>
 8014f4c:	4b25      	ldr	r3, [pc, #148]	; (8014fe4 <__swsetup_r+0xd4>)
 8014f4e:	429c      	cmp	r4, r3
 8014f50:	d101      	bne.n	8014f56 <__swsetup_r+0x46>
 8014f52:	68ac      	ldr	r4, [r5, #8]
 8014f54:	e7eb      	b.n	8014f2e <__swsetup_r+0x1e>
 8014f56:	4b24      	ldr	r3, [pc, #144]	; (8014fe8 <__swsetup_r+0xd8>)
 8014f58:	429c      	cmp	r4, r3
 8014f5a:	bf08      	it	eq
 8014f5c:	68ec      	ldreq	r4, [r5, #12]
 8014f5e:	e7e6      	b.n	8014f2e <__swsetup_r+0x1e>
 8014f60:	0758      	lsls	r0, r3, #29
 8014f62:	d512      	bpl.n	8014f8a <__swsetup_r+0x7a>
 8014f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f66:	b141      	cbz	r1, 8014f7a <__swsetup_r+0x6a>
 8014f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f6c:	4299      	cmp	r1, r3
 8014f6e:	d002      	beq.n	8014f76 <__swsetup_r+0x66>
 8014f70:	4630      	mov	r0, r6
 8014f72:	f002 f92b 	bl	80171cc <_free_r>
 8014f76:	2300      	movs	r3, #0
 8014f78:	6363      	str	r3, [r4, #52]	; 0x34
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f80:	81a3      	strh	r3, [r4, #12]
 8014f82:	2300      	movs	r3, #0
 8014f84:	6063      	str	r3, [r4, #4]
 8014f86:	6923      	ldr	r3, [r4, #16]
 8014f88:	6023      	str	r3, [r4, #0]
 8014f8a:	89a3      	ldrh	r3, [r4, #12]
 8014f8c:	f043 0308 	orr.w	r3, r3, #8
 8014f90:	81a3      	strh	r3, [r4, #12]
 8014f92:	6923      	ldr	r3, [r4, #16]
 8014f94:	b94b      	cbnz	r3, 8014faa <__swsetup_r+0x9a>
 8014f96:	89a3      	ldrh	r3, [r4, #12]
 8014f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fa0:	d003      	beq.n	8014faa <__swsetup_r+0x9a>
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f001 fbed 	bl	8016784 <__smakebuf_r>
 8014faa:	89a0      	ldrh	r0, [r4, #12]
 8014fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014fb0:	f010 0301 	ands.w	r3, r0, #1
 8014fb4:	d00a      	beq.n	8014fcc <__swsetup_r+0xbc>
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	60a3      	str	r3, [r4, #8]
 8014fba:	6963      	ldr	r3, [r4, #20]
 8014fbc:	425b      	negs	r3, r3
 8014fbe:	61a3      	str	r3, [r4, #24]
 8014fc0:	6923      	ldr	r3, [r4, #16]
 8014fc2:	b943      	cbnz	r3, 8014fd6 <__swsetup_r+0xc6>
 8014fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014fc8:	d1ba      	bne.n	8014f40 <__swsetup_r+0x30>
 8014fca:	bd70      	pop	{r4, r5, r6, pc}
 8014fcc:	0781      	lsls	r1, r0, #30
 8014fce:	bf58      	it	pl
 8014fd0:	6963      	ldrpl	r3, [r4, #20]
 8014fd2:	60a3      	str	r3, [r4, #8]
 8014fd4:	e7f4      	b.n	8014fc0 <__swsetup_r+0xb0>
 8014fd6:	2000      	movs	r0, #0
 8014fd8:	e7f7      	b.n	8014fca <__swsetup_r+0xba>
 8014fda:	bf00      	nop
 8014fdc:	2000012c 	.word	0x2000012c
 8014fe0:	0801ac78 	.word	0x0801ac78
 8014fe4:	0801ac98 	.word	0x0801ac98
 8014fe8:	0801ac58 	.word	0x0801ac58

08014fec <quorem>:
 8014fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff0:	6903      	ldr	r3, [r0, #16]
 8014ff2:	690c      	ldr	r4, [r1, #16]
 8014ff4:	42a3      	cmp	r3, r4
 8014ff6:	4607      	mov	r7, r0
 8014ff8:	f2c0 8081 	blt.w	80150fe <quorem+0x112>
 8014ffc:	3c01      	subs	r4, #1
 8014ffe:	f101 0814 	add.w	r8, r1, #20
 8015002:	f100 0514 	add.w	r5, r0, #20
 8015006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801500a:	9301      	str	r3, [sp, #4]
 801500c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015014:	3301      	adds	r3, #1
 8015016:	429a      	cmp	r2, r3
 8015018:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801501c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015020:	fbb2 f6f3 	udiv	r6, r2, r3
 8015024:	d331      	bcc.n	801508a <quorem+0x9e>
 8015026:	f04f 0e00 	mov.w	lr, #0
 801502a:	4640      	mov	r0, r8
 801502c:	46ac      	mov	ip, r5
 801502e:	46f2      	mov	sl, lr
 8015030:	f850 2b04 	ldr.w	r2, [r0], #4
 8015034:	b293      	uxth	r3, r2
 8015036:	fb06 e303 	mla	r3, r6, r3, lr
 801503a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801503e:	b29b      	uxth	r3, r3
 8015040:	ebaa 0303 	sub.w	r3, sl, r3
 8015044:	0c12      	lsrs	r2, r2, #16
 8015046:	f8dc a000 	ldr.w	sl, [ip]
 801504a:	fb06 e202 	mla	r2, r6, r2, lr
 801504e:	fa13 f38a 	uxtah	r3, r3, sl
 8015052:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015056:	fa1f fa82 	uxth.w	sl, r2
 801505a:	f8dc 2000 	ldr.w	r2, [ip]
 801505e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015066:	b29b      	uxth	r3, r3
 8015068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801506c:	4581      	cmp	r9, r0
 801506e:	f84c 3b04 	str.w	r3, [ip], #4
 8015072:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015076:	d2db      	bcs.n	8015030 <quorem+0x44>
 8015078:	f855 300b 	ldr.w	r3, [r5, fp]
 801507c:	b92b      	cbnz	r3, 801508a <quorem+0x9e>
 801507e:	9b01      	ldr	r3, [sp, #4]
 8015080:	3b04      	subs	r3, #4
 8015082:	429d      	cmp	r5, r3
 8015084:	461a      	mov	r2, r3
 8015086:	d32e      	bcc.n	80150e6 <quorem+0xfa>
 8015088:	613c      	str	r4, [r7, #16]
 801508a:	4638      	mov	r0, r7
 801508c:	f001 fe9c 	bl	8016dc8 <__mcmp>
 8015090:	2800      	cmp	r0, #0
 8015092:	db24      	blt.n	80150de <quorem+0xf2>
 8015094:	3601      	adds	r6, #1
 8015096:	4628      	mov	r0, r5
 8015098:	f04f 0c00 	mov.w	ip, #0
 801509c:	f858 2b04 	ldr.w	r2, [r8], #4
 80150a0:	f8d0 e000 	ldr.w	lr, [r0]
 80150a4:	b293      	uxth	r3, r2
 80150a6:	ebac 0303 	sub.w	r3, ip, r3
 80150aa:	0c12      	lsrs	r2, r2, #16
 80150ac:	fa13 f38e 	uxtah	r3, r3, lr
 80150b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80150b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150be:	45c1      	cmp	r9, r8
 80150c0:	f840 3b04 	str.w	r3, [r0], #4
 80150c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80150c8:	d2e8      	bcs.n	801509c <quorem+0xb0>
 80150ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80150ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150d2:	b922      	cbnz	r2, 80150de <quorem+0xf2>
 80150d4:	3b04      	subs	r3, #4
 80150d6:	429d      	cmp	r5, r3
 80150d8:	461a      	mov	r2, r3
 80150da:	d30a      	bcc.n	80150f2 <quorem+0x106>
 80150dc:	613c      	str	r4, [r7, #16]
 80150de:	4630      	mov	r0, r6
 80150e0:	b003      	add	sp, #12
 80150e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e6:	6812      	ldr	r2, [r2, #0]
 80150e8:	3b04      	subs	r3, #4
 80150ea:	2a00      	cmp	r2, #0
 80150ec:	d1cc      	bne.n	8015088 <quorem+0x9c>
 80150ee:	3c01      	subs	r4, #1
 80150f0:	e7c7      	b.n	8015082 <quorem+0x96>
 80150f2:	6812      	ldr	r2, [r2, #0]
 80150f4:	3b04      	subs	r3, #4
 80150f6:	2a00      	cmp	r2, #0
 80150f8:	d1f0      	bne.n	80150dc <quorem+0xf0>
 80150fa:	3c01      	subs	r4, #1
 80150fc:	e7eb      	b.n	80150d6 <quorem+0xea>
 80150fe:	2000      	movs	r0, #0
 8015100:	e7ee      	b.n	80150e0 <quorem+0xf4>
 8015102:	0000      	movs	r0, r0
 8015104:	0000      	movs	r0, r0
	...

08015108 <_dtoa_r>:
 8015108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801510c:	ed2d 8b02 	vpush	{d8}
 8015110:	ec57 6b10 	vmov	r6, r7, d0
 8015114:	b095      	sub	sp, #84	; 0x54
 8015116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801511c:	9105      	str	r1, [sp, #20]
 801511e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015122:	4604      	mov	r4, r0
 8015124:	9209      	str	r2, [sp, #36]	; 0x24
 8015126:	930f      	str	r3, [sp, #60]	; 0x3c
 8015128:	b975      	cbnz	r5, 8015148 <_dtoa_r+0x40>
 801512a:	2010      	movs	r0, #16
 801512c:	f001 fb6a 	bl	8016804 <malloc>
 8015130:	4602      	mov	r2, r0
 8015132:	6260      	str	r0, [r4, #36]	; 0x24
 8015134:	b920      	cbnz	r0, 8015140 <_dtoa_r+0x38>
 8015136:	4bb2      	ldr	r3, [pc, #712]	; (8015400 <_dtoa_r+0x2f8>)
 8015138:	21ea      	movs	r1, #234	; 0xea
 801513a:	48b2      	ldr	r0, [pc, #712]	; (8015404 <_dtoa_r+0x2fc>)
 801513c:	f002 fad8 	bl	80176f0 <__assert_func>
 8015140:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015144:	6005      	str	r5, [r0, #0]
 8015146:	60c5      	str	r5, [r0, #12]
 8015148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801514a:	6819      	ldr	r1, [r3, #0]
 801514c:	b151      	cbz	r1, 8015164 <_dtoa_r+0x5c>
 801514e:	685a      	ldr	r2, [r3, #4]
 8015150:	604a      	str	r2, [r1, #4]
 8015152:	2301      	movs	r3, #1
 8015154:	4093      	lsls	r3, r2
 8015156:	608b      	str	r3, [r1, #8]
 8015158:	4620      	mov	r0, r4
 801515a:	f001 fbad 	bl	80168b8 <_Bfree>
 801515e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015160:	2200      	movs	r2, #0
 8015162:	601a      	str	r2, [r3, #0]
 8015164:	1e3b      	subs	r3, r7, #0
 8015166:	bfb9      	ittee	lt
 8015168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801516c:	9303      	strlt	r3, [sp, #12]
 801516e:	2300      	movge	r3, #0
 8015170:	f8c8 3000 	strge.w	r3, [r8]
 8015174:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015178:	4ba3      	ldr	r3, [pc, #652]	; (8015408 <_dtoa_r+0x300>)
 801517a:	bfbc      	itt	lt
 801517c:	2201      	movlt	r2, #1
 801517e:	f8c8 2000 	strlt.w	r2, [r8]
 8015182:	ea33 0309 	bics.w	r3, r3, r9
 8015186:	d11b      	bne.n	80151c0 <_dtoa_r+0xb8>
 8015188:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801518a:	f242 730f 	movw	r3, #9999	; 0x270f
 801518e:	6013      	str	r3, [r2, #0]
 8015190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015194:	4333      	orrs	r3, r6
 8015196:	f000 857a 	beq.w	8015c8e <_dtoa_r+0xb86>
 801519a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801519c:	b963      	cbnz	r3, 80151b8 <_dtoa_r+0xb0>
 801519e:	4b9b      	ldr	r3, [pc, #620]	; (801540c <_dtoa_r+0x304>)
 80151a0:	e024      	b.n	80151ec <_dtoa_r+0xe4>
 80151a2:	4b9b      	ldr	r3, [pc, #620]	; (8015410 <_dtoa_r+0x308>)
 80151a4:	9300      	str	r3, [sp, #0]
 80151a6:	3308      	adds	r3, #8
 80151a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151aa:	6013      	str	r3, [r2, #0]
 80151ac:	9800      	ldr	r0, [sp, #0]
 80151ae:	b015      	add	sp, #84	; 0x54
 80151b0:	ecbd 8b02 	vpop	{d8}
 80151b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b8:	4b94      	ldr	r3, [pc, #592]	; (801540c <_dtoa_r+0x304>)
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	3303      	adds	r3, #3
 80151be:	e7f3      	b.n	80151a8 <_dtoa_r+0xa0>
 80151c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151c4:	2200      	movs	r2, #0
 80151c6:	ec51 0b17 	vmov	r0, r1, d7
 80151ca:	2300      	movs	r3, #0
 80151cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80151d0:	f7eb fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80151d4:	4680      	mov	r8, r0
 80151d6:	b158      	cbz	r0, 80151f0 <_dtoa_r+0xe8>
 80151d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151da:	2301      	movs	r3, #1
 80151dc:	6013      	str	r3, [r2, #0]
 80151de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	f000 8551 	beq.w	8015c88 <_dtoa_r+0xb80>
 80151e6:	488b      	ldr	r0, [pc, #556]	; (8015414 <_dtoa_r+0x30c>)
 80151e8:	6018      	str	r0, [r3, #0]
 80151ea:	1e43      	subs	r3, r0, #1
 80151ec:	9300      	str	r3, [sp, #0]
 80151ee:	e7dd      	b.n	80151ac <_dtoa_r+0xa4>
 80151f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80151f4:	aa12      	add	r2, sp, #72	; 0x48
 80151f6:	a913      	add	r1, sp, #76	; 0x4c
 80151f8:	4620      	mov	r0, r4
 80151fa:	f001 ff05 	bl	8017008 <__d2b>
 80151fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015202:	4683      	mov	fp, r0
 8015204:	2d00      	cmp	r5, #0
 8015206:	d07c      	beq.n	8015302 <_dtoa_r+0x1fa>
 8015208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801520a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801520e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015212:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015216:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801521a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801521e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015222:	4b7d      	ldr	r3, [pc, #500]	; (8015418 <_dtoa_r+0x310>)
 8015224:	2200      	movs	r2, #0
 8015226:	4630      	mov	r0, r6
 8015228:	4639      	mov	r1, r7
 801522a:	f7eb f82d 	bl	8000288 <__aeabi_dsub>
 801522e:	a36e      	add	r3, pc, #440	; (adr r3, 80153e8 <_dtoa_r+0x2e0>)
 8015230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015234:	f7eb f9e0 	bl	80005f8 <__aeabi_dmul>
 8015238:	a36d      	add	r3, pc, #436	; (adr r3, 80153f0 <_dtoa_r+0x2e8>)
 801523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801523e:	f7eb f825 	bl	800028c <__adddf3>
 8015242:	4606      	mov	r6, r0
 8015244:	4628      	mov	r0, r5
 8015246:	460f      	mov	r7, r1
 8015248:	f7eb f96c 	bl	8000524 <__aeabi_i2d>
 801524c:	a36a      	add	r3, pc, #424	; (adr r3, 80153f8 <_dtoa_r+0x2f0>)
 801524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015252:	f7eb f9d1 	bl	80005f8 <__aeabi_dmul>
 8015256:	4602      	mov	r2, r0
 8015258:	460b      	mov	r3, r1
 801525a:	4630      	mov	r0, r6
 801525c:	4639      	mov	r1, r7
 801525e:	f7eb f815 	bl	800028c <__adddf3>
 8015262:	4606      	mov	r6, r0
 8015264:	460f      	mov	r7, r1
 8015266:	f7eb fc77 	bl	8000b58 <__aeabi_d2iz>
 801526a:	2200      	movs	r2, #0
 801526c:	4682      	mov	sl, r0
 801526e:	2300      	movs	r3, #0
 8015270:	4630      	mov	r0, r6
 8015272:	4639      	mov	r1, r7
 8015274:	f7eb fc32 	bl	8000adc <__aeabi_dcmplt>
 8015278:	b148      	cbz	r0, 801528e <_dtoa_r+0x186>
 801527a:	4650      	mov	r0, sl
 801527c:	f7eb f952 	bl	8000524 <__aeabi_i2d>
 8015280:	4632      	mov	r2, r6
 8015282:	463b      	mov	r3, r7
 8015284:	f7eb fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8015288:	b908      	cbnz	r0, 801528e <_dtoa_r+0x186>
 801528a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801528e:	f1ba 0f16 	cmp.w	sl, #22
 8015292:	d854      	bhi.n	801533e <_dtoa_r+0x236>
 8015294:	4b61      	ldr	r3, [pc, #388]	; (801541c <_dtoa_r+0x314>)
 8015296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80152a2:	f7eb fc1b 	bl	8000adc <__aeabi_dcmplt>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d04b      	beq.n	8015342 <_dtoa_r+0x23a>
 80152aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152ae:	2300      	movs	r3, #0
 80152b0:	930e      	str	r3, [sp, #56]	; 0x38
 80152b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80152b4:	1b5d      	subs	r5, r3, r5
 80152b6:	1e6b      	subs	r3, r5, #1
 80152b8:	9304      	str	r3, [sp, #16]
 80152ba:	bf43      	ittte	mi
 80152bc:	2300      	movmi	r3, #0
 80152be:	f1c5 0801 	rsbmi	r8, r5, #1
 80152c2:	9304      	strmi	r3, [sp, #16]
 80152c4:	f04f 0800 	movpl.w	r8, #0
 80152c8:	f1ba 0f00 	cmp.w	sl, #0
 80152cc:	db3b      	blt.n	8015346 <_dtoa_r+0x23e>
 80152ce:	9b04      	ldr	r3, [sp, #16]
 80152d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80152d4:	4453      	add	r3, sl
 80152d6:	9304      	str	r3, [sp, #16]
 80152d8:	2300      	movs	r3, #0
 80152da:	9306      	str	r3, [sp, #24]
 80152dc:	9b05      	ldr	r3, [sp, #20]
 80152de:	2b09      	cmp	r3, #9
 80152e0:	d869      	bhi.n	80153b6 <_dtoa_r+0x2ae>
 80152e2:	2b05      	cmp	r3, #5
 80152e4:	bfc4      	itt	gt
 80152e6:	3b04      	subgt	r3, #4
 80152e8:	9305      	strgt	r3, [sp, #20]
 80152ea:	9b05      	ldr	r3, [sp, #20]
 80152ec:	f1a3 0302 	sub.w	r3, r3, #2
 80152f0:	bfcc      	ite	gt
 80152f2:	2500      	movgt	r5, #0
 80152f4:	2501      	movle	r5, #1
 80152f6:	2b03      	cmp	r3, #3
 80152f8:	d869      	bhi.n	80153ce <_dtoa_r+0x2c6>
 80152fa:	e8df f003 	tbb	[pc, r3]
 80152fe:	4e2c      	.short	0x4e2c
 8015300:	5a4c      	.short	0x5a4c
 8015302:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015306:	441d      	add	r5, r3
 8015308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801530c:	2b20      	cmp	r3, #32
 801530e:	bfc1      	itttt	gt
 8015310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015314:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015318:	fa09 f303 	lslgt.w	r3, r9, r3
 801531c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015320:	bfda      	itte	le
 8015322:	f1c3 0320 	rsble	r3, r3, #32
 8015326:	fa06 f003 	lslle.w	r0, r6, r3
 801532a:	4318      	orrgt	r0, r3
 801532c:	f7eb f8ea 	bl	8000504 <__aeabi_ui2d>
 8015330:	2301      	movs	r3, #1
 8015332:	4606      	mov	r6, r0
 8015334:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015338:	3d01      	subs	r5, #1
 801533a:	9310      	str	r3, [sp, #64]	; 0x40
 801533c:	e771      	b.n	8015222 <_dtoa_r+0x11a>
 801533e:	2301      	movs	r3, #1
 8015340:	e7b6      	b.n	80152b0 <_dtoa_r+0x1a8>
 8015342:	900e      	str	r0, [sp, #56]	; 0x38
 8015344:	e7b5      	b.n	80152b2 <_dtoa_r+0x1aa>
 8015346:	f1ca 0300 	rsb	r3, sl, #0
 801534a:	9306      	str	r3, [sp, #24]
 801534c:	2300      	movs	r3, #0
 801534e:	eba8 080a 	sub.w	r8, r8, sl
 8015352:	930d      	str	r3, [sp, #52]	; 0x34
 8015354:	e7c2      	b.n	80152dc <_dtoa_r+0x1d4>
 8015356:	2300      	movs	r3, #0
 8015358:	9308      	str	r3, [sp, #32]
 801535a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801535c:	2b00      	cmp	r3, #0
 801535e:	dc39      	bgt.n	80153d4 <_dtoa_r+0x2cc>
 8015360:	f04f 0901 	mov.w	r9, #1
 8015364:	f8cd 9004 	str.w	r9, [sp, #4]
 8015368:	464b      	mov	r3, r9
 801536a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801536e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015370:	2200      	movs	r2, #0
 8015372:	6042      	str	r2, [r0, #4]
 8015374:	2204      	movs	r2, #4
 8015376:	f102 0614 	add.w	r6, r2, #20
 801537a:	429e      	cmp	r6, r3
 801537c:	6841      	ldr	r1, [r0, #4]
 801537e:	d92f      	bls.n	80153e0 <_dtoa_r+0x2d8>
 8015380:	4620      	mov	r0, r4
 8015382:	f001 fa59 	bl	8016838 <_Balloc>
 8015386:	9000      	str	r0, [sp, #0]
 8015388:	2800      	cmp	r0, #0
 801538a:	d14b      	bne.n	8015424 <_dtoa_r+0x31c>
 801538c:	4b24      	ldr	r3, [pc, #144]	; (8015420 <_dtoa_r+0x318>)
 801538e:	4602      	mov	r2, r0
 8015390:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015394:	e6d1      	b.n	801513a <_dtoa_r+0x32>
 8015396:	2301      	movs	r3, #1
 8015398:	e7de      	b.n	8015358 <_dtoa_r+0x250>
 801539a:	2300      	movs	r3, #0
 801539c:	9308      	str	r3, [sp, #32]
 801539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a0:	eb0a 0903 	add.w	r9, sl, r3
 80153a4:	f109 0301 	add.w	r3, r9, #1
 80153a8:	2b01      	cmp	r3, #1
 80153aa:	9301      	str	r3, [sp, #4]
 80153ac:	bfb8      	it	lt
 80153ae:	2301      	movlt	r3, #1
 80153b0:	e7dd      	b.n	801536e <_dtoa_r+0x266>
 80153b2:	2301      	movs	r3, #1
 80153b4:	e7f2      	b.n	801539c <_dtoa_r+0x294>
 80153b6:	2501      	movs	r5, #1
 80153b8:	2300      	movs	r3, #0
 80153ba:	9305      	str	r3, [sp, #20]
 80153bc:	9508      	str	r5, [sp, #32]
 80153be:	f04f 39ff 	mov.w	r9, #4294967295
 80153c2:	2200      	movs	r2, #0
 80153c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80153c8:	2312      	movs	r3, #18
 80153ca:	9209      	str	r2, [sp, #36]	; 0x24
 80153cc:	e7cf      	b.n	801536e <_dtoa_r+0x266>
 80153ce:	2301      	movs	r3, #1
 80153d0:	9308      	str	r3, [sp, #32]
 80153d2:	e7f4      	b.n	80153be <_dtoa_r+0x2b6>
 80153d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80153d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80153dc:	464b      	mov	r3, r9
 80153de:	e7c6      	b.n	801536e <_dtoa_r+0x266>
 80153e0:	3101      	adds	r1, #1
 80153e2:	6041      	str	r1, [r0, #4]
 80153e4:	0052      	lsls	r2, r2, #1
 80153e6:	e7c6      	b.n	8015376 <_dtoa_r+0x26e>
 80153e8:	636f4361 	.word	0x636f4361
 80153ec:	3fd287a7 	.word	0x3fd287a7
 80153f0:	8b60c8b3 	.word	0x8b60c8b3
 80153f4:	3fc68a28 	.word	0x3fc68a28
 80153f8:	509f79fb 	.word	0x509f79fb
 80153fc:	3fd34413 	.word	0x3fd34413
 8015400:	0801abce 	.word	0x0801abce
 8015404:	0801abe5 	.word	0x0801abe5
 8015408:	7ff00000 	.word	0x7ff00000
 801540c:	0801abca 	.word	0x0801abca
 8015410:	0801abc1 	.word	0x0801abc1
 8015414:	0801aa41 	.word	0x0801aa41
 8015418:	3ff80000 	.word	0x3ff80000
 801541c:	0801adc0 	.word	0x0801adc0
 8015420:	0801ac44 	.word	0x0801ac44
 8015424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015426:	9a00      	ldr	r2, [sp, #0]
 8015428:	601a      	str	r2, [r3, #0]
 801542a:	9b01      	ldr	r3, [sp, #4]
 801542c:	2b0e      	cmp	r3, #14
 801542e:	f200 80ad 	bhi.w	801558c <_dtoa_r+0x484>
 8015432:	2d00      	cmp	r5, #0
 8015434:	f000 80aa 	beq.w	801558c <_dtoa_r+0x484>
 8015438:	f1ba 0f00 	cmp.w	sl, #0
 801543c:	dd36      	ble.n	80154ac <_dtoa_r+0x3a4>
 801543e:	4ac3      	ldr	r2, [pc, #780]	; (801574c <_dtoa_r+0x644>)
 8015440:	f00a 030f 	and.w	r3, sl, #15
 8015444:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015448:	ed93 7b00 	vldr	d7, [r3]
 801544c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015450:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015454:	eeb0 8a47 	vmov.f32	s16, s14
 8015458:	eef0 8a67 	vmov.f32	s17, s15
 801545c:	d016      	beq.n	801548c <_dtoa_r+0x384>
 801545e:	4bbc      	ldr	r3, [pc, #752]	; (8015750 <_dtoa_r+0x648>)
 8015460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015468:	f7eb f9f0 	bl	800084c <__aeabi_ddiv>
 801546c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015470:	f007 070f 	and.w	r7, r7, #15
 8015474:	2503      	movs	r5, #3
 8015476:	4eb6      	ldr	r6, [pc, #728]	; (8015750 <_dtoa_r+0x648>)
 8015478:	b957      	cbnz	r7, 8015490 <_dtoa_r+0x388>
 801547a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801547e:	ec53 2b18 	vmov	r2, r3, d8
 8015482:	f7eb f9e3 	bl	800084c <__aeabi_ddiv>
 8015486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801548a:	e029      	b.n	80154e0 <_dtoa_r+0x3d8>
 801548c:	2502      	movs	r5, #2
 801548e:	e7f2      	b.n	8015476 <_dtoa_r+0x36e>
 8015490:	07f9      	lsls	r1, r7, #31
 8015492:	d508      	bpl.n	80154a6 <_dtoa_r+0x39e>
 8015494:	ec51 0b18 	vmov	r0, r1, d8
 8015498:	e9d6 2300 	ldrd	r2, r3, [r6]
 801549c:	f7eb f8ac 	bl	80005f8 <__aeabi_dmul>
 80154a0:	ec41 0b18 	vmov	d8, r0, r1
 80154a4:	3501      	adds	r5, #1
 80154a6:	107f      	asrs	r7, r7, #1
 80154a8:	3608      	adds	r6, #8
 80154aa:	e7e5      	b.n	8015478 <_dtoa_r+0x370>
 80154ac:	f000 80a6 	beq.w	80155fc <_dtoa_r+0x4f4>
 80154b0:	f1ca 0600 	rsb	r6, sl, #0
 80154b4:	4ba5      	ldr	r3, [pc, #660]	; (801574c <_dtoa_r+0x644>)
 80154b6:	4fa6      	ldr	r7, [pc, #664]	; (8015750 <_dtoa_r+0x648>)
 80154b8:	f006 020f 	and.w	r2, r6, #15
 80154bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80154c8:	f7eb f896 	bl	80005f8 <__aeabi_dmul>
 80154cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154d0:	1136      	asrs	r6, r6, #4
 80154d2:	2300      	movs	r3, #0
 80154d4:	2502      	movs	r5, #2
 80154d6:	2e00      	cmp	r6, #0
 80154d8:	f040 8085 	bne.w	80155e6 <_dtoa_r+0x4de>
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d1d2      	bne.n	8015486 <_dtoa_r+0x37e>
 80154e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	f000 808c 	beq.w	8015600 <_dtoa_r+0x4f8>
 80154e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80154ec:	4b99      	ldr	r3, [pc, #612]	; (8015754 <_dtoa_r+0x64c>)
 80154ee:	2200      	movs	r2, #0
 80154f0:	4630      	mov	r0, r6
 80154f2:	4639      	mov	r1, r7
 80154f4:	f7eb faf2 	bl	8000adc <__aeabi_dcmplt>
 80154f8:	2800      	cmp	r0, #0
 80154fa:	f000 8081 	beq.w	8015600 <_dtoa_r+0x4f8>
 80154fe:	9b01      	ldr	r3, [sp, #4]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d07d      	beq.n	8015600 <_dtoa_r+0x4f8>
 8015504:	f1b9 0f00 	cmp.w	r9, #0
 8015508:	dd3c      	ble.n	8015584 <_dtoa_r+0x47c>
 801550a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801550e:	9307      	str	r3, [sp, #28]
 8015510:	2200      	movs	r2, #0
 8015512:	4b91      	ldr	r3, [pc, #580]	; (8015758 <_dtoa_r+0x650>)
 8015514:	4630      	mov	r0, r6
 8015516:	4639      	mov	r1, r7
 8015518:	f7eb f86e 	bl	80005f8 <__aeabi_dmul>
 801551c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015520:	3501      	adds	r5, #1
 8015522:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015526:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801552a:	4628      	mov	r0, r5
 801552c:	f7ea fffa 	bl	8000524 <__aeabi_i2d>
 8015530:	4632      	mov	r2, r6
 8015532:	463b      	mov	r3, r7
 8015534:	f7eb f860 	bl	80005f8 <__aeabi_dmul>
 8015538:	4b88      	ldr	r3, [pc, #544]	; (801575c <_dtoa_r+0x654>)
 801553a:	2200      	movs	r2, #0
 801553c:	f7ea fea6 	bl	800028c <__adddf3>
 8015540:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015548:	9303      	str	r3, [sp, #12]
 801554a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801554c:	2b00      	cmp	r3, #0
 801554e:	d15c      	bne.n	801560a <_dtoa_r+0x502>
 8015550:	4b83      	ldr	r3, [pc, #524]	; (8015760 <_dtoa_r+0x658>)
 8015552:	2200      	movs	r2, #0
 8015554:	4630      	mov	r0, r6
 8015556:	4639      	mov	r1, r7
 8015558:	f7ea fe96 	bl	8000288 <__aeabi_dsub>
 801555c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015560:	4606      	mov	r6, r0
 8015562:	460f      	mov	r7, r1
 8015564:	f7eb fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8015568:	2800      	cmp	r0, #0
 801556a:	f040 8296 	bne.w	8015a9a <_dtoa_r+0x992>
 801556e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015572:	4630      	mov	r0, r6
 8015574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015578:	4639      	mov	r1, r7
 801557a:	f7eb faaf 	bl	8000adc <__aeabi_dcmplt>
 801557e:	2800      	cmp	r0, #0
 8015580:	f040 8288 	bne.w	8015a94 <_dtoa_r+0x98c>
 8015584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801558c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801558e:	2b00      	cmp	r3, #0
 8015590:	f2c0 8158 	blt.w	8015844 <_dtoa_r+0x73c>
 8015594:	f1ba 0f0e 	cmp.w	sl, #14
 8015598:	f300 8154 	bgt.w	8015844 <_dtoa_r+0x73c>
 801559c:	4b6b      	ldr	r3, [pc, #428]	; (801574c <_dtoa_r+0x644>)
 801559e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80155a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80155a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	f280 80e3 	bge.w	8015774 <_dtoa_r+0x66c>
 80155ae:	9b01      	ldr	r3, [sp, #4]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f300 80df 	bgt.w	8015774 <_dtoa_r+0x66c>
 80155b6:	f040 826d 	bne.w	8015a94 <_dtoa_r+0x98c>
 80155ba:	4b69      	ldr	r3, [pc, #420]	; (8015760 <_dtoa_r+0x658>)
 80155bc:	2200      	movs	r2, #0
 80155be:	4640      	mov	r0, r8
 80155c0:	4649      	mov	r1, r9
 80155c2:	f7eb f819 	bl	80005f8 <__aeabi_dmul>
 80155c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80155ca:	f7eb fa9b 	bl	8000b04 <__aeabi_dcmpge>
 80155ce:	9e01      	ldr	r6, [sp, #4]
 80155d0:	4637      	mov	r7, r6
 80155d2:	2800      	cmp	r0, #0
 80155d4:	f040 8243 	bne.w	8015a5e <_dtoa_r+0x956>
 80155d8:	9d00      	ldr	r5, [sp, #0]
 80155da:	2331      	movs	r3, #49	; 0x31
 80155dc:	f805 3b01 	strb.w	r3, [r5], #1
 80155e0:	f10a 0a01 	add.w	sl, sl, #1
 80155e4:	e23f      	b.n	8015a66 <_dtoa_r+0x95e>
 80155e6:	07f2      	lsls	r2, r6, #31
 80155e8:	d505      	bpl.n	80155f6 <_dtoa_r+0x4ee>
 80155ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155ee:	f7eb f803 	bl	80005f8 <__aeabi_dmul>
 80155f2:	3501      	adds	r5, #1
 80155f4:	2301      	movs	r3, #1
 80155f6:	1076      	asrs	r6, r6, #1
 80155f8:	3708      	adds	r7, #8
 80155fa:	e76c      	b.n	80154d6 <_dtoa_r+0x3ce>
 80155fc:	2502      	movs	r5, #2
 80155fe:	e76f      	b.n	80154e0 <_dtoa_r+0x3d8>
 8015600:	9b01      	ldr	r3, [sp, #4]
 8015602:	f8cd a01c 	str.w	sl, [sp, #28]
 8015606:	930c      	str	r3, [sp, #48]	; 0x30
 8015608:	e78d      	b.n	8015526 <_dtoa_r+0x41e>
 801560a:	9900      	ldr	r1, [sp, #0]
 801560c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801560e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015610:	4b4e      	ldr	r3, [pc, #312]	; (801574c <_dtoa_r+0x644>)
 8015612:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015616:	4401      	add	r1, r0
 8015618:	9102      	str	r1, [sp, #8]
 801561a:	9908      	ldr	r1, [sp, #32]
 801561c:	eeb0 8a47 	vmov.f32	s16, s14
 8015620:	eef0 8a67 	vmov.f32	s17, s15
 8015624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015628:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801562c:	2900      	cmp	r1, #0
 801562e:	d045      	beq.n	80156bc <_dtoa_r+0x5b4>
 8015630:	494c      	ldr	r1, [pc, #304]	; (8015764 <_dtoa_r+0x65c>)
 8015632:	2000      	movs	r0, #0
 8015634:	f7eb f90a 	bl	800084c <__aeabi_ddiv>
 8015638:	ec53 2b18 	vmov	r2, r3, d8
 801563c:	f7ea fe24 	bl	8000288 <__aeabi_dsub>
 8015640:	9d00      	ldr	r5, [sp, #0]
 8015642:	ec41 0b18 	vmov	d8, r0, r1
 8015646:	4639      	mov	r1, r7
 8015648:	4630      	mov	r0, r6
 801564a:	f7eb fa85 	bl	8000b58 <__aeabi_d2iz>
 801564e:	900c      	str	r0, [sp, #48]	; 0x30
 8015650:	f7ea ff68 	bl	8000524 <__aeabi_i2d>
 8015654:	4602      	mov	r2, r0
 8015656:	460b      	mov	r3, r1
 8015658:	4630      	mov	r0, r6
 801565a:	4639      	mov	r1, r7
 801565c:	f7ea fe14 	bl	8000288 <__aeabi_dsub>
 8015660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015662:	3330      	adds	r3, #48	; 0x30
 8015664:	f805 3b01 	strb.w	r3, [r5], #1
 8015668:	ec53 2b18 	vmov	r2, r3, d8
 801566c:	4606      	mov	r6, r0
 801566e:	460f      	mov	r7, r1
 8015670:	f7eb fa34 	bl	8000adc <__aeabi_dcmplt>
 8015674:	2800      	cmp	r0, #0
 8015676:	d165      	bne.n	8015744 <_dtoa_r+0x63c>
 8015678:	4632      	mov	r2, r6
 801567a:	463b      	mov	r3, r7
 801567c:	4935      	ldr	r1, [pc, #212]	; (8015754 <_dtoa_r+0x64c>)
 801567e:	2000      	movs	r0, #0
 8015680:	f7ea fe02 	bl	8000288 <__aeabi_dsub>
 8015684:	ec53 2b18 	vmov	r2, r3, d8
 8015688:	f7eb fa28 	bl	8000adc <__aeabi_dcmplt>
 801568c:	2800      	cmp	r0, #0
 801568e:	f040 80b9 	bne.w	8015804 <_dtoa_r+0x6fc>
 8015692:	9b02      	ldr	r3, [sp, #8]
 8015694:	429d      	cmp	r5, r3
 8015696:	f43f af75 	beq.w	8015584 <_dtoa_r+0x47c>
 801569a:	4b2f      	ldr	r3, [pc, #188]	; (8015758 <_dtoa_r+0x650>)
 801569c:	ec51 0b18 	vmov	r0, r1, d8
 80156a0:	2200      	movs	r2, #0
 80156a2:	f7ea ffa9 	bl	80005f8 <__aeabi_dmul>
 80156a6:	4b2c      	ldr	r3, [pc, #176]	; (8015758 <_dtoa_r+0x650>)
 80156a8:	ec41 0b18 	vmov	d8, r0, r1
 80156ac:	2200      	movs	r2, #0
 80156ae:	4630      	mov	r0, r6
 80156b0:	4639      	mov	r1, r7
 80156b2:	f7ea ffa1 	bl	80005f8 <__aeabi_dmul>
 80156b6:	4606      	mov	r6, r0
 80156b8:	460f      	mov	r7, r1
 80156ba:	e7c4      	b.n	8015646 <_dtoa_r+0x53e>
 80156bc:	ec51 0b17 	vmov	r0, r1, d7
 80156c0:	f7ea ff9a 	bl	80005f8 <__aeabi_dmul>
 80156c4:	9b02      	ldr	r3, [sp, #8]
 80156c6:	9d00      	ldr	r5, [sp, #0]
 80156c8:	930c      	str	r3, [sp, #48]	; 0x30
 80156ca:	ec41 0b18 	vmov	d8, r0, r1
 80156ce:	4639      	mov	r1, r7
 80156d0:	4630      	mov	r0, r6
 80156d2:	f7eb fa41 	bl	8000b58 <__aeabi_d2iz>
 80156d6:	9011      	str	r0, [sp, #68]	; 0x44
 80156d8:	f7ea ff24 	bl	8000524 <__aeabi_i2d>
 80156dc:	4602      	mov	r2, r0
 80156de:	460b      	mov	r3, r1
 80156e0:	4630      	mov	r0, r6
 80156e2:	4639      	mov	r1, r7
 80156e4:	f7ea fdd0 	bl	8000288 <__aeabi_dsub>
 80156e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156ea:	3330      	adds	r3, #48	; 0x30
 80156ec:	f805 3b01 	strb.w	r3, [r5], #1
 80156f0:	9b02      	ldr	r3, [sp, #8]
 80156f2:	429d      	cmp	r5, r3
 80156f4:	4606      	mov	r6, r0
 80156f6:	460f      	mov	r7, r1
 80156f8:	f04f 0200 	mov.w	r2, #0
 80156fc:	d134      	bne.n	8015768 <_dtoa_r+0x660>
 80156fe:	4b19      	ldr	r3, [pc, #100]	; (8015764 <_dtoa_r+0x65c>)
 8015700:	ec51 0b18 	vmov	r0, r1, d8
 8015704:	f7ea fdc2 	bl	800028c <__adddf3>
 8015708:	4602      	mov	r2, r0
 801570a:	460b      	mov	r3, r1
 801570c:	4630      	mov	r0, r6
 801570e:	4639      	mov	r1, r7
 8015710:	f7eb fa02 	bl	8000b18 <__aeabi_dcmpgt>
 8015714:	2800      	cmp	r0, #0
 8015716:	d175      	bne.n	8015804 <_dtoa_r+0x6fc>
 8015718:	ec53 2b18 	vmov	r2, r3, d8
 801571c:	4911      	ldr	r1, [pc, #68]	; (8015764 <_dtoa_r+0x65c>)
 801571e:	2000      	movs	r0, #0
 8015720:	f7ea fdb2 	bl	8000288 <__aeabi_dsub>
 8015724:	4602      	mov	r2, r0
 8015726:	460b      	mov	r3, r1
 8015728:	4630      	mov	r0, r6
 801572a:	4639      	mov	r1, r7
 801572c:	f7eb f9d6 	bl	8000adc <__aeabi_dcmplt>
 8015730:	2800      	cmp	r0, #0
 8015732:	f43f af27 	beq.w	8015584 <_dtoa_r+0x47c>
 8015736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015738:	1e6b      	subs	r3, r5, #1
 801573a:	930c      	str	r3, [sp, #48]	; 0x30
 801573c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015740:	2b30      	cmp	r3, #48	; 0x30
 8015742:	d0f8      	beq.n	8015736 <_dtoa_r+0x62e>
 8015744:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015748:	e04a      	b.n	80157e0 <_dtoa_r+0x6d8>
 801574a:	bf00      	nop
 801574c:	0801adc0 	.word	0x0801adc0
 8015750:	0801ad98 	.word	0x0801ad98
 8015754:	3ff00000 	.word	0x3ff00000
 8015758:	40240000 	.word	0x40240000
 801575c:	401c0000 	.word	0x401c0000
 8015760:	40140000 	.word	0x40140000
 8015764:	3fe00000 	.word	0x3fe00000
 8015768:	4baf      	ldr	r3, [pc, #700]	; (8015a28 <_dtoa_r+0x920>)
 801576a:	f7ea ff45 	bl	80005f8 <__aeabi_dmul>
 801576e:	4606      	mov	r6, r0
 8015770:	460f      	mov	r7, r1
 8015772:	e7ac      	b.n	80156ce <_dtoa_r+0x5c6>
 8015774:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015778:	9d00      	ldr	r5, [sp, #0]
 801577a:	4642      	mov	r2, r8
 801577c:	464b      	mov	r3, r9
 801577e:	4630      	mov	r0, r6
 8015780:	4639      	mov	r1, r7
 8015782:	f7eb f863 	bl	800084c <__aeabi_ddiv>
 8015786:	f7eb f9e7 	bl	8000b58 <__aeabi_d2iz>
 801578a:	9002      	str	r0, [sp, #8]
 801578c:	f7ea feca 	bl	8000524 <__aeabi_i2d>
 8015790:	4642      	mov	r2, r8
 8015792:	464b      	mov	r3, r9
 8015794:	f7ea ff30 	bl	80005f8 <__aeabi_dmul>
 8015798:	4602      	mov	r2, r0
 801579a:	460b      	mov	r3, r1
 801579c:	4630      	mov	r0, r6
 801579e:	4639      	mov	r1, r7
 80157a0:	f7ea fd72 	bl	8000288 <__aeabi_dsub>
 80157a4:	9e02      	ldr	r6, [sp, #8]
 80157a6:	9f01      	ldr	r7, [sp, #4]
 80157a8:	3630      	adds	r6, #48	; 0x30
 80157aa:	f805 6b01 	strb.w	r6, [r5], #1
 80157ae:	9e00      	ldr	r6, [sp, #0]
 80157b0:	1bae      	subs	r6, r5, r6
 80157b2:	42b7      	cmp	r7, r6
 80157b4:	4602      	mov	r2, r0
 80157b6:	460b      	mov	r3, r1
 80157b8:	d137      	bne.n	801582a <_dtoa_r+0x722>
 80157ba:	f7ea fd67 	bl	800028c <__adddf3>
 80157be:	4642      	mov	r2, r8
 80157c0:	464b      	mov	r3, r9
 80157c2:	4606      	mov	r6, r0
 80157c4:	460f      	mov	r7, r1
 80157c6:	f7eb f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80157ca:	b9c8      	cbnz	r0, 8015800 <_dtoa_r+0x6f8>
 80157cc:	4642      	mov	r2, r8
 80157ce:	464b      	mov	r3, r9
 80157d0:	4630      	mov	r0, r6
 80157d2:	4639      	mov	r1, r7
 80157d4:	f7eb f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80157d8:	b110      	cbz	r0, 80157e0 <_dtoa_r+0x6d8>
 80157da:	9b02      	ldr	r3, [sp, #8]
 80157dc:	07d9      	lsls	r1, r3, #31
 80157de:	d40f      	bmi.n	8015800 <_dtoa_r+0x6f8>
 80157e0:	4620      	mov	r0, r4
 80157e2:	4659      	mov	r1, fp
 80157e4:	f001 f868 	bl	80168b8 <_Bfree>
 80157e8:	2300      	movs	r3, #0
 80157ea:	702b      	strb	r3, [r5, #0]
 80157ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157ee:	f10a 0001 	add.w	r0, sl, #1
 80157f2:	6018      	str	r0, [r3, #0]
 80157f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f43f acd8 	beq.w	80151ac <_dtoa_r+0xa4>
 80157fc:	601d      	str	r5, [r3, #0]
 80157fe:	e4d5      	b.n	80151ac <_dtoa_r+0xa4>
 8015800:	f8cd a01c 	str.w	sl, [sp, #28]
 8015804:	462b      	mov	r3, r5
 8015806:	461d      	mov	r5, r3
 8015808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801580c:	2a39      	cmp	r2, #57	; 0x39
 801580e:	d108      	bne.n	8015822 <_dtoa_r+0x71a>
 8015810:	9a00      	ldr	r2, [sp, #0]
 8015812:	429a      	cmp	r2, r3
 8015814:	d1f7      	bne.n	8015806 <_dtoa_r+0x6fe>
 8015816:	9a07      	ldr	r2, [sp, #28]
 8015818:	9900      	ldr	r1, [sp, #0]
 801581a:	3201      	adds	r2, #1
 801581c:	9207      	str	r2, [sp, #28]
 801581e:	2230      	movs	r2, #48	; 0x30
 8015820:	700a      	strb	r2, [r1, #0]
 8015822:	781a      	ldrb	r2, [r3, #0]
 8015824:	3201      	adds	r2, #1
 8015826:	701a      	strb	r2, [r3, #0]
 8015828:	e78c      	b.n	8015744 <_dtoa_r+0x63c>
 801582a:	4b7f      	ldr	r3, [pc, #508]	; (8015a28 <_dtoa_r+0x920>)
 801582c:	2200      	movs	r2, #0
 801582e:	f7ea fee3 	bl	80005f8 <__aeabi_dmul>
 8015832:	2200      	movs	r2, #0
 8015834:	2300      	movs	r3, #0
 8015836:	4606      	mov	r6, r0
 8015838:	460f      	mov	r7, r1
 801583a:	f7eb f945 	bl	8000ac8 <__aeabi_dcmpeq>
 801583e:	2800      	cmp	r0, #0
 8015840:	d09b      	beq.n	801577a <_dtoa_r+0x672>
 8015842:	e7cd      	b.n	80157e0 <_dtoa_r+0x6d8>
 8015844:	9a08      	ldr	r2, [sp, #32]
 8015846:	2a00      	cmp	r2, #0
 8015848:	f000 80c4 	beq.w	80159d4 <_dtoa_r+0x8cc>
 801584c:	9a05      	ldr	r2, [sp, #20]
 801584e:	2a01      	cmp	r2, #1
 8015850:	f300 80a8 	bgt.w	80159a4 <_dtoa_r+0x89c>
 8015854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015856:	2a00      	cmp	r2, #0
 8015858:	f000 80a0 	beq.w	801599c <_dtoa_r+0x894>
 801585c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015860:	9e06      	ldr	r6, [sp, #24]
 8015862:	4645      	mov	r5, r8
 8015864:	9a04      	ldr	r2, [sp, #16]
 8015866:	2101      	movs	r1, #1
 8015868:	441a      	add	r2, r3
 801586a:	4620      	mov	r0, r4
 801586c:	4498      	add	r8, r3
 801586e:	9204      	str	r2, [sp, #16]
 8015870:	f001 f928 	bl	8016ac4 <__i2b>
 8015874:	4607      	mov	r7, r0
 8015876:	2d00      	cmp	r5, #0
 8015878:	dd0b      	ble.n	8015892 <_dtoa_r+0x78a>
 801587a:	9b04      	ldr	r3, [sp, #16]
 801587c:	2b00      	cmp	r3, #0
 801587e:	dd08      	ble.n	8015892 <_dtoa_r+0x78a>
 8015880:	42ab      	cmp	r3, r5
 8015882:	9a04      	ldr	r2, [sp, #16]
 8015884:	bfa8      	it	ge
 8015886:	462b      	movge	r3, r5
 8015888:	eba8 0803 	sub.w	r8, r8, r3
 801588c:	1aed      	subs	r5, r5, r3
 801588e:	1ad3      	subs	r3, r2, r3
 8015890:	9304      	str	r3, [sp, #16]
 8015892:	9b06      	ldr	r3, [sp, #24]
 8015894:	b1fb      	cbz	r3, 80158d6 <_dtoa_r+0x7ce>
 8015896:	9b08      	ldr	r3, [sp, #32]
 8015898:	2b00      	cmp	r3, #0
 801589a:	f000 809f 	beq.w	80159dc <_dtoa_r+0x8d4>
 801589e:	2e00      	cmp	r6, #0
 80158a0:	dd11      	ble.n	80158c6 <_dtoa_r+0x7be>
 80158a2:	4639      	mov	r1, r7
 80158a4:	4632      	mov	r2, r6
 80158a6:	4620      	mov	r0, r4
 80158a8:	f001 f9c8 	bl	8016c3c <__pow5mult>
 80158ac:	465a      	mov	r2, fp
 80158ae:	4601      	mov	r1, r0
 80158b0:	4607      	mov	r7, r0
 80158b2:	4620      	mov	r0, r4
 80158b4:	f001 f91c 	bl	8016af0 <__multiply>
 80158b8:	4659      	mov	r1, fp
 80158ba:	9007      	str	r0, [sp, #28]
 80158bc:	4620      	mov	r0, r4
 80158be:	f000 fffb 	bl	80168b8 <_Bfree>
 80158c2:	9b07      	ldr	r3, [sp, #28]
 80158c4:	469b      	mov	fp, r3
 80158c6:	9b06      	ldr	r3, [sp, #24]
 80158c8:	1b9a      	subs	r2, r3, r6
 80158ca:	d004      	beq.n	80158d6 <_dtoa_r+0x7ce>
 80158cc:	4659      	mov	r1, fp
 80158ce:	4620      	mov	r0, r4
 80158d0:	f001 f9b4 	bl	8016c3c <__pow5mult>
 80158d4:	4683      	mov	fp, r0
 80158d6:	2101      	movs	r1, #1
 80158d8:	4620      	mov	r0, r4
 80158da:	f001 f8f3 	bl	8016ac4 <__i2b>
 80158de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	4606      	mov	r6, r0
 80158e4:	dd7c      	ble.n	80159e0 <_dtoa_r+0x8d8>
 80158e6:	461a      	mov	r2, r3
 80158e8:	4601      	mov	r1, r0
 80158ea:	4620      	mov	r0, r4
 80158ec:	f001 f9a6 	bl	8016c3c <__pow5mult>
 80158f0:	9b05      	ldr	r3, [sp, #20]
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	4606      	mov	r6, r0
 80158f6:	dd76      	ble.n	80159e6 <_dtoa_r+0x8de>
 80158f8:	2300      	movs	r3, #0
 80158fa:	9306      	str	r3, [sp, #24]
 80158fc:	6933      	ldr	r3, [r6, #16]
 80158fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015902:	6918      	ldr	r0, [r3, #16]
 8015904:	f001 f88e 	bl	8016a24 <__hi0bits>
 8015908:	f1c0 0020 	rsb	r0, r0, #32
 801590c:	9b04      	ldr	r3, [sp, #16]
 801590e:	4418      	add	r0, r3
 8015910:	f010 001f 	ands.w	r0, r0, #31
 8015914:	f000 8086 	beq.w	8015a24 <_dtoa_r+0x91c>
 8015918:	f1c0 0320 	rsb	r3, r0, #32
 801591c:	2b04      	cmp	r3, #4
 801591e:	dd7f      	ble.n	8015a20 <_dtoa_r+0x918>
 8015920:	f1c0 001c 	rsb	r0, r0, #28
 8015924:	9b04      	ldr	r3, [sp, #16]
 8015926:	4403      	add	r3, r0
 8015928:	4480      	add	r8, r0
 801592a:	4405      	add	r5, r0
 801592c:	9304      	str	r3, [sp, #16]
 801592e:	f1b8 0f00 	cmp.w	r8, #0
 8015932:	dd05      	ble.n	8015940 <_dtoa_r+0x838>
 8015934:	4659      	mov	r1, fp
 8015936:	4642      	mov	r2, r8
 8015938:	4620      	mov	r0, r4
 801593a:	f001 f9d9 	bl	8016cf0 <__lshift>
 801593e:	4683      	mov	fp, r0
 8015940:	9b04      	ldr	r3, [sp, #16]
 8015942:	2b00      	cmp	r3, #0
 8015944:	dd05      	ble.n	8015952 <_dtoa_r+0x84a>
 8015946:	4631      	mov	r1, r6
 8015948:	461a      	mov	r2, r3
 801594a:	4620      	mov	r0, r4
 801594c:	f001 f9d0 	bl	8016cf0 <__lshift>
 8015950:	4606      	mov	r6, r0
 8015952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015954:	2b00      	cmp	r3, #0
 8015956:	d069      	beq.n	8015a2c <_dtoa_r+0x924>
 8015958:	4631      	mov	r1, r6
 801595a:	4658      	mov	r0, fp
 801595c:	f001 fa34 	bl	8016dc8 <__mcmp>
 8015960:	2800      	cmp	r0, #0
 8015962:	da63      	bge.n	8015a2c <_dtoa_r+0x924>
 8015964:	2300      	movs	r3, #0
 8015966:	4659      	mov	r1, fp
 8015968:	220a      	movs	r2, #10
 801596a:	4620      	mov	r0, r4
 801596c:	f000 ffc6 	bl	80168fc <__multadd>
 8015970:	9b08      	ldr	r3, [sp, #32]
 8015972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015976:	4683      	mov	fp, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	f000 818f 	beq.w	8015c9c <_dtoa_r+0xb94>
 801597e:	4639      	mov	r1, r7
 8015980:	2300      	movs	r3, #0
 8015982:	220a      	movs	r2, #10
 8015984:	4620      	mov	r0, r4
 8015986:	f000 ffb9 	bl	80168fc <__multadd>
 801598a:	f1b9 0f00 	cmp.w	r9, #0
 801598e:	4607      	mov	r7, r0
 8015990:	f300 808e 	bgt.w	8015ab0 <_dtoa_r+0x9a8>
 8015994:	9b05      	ldr	r3, [sp, #20]
 8015996:	2b02      	cmp	r3, #2
 8015998:	dc50      	bgt.n	8015a3c <_dtoa_r+0x934>
 801599a:	e089      	b.n	8015ab0 <_dtoa_r+0x9a8>
 801599c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801599e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80159a2:	e75d      	b.n	8015860 <_dtoa_r+0x758>
 80159a4:	9b01      	ldr	r3, [sp, #4]
 80159a6:	1e5e      	subs	r6, r3, #1
 80159a8:	9b06      	ldr	r3, [sp, #24]
 80159aa:	42b3      	cmp	r3, r6
 80159ac:	bfbf      	itttt	lt
 80159ae:	9b06      	ldrlt	r3, [sp, #24]
 80159b0:	9606      	strlt	r6, [sp, #24]
 80159b2:	1af2      	sublt	r2, r6, r3
 80159b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80159b6:	bfb6      	itet	lt
 80159b8:	189b      	addlt	r3, r3, r2
 80159ba:	1b9e      	subge	r6, r3, r6
 80159bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80159be:	9b01      	ldr	r3, [sp, #4]
 80159c0:	bfb8      	it	lt
 80159c2:	2600      	movlt	r6, #0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	bfb5      	itete	lt
 80159c8:	eba8 0503 	sublt.w	r5, r8, r3
 80159cc:	9b01      	ldrge	r3, [sp, #4]
 80159ce:	2300      	movlt	r3, #0
 80159d0:	4645      	movge	r5, r8
 80159d2:	e747      	b.n	8015864 <_dtoa_r+0x75c>
 80159d4:	9e06      	ldr	r6, [sp, #24]
 80159d6:	9f08      	ldr	r7, [sp, #32]
 80159d8:	4645      	mov	r5, r8
 80159da:	e74c      	b.n	8015876 <_dtoa_r+0x76e>
 80159dc:	9a06      	ldr	r2, [sp, #24]
 80159de:	e775      	b.n	80158cc <_dtoa_r+0x7c4>
 80159e0:	9b05      	ldr	r3, [sp, #20]
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	dc18      	bgt.n	8015a18 <_dtoa_r+0x910>
 80159e6:	9b02      	ldr	r3, [sp, #8]
 80159e8:	b9b3      	cbnz	r3, 8015a18 <_dtoa_r+0x910>
 80159ea:	9b03      	ldr	r3, [sp, #12]
 80159ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159f0:	b9a3      	cbnz	r3, 8015a1c <_dtoa_r+0x914>
 80159f2:	9b03      	ldr	r3, [sp, #12]
 80159f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80159f8:	0d1b      	lsrs	r3, r3, #20
 80159fa:	051b      	lsls	r3, r3, #20
 80159fc:	b12b      	cbz	r3, 8015a0a <_dtoa_r+0x902>
 80159fe:	9b04      	ldr	r3, [sp, #16]
 8015a00:	3301      	adds	r3, #1
 8015a02:	9304      	str	r3, [sp, #16]
 8015a04:	f108 0801 	add.w	r8, r8, #1
 8015a08:	2301      	movs	r3, #1
 8015a0a:	9306      	str	r3, [sp, #24]
 8015a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	f47f af74 	bne.w	80158fc <_dtoa_r+0x7f4>
 8015a14:	2001      	movs	r0, #1
 8015a16:	e779      	b.n	801590c <_dtoa_r+0x804>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	e7f6      	b.n	8015a0a <_dtoa_r+0x902>
 8015a1c:	9b02      	ldr	r3, [sp, #8]
 8015a1e:	e7f4      	b.n	8015a0a <_dtoa_r+0x902>
 8015a20:	d085      	beq.n	801592e <_dtoa_r+0x826>
 8015a22:	4618      	mov	r0, r3
 8015a24:	301c      	adds	r0, #28
 8015a26:	e77d      	b.n	8015924 <_dtoa_r+0x81c>
 8015a28:	40240000 	.word	0x40240000
 8015a2c:	9b01      	ldr	r3, [sp, #4]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	dc38      	bgt.n	8015aa4 <_dtoa_r+0x99c>
 8015a32:	9b05      	ldr	r3, [sp, #20]
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	dd35      	ble.n	8015aa4 <_dtoa_r+0x99c>
 8015a38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015a3c:	f1b9 0f00 	cmp.w	r9, #0
 8015a40:	d10d      	bne.n	8015a5e <_dtoa_r+0x956>
 8015a42:	4631      	mov	r1, r6
 8015a44:	464b      	mov	r3, r9
 8015a46:	2205      	movs	r2, #5
 8015a48:	4620      	mov	r0, r4
 8015a4a:	f000 ff57 	bl	80168fc <__multadd>
 8015a4e:	4601      	mov	r1, r0
 8015a50:	4606      	mov	r6, r0
 8015a52:	4658      	mov	r0, fp
 8015a54:	f001 f9b8 	bl	8016dc8 <__mcmp>
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	f73f adbd 	bgt.w	80155d8 <_dtoa_r+0x4d0>
 8015a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a60:	9d00      	ldr	r5, [sp, #0]
 8015a62:	ea6f 0a03 	mvn.w	sl, r3
 8015a66:	f04f 0800 	mov.w	r8, #0
 8015a6a:	4631      	mov	r1, r6
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	f000 ff23 	bl	80168b8 <_Bfree>
 8015a72:	2f00      	cmp	r7, #0
 8015a74:	f43f aeb4 	beq.w	80157e0 <_dtoa_r+0x6d8>
 8015a78:	f1b8 0f00 	cmp.w	r8, #0
 8015a7c:	d005      	beq.n	8015a8a <_dtoa_r+0x982>
 8015a7e:	45b8      	cmp	r8, r7
 8015a80:	d003      	beq.n	8015a8a <_dtoa_r+0x982>
 8015a82:	4641      	mov	r1, r8
 8015a84:	4620      	mov	r0, r4
 8015a86:	f000 ff17 	bl	80168b8 <_Bfree>
 8015a8a:	4639      	mov	r1, r7
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	f000 ff13 	bl	80168b8 <_Bfree>
 8015a92:	e6a5      	b.n	80157e0 <_dtoa_r+0x6d8>
 8015a94:	2600      	movs	r6, #0
 8015a96:	4637      	mov	r7, r6
 8015a98:	e7e1      	b.n	8015a5e <_dtoa_r+0x956>
 8015a9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015a9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015aa0:	4637      	mov	r7, r6
 8015aa2:	e599      	b.n	80155d8 <_dtoa_r+0x4d0>
 8015aa4:	9b08      	ldr	r3, [sp, #32]
 8015aa6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f000 80fd 	beq.w	8015caa <_dtoa_r+0xba2>
 8015ab0:	2d00      	cmp	r5, #0
 8015ab2:	dd05      	ble.n	8015ac0 <_dtoa_r+0x9b8>
 8015ab4:	4639      	mov	r1, r7
 8015ab6:	462a      	mov	r2, r5
 8015ab8:	4620      	mov	r0, r4
 8015aba:	f001 f919 	bl	8016cf0 <__lshift>
 8015abe:	4607      	mov	r7, r0
 8015ac0:	9b06      	ldr	r3, [sp, #24]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d05c      	beq.n	8015b80 <_dtoa_r+0xa78>
 8015ac6:	6879      	ldr	r1, [r7, #4]
 8015ac8:	4620      	mov	r0, r4
 8015aca:	f000 feb5 	bl	8016838 <_Balloc>
 8015ace:	4605      	mov	r5, r0
 8015ad0:	b928      	cbnz	r0, 8015ade <_dtoa_r+0x9d6>
 8015ad2:	4b80      	ldr	r3, [pc, #512]	; (8015cd4 <_dtoa_r+0xbcc>)
 8015ad4:	4602      	mov	r2, r0
 8015ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015ada:	f7ff bb2e 	b.w	801513a <_dtoa_r+0x32>
 8015ade:	693a      	ldr	r2, [r7, #16]
 8015ae0:	3202      	adds	r2, #2
 8015ae2:	0092      	lsls	r2, r2, #2
 8015ae4:	f107 010c 	add.w	r1, r7, #12
 8015ae8:	300c      	adds	r0, #12
 8015aea:	f7fd fc27 	bl	801333c <memcpy>
 8015aee:	2201      	movs	r2, #1
 8015af0:	4629      	mov	r1, r5
 8015af2:	4620      	mov	r0, r4
 8015af4:	f001 f8fc 	bl	8016cf0 <__lshift>
 8015af8:	9b00      	ldr	r3, [sp, #0]
 8015afa:	3301      	adds	r3, #1
 8015afc:	9301      	str	r3, [sp, #4]
 8015afe:	9b00      	ldr	r3, [sp, #0]
 8015b00:	444b      	add	r3, r9
 8015b02:	9307      	str	r3, [sp, #28]
 8015b04:	9b02      	ldr	r3, [sp, #8]
 8015b06:	f003 0301 	and.w	r3, r3, #1
 8015b0a:	46b8      	mov	r8, r7
 8015b0c:	9306      	str	r3, [sp, #24]
 8015b0e:	4607      	mov	r7, r0
 8015b10:	9b01      	ldr	r3, [sp, #4]
 8015b12:	4631      	mov	r1, r6
 8015b14:	3b01      	subs	r3, #1
 8015b16:	4658      	mov	r0, fp
 8015b18:	9302      	str	r3, [sp, #8]
 8015b1a:	f7ff fa67 	bl	8014fec <quorem>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	3330      	adds	r3, #48	; 0x30
 8015b22:	9004      	str	r0, [sp, #16]
 8015b24:	4641      	mov	r1, r8
 8015b26:	4658      	mov	r0, fp
 8015b28:	9308      	str	r3, [sp, #32]
 8015b2a:	f001 f94d 	bl	8016dc8 <__mcmp>
 8015b2e:	463a      	mov	r2, r7
 8015b30:	4681      	mov	r9, r0
 8015b32:	4631      	mov	r1, r6
 8015b34:	4620      	mov	r0, r4
 8015b36:	f001 f963 	bl	8016e00 <__mdiff>
 8015b3a:	68c2      	ldr	r2, [r0, #12]
 8015b3c:	9b08      	ldr	r3, [sp, #32]
 8015b3e:	4605      	mov	r5, r0
 8015b40:	bb02      	cbnz	r2, 8015b84 <_dtoa_r+0xa7c>
 8015b42:	4601      	mov	r1, r0
 8015b44:	4658      	mov	r0, fp
 8015b46:	f001 f93f 	bl	8016dc8 <__mcmp>
 8015b4a:	9b08      	ldr	r3, [sp, #32]
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	4629      	mov	r1, r5
 8015b50:	4620      	mov	r0, r4
 8015b52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015b56:	f000 feaf 	bl	80168b8 <_Bfree>
 8015b5a:	9b05      	ldr	r3, [sp, #20]
 8015b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b5e:	9d01      	ldr	r5, [sp, #4]
 8015b60:	ea43 0102 	orr.w	r1, r3, r2
 8015b64:	9b06      	ldr	r3, [sp, #24]
 8015b66:	430b      	orrs	r3, r1
 8015b68:	9b08      	ldr	r3, [sp, #32]
 8015b6a:	d10d      	bne.n	8015b88 <_dtoa_r+0xa80>
 8015b6c:	2b39      	cmp	r3, #57	; 0x39
 8015b6e:	d029      	beq.n	8015bc4 <_dtoa_r+0xabc>
 8015b70:	f1b9 0f00 	cmp.w	r9, #0
 8015b74:	dd01      	ble.n	8015b7a <_dtoa_r+0xa72>
 8015b76:	9b04      	ldr	r3, [sp, #16]
 8015b78:	3331      	adds	r3, #49	; 0x31
 8015b7a:	9a02      	ldr	r2, [sp, #8]
 8015b7c:	7013      	strb	r3, [r2, #0]
 8015b7e:	e774      	b.n	8015a6a <_dtoa_r+0x962>
 8015b80:	4638      	mov	r0, r7
 8015b82:	e7b9      	b.n	8015af8 <_dtoa_r+0x9f0>
 8015b84:	2201      	movs	r2, #1
 8015b86:	e7e2      	b.n	8015b4e <_dtoa_r+0xa46>
 8015b88:	f1b9 0f00 	cmp.w	r9, #0
 8015b8c:	db06      	blt.n	8015b9c <_dtoa_r+0xa94>
 8015b8e:	9905      	ldr	r1, [sp, #20]
 8015b90:	ea41 0909 	orr.w	r9, r1, r9
 8015b94:	9906      	ldr	r1, [sp, #24]
 8015b96:	ea59 0101 	orrs.w	r1, r9, r1
 8015b9a:	d120      	bne.n	8015bde <_dtoa_r+0xad6>
 8015b9c:	2a00      	cmp	r2, #0
 8015b9e:	ddec      	ble.n	8015b7a <_dtoa_r+0xa72>
 8015ba0:	4659      	mov	r1, fp
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	9301      	str	r3, [sp, #4]
 8015ba8:	f001 f8a2 	bl	8016cf0 <__lshift>
 8015bac:	4631      	mov	r1, r6
 8015bae:	4683      	mov	fp, r0
 8015bb0:	f001 f90a 	bl	8016dc8 <__mcmp>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	9b01      	ldr	r3, [sp, #4]
 8015bb8:	dc02      	bgt.n	8015bc0 <_dtoa_r+0xab8>
 8015bba:	d1de      	bne.n	8015b7a <_dtoa_r+0xa72>
 8015bbc:	07da      	lsls	r2, r3, #31
 8015bbe:	d5dc      	bpl.n	8015b7a <_dtoa_r+0xa72>
 8015bc0:	2b39      	cmp	r3, #57	; 0x39
 8015bc2:	d1d8      	bne.n	8015b76 <_dtoa_r+0xa6e>
 8015bc4:	9a02      	ldr	r2, [sp, #8]
 8015bc6:	2339      	movs	r3, #57	; 0x39
 8015bc8:	7013      	strb	r3, [r2, #0]
 8015bca:	462b      	mov	r3, r5
 8015bcc:	461d      	mov	r5, r3
 8015bce:	3b01      	subs	r3, #1
 8015bd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015bd4:	2a39      	cmp	r2, #57	; 0x39
 8015bd6:	d050      	beq.n	8015c7a <_dtoa_r+0xb72>
 8015bd8:	3201      	adds	r2, #1
 8015bda:	701a      	strb	r2, [r3, #0]
 8015bdc:	e745      	b.n	8015a6a <_dtoa_r+0x962>
 8015bde:	2a00      	cmp	r2, #0
 8015be0:	dd03      	ble.n	8015bea <_dtoa_r+0xae2>
 8015be2:	2b39      	cmp	r3, #57	; 0x39
 8015be4:	d0ee      	beq.n	8015bc4 <_dtoa_r+0xabc>
 8015be6:	3301      	adds	r3, #1
 8015be8:	e7c7      	b.n	8015b7a <_dtoa_r+0xa72>
 8015bea:	9a01      	ldr	r2, [sp, #4]
 8015bec:	9907      	ldr	r1, [sp, #28]
 8015bee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015bf2:	428a      	cmp	r2, r1
 8015bf4:	d02a      	beq.n	8015c4c <_dtoa_r+0xb44>
 8015bf6:	4659      	mov	r1, fp
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	220a      	movs	r2, #10
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	f000 fe7d 	bl	80168fc <__multadd>
 8015c02:	45b8      	cmp	r8, r7
 8015c04:	4683      	mov	fp, r0
 8015c06:	f04f 0300 	mov.w	r3, #0
 8015c0a:	f04f 020a 	mov.w	r2, #10
 8015c0e:	4641      	mov	r1, r8
 8015c10:	4620      	mov	r0, r4
 8015c12:	d107      	bne.n	8015c24 <_dtoa_r+0xb1c>
 8015c14:	f000 fe72 	bl	80168fc <__multadd>
 8015c18:	4680      	mov	r8, r0
 8015c1a:	4607      	mov	r7, r0
 8015c1c:	9b01      	ldr	r3, [sp, #4]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	9301      	str	r3, [sp, #4]
 8015c22:	e775      	b.n	8015b10 <_dtoa_r+0xa08>
 8015c24:	f000 fe6a 	bl	80168fc <__multadd>
 8015c28:	4639      	mov	r1, r7
 8015c2a:	4680      	mov	r8, r0
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	220a      	movs	r2, #10
 8015c30:	4620      	mov	r0, r4
 8015c32:	f000 fe63 	bl	80168fc <__multadd>
 8015c36:	4607      	mov	r7, r0
 8015c38:	e7f0      	b.n	8015c1c <_dtoa_r+0xb14>
 8015c3a:	f1b9 0f00 	cmp.w	r9, #0
 8015c3e:	9a00      	ldr	r2, [sp, #0]
 8015c40:	bfcc      	ite	gt
 8015c42:	464d      	movgt	r5, r9
 8015c44:	2501      	movle	r5, #1
 8015c46:	4415      	add	r5, r2
 8015c48:	f04f 0800 	mov.w	r8, #0
 8015c4c:	4659      	mov	r1, fp
 8015c4e:	2201      	movs	r2, #1
 8015c50:	4620      	mov	r0, r4
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	f001 f84c 	bl	8016cf0 <__lshift>
 8015c58:	4631      	mov	r1, r6
 8015c5a:	4683      	mov	fp, r0
 8015c5c:	f001 f8b4 	bl	8016dc8 <__mcmp>
 8015c60:	2800      	cmp	r0, #0
 8015c62:	dcb2      	bgt.n	8015bca <_dtoa_r+0xac2>
 8015c64:	d102      	bne.n	8015c6c <_dtoa_r+0xb64>
 8015c66:	9b01      	ldr	r3, [sp, #4]
 8015c68:	07db      	lsls	r3, r3, #31
 8015c6a:	d4ae      	bmi.n	8015bca <_dtoa_r+0xac2>
 8015c6c:	462b      	mov	r3, r5
 8015c6e:	461d      	mov	r5, r3
 8015c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c74:	2a30      	cmp	r2, #48	; 0x30
 8015c76:	d0fa      	beq.n	8015c6e <_dtoa_r+0xb66>
 8015c78:	e6f7      	b.n	8015a6a <_dtoa_r+0x962>
 8015c7a:	9a00      	ldr	r2, [sp, #0]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d1a5      	bne.n	8015bcc <_dtoa_r+0xac4>
 8015c80:	f10a 0a01 	add.w	sl, sl, #1
 8015c84:	2331      	movs	r3, #49	; 0x31
 8015c86:	e779      	b.n	8015b7c <_dtoa_r+0xa74>
 8015c88:	4b13      	ldr	r3, [pc, #76]	; (8015cd8 <_dtoa_r+0xbd0>)
 8015c8a:	f7ff baaf 	b.w	80151ec <_dtoa_r+0xe4>
 8015c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f47f aa86 	bne.w	80151a2 <_dtoa_r+0x9a>
 8015c96:	4b11      	ldr	r3, [pc, #68]	; (8015cdc <_dtoa_r+0xbd4>)
 8015c98:	f7ff baa8 	b.w	80151ec <_dtoa_r+0xe4>
 8015c9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ca0:	dc03      	bgt.n	8015caa <_dtoa_r+0xba2>
 8015ca2:	9b05      	ldr	r3, [sp, #20]
 8015ca4:	2b02      	cmp	r3, #2
 8015ca6:	f73f aec9 	bgt.w	8015a3c <_dtoa_r+0x934>
 8015caa:	9d00      	ldr	r5, [sp, #0]
 8015cac:	4631      	mov	r1, r6
 8015cae:	4658      	mov	r0, fp
 8015cb0:	f7ff f99c 	bl	8014fec <quorem>
 8015cb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8015cbc:	9a00      	ldr	r2, [sp, #0]
 8015cbe:	1aaa      	subs	r2, r5, r2
 8015cc0:	4591      	cmp	r9, r2
 8015cc2:	ddba      	ble.n	8015c3a <_dtoa_r+0xb32>
 8015cc4:	4659      	mov	r1, fp
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	220a      	movs	r2, #10
 8015cca:	4620      	mov	r0, r4
 8015ccc:	f000 fe16 	bl	80168fc <__multadd>
 8015cd0:	4683      	mov	fp, r0
 8015cd2:	e7eb      	b.n	8015cac <_dtoa_r+0xba4>
 8015cd4:	0801ac44 	.word	0x0801ac44
 8015cd8:	0801aa40 	.word	0x0801aa40
 8015cdc:	0801abc1 	.word	0x0801abc1

08015ce0 <__sflush_r>:
 8015ce0:	898a      	ldrh	r2, [r1, #12]
 8015ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce6:	4605      	mov	r5, r0
 8015ce8:	0710      	lsls	r0, r2, #28
 8015cea:	460c      	mov	r4, r1
 8015cec:	d458      	bmi.n	8015da0 <__sflush_r+0xc0>
 8015cee:	684b      	ldr	r3, [r1, #4]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	dc05      	bgt.n	8015d00 <__sflush_r+0x20>
 8015cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	dc02      	bgt.n	8015d00 <__sflush_r+0x20>
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d02:	2e00      	cmp	r6, #0
 8015d04:	d0f9      	beq.n	8015cfa <__sflush_r+0x1a>
 8015d06:	2300      	movs	r3, #0
 8015d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d0c:	682f      	ldr	r7, [r5, #0]
 8015d0e:	602b      	str	r3, [r5, #0]
 8015d10:	d032      	beq.n	8015d78 <__sflush_r+0x98>
 8015d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d14:	89a3      	ldrh	r3, [r4, #12]
 8015d16:	075a      	lsls	r2, r3, #29
 8015d18:	d505      	bpl.n	8015d26 <__sflush_r+0x46>
 8015d1a:	6863      	ldr	r3, [r4, #4]
 8015d1c:	1ac0      	subs	r0, r0, r3
 8015d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d20:	b10b      	cbz	r3, 8015d26 <__sflush_r+0x46>
 8015d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d24:	1ac0      	subs	r0, r0, r3
 8015d26:	2300      	movs	r3, #0
 8015d28:	4602      	mov	r2, r0
 8015d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d2c:	6a21      	ldr	r1, [r4, #32]
 8015d2e:	4628      	mov	r0, r5
 8015d30:	47b0      	blx	r6
 8015d32:	1c43      	adds	r3, r0, #1
 8015d34:	89a3      	ldrh	r3, [r4, #12]
 8015d36:	d106      	bne.n	8015d46 <__sflush_r+0x66>
 8015d38:	6829      	ldr	r1, [r5, #0]
 8015d3a:	291d      	cmp	r1, #29
 8015d3c:	d82c      	bhi.n	8015d98 <__sflush_r+0xb8>
 8015d3e:	4a2a      	ldr	r2, [pc, #168]	; (8015de8 <__sflush_r+0x108>)
 8015d40:	40ca      	lsrs	r2, r1
 8015d42:	07d6      	lsls	r6, r2, #31
 8015d44:	d528      	bpl.n	8015d98 <__sflush_r+0xb8>
 8015d46:	2200      	movs	r2, #0
 8015d48:	6062      	str	r2, [r4, #4]
 8015d4a:	04d9      	lsls	r1, r3, #19
 8015d4c:	6922      	ldr	r2, [r4, #16]
 8015d4e:	6022      	str	r2, [r4, #0]
 8015d50:	d504      	bpl.n	8015d5c <__sflush_r+0x7c>
 8015d52:	1c42      	adds	r2, r0, #1
 8015d54:	d101      	bne.n	8015d5a <__sflush_r+0x7a>
 8015d56:	682b      	ldr	r3, [r5, #0]
 8015d58:	b903      	cbnz	r3, 8015d5c <__sflush_r+0x7c>
 8015d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8015d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d5e:	602f      	str	r7, [r5, #0]
 8015d60:	2900      	cmp	r1, #0
 8015d62:	d0ca      	beq.n	8015cfa <__sflush_r+0x1a>
 8015d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d68:	4299      	cmp	r1, r3
 8015d6a:	d002      	beq.n	8015d72 <__sflush_r+0x92>
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	f001 fa2d 	bl	80171cc <_free_r>
 8015d72:	2000      	movs	r0, #0
 8015d74:	6360      	str	r0, [r4, #52]	; 0x34
 8015d76:	e7c1      	b.n	8015cfc <__sflush_r+0x1c>
 8015d78:	6a21      	ldr	r1, [r4, #32]
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	47b0      	blx	r6
 8015d80:	1c41      	adds	r1, r0, #1
 8015d82:	d1c7      	bne.n	8015d14 <__sflush_r+0x34>
 8015d84:	682b      	ldr	r3, [r5, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d0c4      	beq.n	8015d14 <__sflush_r+0x34>
 8015d8a:	2b1d      	cmp	r3, #29
 8015d8c:	d001      	beq.n	8015d92 <__sflush_r+0xb2>
 8015d8e:	2b16      	cmp	r3, #22
 8015d90:	d101      	bne.n	8015d96 <__sflush_r+0xb6>
 8015d92:	602f      	str	r7, [r5, #0]
 8015d94:	e7b1      	b.n	8015cfa <__sflush_r+0x1a>
 8015d96:	89a3      	ldrh	r3, [r4, #12]
 8015d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d9c:	81a3      	strh	r3, [r4, #12]
 8015d9e:	e7ad      	b.n	8015cfc <__sflush_r+0x1c>
 8015da0:	690f      	ldr	r7, [r1, #16]
 8015da2:	2f00      	cmp	r7, #0
 8015da4:	d0a9      	beq.n	8015cfa <__sflush_r+0x1a>
 8015da6:	0793      	lsls	r3, r2, #30
 8015da8:	680e      	ldr	r6, [r1, #0]
 8015daa:	bf08      	it	eq
 8015dac:	694b      	ldreq	r3, [r1, #20]
 8015dae:	600f      	str	r7, [r1, #0]
 8015db0:	bf18      	it	ne
 8015db2:	2300      	movne	r3, #0
 8015db4:	eba6 0807 	sub.w	r8, r6, r7
 8015db8:	608b      	str	r3, [r1, #8]
 8015dba:	f1b8 0f00 	cmp.w	r8, #0
 8015dbe:	dd9c      	ble.n	8015cfa <__sflush_r+0x1a>
 8015dc0:	6a21      	ldr	r1, [r4, #32]
 8015dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015dc4:	4643      	mov	r3, r8
 8015dc6:	463a      	mov	r2, r7
 8015dc8:	4628      	mov	r0, r5
 8015dca:	47b0      	blx	r6
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	dc06      	bgt.n	8015dde <__sflush_r+0xfe>
 8015dd0:	89a3      	ldrh	r3, [r4, #12]
 8015dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dd6:	81a3      	strh	r3, [r4, #12]
 8015dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ddc:	e78e      	b.n	8015cfc <__sflush_r+0x1c>
 8015dde:	4407      	add	r7, r0
 8015de0:	eba8 0800 	sub.w	r8, r8, r0
 8015de4:	e7e9      	b.n	8015dba <__sflush_r+0xda>
 8015de6:	bf00      	nop
 8015de8:	20400001 	.word	0x20400001

08015dec <_fflush_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	690b      	ldr	r3, [r1, #16]
 8015df0:	4605      	mov	r5, r0
 8015df2:	460c      	mov	r4, r1
 8015df4:	b913      	cbnz	r3, 8015dfc <_fflush_r+0x10>
 8015df6:	2500      	movs	r5, #0
 8015df8:	4628      	mov	r0, r5
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
 8015dfc:	b118      	cbz	r0, 8015e06 <_fflush_r+0x1a>
 8015dfe:	6983      	ldr	r3, [r0, #24]
 8015e00:	b90b      	cbnz	r3, 8015e06 <_fflush_r+0x1a>
 8015e02:	f000 f887 	bl	8015f14 <__sinit>
 8015e06:	4b14      	ldr	r3, [pc, #80]	; (8015e58 <_fflush_r+0x6c>)
 8015e08:	429c      	cmp	r4, r3
 8015e0a:	d11b      	bne.n	8015e44 <_fflush_r+0x58>
 8015e0c:	686c      	ldr	r4, [r5, #4]
 8015e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d0ef      	beq.n	8015df6 <_fflush_r+0xa>
 8015e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e18:	07d0      	lsls	r0, r2, #31
 8015e1a:	d404      	bmi.n	8015e26 <_fflush_r+0x3a>
 8015e1c:	0599      	lsls	r1, r3, #22
 8015e1e:	d402      	bmi.n	8015e26 <_fflush_r+0x3a>
 8015e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e22:	f000 fc88 	bl	8016736 <__retarget_lock_acquire_recursive>
 8015e26:	4628      	mov	r0, r5
 8015e28:	4621      	mov	r1, r4
 8015e2a:	f7ff ff59 	bl	8015ce0 <__sflush_r>
 8015e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e30:	07da      	lsls	r2, r3, #31
 8015e32:	4605      	mov	r5, r0
 8015e34:	d4e0      	bmi.n	8015df8 <_fflush_r+0xc>
 8015e36:	89a3      	ldrh	r3, [r4, #12]
 8015e38:	059b      	lsls	r3, r3, #22
 8015e3a:	d4dd      	bmi.n	8015df8 <_fflush_r+0xc>
 8015e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e3e:	f000 fc7b 	bl	8016738 <__retarget_lock_release_recursive>
 8015e42:	e7d9      	b.n	8015df8 <_fflush_r+0xc>
 8015e44:	4b05      	ldr	r3, [pc, #20]	; (8015e5c <_fflush_r+0x70>)
 8015e46:	429c      	cmp	r4, r3
 8015e48:	d101      	bne.n	8015e4e <_fflush_r+0x62>
 8015e4a:	68ac      	ldr	r4, [r5, #8]
 8015e4c:	e7df      	b.n	8015e0e <_fflush_r+0x22>
 8015e4e:	4b04      	ldr	r3, [pc, #16]	; (8015e60 <_fflush_r+0x74>)
 8015e50:	429c      	cmp	r4, r3
 8015e52:	bf08      	it	eq
 8015e54:	68ec      	ldreq	r4, [r5, #12]
 8015e56:	e7da      	b.n	8015e0e <_fflush_r+0x22>
 8015e58:	0801ac78 	.word	0x0801ac78
 8015e5c:	0801ac98 	.word	0x0801ac98
 8015e60:	0801ac58 	.word	0x0801ac58

08015e64 <std>:
 8015e64:	2300      	movs	r3, #0
 8015e66:	b510      	push	{r4, lr}
 8015e68:	4604      	mov	r4, r0
 8015e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8015e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e72:	6083      	str	r3, [r0, #8]
 8015e74:	8181      	strh	r1, [r0, #12]
 8015e76:	6643      	str	r3, [r0, #100]	; 0x64
 8015e78:	81c2      	strh	r2, [r0, #14]
 8015e7a:	6183      	str	r3, [r0, #24]
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	2208      	movs	r2, #8
 8015e80:	305c      	adds	r0, #92	; 0x5c
 8015e82:	f7fd fa69 	bl	8013358 <memset>
 8015e86:	4b05      	ldr	r3, [pc, #20]	; (8015e9c <std+0x38>)
 8015e88:	6263      	str	r3, [r4, #36]	; 0x24
 8015e8a:	4b05      	ldr	r3, [pc, #20]	; (8015ea0 <std+0x3c>)
 8015e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e8e:	4b05      	ldr	r3, [pc, #20]	; (8015ea4 <std+0x40>)
 8015e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e92:	4b05      	ldr	r3, [pc, #20]	; (8015ea8 <std+0x44>)
 8015e94:	6224      	str	r4, [r4, #32]
 8015e96:	6323      	str	r3, [r4, #48]	; 0x30
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	08017609 	.word	0x08017609
 8015ea0:	0801762b 	.word	0x0801762b
 8015ea4:	08017663 	.word	0x08017663
 8015ea8:	08017687 	.word	0x08017687

08015eac <_cleanup_r>:
 8015eac:	4901      	ldr	r1, [pc, #4]	; (8015eb4 <_cleanup_r+0x8>)
 8015eae:	f000 b8af 	b.w	8016010 <_fwalk_reent>
 8015eb2:	bf00      	nop
 8015eb4:	08015ded 	.word	0x08015ded

08015eb8 <__sfmoreglue>:
 8015eb8:	b570      	push	{r4, r5, r6, lr}
 8015eba:	1e4a      	subs	r2, r1, #1
 8015ebc:	2568      	movs	r5, #104	; 0x68
 8015ebe:	4355      	muls	r5, r2
 8015ec0:	460e      	mov	r6, r1
 8015ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015ec6:	f001 f9d1 	bl	801726c <_malloc_r>
 8015eca:	4604      	mov	r4, r0
 8015ecc:	b140      	cbz	r0, 8015ee0 <__sfmoreglue+0x28>
 8015ece:	2100      	movs	r1, #0
 8015ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8015ed4:	300c      	adds	r0, #12
 8015ed6:	60a0      	str	r0, [r4, #8]
 8015ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015edc:	f7fd fa3c 	bl	8013358 <memset>
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	bd70      	pop	{r4, r5, r6, pc}

08015ee4 <__sfp_lock_acquire>:
 8015ee4:	4801      	ldr	r0, [pc, #4]	; (8015eec <__sfp_lock_acquire+0x8>)
 8015ee6:	f000 bc26 	b.w	8016736 <__retarget_lock_acquire_recursive>
 8015eea:	bf00      	nop
 8015eec:	200035c0 	.word	0x200035c0

08015ef0 <__sfp_lock_release>:
 8015ef0:	4801      	ldr	r0, [pc, #4]	; (8015ef8 <__sfp_lock_release+0x8>)
 8015ef2:	f000 bc21 	b.w	8016738 <__retarget_lock_release_recursive>
 8015ef6:	bf00      	nop
 8015ef8:	200035c0 	.word	0x200035c0

08015efc <__sinit_lock_acquire>:
 8015efc:	4801      	ldr	r0, [pc, #4]	; (8015f04 <__sinit_lock_acquire+0x8>)
 8015efe:	f000 bc1a 	b.w	8016736 <__retarget_lock_acquire_recursive>
 8015f02:	bf00      	nop
 8015f04:	200035bb 	.word	0x200035bb

08015f08 <__sinit_lock_release>:
 8015f08:	4801      	ldr	r0, [pc, #4]	; (8015f10 <__sinit_lock_release+0x8>)
 8015f0a:	f000 bc15 	b.w	8016738 <__retarget_lock_release_recursive>
 8015f0e:	bf00      	nop
 8015f10:	200035bb 	.word	0x200035bb

08015f14 <__sinit>:
 8015f14:	b510      	push	{r4, lr}
 8015f16:	4604      	mov	r4, r0
 8015f18:	f7ff fff0 	bl	8015efc <__sinit_lock_acquire>
 8015f1c:	69a3      	ldr	r3, [r4, #24]
 8015f1e:	b11b      	cbz	r3, 8015f28 <__sinit+0x14>
 8015f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f24:	f7ff bff0 	b.w	8015f08 <__sinit_lock_release>
 8015f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8015f2e:	4b13      	ldr	r3, [pc, #76]	; (8015f7c <__sinit+0x68>)
 8015f30:	4a13      	ldr	r2, [pc, #76]	; (8015f80 <__sinit+0x6c>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8015f36:	42a3      	cmp	r3, r4
 8015f38:	bf04      	itt	eq
 8015f3a:	2301      	moveq	r3, #1
 8015f3c:	61a3      	streq	r3, [r4, #24]
 8015f3e:	4620      	mov	r0, r4
 8015f40:	f000 f820 	bl	8015f84 <__sfp>
 8015f44:	6060      	str	r0, [r4, #4]
 8015f46:	4620      	mov	r0, r4
 8015f48:	f000 f81c 	bl	8015f84 <__sfp>
 8015f4c:	60a0      	str	r0, [r4, #8]
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f000 f818 	bl	8015f84 <__sfp>
 8015f54:	2200      	movs	r2, #0
 8015f56:	60e0      	str	r0, [r4, #12]
 8015f58:	2104      	movs	r1, #4
 8015f5a:	6860      	ldr	r0, [r4, #4]
 8015f5c:	f7ff ff82 	bl	8015e64 <std>
 8015f60:	68a0      	ldr	r0, [r4, #8]
 8015f62:	2201      	movs	r2, #1
 8015f64:	2109      	movs	r1, #9
 8015f66:	f7ff ff7d 	bl	8015e64 <std>
 8015f6a:	68e0      	ldr	r0, [r4, #12]
 8015f6c:	2202      	movs	r2, #2
 8015f6e:	2112      	movs	r1, #18
 8015f70:	f7ff ff78 	bl	8015e64 <std>
 8015f74:	2301      	movs	r3, #1
 8015f76:	61a3      	str	r3, [r4, #24]
 8015f78:	e7d2      	b.n	8015f20 <__sinit+0xc>
 8015f7a:	bf00      	nop
 8015f7c:	0801aa2c 	.word	0x0801aa2c
 8015f80:	08015ead 	.word	0x08015ead

08015f84 <__sfp>:
 8015f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f86:	4607      	mov	r7, r0
 8015f88:	f7ff ffac 	bl	8015ee4 <__sfp_lock_acquire>
 8015f8c:	4b1e      	ldr	r3, [pc, #120]	; (8016008 <__sfp+0x84>)
 8015f8e:	681e      	ldr	r6, [r3, #0]
 8015f90:	69b3      	ldr	r3, [r6, #24]
 8015f92:	b913      	cbnz	r3, 8015f9a <__sfp+0x16>
 8015f94:	4630      	mov	r0, r6
 8015f96:	f7ff ffbd 	bl	8015f14 <__sinit>
 8015f9a:	3648      	adds	r6, #72	; 0x48
 8015f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015fa0:	3b01      	subs	r3, #1
 8015fa2:	d503      	bpl.n	8015fac <__sfp+0x28>
 8015fa4:	6833      	ldr	r3, [r6, #0]
 8015fa6:	b30b      	cbz	r3, 8015fec <__sfp+0x68>
 8015fa8:	6836      	ldr	r6, [r6, #0]
 8015faa:	e7f7      	b.n	8015f9c <__sfp+0x18>
 8015fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015fb0:	b9d5      	cbnz	r5, 8015fe8 <__sfp+0x64>
 8015fb2:	4b16      	ldr	r3, [pc, #88]	; (801600c <__sfp+0x88>)
 8015fb4:	60e3      	str	r3, [r4, #12]
 8015fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015fba:	6665      	str	r5, [r4, #100]	; 0x64
 8015fbc:	f000 fbba 	bl	8016734 <__retarget_lock_init_recursive>
 8015fc0:	f7ff ff96 	bl	8015ef0 <__sfp_lock_release>
 8015fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015fcc:	6025      	str	r5, [r4, #0]
 8015fce:	61a5      	str	r5, [r4, #24]
 8015fd0:	2208      	movs	r2, #8
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015fd8:	f7fd f9be 	bl	8013358 <memset>
 8015fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fe8:	3468      	adds	r4, #104	; 0x68
 8015fea:	e7d9      	b.n	8015fa0 <__sfp+0x1c>
 8015fec:	2104      	movs	r1, #4
 8015fee:	4638      	mov	r0, r7
 8015ff0:	f7ff ff62 	bl	8015eb8 <__sfmoreglue>
 8015ff4:	4604      	mov	r4, r0
 8015ff6:	6030      	str	r0, [r6, #0]
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d1d5      	bne.n	8015fa8 <__sfp+0x24>
 8015ffc:	f7ff ff78 	bl	8015ef0 <__sfp_lock_release>
 8016000:	230c      	movs	r3, #12
 8016002:	603b      	str	r3, [r7, #0]
 8016004:	e7ee      	b.n	8015fe4 <__sfp+0x60>
 8016006:	bf00      	nop
 8016008:	0801aa2c 	.word	0x0801aa2c
 801600c:	ffff0001 	.word	0xffff0001

08016010 <_fwalk_reent>:
 8016010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016014:	4606      	mov	r6, r0
 8016016:	4688      	mov	r8, r1
 8016018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801601c:	2700      	movs	r7, #0
 801601e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016022:	f1b9 0901 	subs.w	r9, r9, #1
 8016026:	d505      	bpl.n	8016034 <_fwalk_reent+0x24>
 8016028:	6824      	ldr	r4, [r4, #0]
 801602a:	2c00      	cmp	r4, #0
 801602c:	d1f7      	bne.n	801601e <_fwalk_reent+0xe>
 801602e:	4638      	mov	r0, r7
 8016030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016034:	89ab      	ldrh	r3, [r5, #12]
 8016036:	2b01      	cmp	r3, #1
 8016038:	d907      	bls.n	801604a <_fwalk_reent+0x3a>
 801603a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801603e:	3301      	adds	r3, #1
 8016040:	d003      	beq.n	801604a <_fwalk_reent+0x3a>
 8016042:	4629      	mov	r1, r5
 8016044:	4630      	mov	r0, r6
 8016046:	47c0      	blx	r8
 8016048:	4307      	orrs	r7, r0
 801604a:	3568      	adds	r5, #104	; 0x68
 801604c:	e7e9      	b.n	8016022 <_fwalk_reent+0x12>

0801604e <rshift>:
 801604e:	6903      	ldr	r3, [r0, #16]
 8016050:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016058:	ea4f 1261 	mov.w	r2, r1, asr #5
 801605c:	f100 0414 	add.w	r4, r0, #20
 8016060:	dd45      	ble.n	80160ee <rshift+0xa0>
 8016062:	f011 011f 	ands.w	r1, r1, #31
 8016066:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801606a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801606e:	d10c      	bne.n	801608a <rshift+0x3c>
 8016070:	f100 0710 	add.w	r7, r0, #16
 8016074:	4629      	mov	r1, r5
 8016076:	42b1      	cmp	r1, r6
 8016078:	d334      	bcc.n	80160e4 <rshift+0x96>
 801607a:	1a9b      	subs	r3, r3, r2
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	1eea      	subs	r2, r5, #3
 8016080:	4296      	cmp	r6, r2
 8016082:	bf38      	it	cc
 8016084:	2300      	movcc	r3, #0
 8016086:	4423      	add	r3, r4
 8016088:	e015      	b.n	80160b6 <rshift+0x68>
 801608a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801608e:	f1c1 0820 	rsb	r8, r1, #32
 8016092:	40cf      	lsrs	r7, r1
 8016094:	f105 0e04 	add.w	lr, r5, #4
 8016098:	46a1      	mov	r9, r4
 801609a:	4576      	cmp	r6, lr
 801609c:	46f4      	mov	ip, lr
 801609e:	d815      	bhi.n	80160cc <rshift+0x7e>
 80160a0:	1a9b      	subs	r3, r3, r2
 80160a2:	009a      	lsls	r2, r3, #2
 80160a4:	3a04      	subs	r2, #4
 80160a6:	3501      	adds	r5, #1
 80160a8:	42ae      	cmp	r6, r5
 80160aa:	bf38      	it	cc
 80160ac:	2200      	movcc	r2, #0
 80160ae:	18a3      	adds	r3, r4, r2
 80160b0:	50a7      	str	r7, [r4, r2]
 80160b2:	b107      	cbz	r7, 80160b6 <rshift+0x68>
 80160b4:	3304      	adds	r3, #4
 80160b6:	1b1a      	subs	r2, r3, r4
 80160b8:	42a3      	cmp	r3, r4
 80160ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80160be:	bf08      	it	eq
 80160c0:	2300      	moveq	r3, #0
 80160c2:	6102      	str	r2, [r0, #16]
 80160c4:	bf08      	it	eq
 80160c6:	6143      	streq	r3, [r0, #20]
 80160c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160cc:	f8dc c000 	ldr.w	ip, [ip]
 80160d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80160d4:	ea4c 0707 	orr.w	r7, ip, r7
 80160d8:	f849 7b04 	str.w	r7, [r9], #4
 80160dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80160e0:	40cf      	lsrs	r7, r1
 80160e2:	e7da      	b.n	801609a <rshift+0x4c>
 80160e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80160e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80160ec:	e7c3      	b.n	8016076 <rshift+0x28>
 80160ee:	4623      	mov	r3, r4
 80160f0:	e7e1      	b.n	80160b6 <rshift+0x68>

080160f2 <__hexdig_fun>:
 80160f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80160f6:	2b09      	cmp	r3, #9
 80160f8:	d802      	bhi.n	8016100 <__hexdig_fun+0xe>
 80160fa:	3820      	subs	r0, #32
 80160fc:	b2c0      	uxtb	r0, r0
 80160fe:	4770      	bx	lr
 8016100:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016104:	2b05      	cmp	r3, #5
 8016106:	d801      	bhi.n	801610c <__hexdig_fun+0x1a>
 8016108:	3847      	subs	r0, #71	; 0x47
 801610a:	e7f7      	b.n	80160fc <__hexdig_fun+0xa>
 801610c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016110:	2b05      	cmp	r3, #5
 8016112:	d801      	bhi.n	8016118 <__hexdig_fun+0x26>
 8016114:	3827      	subs	r0, #39	; 0x27
 8016116:	e7f1      	b.n	80160fc <__hexdig_fun+0xa>
 8016118:	2000      	movs	r0, #0
 801611a:	4770      	bx	lr

0801611c <__gethex>:
 801611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016120:	ed2d 8b02 	vpush	{d8}
 8016124:	b089      	sub	sp, #36	; 0x24
 8016126:	ee08 0a10 	vmov	s16, r0
 801612a:	9304      	str	r3, [sp, #16]
 801612c:	4bbc      	ldr	r3, [pc, #752]	; (8016420 <__gethex+0x304>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	9301      	str	r3, [sp, #4]
 8016132:	4618      	mov	r0, r3
 8016134:	468b      	mov	fp, r1
 8016136:	4690      	mov	r8, r2
 8016138:	f7ea f84a 	bl	80001d0 <strlen>
 801613c:	9b01      	ldr	r3, [sp, #4]
 801613e:	f8db 2000 	ldr.w	r2, [fp]
 8016142:	4403      	add	r3, r0
 8016144:	4682      	mov	sl, r0
 8016146:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801614a:	9305      	str	r3, [sp, #20]
 801614c:	1c93      	adds	r3, r2, #2
 801614e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016152:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016156:	32fe      	adds	r2, #254	; 0xfe
 8016158:	18d1      	adds	r1, r2, r3
 801615a:	461f      	mov	r7, r3
 801615c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016160:	9100      	str	r1, [sp, #0]
 8016162:	2830      	cmp	r0, #48	; 0x30
 8016164:	d0f8      	beq.n	8016158 <__gethex+0x3c>
 8016166:	f7ff ffc4 	bl	80160f2 <__hexdig_fun>
 801616a:	4604      	mov	r4, r0
 801616c:	2800      	cmp	r0, #0
 801616e:	d13a      	bne.n	80161e6 <__gethex+0xca>
 8016170:	9901      	ldr	r1, [sp, #4]
 8016172:	4652      	mov	r2, sl
 8016174:	4638      	mov	r0, r7
 8016176:	f001 fa8a 	bl	801768e <strncmp>
 801617a:	4605      	mov	r5, r0
 801617c:	2800      	cmp	r0, #0
 801617e:	d168      	bne.n	8016252 <__gethex+0x136>
 8016180:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016184:	eb07 060a 	add.w	r6, r7, sl
 8016188:	f7ff ffb3 	bl	80160f2 <__hexdig_fun>
 801618c:	2800      	cmp	r0, #0
 801618e:	d062      	beq.n	8016256 <__gethex+0x13a>
 8016190:	4633      	mov	r3, r6
 8016192:	7818      	ldrb	r0, [r3, #0]
 8016194:	2830      	cmp	r0, #48	; 0x30
 8016196:	461f      	mov	r7, r3
 8016198:	f103 0301 	add.w	r3, r3, #1
 801619c:	d0f9      	beq.n	8016192 <__gethex+0x76>
 801619e:	f7ff ffa8 	bl	80160f2 <__hexdig_fun>
 80161a2:	2301      	movs	r3, #1
 80161a4:	fab0 f480 	clz	r4, r0
 80161a8:	0964      	lsrs	r4, r4, #5
 80161aa:	4635      	mov	r5, r6
 80161ac:	9300      	str	r3, [sp, #0]
 80161ae:	463a      	mov	r2, r7
 80161b0:	4616      	mov	r6, r2
 80161b2:	3201      	adds	r2, #1
 80161b4:	7830      	ldrb	r0, [r6, #0]
 80161b6:	f7ff ff9c 	bl	80160f2 <__hexdig_fun>
 80161ba:	2800      	cmp	r0, #0
 80161bc:	d1f8      	bne.n	80161b0 <__gethex+0x94>
 80161be:	9901      	ldr	r1, [sp, #4]
 80161c0:	4652      	mov	r2, sl
 80161c2:	4630      	mov	r0, r6
 80161c4:	f001 fa63 	bl	801768e <strncmp>
 80161c8:	b980      	cbnz	r0, 80161ec <__gethex+0xd0>
 80161ca:	b94d      	cbnz	r5, 80161e0 <__gethex+0xc4>
 80161cc:	eb06 050a 	add.w	r5, r6, sl
 80161d0:	462a      	mov	r2, r5
 80161d2:	4616      	mov	r6, r2
 80161d4:	3201      	adds	r2, #1
 80161d6:	7830      	ldrb	r0, [r6, #0]
 80161d8:	f7ff ff8b 	bl	80160f2 <__hexdig_fun>
 80161dc:	2800      	cmp	r0, #0
 80161de:	d1f8      	bne.n	80161d2 <__gethex+0xb6>
 80161e0:	1bad      	subs	r5, r5, r6
 80161e2:	00ad      	lsls	r5, r5, #2
 80161e4:	e004      	b.n	80161f0 <__gethex+0xd4>
 80161e6:	2400      	movs	r4, #0
 80161e8:	4625      	mov	r5, r4
 80161ea:	e7e0      	b.n	80161ae <__gethex+0x92>
 80161ec:	2d00      	cmp	r5, #0
 80161ee:	d1f7      	bne.n	80161e0 <__gethex+0xc4>
 80161f0:	7833      	ldrb	r3, [r6, #0]
 80161f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80161f6:	2b50      	cmp	r3, #80	; 0x50
 80161f8:	d13b      	bne.n	8016272 <__gethex+0x156>
 80161fa:	7873      	ldrb	r3, [r6, #1]
 80161fc:	2b2b      	cmp	r3, #43	; 0x2b
 80161fe:	d02c      	beq.n	801625a <__gethex+0x13e>
 8016200:	2b2d      	cmp	r3, #45	; 0x2d
 8016202:	d02e      	beq.n	8016262 <__gethex+0x146>
 8016204:	1c71      	adds	r1, r6, #1
 8016206:	f04f 0900 	mov.w	r9, #0
 801620a:	7808      	ldrb	r0, [r1, #0]
 801620c:	f7ff ff71 	bl	80160f2 <__hexdig_fun>
 8016210:	1e43      	subs	r3, r0, #1
 8016212:	b2db      	uxtb	r3, r3
 8016214:	2b18      	cmp	r3, #24
 8016216:	d82c      	bhi.n	8016272 <__gethex+0x156>
 8016218:	f1a0 0210 	sub.w	r2, r0, #16
 801621c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016220:	f7ff ff67 	bl	80160f2 <__hexdig_fun>
 8016224:	1e43      	subs	r3, r0, #1
 8016226:	b2db      	uxtb	r3, r3
 8016228:	2b18      	cmp	r3, #24
 801622a:	d91d      	bls.n	8016268 <__gethex+0x14c>
 801622c:	f1b9 0f00 	cmp.w	r9, #0
 8016230:	d000      	beq.n	8016234 <__gethex+0x118>
 8016232:	4252      	negs	r2, r2
 8016234:	4415      	add	r5, r2
 8016236:	f8cb 1000 	str.w	r1, [fp]
 801623a:	b1e4      	cbz	r4, 8016276 <__gethex+0x15a>
 801623c:	9b00      	ldr	r3, [sp, #0]
 801623e:	2b00      	cmp	r3, #0
 8016240:	bf14      	ite	ne
 8016242:	2700      	movne	r7, #0
 8016244:	2706      	moveq	r7, #6
 8016246:	4638      	mov	r0, r7
 8016248:	b009      	add	sp, #36	; 0x24
 801624a:	ecbd 8b02 	vpop	{d8}
 801624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016252:	463e      	mov	r6, r7
 8016254:	4625      	mov	r5, r4
 8016256:	2401      	movs	r4, #1
 8016258:	e7ca      	b.n	80161f0 <__gethex+0xd4>
 801625a:	f04f 0900 	mov.w	r9, #0
 801625e:	1cb1      	adds	r1, r6, #2
 8016260:	e7d3      	b.n	801620a <__gethex+0xee>
 8016262:	f04f 0901 	mov.w	r9, #1
 8016266:	e7fa      	b.n	801625e <__gethex+0x142>
 8016268:	230a      	movs	r3, #10
 801626a:	fb03 0202 	mla	r2, r3, r2, r0
 801626e:	3a10      	subs	r2, #16
 8016270:	e7d4      	b.n	801621c <__gethex+0x100>
 8016272:	4631      	mov	r1, r6
 8016274:	e7df      	b.n	8016236 <__gethex+0x11a>
 8016276:	1bf3      	subs	r3, r6, r7
 8016278:	3b01      	subs	r3, #1
 801627a:	4621      	mov	r1, r4
 801627c:	2b07      	cmp	r3, #7
 801627e:	dc0b      	bgt.n	8016298 <__gethex+0x17c>
 8016280:	ee18 0a10 	vmov	r0, s16
 8016284:	f000 fad8 	bl	8016838 <_Balloc>
 8016288:	4604      	mov	r4, r0
 801628a:	b940      	cbnz	r0, 801629e <__gethex+0x182>
 801628c:	4b65      	ldr	r3, [pc, #404]	; (8016424 <__gethex+0x308>)
 801628e:	4602      	mov	r2, r0
 8016290:	21de      	movs	r1, #222	; 0xde
 8016292:	4865      	ldr	r0, [pc, #404]	; (8016428 <__gethex+0x30c>)
 8016294:	f001 fa2c 	bl	80176f0 <__assert_func>
 8016298:	3101      	adds	r1, #1
 801629a:	105b      	asrs	r3, r3, #1
 801629c:	e7ee      	b.n	801627c <__gethex+0x160>
 801629e:	f100 0914 	add.w	r9, r0, #20
 80162a2:	f04f 0b00 	mov.w	fp, #0
 80162a6:	f1ca 0301 	rsb	r3, sl, #1
 80162aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80162ae:	f8cd b000 	str.w	fp, [sp]
 80162b2:	9306      	str	r3, [sp, #24]
 80162b4:	42b7      	cmp	r7, r6
 80162b6:	d340      	bcc.n	801633a <__gethex+0x21e>
 80162b8:	9802      	ldr	r0, [sp, #8]
 80162ba:	9b00      	ldr	r3, [sp, #0]
 80162bc:	f840 3b04 	str.w	r3, [r0], #4
 80162c0:	eba0 0009 	sub.w	r0, r0, r9
 80162c4:	1080      	asrs	r0, r0, #2
 80162c6:	0146      	lsls	r6, r0, #5
 80162c8:	6120      	str	r0, [r4, #16]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f000 fbaa 	bl	8016a24 <__hi0bits>
 80162d0:	1a30      	subs	r0, r6, r0
 80162d2:	f8d8 6000 	ldr.w	r6, [r8]
 80162d6:	42b0      	cmp	r0, r6
 80162d8:	dd63      	ble.n	80163a2 <__gethex+0x286>
 80162da:	1b87      	subs	r7, r0, r6
 80162dc:	4639      	mov	r1, r7
 80162de:	4620      	mov	r0, r4
 80162e0:	f000 ff44 	bl	801716c <__any_on>
 80162e4:	4682      	mov	sl, r0
 80162e6:	b1a8      	cbz	r0, 8016314 <__gethex+0x1f8>
 80162e8:	1e7b      	subs	r3, r7, #1
 80162ea:	1159      	asrs	r1, r3, #5
 80162ec:	f003 021f 	and.w	r2, r3, #31
 80162f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80162f4:	f04f 0a01 	mov.w	sl, #1
 80162f8:	fa0a f202 	lsl.w	r2, sl, r2
 80162fc:	420a      	tst	r2, r1
 80162fe:	d009      	beq.n	8016314 <__gethex+0x1f8>
 8016300:	4553      	cmp	r3, sl
 8016302:	dd05      	ble.n	8016310 <__gethex+0x1f4>
 8016304:	1eb9      	subs	r1, r7, #2
 8016306:	4620      	mov	r0, r4
 8016308:	f000 ff30 	bl	801716c <__any_on>
 801630c:	2800      	cmp	r0, #0
 801630e:	d145      	bne.n	801639c <__gethex+0x280>
 8016310:	f04f 0a02 	mov.w	sl, #2
 8016314:	4639      	mov	r1, r7
 8016316:	4620      	mov	r0, r4
 8016318:	f7ff fe99 	bl	801604e <rshift>
 801631c:	443d      	add	r5, r7
 801631e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016322:	42ab      	cmp	r3, r5
 8016324:	da4c      	bge.n	80163c0 <__gethex+0x2a4>
 8016326:	ee18 0a10 	vmov	r0, s16
 801632a:	4621      	mov	r1, r4
 801632c:	f000 fac4 	bl	80168b8 <_Bfree>
 8016330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016332:	2300      	movs	r3, #0
 8016334:	6013      	str	r3, [r2, #0]
 8016336:	27a3      	movs	r7, #163	; 0xa3
 8016338:	e785      	b.n	8016246 <__gethex+0x12a>
 801633a:	1e73      	subs	r3, r6, #1
 801633c:	9a05      	ldr	r2, [sp, #20]
 801633e:	9303      	str	r3, [sp, #12]
 8016340:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016344:	4293      	cmp	r3, r2
 8016346:	d019      	beq.n	801637c <__gethex+0x260>
 8016348:	f1bb 0f20 	cmp.w	fp, #32
 801634c:	d107      	bne.n	801635e <__gethex+0x242>
 801634e:	9b02      	ldr	r3, [sp, #8]
 8016350:	9a00      	ldr	r2, [sp, #0]
 8016352:	f843 2b04 	str.w	r2, [r3], #4
 8016356:	9302      	str	r3, [sp, #8]
 8016358:	2300      	movs	r3, #0
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	469b      	mov	fp, r3
 801635e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016362:	f7ff fec6 	bl	80160f2 <__hexdig_fun>
 8016366:	9b00      	ldr	r3, [sp, #0]
 8016368:	f000 000f 	and.w	r0, r0, #15
 801636c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016370:	4303      	orrs	r3, r0
 8016372:	9300      	str	r3, [sp, #0]
 8016374:	f10b 0b04 	add.w	fp, fp, #4
 8016378:	9b03      	ldr	r3, [sp, #12]
 801637a:	e00d      	b.n	8016398 <__gethex+0x27c>
 801637c:	9b03      	ldr	r3, [sp, #12]
 801637e:	9a06      	ldr	r2, [sp, #24]
 8016380:	4413      	add	r3, r2
 8016382:	42bb      	cmp	r3, r7
 8016384:	d3e0      	bcc.n	8016348 <__gethex+0x22c>
 8016386:	4618      	mov	r0, r3
 8016388:	9901      	ldr	r1, [sp, #4]
 801638a:	9307      	str	r3, [sp, #28]
 801638c:	4652      	mov	r2, sl
 801638e:	f001 f97e 	bl	801768e <strncmp>
 8016392:	9b07      	ldr	r3, [sp, #28]
 8016394:	2800      	cmp	r0, #0
 8016396:	d1d7      	bne.n	8016348 <__gethex+0x22c>
 8016398:	461e      	mov	r6, r3
 801639a:	e78b      	b.n	80162b4 <__gethex+0x198>
 801639c:	f04f 0a03 	mov.w	sl, #3
 80163a0:	e7b8      	b.n	8016314 <__gethex+0x1f8>
 80163a2:	da0a      	bge.n	80163ba <__gethex+0x29e>
 80163a4:	1a37      	subs	r7, r6, r0
 80163a6:	4621      	mov	r1, r4
 80163a8:	ee18 0a10 	vmov	r0, s16
 80163ac:	463a      	mov	r2, r7
 80163ae:	f000 fc9f 	bl	8016cf0 <__lshift>
 80163b2:	1bed      	subs	r5, r5, r7
 80163b4:	4604      	mov	r4, r0
 80163b6:	f100 0914 	add.w	r9, r0, #20
 80163ba:	f04f 0a00 	mov.w	sl, #0
 80163be:	e7ae      	b.n	801631e <__gethex+0x202>
 80163c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80163c4:	42a8      	cmp	r0, r5
 80163c6:	dd72      	ble.n	80164ae <__gethex+0x392>
 80163c8:	1b45      	subs	r5, r0, r5
 80163ca:	42ae      	cmp	r6, r5
 80163cc:	dc36      	bgt.n	801643c <__gethex+0x320>
 80163ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80163d2:	2b02      	cmp	r3, #2
 80163d4:	d02a      	beq.n	801642c <__gethex+0x310>
 80163d6:	2b03      	cmp	r3, #3
 80163d8:	d02c      	beq.n	8016434 <__gethex+0x318>
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d115      	bne.n	801640a <__gethex+0x2ee>
 80163de:	42ae      	cmp	r6, r5
 80163e0:	d113      	bne.n	801640a <__gethex+0x2ee>
 80163e2:	2e01      	cmp	r6, #1
 80163e4:	d10b      	bne.n	80163fe <__gethex+0x2e2>
 80163e6:	9a04      	ldr	r2, [sp, #16]
 80163e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80163ec:	6013      	str	r3, [r2, #0]
 80163ee:	2301      	movs	r3, #1
 80163f0:	6123      	str	r3, [r4, #16]
 80163f2:	f8c9 3000 	str.w	r3, [r9]
 80163f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163f8:	2762      	movs	r7, #98	; 0x62
 80163fa:	601c      	str	r4, [r3, #0]
 80163fc:	e723      	b.n	8016246 <__gethex+0x12a>
 80163fe:	1e71      	subs	r1, r6, #1
 8016400:	4620      	mov	r0, r4
 8016402:	f000 feb3 	bl	801716c <__any_on>
 8016406:	2800      	cmp	r0, #0
 8016408:	d1ed      	bne.n	80163e6 <__gethex+0x2ca>
 801640a:	ee18 0a10 	vmov	r0, s16
 801640e:	4621      	mov	r1, r4
 8016410:	f000 fa52 	bl	80168b8 <_Bfree>
 8016414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016416:	2300      	movs	r3, #0
 8016418:	6013      	str	r3, [r2, #0]
 801641a:	2750      	movs	r7, #80	; 0x50
 801641c:	e713      	b.n	8016246 <__gethex+0x12a>
 801641e:	bf00      	nop
 8016420:	0801ad24 	.word	0x0801ad24
 8016424:	0801ac44 	.word	0x0801ac44
 8016428:	0801acb8 	.word	0x0801acb8
 801642c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801642e:	2b00      	cmp	r3, #0
 8016430:	d1eb      	bne.n	801640a <__gethex+0x2ee>
 8016432:	e7d8      	b.n	80163e6 <__gethex+0x2ca>
 8016434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1d5      	bne.n	80163e6 <__gethex+0x2ca>
 801643a:	e7e6      	b.n	801640a <__gethex+0x2ee>
 801643c:	1e6f      	subs	r7, r5, #1
 801643e:	f1ba 0f00 	cmp.w	sl, #0
 8016442:	d131      	bne.n	80164a8 <__gethex+0x38c>
 8016444:	b127      	cbz	r7, 8016450 <__gethex+0x334>
 8016446:	4639      	mov	r1, r7
 8016448:	4620      	mov	r0, r4
 801644a:	f000 fe8f 	bl	801716c <__any_on>
 801644e:	4682      	mov	sl, r0
 8016450:	117b      	asrs	r3, r7, #5
 8016452:	2101      	movs	r1, #1
 8016454:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016458:	f007 071f 	and.w	r7, r7, #31
 801645c:	fa01 f707 	lsl.w	r7, r1, r7
 8016460:	421f      	tst	r7, r3
 8016462:	4629      	mov	r1, r5
 8016464:	4620      	mov	r0, r4
 8016466:	bf18      	it	ne
 8016468:	f04a 0a02 	orrne.w	sl, sl, #2
 801646c:	1b76      	subs	r6, r6, r5
 801646e:	f7ff fdee 	bl	801604e <rshift>
 8016472:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016476:	2702      	movs	r7, #2
 8016478:	f1ba 0f00 	cmp.w	sl, #0
 801647c:	d048      	beq.n	8016510 <__gethex+0x3f4>
 801647e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016482:	2b02      	cmp	r3, #2
 8016484:	d015      	beq.n	80164b2 <__gethex+0x396>
 8016486:	2b03      	cmp	r3, #3
 8016488:	d017      	beq.n	80164ba <__gethex+0x39e>
 801648a:	2b01      	cmp	r3, #1
 801648c:	d109      	bne.n	80164a2 <__gethex+0x386>
 801648e:	f01a 0f02 	tst.w	sl, #2
 8016492:	d006      	beq.n	80164a2 <__gethex+0x386>
 8016494:	f8d9 0000 	ldr.w	r0, [r9]
 8016498:	ea4a 0a00 	orr.w	sl, sl, r0
 801649c:	f01a 0f01 	tst.w	sl, #1
 80164a0:	d10e      	bne.n	80164c0 <__gethex+0x3a4>
 80164a2:	f047 0710 	orr.w	r7, r7, #16
 80164a6:	e033      	b.n	8016510 <__gethex+0x3f4>
 80164a8:	f04f 0a01 	mov.w	sl, #1
 80164ac:	e7d0      	b.n	8016450 <__gethex+0x334>
 80164ae:	2701      	movs	r7, #1
 80164b0:	e7e2      	b.n	8016478 <__gethex+0x35c>
 80164b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164b4:	f1c3 0301 	rsb	r3, r3, #1
 80164b8:	9315      	str	r3, [sp, #84]	; 0x54
 80164ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d0f0      	beq.n	80164a2 <__gethex+0x386>
 80164c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80164c4:	f104 0314 	add.w	r3, r4, #20
 80164c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80164cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80164d0:	f04f 0c00 	mov.w	ip, #0
 80164d4:	4618      	mov	r0, r3
 80164d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80164da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80164de:	d01c      	beq.n	801651a <__gethex+0x3fe>
 80164e0:	3201      	adds	r2, #1
 80164e2:	6002      	str	r2, [r0, #0]
 80164e4:	2f02      	cmp	r7, #2
 80164e6:	f104 0314 	add.w	r3, r4, #20
 80164ea:	d13f      	bne.n	801656c <__gethex+0x450>
 80164ec:	f8d8 2000 	ldr.w	r2, [r8]
 80164f0:	3a01      	subs	r2, #1
 80164f2:	42b2      	cmp	r2, r6
 80164f4:	d10a      	bne.n	801650c <__gethex+0x3f0>
 80164f6:	1171      	asrs	r1, r6, #5
 80164f8:	2201      	movs	r2, #1
 80164fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80164fe:	f006 061f 	and.w	r6, r6, #31
 8016502:	fa02 f606 	lsl.w	r6, r2, r6
 8016506:	421e      	tst	r6, r3
 8016508:	bf18      	it	ne
 801650a:	4617      	movne	r7, r2
 801650c:	f047 0720 	orr.w	r7, r7, #32
 8016510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016512:	601c      	str	r4, [r3, #0]
 8016514:	9b04      	ldr	r3, [sp, #16]
 8016516:	601d      	str	r5, [r3, #0]
 8016518:	e695      	b.n	8016246 <__gethex+0x12a>
 801651a:	4299      	cmp	r1, r3
 801651c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016520:	d8d8      	bhi.n	80164d4 <__gethex+0x3b8>
 8016522:	68a3      	ldr	r3, [r4, #8]
 8016524:	459b      	cmp	fp, r3
 8016526:	db19      	blt.n	801655c <__gethex+0x440>
 8016528:	6861      	ldr	r1, [r4, #4]
 801652a:	ee18 0a10 	vmov	r0, s16
 801652e:	3101      	adds	r1, #1
 8016530:	f000 f982 	bl	8016838 <_Balloc>
 8016534:	4681      	mov	r9, r0
 8016536:	b918      	cbnz	r0, 8016540 <__gethex+0x424>
 8016538:	4b1a      	ldr	r3, [pc, #104]	; (80165a4 <__gethex+0x488>)
 801653a:	4602      	mov	r2, r0
 801653c:	2184      	movs	r1, #132	; 0x84
 801653e:	e6a8      	b.n	8016292 <__gethex+0x176>
 8016540:	6922      	ldr	r2, [r4, #16]
 8016542:	3202      	adds	r2, #2
 8016544:	f104 010c 	add.w	r1, r4, #12
 8016548:	0092      	lsls	r2, r2, #2
 801654a:	300c      	adds	r0, #12
 801654c:	f7fc fef6 	bl	801333c <memcpy>
 8016550:	4621      	mov	r1, r4
 8016552:	ee18 0a10 	vmov	r0, s16
 8016556:	f000 f9af 	bl	80168b8 <_Bfree>
 801655a:	464c      	mov	r4, r9
 801655c:	6923      	ldr	r3, [r4, #16]
 801655e:	1c5a      	adds	r2, r3, #1
 8016560:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016564:	6122      	str	r2, [r4, #16]
 8016566:	2201      	movs	r2, #1
 8016568:	615a      	str	r2, [r3, #20]
 801656a:	e7bb      	b.n	80164e4 <__gethex+0x3c8>
 801656c:	6922      	ldr	r2, [r4, #16]
 801656e:	455a      	cmp	r2, fp
 8016570:	dd0b      	ble.n	801658a <__gethex+0x46e>
 8016572:	2101      	movs	r1, #1
 8016574:	4620      	mov	r0, r4
 8016576:	f7ff fd6a 	bl	801604e <rshift>
 801657a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801657e:	3501      	adds	r5, #1
 8016580:	42ab      	cmp	r3, r5
 8016582:	f6ff aed0 	blt.w	8016326 <__gethex+0x20a>
 8016586:	2701      	movs	r7, #1
 8016588:	e7c0      	b.n	801650c <__gethex+0x3f0>
 801658a:	f016 061f 	ands.w	r6, r6, #31
 801658e:	d0fa      	beq.n	8016586 <__gethex+0x46a>
 8016590:	449a      	add	sl, r3
 8016592:	f1c6 0620 	rsb	r6, r6, #32
 8016596:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801659a:	f000 fa43 	bl	8016a24 <__hi0bits>
 801659e:	42b0      	cmp	r0, r6
 80165a0:	dbe7      	blt.n	8016572 <__gethex+0x456>
 80165a2:	e7f0      	b.n	8016586 <__gethex+0x46a>
 80165a4:	0801ac44 	.word	0x0801ac44

080165a8 <L_shift>:
 80165a8:	f1c2 0208 	rsb	r2, r2, #8
 80165ac:	0092      	lsls	r2, r2, #2
 80165ae:	b570      	push	{r4, r5, r6, lr}
 80165b0:	f1c2 0620 	rsb	r6, r2, #32
 80165b4:	6843      	ldr	r3, [r0, #4]
 80165b6:	6804      	ldr	r4, [r0, #0]
 80165b8:	fa03 f506 	lsl.w	r5, r3, r6
 80165bc:	432c      	orrs	r4, r5
 80165be:	40d3      	lsrs	r3, r2
 80165c0:	6004      	str	r4, [r0, #0]
 80165c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80165c6:	4288      	cmp	r0, r1
 80165c8:	d3f4      	bcc.n	80165b4 <L_shift+0xc>
 80165ca:	bd70      	pop	{r4, r5, r6, pc}

080165cc <__match>:
 80165cc:	b530      	push	{r4, r5, lr}
 80165ce:	6803      	ldr	r3, [r0, #0]
 80165d0:	3301      	adds	r3, #1
 80165d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165d6:	b914      	cbnz	r4, 80165de <__match+0x12>
 80165d8:	6003      	str	r3, [r0, #0]
 80165da:	2001      	movs	r0, #1
 80165dc:	bd30      	pop	{r4, r5, pc}
 80165de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80165e6:	2d19      	cmp	r5, #25
 80165e8:	bf98      	it	ls
 80165ea:	3220      	addls	r2, #32
 80165ec:	42a2      	cmp	r2, r4
 80165ee:	d0f0      	beq.n	80165d2 <__match+0x6>
 80165f0:	2000      	movs	r0, #0
 80165f2:	e7f3      	b.n	80165dc <__match+0x10>

080165f4 <__hexnan>:
 80165f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165f8:	680b      	ldr	r3, [r1, #0]
 80165fa:	6801      	ldr	r1, [r0, #0]
 80165fc:	115e      	asrs	r6, r3, #5
 80165fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016602:	f013 031f 	ands.w	r3, r3, #31
 8016606:	b087      	sub	sp, #28
 8016608:	bf18      	it	ne
 801660a:	3604      	addne	r6, #4
 801660c:	2500      	movs	r5, #0
 801660e:	1f37      	subs	r7, r6, #4
 8016610:	4682      	mov	sl, r0
 8016612:	4690      	mov	r8, r2
 8016614:	9301      	str	r3, [sp, #4]
 8016616:	f846 5c04 	str.w	r5, [r6, #-4]
 801661a:	46b9      	mov	r9, r7
 801661c:	463c      	mov	r4, r7
 801661e:	9502      	str	r5, [sp, #8]
 8016620:	46ab      	mov	fp, r5
 8016622:	784a      	ldrb	r2, [r1, #1]
 8016624:	1c4b      	adds	r3, r1, #1
 8016626:	9303      	str	r3, [sp, #12]
 8016628:	b342      	cbz	r2, 801667c <__hexnan+0x88>
 801662a:	4610      	mov	r0, r2
 801662c:	9105      	str	r1, [sp, #20]
 801662e:	9204      	str	r2, [sp, #16]
 8016630:	f7ff fd5f 	bl	80160f2 <__hexdig_fun>
 8016634:	2800      	cmp	r0, #0
 8016636:	d14f      	bne.n	80166d8 <__hexnan+0xe4>
 8016638:	9a04      	ldr	r2, [sp, #16]
 801663a:	9905      	ldr	r1, [sp, #20]
 801663c:	2a20      	cmp	r2, #32
 801663e:	d818      	bhi.n	8016672 <__hexnan+0x7e>
 8016640:	9b02      	ldr	r3, [sp, #8]
 8016642:	459b      	cmp	fp, r3
 8016644:	dd13      	ble.n	801666e <__hexnan+0x7a>
 8016646:	454c      	cmp	r4, r9
 8016648:	d206      	bcs.n	8016658 <__hexnan+0x64>
 801664a:	2d07      	cmp	r5, #7
 801664c:	dc04      	bgt.n	8016658 <__hexnan+0x64>
 801664e:	462a      	mov	r2, r5
 8016650:	4649      	mov	r1, r9
 8016652:	4620      	mov	r0, r4
 8016654:	f7ff ffa8 	bl	80165a8 <L_shift>
 8016658:	4544      	cmp	r4, r8
 801665a:	d950      	bls.n	80166fe <__hexnan+0x10a>
 801665c:	2300      	movs	r3, #0
 801665e:	f1a4 0904 	sub.w	r9, r4, #4
 8016662:	f844 3c04 	str.w	r3, [r4, #-4]
 8016666:	f8cd b008 	str.w	fp, [sp, #8]
 801666a:	464c      	mov	r4, r9
 801666c:	461d      	mov	r5, r3
 801666e:	9903      	ldr	r1, [sp, #12]
 8016670:	e7d7      	b.n	8016622 <__hexnan+0x2e>
 8016672:	2a29      	cmp	r2, #41	; 0x29
 8016674:	d156      	bne.n	8016724 <__hexnan+0x130>
 8016676:	3102      	adds	r1, #2
 8016678:	f8ca 1000 	str.w	r1, [sl]
 801667c:	f1bb 0f00 	cmp.w	fp, #0
 8016680:	d050      	beq.n	8016724 <__hexnan+0x130>
 8016682:	454c      	cmp	r4, r9
 8016684:	d206      	bcs.n	8016694 <__hexnan+0xa0>
 8016686:	2d07      	cmp	r5, #7
 8016688:	dc04      	bgt.n	8016694 <__hexnan+0xa0>
 801668a:	462a      	mov	r2, r5
 801668c:	4649      	mov	r1, r9
 801668e:	4620      	mov	r0, r4
 8016690:	f7ff ff8a 	bl	80165a8 <L_shift>
 8016694:	4544      	cmp	r4, r8
 8016696:	d934      	bls.n	8016702 <__hexnan+0x10e>
 8016698:	f1a8 0204 	sub.w	r2, r8, #4
 801669c:	4623      	mov	r3, r4
 801669e:	f853 1b04 	ldr.w	r1, [r3], #4
 80166a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80166a6:	429f      	cmp	r7, r3
 80166a8:	d2f9      	bcs.n	801669e <__hexnan+0xaa>
 80166aa:	1b3b      	subs	r3, r7, r4
 80166ac:	f023 0303 	bic.w	r3, r3, #3
 80166b0:	3304      	adds	r3, #4
 80166b2:	3401      	adds	r4, #1
 80166b4:	3e03      	subs	r6, #3
 80166b6:	42b4      	cmp	r4, r6
 80166b8:	bf88      	it	hi
 80166ba:	2304      	movhi	r3, #4
 80166bc:	4443      	add	r3, r8
 80166be:	2200      	movs	r2, #0
 80166c0:	f843 2b04 	str.w	r2, [r3], #4
 80166c4:	429f      	cmp	r7, r3
 80166c6:	d2fb      	bcs.n	80166c0 <__hexnan+0xcc>
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	b91b      	cbnz	r3, 80166d4 <__hexnan+0xe0>
 80166cc:	4547      	cmp	r7, r8
 80166ce:	d127      	bne.n	8016720 <__hexnan+0x12c>
 80166d0:	2301      	movs	r3, #1
 80166d2:	603b      	str	r3, [r7, #0]
 80166d4:	2005      	movs	r0, #5
 80166d6:	e026      	b.n	8016726 <__hexnan+0x132>
 80166d8:	3501      	adds	r5, #1
 80166da:	2d08      	cmp	r5, #8
 80166dc:	f10b 0b01 	add.w	fp, fp, #1
 80166e0:	dd06      	ble.n	80166f0 <__hexnan+0xfc>
 80166e2:	4544      	cmp	r4, r8
 80166e4:	d9c3      	bls.n	801666e <__hexnan+0x7a>
 80166e6:	2300      	movs	r3, #0
 80166e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80166ec:	2501      	movs	r5, #1
 80166ee:	3c04      	subs	r4, #4
 80166f0:	6822      	ldr	r2, [r4, #0]
 80166f2:	f000 000f 	and.w	r0, r0, #15
 80166f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80166fa:	6022      	str	r2, [r4, #0]
 80166fc:	e7b7      	b.n	801666e <__hexnan+0x7a>
 80166fe:	2508      	movs	r5, #8
 8016700:	e7b5      	b.n	801666e <__hexnan+0x7a>
 8016702:	9b01      	ldr	r3, [sp, #4]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d0df      	beq.n	80166c8 <__hexnan+0xd4>
 8016708:	f04f 32ff 	mov.w	r2, #4294967295
 801670c:	f1c3 0320 	rsb	r3, r3, #32
 8016710:	fa22 f303 	lsr.w	r3, r2, r3
 8016714:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016718:	401a      	ands	r2, r3
 801671a:	f846 2c04 	str.w	r2, [r6, #-4]
 801671e:	e7d3      	b.n	80166c8 <__hexnan+0xd4>
 8016720:	3f04      	subs	r7, #4
 8016722:	e7d1      	b.n	80166c8 <__hexnan+0xd4>
 8016724:	2004      	movs	r0, #4
 8016726:	b007      	add	sp, #28
 8016728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801672c <_localeconv_r>:
 801672c:	4800      	ldr	r0, [pc, #0]	; (8016730 <_localeconv_r+0x4>)
 801672e:	4770      	bx	lr
 8016730:	20000284 	.word	0x20000284

08016734 <__retarget_lock_init_recursive>:
 8016734:	4770      	bx	lr

08016736 <__retarget_lock_acquire_recursive>:
 8016736:	4770      	bx	lr

08016738 <__retarget_lock_release_recursive>:
 8016738:	4770      	bx	lr

0801673a <__swhatbuf_r>:
 801673a:	b570      	push	{r4, r5, r6, lr}
 801673c:	460e      	mov	r6, r1
 801673e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016742:	2900      	cmp	r1, #0
 8016744:	b096      	sub	sp, #88	; 0x58
 8016746:	4614      	mov	r4, r2
 8016748:	461d      	mov	r5, r3
 801674a:	da07      	bge.n	801675c <__swhatbuf_r+0x22>
 801674c:	2300      	movs	r3, #0
 801674e:	602b      	str	r3, [r5, #0]
 8016750:	89b3      	ldrh	r3, [r6, #12]
 8016752:	061a      	lsls	r2, r3, #24
 8016754:	d410      	bmi.n	8016778 <__swhatbuf_r+0x3e>
 8016756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801675a:	e00e      	b.n	801677a <__swhatbuf_r+0x40>
 801675c:	466a      	mov	r2, sp
 801675e:	f001 f807 	bl	8017770 <_fstat_r>
 8016762:	2800      	cmp	r0, #0
 8016764:	dbf2      	blt.n	801674c <__swhatbuf_r+0x12>
 8016766:	9a01      	ldr	r2, [sp, #4]
 8016768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801676c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016770:	425a      	negs	r2, r3
 8016772:	415a      	adcs	r2, r3
 8016774:	602a      	str	r2, [r5, #0]
 8016776:	e7ee      	b.n	8016756 <__swhatbuf_r+0x1c>
 8016778:	2340      	movs	r3, #64	; 0x40
 801677a:	2000      	movs	r0, #0
 801677c:	6023      	str	r3, [r4, #0]
 801677e:	b016      	add	sp, #88	; 0x58
 8016780:	bd70      	pop	{r4, r5, r6, pc}
	...

08016784 <__smakebuf_r>:
 8016784:	898b      	ldrh	r3, [r1, #12]
 8016786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016788:	079d      	lsls	r5, r3, #30
 801678a:	4606      	mov	r6, r0
 801678c:	460c      	mov	r4, r1
 801678e:	d507      	bpl.n	80167a0 <__smakebuf_r+0x1c>
 8016790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016794:	6023      	str	r3, [r4, #0]
 8016796:	6123      	str	r3, [r4, #16]
 8016798:	2301      	movs	r3, #1
 801679a:	6163      	str	r3, [r4, #20]
 801679c:	b002      	add	sp, #8
 801679e:	bd70      	pop	{r4, r5, r6, pc}
 80167a0:	ab01      	add	r3, sp, #4
 80167a2:	466a      	mov	r2, sp
 80167a4:	f7ff ffc9 	bl	801673a <__swhatbuf_r>
 80167a8:	9900      	ldr	r1, [sp, #0]
 80167aa:	4605      	mov	r5, r0
 80167ac:	4630      	mov	r0, r6
 80167ae:	f000 fd5d 	bl	801726c <_malloc_r>
 80167b2:	b948      	cbnz	r0, 80167c8 <__smakebuf_r+0x44>
 80167b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167b8:	059a      	lsls	r2, r3, #22
 80167ba:	d4ef      	bmi.n	801679c <__smakebuf_r+0x18>
 80167bc:	f023 0303 	bic.w	r3, r3, #3
 80167c0:	f043 0302 	orr.w	r3, r3, #2
 80167c4:	81a3      	strh	r3, [r4, #12]
 80167c6:	e7e3      	b.n	8016790 <__smakebuf_r+0xc>
 80167c8:	4b0d      	ldr	r3, [pc, #52]	; (8016800 <__smakebuf_r+0x7c>)
 80167ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	6020      	str	r0, [r4, #0]
 80167d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167d4:	81a3      	strh	r3, [r4, #12]
 80167d6:	9b00      	ldr	r3, [sp, #0]
 80167d8:	6163      	str	r3, [r4, #20]
 80167da:	9b01      	ldr	r3, [sp, #4]
 80167dc:	6120      	str	r0, [r4, #16]
 80167de:	b15b      	cbz	r3, 80167f8 <__smakebuf_r+0x74>
 80167e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167e4:	4630      	mov	r0, r6
 80167e6:	f000 ffd5 	bl	8017794 <_isatty_r>
 80167ea:	b128      	cbz	r0, 80167f8 <__smakebuf_r+0x74>
 80167ec:	89a3      	ldrh	r3, [r4, #12]
 80167ee:	f023 0303 	bic.w	r3, r3, #3
 80167f2:	f043 0301 	orr.w	r3, r3, #1
 80167f6:	81a3      	strh	r3, [r4, #12]
 80167f8:	89a0      	ldrh	r0, [r4, #12]
 80167fa:	4305      	orrs	r5, r0
 80167fc:	81a5      	strh	r5, [r4, #12]
 80167fe:	e7cd      	b.n	801679c <__smakebuf_r+0x18>
 8016800:	08015ead 	.word	0x08015ead

08016804 <malloc>:
 8016804:	4b02      	ldr	r3, [pc, #8]	; (8016810 <malloc+0xc>)
 8016806:	4601      	mov	r1, r0
 8016808:	6818      	ldr	r0, [r3, #0]
 801680a:	f000 bd2f 	b.w	801726c <_malloc_r>
 801680e:	bf00      	nop
 8016810:	2000012c 	.word	0x2000012c

08016814 <__ascii_mbtowc>:
 8016814:	b082      	sub	sp, #8
 8016816:	b901      	cbnz	r1, 801681a <__ascii_mbtowc+0x6>
 8016818:	a901      	add	r1, sp, #4
 801681a:	b142      	cbz	r2, 801682e <__ascii_mbtowc+0x1a>
 801681c:	b14b      	cbz	r3, 8016832 <__ascii_mbtowc+0x1e>
 801681e:	7813      	ldrb	r3, [r2, #0]
 8016820:	600b      	str	r3, [r1, #0]
 8016822:	7812      	ldrb	r2, [r2, #0]
 8016824:	1e10      	subs	r0, r2, #0
 8016826:	bf18      	it	ne
 8016828:	2001      	movne	r0, #1
 801682a:	b002      	add	sp, #8
 801682c:	4770      	bx	lr
 801682e:	4610      	mov	r0, r2
 8016830:	e7fb      	b.n	801682a <__ascii_mbtowc+0x16>
 8016832:	f06f 0001 	mvn.w	r0, #1
 8016836:	e7f8      	b.n	801682a <__ascii_mbtowc+0x16>

08016838 <_Balloc>:
 8016838:	b570      	push	{r4, r5, r6, lr}
 801683a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801683c:	4604      	mov	r4, r0
 801683e:	460d      	mov	r5, r1
 8016840:	b976      	cbnz	r6, 8016860 <_Balloc+0x28>
 8016842:	2010      	movs	r0, #16
 8016844:	f7ff ffde 	bl	8016804 <malloc>
 8016848:	4602      	mov	r2, r0
 801684a:	6260      	str	r0, [r4, #36]	; 0x24
 801684c:	b920      	cbnz	r0, 8016858 <_Balloc+0x20>
 801684e:	4b18      	ldr	r3, [pc, #96]	; (80168b0 <_Balloc+0x78>)
 8016850:	4818      	ldr	r0, [pc, #96]	; (80168b4 <_Balloc+0x7c>)
 8016852:	2166      	movs	r1, #102	; 0x66
 8016854:	f000 ff4c 	bl	80176f0 <__assert_func>
 8016858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801685c:	6006      	str	r6, [r0, #0]
 801685e:	60c6      	str	r6, [r0, #12]
 8016860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016862:	68f3      	ldr	r3, [r6, #12]
 8016864:	b183      	cbz	r3, 8016888 <_Balloc+0x50>
 8016866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016868:	68db      	ldr	r3, [r3, #12]
 801686a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801686e:	b9b8      	cbnz	r0, 80168a0 <_Balloc+0x68>
 8016870:	2101      	movs	r1, #1
 8016872:	fa01 f605 	lsl.w	r6, r1, r5
 8016876:	1d72      	adds	r2, r6, #5
 8016878:	0092      	lsls	r2, r2, #2
 801687a:	4620      	mov	r0, r4
 801687c:	f000 fc97 	bl	80171ae <_calloc_r>
 8016880:	b160      	cbz	r0, 801689c <_Balloc+0x64>
 8016882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016886:	e00e      	b.n	80168a6 <_Balloc+0x6e>
 8016888:	2221      	movs	r2, #33	; 0x21
 801688a:	2104      	movs	r1, #4
 801688c:	4620      	mov	r0, r4
 801688e:	f000 fc8e 	bl	80171ae <_calloc_r>
 8016892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016894:	60f0      	str	r0, [r6, #12]
 8016896:	68db      	ldr	r3, [r3, #12]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d1e4      	bne.n	8016866 <_Balloc+0x2e>
 801689c:	2000      	movs	r0, #0
 801689e:	bd70      	pop	{r4, r5, r6, pc}
 80168a0:	6802      	ldr	r2, [r0, #0]
 80168a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168a6:	2300      	movs	r3, #0
 80168a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80168ac:	e7f7      	b.n	801689e <_Balloc+0x66>
 80168ae:	bf00      	nop
 80168b0:	0801abce 	.word	0x0801abce
 80168b4:	0801ad38 	.word	0x0801ad38

080168b8 <_Bfree>:
 80168b8:	b570      	push	{r4, r5, r6, lr}
 80168ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80168bc:	4605      	mov	r5, r0
 80168be:	460c      	mov	r4, r1
 80168c0:	b976      	cbnz	r6, 80168e0 <_Bfree+0x28>
 80168c2:	2010      	movs	r0, #16
 80168c4:	f7ff ff9e 	bl	8016804 <malloc>
 80168c8:	4602      	mov	r2, r0
 80168ca:	6268      	str	r0, [r5, #36]	; 0x24
 80168cc:	b920      	cbnz	r0, 80168d8 <_Bfree+0x20>
 80168ce:	4b09      	ldr	r3, [pc, #36]	; (80168f4 <_Bfree+0x3c>)
 80168d0:	4809      	ldr	r0, [pc, #36]	; (80168f8 <_Bfree+0x40>)
 80168d2:	218a      	movs	r1, #138	; 0x8a
 80168d4:	f000 ff0c 	bl	80176f0 <__assert_func>
 80168d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80168dc:	6006      	str	r6, [r0, #0]
 80168de:	60c6      	str	r6, [r0, #12]
 80168e0:	b13c      	cbz	r4, 80168f2 <_Bfree+0x3a>
 80168e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80168e4:	6862      	ldr	r2, [r4, #4]
 80168e6:	68db      	ldr	r3, [r3, #12]
 80168e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80168ec:	6021      	str	r1, [r4, #0]
 80168ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80168f2:	bd70      	pop	{r4, r5, r6, pc}
 80168f4:	0801abce 	.word	0x0801abce
 80168f8:	0801ad38 	.word	0x0801ad38

080168fc <__multadd>:
 80168fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016900:	690e      	ldr	r6, [r1, #16]
 8016902:	4607      	mov	r7, r0
 8016904:	4698      	mov	r8, r3
 8016906:	460c      	mov	r4, r1
 8016908:	f101 0014 	add.w	r0, r1, #20
 801690c:	2300      	movs	r3, #0
 801690e:	6805      	ldr	r5, [r0, #0]
 8016910:	b2a9      	uxth	r1, r5
 8016912:	fb02 8101 	mla	r1, r2, r1, r8
 8016916:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801691a:	0c2d      	lsrs	r5, r5, #16
 801691c:	fb02 c505 	mla	r5, r2, r5, ip
 8016920:	b289      	uxth	r1, r1
 8016922:	3301      	adds	r3, #1
 8016924:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016928:	429e      	cmp	r6, r3
 801692a:	f840 1b04 	str.w	r1, [r0], #4
 801692e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016932:	dcec      	bgt.n	801690e <__multadd+0x12>
 8016934:	f1b8 0f00 	cmp.w	r8, #0
 8016938:	d022      	beq.n	8016980 <__multadd+0x84>
 801693a:	68a3      	ldr	r3, [r4, #8]
 801693c:	42b3      	cmp	r3, r6
 801693e:	dc19      	bgt.n	8016974 <__multadd+0x78>
 8016940:	6861      	ldr	r1, [r4, #4]
 8016942:	4638      	mov	r0, r7
 8016944:	3101      	adds	r1, #1
 8016946:	f7ff ff77 	bl	8016838 <_Balloc>
 801694a:	4605      	mov	r5, r0
 801694c:	b928      	cbnz	r0, 801695a <__multadd+0x5e>
 801694e:	4602      	mov	r2, r0
 8016950:	4b0d      	ldr	r3, [pc, #52]	; (8016988 <__multadd+0x8c>)
 8016952:	480e      	ldr	r0, [pc, #56]	; (801698c <__multadd+0x90>)
 8016954:	21b5      	movs	r1, #181	; 0xb5
 8016956:	f000 fecb 	bl	80176f0 <__assert_func>
 801695a:	6922      	ldr	r2, [r4, #16]
 801695c:	3202      	adds	r2, #2
 801695e:	f104 010c 	add.w	r1, r4, #12
 8016962:	0092      	lsls	r2, r2, #2
 8016964:	300c      	adds	r0, #12
 8016966:	f7fc fce9 	bl	801333c <memcpy>
 801696a:	4621      	mov	r1, r4
 801696c:	4638      	mov	r0, r7
 801696e:	f7ff ffa3 	bl	80168b8 <_Bfree>
 8016972:	462c      	mov	r4, r5
 8016974:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016978:	3601      	adds	r6, #1
 801697a:	f8c3 8014 	str.w	r8, [r3, #20]
 801697e:	6126      	str	r6, [r4, #16]
 8016980:	4620      	mov	r0, r4
 8016982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016986:	bf00      	nop
 8016988:	0801ac44 	.word	0x0801ac44
 801698c:	0801ad38 	.word	0x0801ad38

08016990 <__s2b>:
 8016990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016994:	460c      	mov	r4, r1
 8016996:	4615      	mov	r5, r2
 8016998:	461f      	mov	r7, r3
 801699a:	2209      	movs	r2, #9
 801699c:	3308      	adds	r3, #8
 801699e:	4606      	mov	r6, r0
 80169a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80169a4:	2100      	movs	r1, #0
 80169a6:	2201      	movs	r2, #1
 80169a8:	429a      	cmp	r2, r3
 80169aa:	db09      	blt.n	80169c0 <__s2b+0x30>
 80169ac:	4630      	mov	r0, r6
 80169ae:	f7ff ff43 	bl	8016838 <_Balloc>
 80169b2:	b940      	cbnz	r0, 80169c6 <__s2b+0x36>
 80169b4:	4602      	mov	r2, r0
 80169b6:	4b19      	ldr	r3, [pc, #100]	; (8016a1c <__s2b+0x8c>)
 80169b8:	4819      	ldr	r0, [pc, #100]	; (8016a20 <__s2b+0x90>)
 80169ba:	21ce      	movs	r1, #206	; 0xce
 80169bc:	f000 fe98 	bl	80176f0 <__assert_func>
 80169c0:	0052      	lsls	r2, r2, #1
 80169c2:	3101      	adds	r1, #1
 80169c4:	e7f0      	b.n	80169a8 <__s2b+0x18>
 80169c6:	9b08      	ldr	r3, [sp, #32]
 80169c8:	6143      	str	r3, [r0, #20]
 80169ca:	2d09      	cmp	r5, #9
 80169cc:	f04f 0301 	mov.w	r3, #1
 80169d0:	6103      	str	r3, [r0, #16]
 80169d2:	dd16      	ble.n	8016a02 <__s2b+0x72>
 80169d4:	f104 0909 	add.w	r9, r4, #9
 80169d8:	46c8      	mov	r8, r9
 80169da:	442c      	add	r4, r5
 80169dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80169e0:	4601      	mov	r1, r0
 80169e2:	3b30      	subs	r3, #48	; 0x30
 80169e4:	220a      	movs	r2, #10
 80169e6:	4630      	mov	r0, r6
 80169e8:	f7ff ff88 	bl	80168fc <__multadd>
 80169ec:	45a0      	cmp	r8, r4
 80169ee:	d1f5      	bne.n	80169dc <__s2b+0x4c>
 80169f0:	f1a5 0408 	sub.w	r4, r5, #8
 80169f4:	444c      	add	r4, r9
 80169f6:	1b2d      	subs	r5, r5, r4
 80169f8:	1963      	adds	r3, r4, r5
 80169fa:	42bb      	cmp	r3, r7
 80169fc:	db04      	blt.n	8016a08 <__s2b+0x78>
 80169fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a02:	340a      	adds	r4, #10
 8016a04:	2509      	movs	r5, #9
 8016a06:	e7f6      	b.n	80169f6 <__s2b+0x66>
 8016a08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016a0c:	4601      	mov	r1, r0
 8016a0e:	3b30      	subs	r3, #48	; 0x30
 8016a10:	220a      	movs	r2, #10
 8016a12:	4630      	mov	r0, r6
 8016a14:	f7ff ff72 	bl	80168fc <__multadd>
 8016a18:	e7ee      	b.n	80169f8 <__s2b+0x68>
 8016a1a:	bf00      	nop
 8016a1c:	0801ac44 	.word	0x0801ac44
 8016a20:	0801ad38 	.word	0x0801ad38

08016a24 <__hi0bits>:
 8016a24:	0c03      	lsrs	r3, r0, #16
 8016a26:	041b      	lsls	r3, r3, #16
 8016a28:	b9d3      	cbnz	r3, 8016a60 <__hi0bits+0x3c>
 8016a2a:	0400      	lsls	r0, r0, #16
 8016a2c:	2310      	movs	r3, #16
 8016a2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016a32:	bf04      	itt	eq
 8016a34:	0200      	lsleq	r0, r0, #8
 8016a36:	3308      	addeq	r3, #8
 8016a38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016a3c:	bf04      	itt	eq
 8016a3e:	0100      	lsleq	r0, r0, #4
 8016a40:	3304      	addeq	r3, #4
 8016a42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016a46:	bf04      	itt	eq
 8016a48:	0080      	lsleq	r0, r0, #2
 8016a4a:	3302      	addeq	r3, #2
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	db05      	blt.n	8016a5c <__hi0bits+0x38>
 8016a50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016a54:	f103 0301 	add.w	r3, r3, #1
 8016a58:	bf08      	it	eq
 8016a5a:	2320      	moveq	r3, #32
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	4770      	bx	lr
 8016a60:	2300      	movs	r3, #0
 8016a62:	e7e4      	b.n	8016a2e <__hi0bits+0xa>

08016a64 <__lo0bits>:
 8016a64:	6803      	ldr	r3, [r0, #0]
 8016a66:	f013 0207 	ands.w	r2, r3, #7
 8016a6a:	4601      	mov	r1, r0
 8016a6c:	d00b      	beq.n	8016a86 <__lo0bits+0x22>
 8016a6e:	07da      	lsls	r2, r3, #31
 8016a70:	d424      	bmi.n	8016abc <__lo0bits+0x58>
 8016a72:	0798      	lsls	r0, r3, #30
 8016a74:	bf49      	itett	mi
 8016a76:	085b      	lsrmi	r3, r3, #1
 8016a78:	089b      	lsrpl	r3, r3, #2
 8016a7a:	2001      	movmi	r0, #1
 8016a7c:	600b      	strmi	r3, [r1, #0]
 8016a7e:	bf5c      	itt	pl
 8016a80:	600b      	strpl	r3, [r1, #0]
 8016a82:	2002      	movpl	r0, #2
 8016a84:	4770      	bx	lr
 8016a86:	b298      	uxth	r0, r3
 8016a88:	b9b0      	cbnz	r0, 8016ab8 <__lo0bits+0x54>
 8016a8a:	0c1b      	lsrs	r3, r3, #16
 8016a8c:	2010      	movs	r0, #16
 8016a8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016a92:	bf04      	itt	eq
 8016a94:	0a1b      	lsreq	r3, r3, #8
 8016a96:	3008      	addeq	r0, #8
 8016a98:	071a      	lsls	r2, r3, #28
 8016a9a:	bf04      	itt	eq
 8016a9c:	091b      	lsreq	r3, r3, #4
 8016a9e:	3004      	addeq	r0, #4
 8016aa0:	079a      	lsls	r2, r3, #30
 8016aa2:	bf04      	itt	eq
 8016aa4:	089b      	lsreq	r3, r3, #2
 8016aa6:	3002      	addeq	r0, #2
 8016aa8:	07da      	lsls	r2, r3, #31
 8016aaa:	d403      	bmi.n	8016ab4 <__lo0bits+0x50>
 8016aac:	085b      	lsrs	r3, r3, #1
 8016aae:	f100 0001 	add.w	r0, r0, #1
 8016ab2:	d005      	beq.n	8016ac0 <__lo0bits+0x5c>
 8016ab4:	600b      	str	r3, [r1, #0]
 8016ab6:	4770      	bx	lr
 8016ab8:	4610      	mov	r0, r2
 8016aba:	e7e8      	b.n	8016a8e <__lo0bits+0x2a>
 8016abc:	2000      	movs	r0, #0
 8016abe:	4770      	bx	lr
 8016ac0:	2020      	movs	r0, #32
 8016ac2:	4770      	bx	lr

08016ac4 <__i2b>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	460c      	mov	r4, r1
 8016ac8:	2101      	movs	r1, #1
 8016aca:	f7ff feb5 	bl	8016838 <_Balloc>
 8016ace:	4602      	mov	r2, r0
 8016ad0:	b928      	cbnz	r0, 8016ade <__i2b+0x1a>
 8016ad2:	4b05      	ldr	r3, [pc, #20]	; (8016ae8 <__i2b+0x24>)
 8016ad4:	4805      	ldr	r0, [pc, #20]	; (8016aec <__i2b+0x28>)
 8016ad6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016ada:	f000 fe09 	bl	80176f0 <__assert_func>
 8016ade:	2301      	movs	r3, #1
 8016ae0:	6144      	str	r4, [r0, #20]
 8016ae2:	6103      	str	r3, [r0, #16]
 8016ae4:	bd10      	pop	{r4, pc}
 8016ae6:	bf00      	nop
 8016ae8:	0801ac44 	.word	0x0801ac44
 8016aec:	0801ad38 	.word	0x0801ad38

08016af0 <__multiply>:
 8016af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af4:	4614      	mov	r4, r2
 8016af6:	690a      	ldr	r2, [r1, #16]
 8016af8:	6923      	ldr	r3, [r4, #16]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	bfb8      	it	lt
 8016afe:	460b      	movlt	r3, r1
 8016b00:	460d      	mov	r5, r1
 8016b02:	bfbc      	itt	lt
 8016b04:	4625      	movlt	r5, r4
 8016b06:	461c      	movlt	r4, r3
 8016b08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016b0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016b10:	68ab      	ldr	r3, [r5, #8]
 8016b12:	6869      	ldr	r1, [r5, #4]
 8016b14:	eb0a 0709 	add.w	r7, sl, r9
 8016b18:	42bb      	cmp	r3, r7
 8016b1a:	b085      	sub	sp, #20
 8016b1c:	bfb8      	it	lt
 8016b1e:	3101      	addlt	r1, #1
 8016b20:	f7ff fe8a 	bl	8016838 <_Balloc>
 8016b24:	b930      	cbnz	r0, 8016b34 <__multiply+0x44>
 8016b26:	4602      	mov	r2, r0
 8016b28:	4b42      	ldr	r3, [pc, #264]	; (8016c34 <__multiply+0x144>)
 8016b2a:	4843      	ldr	r0, [pc, #268]	; (8016c38 <__multiply+0x148>)
 8016b2c:	f240 115d 	movw	r1, #349	; 0x15d
 8016b30:	f000 fdde 	bl	80176f0 <__assert_func>
 8016b34:	f100 0614 	add.w	r6, r0, #20
 8016b38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016b3c:	4633      	mov	r3, r6
 8016b3e:	2200      	movs	r2, #0
 8016b40:	4543      	cmp	r3, r8
 8016b42:	d31e      	bcc.n	8016b82 <__multiply+0x92>
 8016b44:	f105 0c14 	add.w	ip, r5, #20
 8016b48:	f104 0314 	add.w	r3, r4, #20
 8016b4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016b50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016b54:	9202      	str	r2, [sp, #8]
 8016b56:	ebac 0205 	sub.w	r2, ip, r5
 8016b5a:	3a15      	subs	r2, #21
 8016b5c:	f022 0203 	bic.w	r2, r2, #3
 8016b60:	3204      	adds	r2, #4
 8016b62:	f105 0115 	add.w	r1, r5, #21
 8016b66:	458c      	cmp	ip, r1
 8016b68:	bf38      	it	cc
 8016b6a:	2204      	movcc	r2, #4
 8016b6c:	9201      	str	r2, [sp, #4]
 8016b6e:	9a02      	ldr	r2, [sp, #8]
 8016b70:	9303      	str	r3, [sp, #12]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d808      	bhi.n	8016b88 <__multiply+0x98>
 8016b76:	2f00      	cmp	r7, #0
 8016b78:	dc55      	bgt.n	8016c26 <__multiply+0x136>
 8016b7a:	6107      	str	r7, [r0, #16]
 8016b7c:	b005      	add	sp, #20
 8016b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b82:	f843 2b04 	str.w	r2, [r3], #4
 8016b86:	e7db      	b.n	8016b40 <__multiply+0x50>
 8016b88:	f8b3 a000 	ldrh.w	sl, [r3]
 8016b8c:	f1ba 0f00 	cmp.w	sl, #0
 8016b90:	d020      	beq.n	8016bd4 <__multiply+0xe4>
 8016b92:	f105 0e14 	add.w	lr, r5, #20
 8016b96:	46b1      	mov	r9, r6
 8016b98:	2200      	movs	r2, #0
 8016b9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016b9e:	f8d9 b000 	ldr.w	fp, [r9]
 8016ba2:	b2a1      	uxth	r1, r4
 8016ba4:	fa1f fb8b 	uxth.w	fp, fp
 8016ba8:	fb0a b101 	mla	r1, sl, r1, fp
 8016bac:	4411      	add	r1, r2
 8016bae:	f8d9 2000 	ldr.w	r2, [r9]
 8016bb2:	0c24      	lsrs	r4, r4, #16
 8016bb4:	0c12      	lsrs	r2, r2, #16
 8016bb6:	fb0a 2404 	mla	r4, sl, r4, r2
 8016bba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016bbe:	b289      	uxth	r1, r1
 8016bc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016bc4:	45f4      	cmp	ip, lr
 8016bc6:	f849 1b04 	str.w	r1, [r9], #4
 8016bca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016bce:	d8e4      	bhi.n	8016b9a <__multiply+0xaa>
 8016bd0:	9901      	ldr	r1, [sp, #4]
 8016bd2:	5072      	str	r2, [r6, r1]
 8016bd4:	9a03      	ldr	r2, [sp, #12]
 8016bd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016bda:	3304      	adds	r3, #4
 8016bdc:	f1b9 0f00 	cmp.w	r9, #0
 8016be0:	d01f      	beq.n	8016c22 <__multiply+0x132>
 8016be2:	6834      	ldr	r4, [r6, #0]
 8016be4:	f105 0114 	add.w	r1, r5, #20
 8016be8:	46b6      	mov	lr, r6
 8016bea:	f04f 0a00 	mov.w	sl, #0
 8016bee:	880a      	ldrh	r2, [r1, #0]
 8016bf0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016bf4:	fb09 b202 	mla	r2, r9, r2, fp
 8016bf8:	4492      	add	sl, r2
 8016bfa:	b2a4      	uxth	r4, r4
 8016bfc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016c00:	f84e 4b04 	str.w	r4, [lr], #4
 8016c04:	f851 4b04 	ldr.w	r4, [r1], #4
 8016c08:	f8be 2000 	ldrh.w	r2, [lr]
 8016c0c:	0c24      	lsrs	r4, r4, #16
 8016c0e:	fb09 2404 	mla	r4, r9, r4, r2
 8016c12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016c16:	458c      	cmp	ip, r1
 8016c18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016c1c:	d8e7      	bhi.n	8016bee <__multiply+0xfe>
 8016c1e:	9a01      	ldr	r2, [sp, #4]
 8016c20:	50b4      	str	r4, [r6, r2]
 8016c22:	3604      	adds	r6, #4
 8016c24:	e7a3      	b.n	8016b6e <__multiply+0x7e>
 8016c26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d1a5      	bne.n	8016b7a <__multiply+0x8a>
 8016c2e:	3f01      	subs	r7, #1
 8016c30:	e7a1      	b.n	8016b76 <__multiply+0x86>
 8016c32:	bf00      	nop
 8016c34:	0801ac44 	.word	0x0801ac44
 8016c38:	0801ad38 	.word	0x0801ad38

08016c3c <__pow5mult>:
 8016c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c40:	4615      	mov	r5, r2
 8016c42:	f012 0203 	ands.w	r2, r2, #3
 8016c46:	4606      	mov	r6, r0
 8016c48:	460f      	mov	r7, r1
 8016c4a:	d007      	beq.n	8016c5c <__pow5mult+0x20>
 8016c4c:	4c25      	ldr	r4, [pc, #148]	; (8016ce4 <__pow5mult+0xa8>)
 8016c4e:	3a01      	subs	r2, #1
 8016c50:	2300      	movs	r3, #0
 8016c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016c56:	f7ff fe51 	bl	80168fc <__multadd>
 8016c5a:	4607      	mov	r7, r0
 8016c5c:	10ad      	asrs	r5, r5, #2
 8016c5e:	d03d      	beq.n	8016cdc <__pow5mult+0xa0>
 8016c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016c62:	b97c      	cbnz	r4, 8016c84 <__pow5mult+0x48>
 8016c64:	2010      	movs	r0, #16
 8016c66:	f7ff fdcd 	bl	8016804 <malloc>
 8016c6a:	4602      	mov	r2, r0
 8016c6c:	6270      	str	r0, [r6, #36]	; 0x24
 8016c6e:	b928      	cbnz	r0, 8016c7c <__pow5mult+0x40>
 8016c70:	4b1d      	ldr	r3, [pc, #116]	; (8016ce8 <__pow5mult+0xac>)
 8016c72:	481e      	ldr	r0, [pc, #120]	; (8016cec <__pow5mult+0xb0>)
 8016c74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016c78:	f000 fd3a 	bl	80176f0 <__assert_func>
 8016c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c80:	6004      	str	r4, [r0, #0]
 8016c82:	60c4      	str	r4, [r0, #12]
 8016c84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016c8c:	b94c      	cbnz	r4, 8016ca2 <__pow5mult+0x66>
 8016c8e:	f240 2171 	movw	r1, #625	; 0x271
 8016c92:	4630      	mov	r0, r6
 8016c94:	f7ff ff16 	bl	8016ac4 <__i2b>
 8016c98:	2300      	movs	r3, #0
 8016c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	6003      	str	r3, [r0, #0]
 8016ca2:	f04f 0900 	mov.w	r9, #0
 8016ca6:	07eb      	lsls	r3, r5, #31
 8016ca8:	d50a      	bpl.n	8016cc0 <__pow5mult+0x84>
 8016caa:	4639      	mov	r1, r7
 8016cac:	4622      	mov	r2, r4
 8016cae:	4630      	mov	r0, r6
 8016cb0:	f7ff ff1e 	bl	8016af0 <__multiply>
 8016cb4:	4639      	mov	r1, r7
 8016cb6:	4680      	mov	r8, r0
 8016cb8:	4630      	mov	r0, r6
 8016cba:	f7ff fdfd 	bl	80168b8 <_Bfree>
 8016cbe:	4647      	mov	r7, r8
 8016cc0:	106d      	asrs	r5, r5, #1
 8016cc2:	d00b      	beq.n	8016cdc <__pow5mult+0xa0>
 8016cc4:	6820      	ldr	r0, [r4, #0]
 8016cc6:	b938      	cbnz	r0, 8016cd8 <__pow5mult+0x9c>
 8016cc8:	4622      	mov	r2, r4
 8016cca:	4621      	mov	r1, r4
 8016ccc:	4630      	mov	r0, r6
 8016cce:	f7ff ff0f 	bl	8016af0 <__multiply>
 8016cd2:	6020      	str	r0, [r4, #0]
 8016cd4:	f8c0 9000 	str.w	r9, [r0]
 8016cd8:	4604      	mov	r4, r0
 8016cda:	e7e4      	b.n	8016ca6 <__pow5mult+0x6a>
 8016cdc:	4638      	mov	r0, r7
 8016cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ce2:	bf00      	nop
 8016ce4:	0801ae88 	.word	0x0801ae88
 8016ce8:	0801abce 	.word	0x0801abce
 8016cec:	0801ad38 	.word	0x0801ad38

08016cf0 <__lshift>:
 8016cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf4:	460c      	mov	r4, r1
 8016cf6:	6849      	ldr	r1, [r1, #4]
 8016cf8:	6923      	ldr	r3, [r4, #16]
 8016cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016cfe:	68a3      	ldr	r3, [r4, #8]
 8016d00:	4607      	mov	r7, r0
 8016d02:	4691      	mov	r9, r2
 8016d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016d08:	f108 0601 	add.w	r6, r8, #1
 8016d0c:	42b3      	cmp	r3, r6
 8016d0e:	db0b      	blt.n	8016d28 <__lshift+0x38>
 8016d10:	4638      	mov	r0, r7
 8016d12:	f7ff fd91 	bl	8016838 <_Balloc>
 8016d16:	4605      	mov	r5, r0
 8016d18:	b948      	cbnz	r0, 8016d2e <__lshift+0x3e>
 8016d1a:	4602      	mov	r2, r0
 8016d1c:	4b28      	ldr	r3, [pc, #160]	; (8016dc0 <__lshift+0xd0>)
 8016d1e:	4829      	ldr	r0, [pc, #164]	; (8016dc4 <__lshift+0xd4>)
 8016d20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016d24:	f000 fce4 	bl	80176f0 <__assert_func>
 8016d28:	3101      	adds	r1, #1
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	e7ee      	b.n	8016d0c <__lshift+0x1c>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	f100 0114 	add.w	r1, r0, #20
 8016d34:	f100 0210 	add.w	r2, r0, #16
 8016d38:	4618      	mov	r0, r3
 8016d3a:	4553      	cmp	r3, sl
 8016d3c:	db33      	blt.n	8016da6 <__lshift+0xb6>
 8016d3e:	6920      	ldr	r0, [r4, #16]
 8016d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016d44:	f104 0314 	add.w	r3, r4, #20
 8016d48:	f019 091f 	ands.w	r9, r9, #31
 8016d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016d50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016d54:	d02b      	beq.n	8016dae <__lshift+0xbe>
 8016d56:	f1c9 0e20 	rsb	lr, r9, #32
 8016d5a:	468a      	mov	sl, r1
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	6818      	ldr	r0, [r3, #0]
 8016d60:	fa00 f009 	lsl.w	r0, r0, r9
 8016d64:	4302      	orrs	r2, r0
 8016d66:	f84a 2b04 	str.w	r2, [sl], #4
 8016d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d6e:	459c      	cmp	ip, r3
 8016d70:	fa22 f20e 	lsr.w	r2, r2, lr
 8016d74:	d8f3      	bhi.n	8016d5e <__lshift+0x6e>
 8016d76:	ebac 0304 	sub.w	r3, ip, r4
 8016d7a:	3b15      	subs	r3, #21
 8016d7c:	f023 0303 	bic.w	r3, r3, #3
 8016d80:	3304      	adds	r3, #4
 8016d82:	f104 0015 	add.w	r0, r4, #21
 8016d86:	4584      	cmp	ip, r0
 8016d88:	bf38      	it	cc
 8016d8a:	2304      	movcc	r3, #4
 8016d8c:	50ca      	str	r2, [r1, r3]
 8016d8e:	b10a      	cbz	r2, 8016d94 <__lshift+0xa4>
 8016d90:	f108 0602 	add.w	r6, r8, #2
 8016d94:	3e01      	subs	r6, #1
 8016d96:	4638      	mov	r0, r7
 8016d98:	612e      	str	r6, [r5, #16]
 8016d9a:	4621      	mov	r1, r4
 8016d9c:	f7ff fd8c 	bl	80168b8 <_Bfree>
 8016da0:	4628      	mov	r0, r5
 8016da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8016daa:	3301      	adds	r3, #1
 8016dac:	e7c5      	b.n	8016d3a <__lshift+0x4a>
 8016dae:	3904      	subs	r1, #4
 8016db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8016db8:	459c      	cmp	ip, r3
 8016dba:	d8f9      	bhi.n	8016db0 <__lshift+0xc0>
 8016dbc:	e7ea      	b.n	8016d94 <__lshift+0xa4>
 8016dbe:	bf00      	nop
 8016dc0:	0801ac44 	.word	0x0801ac44
 8016dc4:	0801ad38 	.word	0x0801ad38

08016dc8 <__mcmp>:
 8016dc8:	b530      	push	{r4, r5, lr}
 8016dca:	6902      	ldr	r2, [r0, #16]
 8016dcc:	690c      	ldr	r4, [r1, #16]
 8016dce:	1b12      	subs	r2, r2, r4
 8016dd0:	d10e      	bne.n	8016df0 <__mcmp+0x28>
 8016dd2:	f100 0314 	add.w	r3, r0, #20
 8016dd6:	3114      	adds	r1, #20
 8016dd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016ddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016de0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016de4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016de8:	42a5      	cmp	r5, r4
 8016dea:	d003      	beq.n	8016df4 <__mcmp+0x2c>
 8016dec:	d305      	bcc.n	8016dfa <__mcmp+0x32>
 8016dee:	2201      	movs	r2, #1
 8016df0:	4610      	mov	r0, r2
 8016df2:	bd30      	pop	{r4, r5, pc}
 8016df4:	4283      	cmp	r3, r0
 8016df6:	d3f3      	bcc.n	8016de0 <__mcmp+0x18>
 8016df8:	e7fa      	b.n	8016df0 <__mcmp+0x28>
 8016dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8016dfe:	e7f7      	b.n	8016df0 <__mcmp+0x28>

08016e00 <__mdiff>:
 8016e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	460c      	mov	r4, r1
 8016e06:	4606      	mov	r6, r0
 8016e08:	4611      	mov	r1, r2
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	4617      	mov	r7, r2
 8016e0e:	f7ff ffdb 	bl	8016dc8 <__mcmp>
 8016e12:	1e05      	subs	r5, r0, #0
 8016e14:	d110      	bne.n	8016e38 <__mdiff+0x38>
 8016e16:	4629      	mov	r1, r5
 8016e18:	4630      	mov	r0, r6
 8016e1a:	f7ff fd0d 	bl	8016838 <_Balloc>
 8016e1e:	b930      	cbnz	r0, 8016e2e <__mdiff+0x2e>
 8016e20:	4b39      	ldr	r3, [pc, #228]	; (8016f08 <__mdiff+0x108>)
 8016e22:	4602      	mov	r2, r0
 8016e24:	f240 2132 	movw	r1, #562	; 0x232
 8016e28:	4838      	ldr	r0, [pc, #224]	; (8016f0c <__mdiff+0x10c>)
 8016e2a:	f000 fc61 	bl	80176f0 <__assert_func>
 8016e2e:	2301      	movs	r3, #1
 8016e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e38:	bfa4      	itt	ge
 8016e3a:	463b      	movge	r3, r7
 8016e3c:	4627      	movge	r7, r4
 8016e3e:	4630      	mov	r0, r6
 8016e40:	6879      	ldr	r1, [r7, #4]
 8016e42:	bfa6      	itte	ge
 8016e44:	461c      	movge	r4, r3
 8016e46:	2500      	movge	r5, #0
 8016e48:	2501      	movlt	r5, #1
 8016e4a:	f7ff fcf5 	bl	8016838 <_Balloc>
 8016e4e:	b920      	cbnz	r0, 8016e5a <__mdiff+0x5a>
 8016e50:	4b2d      	ldr	r3, [pc, #180]	; (8016f08 <__mdiff+0x108>)
 8016e52:	4602      	mov	r2, r0
 8016e54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016e58:	e7e6      	b.n	8016e28 <__mdiff+0x28>
 8016e5a:	693e      	ldr	r6, [r7, #16]
 8016e5c:	60c5      	str	r5, [r0, #12]
 8016e5e:	6925      	ldr	r5, [r4, #16]
 8016e60:	f107 0114 	add.w	r1, r7, #20
 8016e64:	f104 0914 	add.w	r9, r4, #20
 8016e68:	f100 0e14 	add.w	lr, r0, #20
 8016e6c:	f107 0210 	add.w	r2, r7, #16
 8016e70:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016e74:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016e78:	46f2      	mov	sl, lr
 8016e7a:	2700      	movs	r7, #0
 8016e7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016e80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016e84:	fa1f f883 	uxth.w	r8, r3
 8016e88:	fa17 f78b 	uxtah	r7, r7, fp
 8016e8c:	0c1b      	lsrs	r3, r3, #16
 8016e8e:	eba7 0808 	sub.w	r8, r7, r8
 8016e92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016e96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016e9a:	fa1f f888 	uxth.w	r8, r8
 8016e9e:	141f      	asrs	r7, r3, #16
 8016ea0:	454d      	cmp	r5, r9
 8016ea2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016ea6:	f84a 3b04 	str.w	r3, [sl], #4
 8016eaa:	d8e7      	bhi.n	8016e7c <__mdiff+0x7c>
 8016eac:	1b2b      	subs	r3, r5, r4
 8016eae:	3b15      	subs	r3, #21
 8016eb0:	f023 0303 	bic.w	r3, r3, #3
 8016eb4:	3304      	adds	r3, #4
 8016eb6:	3415      	adds	r4, #21
 8016eb8:	42a5      	cmp	r5, r4
 8016eba:	bf38      	it	cc
 8016ebc:	2304      	movcc	r3, #4
 8016ebe:	4419      	add	r1, r3
 8016ec0:	4473      	add	r3, lr
 8016ec2:	469e      	mov	lr, r3
 8016ec4:	460d      	mov	r5, r1
 8016ec6:	4565      	cmp	r5, ip
 8016ec8:	d30e      	bcc.n	8016ee8 <__mdiff+0xe8>
 8016eca:	f10c 0203 	add.w	r2, ip, #3
 8016ece:	1a52      	subs	r2, r2, r1
 8016ed0:	f022 0203 	bic.w	r2, r2, #3
 8016ed4:	3903      	subs	r1, #3
 8016ed6:	458c      	cmp	ip, r1
 8016ed8:	bf38      	it	cc
 8016eda:	2200      	movcc	r2, #0
 8016edc:	441a      	add	r2, r3
 8016ede:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016ee2:	b17b      	cbz	r3, 8016f04 <__mdiff+0x104>
 8016ee4:	6106      	str	r6, [r0, #16]
 8016ee6:	e7a5      	b.n	8016e34 <__mdiff+0x34>
 8016ee8:	f855 8b04 	ldr.w	r8, [r5], #4
 8016eec:	fa17 f488 	uxtah	r4, r7, r8
 8016ef0:	1422      	asrs	r2, r4, #16
 8016ef2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016ef6:	b2a4      	uxth	r4, r4
 8016ef8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016efc:	f84e 4b04 	str.w	r4, [lr], #4
 8016f00:	1417      	asrs	r7, r2, #16
 8016f02:	e7e0      	b.n	8016ec6 <__mdiff+0xc6>
 8016f04:	3e01      	subs	r6, #1
 8016f06:	e7ea      	b.n	8016ede <__mdiff+0xde>
 8016f08:	0801ac44 	.word	0x0801ac44
 8016f0c:	0801ad38 	.word	0x0801ad38

08016f10 <__ulp>:
 8016f10:	b082      	sub	sp, #8
 8016f12:	ed8d 0b00 	vstr	d0, [sp]
 8016f16:	9b01      	ldr	r3, [sp, #4]
 8016f18:	4912      	ldr	r1, [pc, #72]	; (8016f64 <__ulp+0x54>)
 8016f1a:	4019      	ands	r1, r3
 8016f1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016f20:	2900      	cmp	r1, #0
 8016f22:	dd05      	ble.n	8016f30 <__ulp+0x20>
 8016f24:	2200      	movs	r2, #0
 8016f26:	460b      	mov	r3, r1
 8016f28:	ec43 2b10 	vmov	d0, r2, r3
 8016f2c:	b002      	add	sp, #8
 8016f2e:	4770      	bx	lr
 8016f30:	4249      	negs	r1, r1
 8016f32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016f36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016f3a:	f04f 0200 	mov.w	r2, #0
 8016f3e:	f04f 0300 	mov.w	r3, #0
 8016f42:	da04      	bge.n	8016f4e <__ulp+0x3e>
 8016f44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016f48:	fa41 f300 	asr.w	r3, r1, r0
 8016f4c:	e7ec      	b.n	8016f28 <__ulp+0x18>
 8016f4e:	f1a0 0114 	sub.w	r1, r0, #20
 8016f52:	291e      	cmp	r1, #30
 8016f54:	bfda      	itte	le
 8016f56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016f5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8016f5e:	2101      	movgt	r1, #1
 8016f60:	460a      	mov	r2, r1
 8016f62:	e7e1      	b.n	8016f28 <__ulp+0x18>
 8016f64:	7ff00000 	.word	0x7ff00000

08016f68 <__b2d>:
 8016f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f6a:	6905      	ldr	r5, [r0, #16]
 8016f6c:	f100 0714 	add.w	r7, r0, #20
 8016f70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016f74:	1f2e      	subs	r6, r5, #4
 8016f76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	f7ff fd52 	bl	8016a24 <__hi0bits>
 8016f80:	f1c0 0320 	rsb	r3, r0, #32
 8016f84:	280a      	cmp	r0, #10
 8016f86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017004 <__b2d+0x9c>
 8016f8a:	600b      	str	r3, [r1, #0]
 8016f8c:	dc14      	bgt.n	8016fb8 <__b2d+0x50>
 8016f8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016f92:	fa24 f10e 	lsr.w	r1, r4, lr
 8016f96:	42b7      	cmp	r7, r6
 8016f98:	ea41 030c 	orr.w	r3, r1, ip
 8016f9c:	bf34      	ite	cc
 8016f9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016fa2:	2100      	movcs	r1, #0
 8016fa4:	3015      	adds	r0, #21
 8016fa6:	fa04 f000 	lsl.w	r0, r4, r0
 8016faa:	fa21 f10e 	lsr.w	r1, r1, lr
 8016fae:	ea40 0201 	orr.w	r2, r0, r1
 8016fb2:	ec43 2b10 	vmov	d0, r2, r3
 8016fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb8:	42b7      	cmp	r7, r6
 8016fba:	bf3a      	itte	cc
 8016fbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016fc0:	f1a5 0608 	subcc.w	r6, r5, #8
 8016fc4:	2100      	movcs	r1, #0
 8016fc6:	380b      	subs	r0, #11
 8016fc8:	d017      	beq.n	8016ffa <__b2d+0x92>
 8016fca:	f1c0 0c20 	rsb	ip, r0, #32
 8016fce:	fa04 f500 	lsl.w	r5, r4, r0
 8016fd2:	42be      	cmp	r6, r7
 8016fd4:	fa21 f40c 	lsr.w	r4, r1, ip
 8016fd8:	ea45 0504 	orr.w	r5, r5, r4
 8016fdc:	bf8c      	ite	hi
 8016fde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016fe2:	2400      	movls	r4, #0
 8016fe4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016fe8:	fa01 f000 	lsl.w	r0, r1, r0
 8016fec:	fa24 f40c 	lsr.w	r4, r4, ip
 8016ff0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016ff4:	ea40 0204 	orr.w	r2, r0, r4
 8016ff8:	e7db      	b.n	8016fb2 <__b2d+0x4a>
 8016ffa:	ea44 030c 	orr.w	r3, r4, ip
 8016ffe:	460a      	mov	r2, r1
 8017000:	e7d7      	b.n	8016fb2 <__b2d+0x4a>
 8017002:	bf00      	nop
 8017004:	3ff00000 	.word	0x3ff00000

08017008 <__d2b>:
 8017008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801700c:	4689      	mov	r9, r1
 801700e:	2101      	movs	r1, #1
 8017010:	ec57 6b10 	vmov	r6, r7, d0
 8017014:	4690      	mov	r8, r2
 8017016:	f7ff fc0f 	bl	8016838 <_Balloc>
 801701a:	4604      	mov	r4, r0
 801701c:	b930      	cbnz	r0, 801702c <__d2b+0x24>
 801701e:	4602      	mov	r2, r0
 8017020:	4b25      	ldr	r3, [pc, #148]	; (80170b8 <__d2b+0xb0>)
 8017022:	4826      	ldr	r0, [pc, #152]	; (80170bc <__d2b+0xb4>)
 8017024:	f240 310a 	movw	r1, #778	; 0x30a
 8017028:	f000 fb62 	bl	80176f0 <__assert_func>
 801702c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017034:	bb35      	cbnz	r5, 8017084 <__d2b+0x7c>
 8017036:	2e00      	cmp	r6, #0
 8017038:	9301      	str	r3, [sp, #4]
 801703a:	d028      	beq.n	801708e <__d2b+0x86>
 801703c:	4668      	mov	r0, sp
 801703e:	9600      	str	r6, [sp, #0]
 8017040:	f7ff fd10 	bl	8016a64 <__lo0bits>
 8017044:	9900      	ldr	r1, [sp, #0]
 8017046:	b300      	cbz	r0, 801708a <__d2b+0x82>
 8017048:	9a01      	ldr	r2, [sp, #4]
 801704a:	f1c0 0320 	rsb	r3, r0, #32
 801704e:	fa02 f303 	lsl.w	r3, r2, r3
 8017052:	430b      	orrs	r3, r1
 8017054:	40c2      	lsrs	r2, r0
 8017056:	6163      	str	r3, [r4, #20]
 8017058:	9201      	str	r2, [sp, #4]
 801705a:	9b01      	ldr	r3, [sp, #4]
 801705c:	61a3      	str	r3, [r4, #24]
 801705e:	2b00      	cmp	r3, #0
 8017060:	bf14      	ite	ne
 8017062:	2202      	movne	r2, #2
 8017064:	2201      	moveq	r2, #1
 8017066:	6122      	str	r2, [r4, #16]
 8017068:	b1d5      	cbz	r5, 80170a0 <__d2b+0x98>
 801706a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801706e:	4405      	add	r5, r0
 8017070:	f8c9 5000 	str.w	r5, [r9]
 8017074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017078:	f8c8 0000 	str.w	r0, [r8]
 801707c:	4620      	mov	r0, r4
 801707e:	b003      	add	sp, #12
 8017080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017088:	e7d5      	b.n	8017036 <__d2b+0x2e>
 801708a:	6161      	str	r1, [r4, #20]
 801708c:	e7e5      	b.n	801705a <__d2b+0x52>
 801708e:	a801      	add	r0, sp, #4
 8017090:	f7ff fce8 	bl	8016a64 <__lo0bits>
 8017094:	9b01      	ldr	r3, [sp, #4]
 8017096:	6163      	str	r3, [r4, #20]
 8017098:	2201      	movs	r2, #1
 801709a:	6122      	str	r2, [r4, #16]
 801709c:	3020      	adds	r0, #32
 801709e:	e7e3      	b.n	8017068 <__d2b+0x60>
 80170a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80170a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80170a8:	f8c9 0000 	str.w	r0, [r9]
 80170ac:	6918      	ldr	r0, [r3, #16]
 80170ae:	f7ff fcb9 	bl	8016a24 <__hi0bits>
 80170b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80170b6:	e7df      	b.n	8017078 <__d2b+0x70>
 80170b8:	0801ac44 	.word	0x0801ac44
 80170bc:	0801ad38 	.word	0x0801ad38

080170c0 <__ratio>:
 80170c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c4:	4688      	mov	r8, r1
 80170c6:	4669      	mov	r1, sp
 80170c8:	4681      	mov	r9, r0
 80170ca:	f7ff ff4d 	bl	8016f68 <__b2d>
 80170ce:	a901      	add	r1, sp, #4
 80170d0:	4640      	mov	r0, r8
 80170d2:	ec55 4b10 	vmov	r4, r5, d0
 80170d6:	f7ff ff47 	bl	8016f68 <__b2d>
 80170da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80170de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80170e2:	eba3 0c02 	sub.w	ip, r3, r2
 80170e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80170ea:	1a9b      	subs	r3, r3, r2
 80170ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80170f0:	ec51 0b10 	vmov	r0, r1, d0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	bfd6      	itet	le
 80170f8:	460a      	movle	r2, r1
 80170fa:	462a      	movgt	r2, r5
 80170fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017100:	468b      	mov	fp, r1
 8017102:	462f      	mov	r7, r5
 8017104:	bfd4      	ite	le
 8017106:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801710a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801710e:	4620      	mov	r0, r4
 8017110:	ee10 2a10 	vmov	r2, s0
 8017114:	465b      	mov	r3, fp
 8017116:	4639      	mov	r1, r7
 8017118:	f7e9 fb98 	bl	800084c <__aeabi_ddiv>
 801711c:	ec41 0b10 	vmov	d0, r0, r1
 8017120:	b003      	add	sp, #12
 8017122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017126 <__copybits>:
 8017126:	3901      	subs	r1, #1
 8017128:	b570      	push	{r4, r5, r6, lr}
 801712a:	1149      	asrs	r1, r1, #5
 801712c:	6914      	ldr	r4, [r2, #16]
 801712e:	3101      	adds	r1, #1
 8017130:	f102 0314 	add.w	r3, r2, #20
 8017134:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017138:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801713c:	1f05      	subs	r5, r0, #4
 801713e:	42a3      	cmp	r3, r4
 8017140:	d30c      	bcc.n	801715c <__copybits+0x36>
 8017142:	1aa3      	subs	r3, r4, r2
 8017144:	3b11      	subs	r3, #17
 8017146:	f023 0303 	bic.w	r3, r3, #3
 801714a:	3211      	adds	r2, #17
 801714c:	42a2      	cmp	r2, r4
 801714e:	bf88      	it	hi
 8017150:	2300      	movhi	r3, #0
 8017152:	4418      	add	r0, r3
 8017154:	2300      	movs	r3, #0
 8017156:	4288      	cmp	r0, r1
 8017158:	d305      	bcc.n	8017166 <__copybits+0x40>
 801715a:	bd70      	pop	{r4, r5, r6, pc}
 801715c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017160:	f845 6f04 	str.w	r6, [r5, #4]!
 8017164:	e7eb      	b.n	801713e <__copybits+0x18>
 8017166:	f840 3b04 	str.w	r3, [r0], #4
 801716a:	e7f4      	b.n	8017156 <__copybits+0x30>

0801716c <__any_on>:
 801716c:	f100 0214 	add.w	r2, r0, #20
 8017170:	6900      	ldr	r0, [r0, #16]
 8017172:	114b      	asrs	r3, r1, #5
 8017174:	4298      	cmp	r0, r3
 8017176:	b510      	push	{r4, lr}
 8017178:	db11      	blt.n	801719e <__any_on+0x32>
 801717a:	dd0a      	ble.n	8017192 <__any_on+0x26>
 801717c:	f011 011f 	ands.w	r1, r1, #31
 8017180:	d007      	beq.n	8017192 <__any_on+0x26>
 8017182:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017186:	fa24 f001 	lsr.w	r0, r4, r1
 801718a:	fa00 f101 	lsl.w	r1, r0, r1
 801718e:	428c      	cmp	r4, r1
 8017190:	d10b      	bne.n	80171aa <__any_on+0x3e>
 8017192:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017196:	4293      	cmp	r3, r2
 8017198:	d803      	bhi.n	80171a2 <__any_on+0x36>
 801719a:	2000      	movs	r0, #0
 801719c:	bd10      	pop	{r4, pc}
 801719e:	4603      	mov	r3, r0
 80171a0:	e7f7      	b.n	8017192 <__any_on+0x26>
 80171a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80171a6:	2900      	cmp	r1, #0
 80171a8:	d0f5      	beq.n	8017196 <__any_on+0x2a>
 80171aa:	2001      	movs	r0, #1
 80171ac:	e7f6      	b.n	801719c <__any_on+0x30>

080171ae <_calloc_r>:
 80171ae:	b513      	push	{r0, r1, r4, lr}
 80171b0:	434a      	muls	r2, r1
 80171b2:	4611      	mov	r1, r2
 80171b4:	9201      	str	r2, [sp, #4]
 80171b6:	f000 f859 	bl	801726c <_malloc_r>
 80171ba:	4604      	mov	r4, r0
 80171bc:	b118      	cbz	r0, 80171c6 <_calloc_r+0x18>
 80171be:	9a01      	ldr	r2, [sp, #4]
 80171c0:	2100      	movs	r1, #0
 80171c2:	f7fc f8c9 	bl	8013358 <memset>
 80171c6:	4620      	mov	r0, r4
 80171c8:	b002      	add	sp, #8
 80171ca:	bd10      	pop	{r4, pc}

080171cc <_free_r>:
 80171cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171ce:	2900      	cmp	r1, #0
 80171d0:	d048      	beq.n	8017264 <_free_r+0x98>
 80171d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171d6:	9001      	str	r0, [sp, #4]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	f1a1 0404 	sub.w	r4, r1, #4
 80171de:	bfb8      	it	lt
 80171e0:	18e4      	addlt	r4, r4, r3
 80171e2:	f000 fb13 	bl	801780c <__malloc_lock>
 80171e6:	4a20      	ldr	r2, [pc, #128]	; (8017268 <_free_r+0x9c>)
 80171e8:	9801      	ldr	r0, [sp, #4]
 80171ea:	6813      	ldr	r3, [r2, #0]
 80171ec:	4615      	mov	r5, r2
 80171ee:	b933      	cbnz	r3, 80171fe <_free_r+0x32>
 80171f0:	6063      	str	r3, [r4, #4]
 80171f2:	6014      	str	r4, [r2, #0]
 80171f4:	b003      	add	sp, #12
 80171f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171fa:	f000 bb0d 	b.w	8017818 <__malloc_unlock>
 80171fe:	42a3      	cmp	r3, r4
 8017200:	d90b      	bls.n	801721a <_free_r+0x4e>
 8017202:	6821      	ldr	r1, [r4, #0]
 8017204:	1862      	adds	r2, r4, r1
 8017206:	4293      	cmp	r3, r2
 8017208:	bf04      	itt	eq
 801720a:	681a      	ldreq	r2, [r3, #0]
 801720c:	685b      	ldreq	r3, [r3, #4]
 801720e:	6063      	str	r3, [r4, #4]
 8017210:	bf04      	itt	eq
 8017212:	1852      	addeq	r2, r2, r1
 8017214:	6022      	streq	r2, [r4, #0]
 8017216:	602c      	str	r4, [r5, #0]
 8017218:	e7ec      	b.n	80171f4 <_free_r+0x28>
 801721a:	461a      	mov	r2, r3
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	b10b      	cbz	r3, 8017224 <_free_r+0x58>
 8017220:	42a3      	cmp	r3, r4
 8017222:	d9fa      	bls.n	801721a <_free_r+0x4e>
 8017224:	6811      	ldr	r1, [r2, #0]
 8017226:	1855      	adds	r5, r2, r1
 8017228:	42a5      	cmp	r5, r4
 801722a:	d10b      	bne.n	8017244 <_free_r+0x78>
 801722c:	6824      	ldr	r4, [r4, #0]
 801722e:	4421      	add	r1, r4
 8017230:	1854      	adds	r4, r2, r1
 8017232:	42a3      	cmp	r3, r4
 8017234:	6011      	str	r1, [r2, #0]
 8017236:	d1dd      	bne.n	80171f4 <_free_r+0x28>
 8017238:	681c      	ldr	r4, [r3, #0]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	6053      	str	r3, [r2, #4]
 801723e:	4421      	add	r1, r4
 8017240:	6011      	str	r1, [r2, #0]
 8017242:	e7d7      	b.n	80171f4 <_free_r+0x28>
 8017244:	d902      	bls.n	801724c <_free_r+0x80>
 8017246:	230c      	movs	r3, #12
 8017248:	6003      	str	r3, [r0, #0]
 801724a:	e7d3      	b.n	80171f4 <_free_r+0x28>
 801724c:	6825      	ldr	r5, [r4, #0]
 801724e:	1961      	adds	r1, r4, r5
 8017250:	428b      	cmp	r3, r1
 8017252:	bf04      	itt	eq
 8017254:	6819      	ldreq	r1, [r3, #0]
 8017256:	685b      	ldreq	r3, [r3, #4]
 8017258:	6063      	str	r3, [r4, #4]
 801725a:	bf04      	itt	eq
 801725c:	1949      	addeq	r1, r1, r5
 801725e:	6021      	streq	r1, [r4, #0]
 8017260:	6054      	str	r4, [r2, #4]
 8017262:	e7c7      	b.n	80171f4 <_free_r+0x28>
 8017264:	b003      	add	sp, #12
 8017266:	bd30      	pop	{r4, r5, pc}
 8017268:	20000c34 	.word	0x20000c34

0801726c <_malloc_r>:
 801726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726e:	1ccd      	adds	r5, r1, #3
 8017270:	f025 0503 	bic.w	r5, r5, #3
 8017274:	3508      	adds	r5, #8
 8017276:	2d0c      	cmp	r5, #12
 8017278:	bf38      	it	cc
 801727a:	250c      	movcc	r5, #12
 801727c:	2d00      	cmp	r5, #0
 801727e:	4606      	mov	r6, r0
 8017280:	db01      	blt.n	8017286 <_malloc_r+0x1a>
 8017282:	42a9      	cmp	r1, r5
 8017284:	d903      	bls.n	801728e <_malloc_r+0x22>
 8017286:	230c      	movs	r3, #12
 8017288:	6033      	str	r3, [r6, #0]
 801728a:	2000      	movs	r0, #0
 801728c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801728e:	f000 fabd 	bl	801780c <__malloc_lock>
 8017292:	4921      	ldr	r1, [pc, #132]	; (8017318 <_malloc_r+0xac>)
 8017294:	680a      	ldr	r2, [r1, #0]
 8017296:	4614      	mov	r4, r2
 8017298:	b99c      	cbnz	r4, 80172c2 <_malloc_r+0x56>
 801729a:	4f20      	ldr	r7, [pc, #128]	; (801731c <_malloc_r+0xb0>)
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	b923      	cbnz	r3, 80172aa <_malloc_r+0x3e>
 80172a0:	4621      	mov	r1, r4
 80172a2:	4630      	mov	r0, r6
 80172a4:	f000 f9a0 	bl	80175e8 <_sbrk_r>
 80172a8:	6038      	str	r0, [r7, #0]
 80172aa:	4629      	mov	r1, r5
 80172ac:	4630      	mov	r0, r6
 80172ae:	f000 f99b 	bl	80175e8 <_sbrk_r>
 80172b2:	1c43      	adds	r3, r0, #1
 80172b4:	d123      	bne.n	80172fe <_malloc_r+0x92>
 80172b6:	230c      	movs	r3, #12
 80172b8:	6033      	str	r3, [r6, #0]
 80172ba:	4630      	mov	r0, r6
 80172bc:	f000 faac 	bl	8017818 <__malloc_unlock>
 80172c0:	e7e3      	b.n	801728a <_malloc_r+0x1e>
 80172c2:	6823      	ldr	r3, [r4, #0]
 80172c4:	1b5b      	subs	r3, r3, r5
 80172c6:	d417      	bmi.n	80172f8 <_malloc_r+0x8c>
 80172c8:	2b0b      	cmp	r3, #11
 80172ca:	d903      	bls.n	80172d4 <_malloc_r+0x68>
 80172cc:	6023      	str	r3, [r4, #0]
 80172ce:	441c      	add	r4, r3
 80172d0:	6025      	str	r5, [r4, #0]
 80172d2:	e004      	b.n	80172de <_malloc_r+0x72>
 80172d4:	6863      	ldr	r3, [r4, #4]
 80172d6:	42a2      	cmp	r2, r4
 80172d8:	bf0c      	ite	eq
 80172da:	600b      	streq	r3, [r1, #0]
 80172dc:	6053      	strne	r3, [r2, #4]
 80172de:	4630      	mov	r0, r6
 80172e0:	f000 fa9a 	bl	8017818 <__malloc_unlock>
 80172e4:	f104 000b 	add.w	r0, r4, #11
 80172e8:	1d23      	adds	r3, r4, #4
 80172ea:	f020 0007 	bic.w	r0, r0, #7
 80172ee:	1ac2      	subs	r2, r0, r3
 80172f0:	d0cc      	beq.n	801728c <_malloc_r+0x20>
 80172f2:	1a1b      	subs	r3, r3, r0
 80172f4:	50a3      	str	r3, [r4, r2]
 80172f6:	e7c9      	b.n	801728c <_malloc_r+0x20>
 80172f8:	4622      	mov	r2, r4
 80172fa:	6864      	ldr	r4, [r4, #4]
 80172fc:	e7cc      	b.n	8017298 <_malloc_r+0x2c>
 80172fe:	1cc4      	adds	r4, r0, #3
 8017300:	f024 0403 	bic.w	r4, r4, #3
 8017304:	42a0      	cmp	r0, r4
 8017306:	d0e3      	beq.n	80172d0 <_malloc_r+0x64>
 8017308:	1a21      	subs	r1, r4, r0
 801730a:	4630      	mov	r0, r6
 801730c:	f000 f96c 	bl	80175e8 <_sbrk_r>
 8017310:	3001      	adds	r0, #1
 8017312:	d1dd      	bne.n	80172d0 <_malloc_r+0x64>
 8017314:	e7cf      	b.n	80172b6 <_malloc_r+0x4a>
 8017316:	bf00      	nop
 8017318:	20000c34 	.word	0x20000c34
 801731c:	20000c38 	.word	0x20000c38

08017320 <__ssputs_r>:
 8017320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017324:	688e      	ldr	r6, [r1, #8]
 8017326:	429e      	cmp	r6, r3
 8017328:	4682      	mov	sl, r0
 801732a:	460c      	mov	r4, r1
 801732c:	4690      	mov	r8, r2
 801732e:	461f      	mov	r7, r3
 8017330:	d838      	bhi.n	80173a4 <__ssputs_r+0x84>
 8017332:	898a      	ldrh	r2, [r1, #12]
 8017334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017338:	d032      	beq.n	80173a0 <__ssputs_r+0x80>
 801733a:	6825      	ldr	r5, [r4, #0]
 801733c:	6909      	ldr	r1, [r1, #16]
 801733e:	eba5 0901 	sub.w	r9, r5, r1
 8017342:	6965      	ldr	r5, [r4, #20]
 8017344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801734c:	3301      	adds	r3, #1
 801734e:	444b      	add	r3, r9
 8017350:	106d      	asrs	r5, r5, #1
 8017352:	429d      	cmp	r5, r3
 8017354:	bf38      	it	cc
 8017356:	461d      	movcc	r5, r3
 8017358:	0553      	lsls	r3, r2, #21
 801735a:	d531      	bpl.n	80173c0 <__ssputs_r+0xa0>
 801735c:	4629      	mov	r1, r5
 801735e:	f7ff ff85 	bl	801726c <_malloc_r>
 8017362:	4606      	mov	r6, r0
 8017364:	b950      	cbnz	r0, 801737c <__ssputs_r+0x5c>
 8017366:	230c      	movs	r3, #12
 8017368:	f8ca 3000 	str.w	r3, [sl]
 801736c:	89a3      	ldrh	r3, [r4, #12]
 801736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017372:	81a3      	strh	r3, [r4, #12]
 8017374:	f04f 30ff 	mov.w	r0, #4294967295
 8017378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801737c:	6921      	ldr	r1, [r4, #16]
 801737e:	464a      	mov	r2, r9
 8017380:	f7fb ffdc 	bl	801333c <memcpy>
 8017384:	89a3      	ldrh	r3, [r4, #12]
 8017386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801738a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801738e:	81a3      	strh	r3, [r4, #12]
 8017390:	6126      	str	r6, [r4, #16]
 8017392:	6165      	str	r5, [r4, #20]
 8017394:	444e      	add	r6, r9
 8017396:	eba5 0509 	sub.w	r5, r5, r9
 801739a:	6026      	str	r6, [r4, #0]
 801739c:	60a5      	str	r5, [r4, #8]
 801739e:	463e      	mov	r6, r7
 80173a0:	42be      	cmp	r6, r7
 80173a2:	d900      	bls.n	80173a6 <__ssputs_r+0x86>
 80173a4:	463e      	mov	r6, r7
 80173a6:	4632      	mov	r2, r6
 80173a8:	6820      	ldr	r0, [r4, #0]
 80173aa:	4641      	mov	r1, r8
 80173ac:	f000 fa14 	bl	80177d8 <memmove>
 80173b0:	68a3      	ldr	r3, [r4, #8]
 80173b2:	6822      	ldr	r2, [r4, #0]
 80173b4:	1b9b      	subs	r3, r3, r6
 80173b6:	4432      	add	r2, r6
 80173b8:	60a3      	str	r3, [r4, #8]
 80173ba:	6022      	str	r2, [r4, #0]
 80173bc:	2000      	movs	r0, #0
 80173be:	e7db      	b.n	8017378 <__ssputs_r+0x58>
 80173c0:	462a      	mov	r2, r5
 80173c2:	f000 fa2f 	bl	8017824 <_realloc_r>
 80173c6:	4606      	mov	r6, r0
 80173c8:	2800      	cmp	r0, #0
 80173ca:	d1e1      	bne.n	8017390 <__ssputs_r+0x70>
 80173cc:	6921      	ldr	r1, [r4, #16]
 80173ce:	4650      	mov	r0, sl
 80173d0:	f7ff fefc 	bl	80171cc <_free_r>
 80173d4:	e7c7      	b.n	8017366 <__ssputs_r+0x46>
	...

080173d8 <_svfiprintf_r>:
 80173d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173dc:	4698      	mov	r8, r3
 80173de:	898b      	ldrh	r3, [r1, #12]
 80173e0:	061b      	lsls	r3, r3, #24
 80173e2:	b09d      	sub	sp, #116	; 0x74
 80173e4:	4607      	mov	r7, r0
 80173e6:	460d      	mov	r5, r1
 80173e8:	4614      	mov	r4, r2
 80173ea:	d50e      	bpl.n	801740a <_svfiprintf_r+0x32>
 80173ec:	690b      	ldr	r3, [r1, #16]
 80173ee:	b963      	cbnz	r3, 801740a <_svfiprintf_r+0x32>
 80173f0:	2140      	movs	r1, #64	; 0x40
 80173f2:	f7ff ff3b 	bl	801726c <_malloc_r>
 80173f6:	6028      	str	r0, [r5, #0]
 80173f8:	6128      	str	r0, [r5, #16]
 80173fa:	b920      	cbnz	r0, 8017406 <_svfiprintf_r+0x2e>
 80173fc:	230c      	movs	r3, #12
 80173fe:	603b      	str	r3, [r7, #0]
 8017400:	f04f 30ff 	mov.w	r0, #4294967295
 8017404:	e0d1      	b.n	80175aa <_svfiprintf_r+0x1d2>
 8017406:	2340      	movs	r3, #64	; 0x40
 8017408:	616b      	str	r3, [r5, #20]
 801740a:	2300      	movs	r3, #0
 801740c:	9309      	str	r3, [sp, #36]	; 0x24
 801740e:	2320      	movs	r3, #32
 8017410:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017414:	f8cd 800c 	str.w	r8, [sp, #12]
 8017418:	2330      	movs	r3, #48	; 0x30
 801741a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80175c4 <_svfiprintf_r+0x1ec>
 801741e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017422:	f04f 0901 	mov.w	r9, #1
 8017426:	4623      	mov	r3, r4
 8017428:	469a      	mov	sl, r3
 801742a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801742e:	b10a      	cbz	r2, 8017434 <_svfiprintf_r+0x5c>
 8017430:	2a25      	cmp	r2, #37	; 0x25
 8017432:	d1f9      	bne.n	8017428 <_svfiprintf_r+0x50>
 8017434:	ebba 0b04 	subs.w	fp, sl, r4
 8017438:	d00b      	beq.n	8017452 <_svfiprintf_r+0x7a>
 801743a:	465b      	mov	r3, fp
 801743c:	4622      	mov	r2, r4
 801743e:	4629      	mov	r1, r5
 8017440:	4638      	mov	r0, r7
 8017442:	f7ff ff6d 	bl	8017320 <__ssputs_r>
 8017446:	3001      	adds	r0, #1
 8017448:	f000 80aa 	beq.w	80175a0 <_svfiprintf_r+0x1c8>
 801744c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801744e:	445a      	add	r2, fp
 8017450:	9209      	str	r2, [sp, #36]	; 0x24
 8017452:	f89a 3000 	ldrb.w	r3, [sl]
 8017456:	2b00      	cmp	r3, #0
 8017458:	f000 80a2 	beq.w	80175a0 <_svfiprintf_r+0x1c8>
 801745c:	2300      	movs	r3, #0
 801745e:	f04f 32ff 	mov.w	r2, #4294967295
 8017462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017466:	f10a 0a01 	add.w	sl, sl, #1
 801746a:	9304      	str	r3, [sp, #16]
 801746c:	9307      	str	r3, [sp, #28]
 801746e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017472:	931a      	str	r3, [sp, #104]	; 0x68
 8017474:	4654      	mov	r4, sl
 8017476:	2205      	movs	r2, #5
 8017478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801747c:	4851      	ldr	r0, [pc, #324]	; (80175c4 <_svfiprintf_r+0x1ec>)
 801747e:	f7e8 feaf 	bl	80001e0 <memchr>
 8017482:	9a04      	ldr	r2, [sp, #16]
 8017484:	b9d8      	cbnz	r0, 80174be <_svfiprintf_r+0xe6>
 8017486:	06d0      	lsls	r0, r2, #27
 8017488:	bf44      	itt	mi
 801748a:	2320      	movmi	r3, #32
 801748c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017490:	0711      	lsls	r1, r2, #28
 8017492:	bf44      	itt	mi
 8017494:	232b      	movmi	r3, #43	; 0x2b
 8017496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801749a:	f89a 3000 	ldrb.w	r3, [sl]
 801749e:	2b2a      	cmp	r3, #42	; 0x2a
 80174a0:	d015      	beq.n	80174ce <_svfiprintf_r+0xf6>
 80174a2:	9a07      	ldr	r2, [sp, #28]
 80174a4:	4654      	mov	r4, sl
 80174a6:	2000      	movs	r0, #0
 80174a8:	f04f 0c0a 	mov.w	ip, #10
 80174ac:	4621      	mov	r1, r4
 80174ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174b2:	3b30      	subs	r3, #48	; 0x30
 80174b4:	2b09      	cmp	r3, #9
 80174b6:	d94e      	bls.n	8017556 <_svfiprintf_r+0x17e>
 80174b8:	b1b0      	cbz	r0, 80174e8 <_svfiprintf_r+0x110>
 80174ba:	9207      	str	r2, [sp, #28]
 80174bc:	e014      	b.n	80174e8 <_svfiprintf_r+0x110>
 80174be:	eba0 0308 	sub.w	r3, r0, r8
 80174c2:	fa09 f303 	lsl.w	r3, r9, r3
 80174c6:	4313      	orrs	r3, r2
 80174c8:	9304      	str	r3, [sp, #16]
 80174ca:	46a2      	mov	sl, r4
 80174cc:	e7d2      	b.n	8017474 <_svfiprintf_r+0x9c>
 80174ce:	9b03      	ldr	r3, [sp, #12]
 80174d0:	1d19      	adds	r1, r3, #4
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	9103      	str	r1, [sp, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	bfbb      	ittet	lt
 80174da:	425b      	neglt	r3, r3
 80174dc:	f042 0202 	orrlt.w	r2, r2, #2
 80174e0:	9307      	strge	r3, [sp, #28]
 80174e2:	9307      	strlt	r3, [sp, #28]
 80174e4:	bfb8      	it	lt
 80174e6:	9204      	strlt	r2, [sp, #16]
 80174e8:	7823      	ldrb	r3, [r4, #0]
 80174ea:	2b2e      	cmp	r3, #46	; 0x2e
 80174ec:	d10c      	bne.n	8017508 <_svfiprintf_r+0x130>
 80174ee:	7863      	ldrb	r3, [r4, #1]
 80174f0:	2b2a      	cmp	r3, #42	; 0x2a
 80174f2:	d135      	bne.n	8017560 <_svfiprintf_r+0x188>
 80174f4:	9b03      	ldr	r3, [sp, #12]
 80174f6:	1d1a      	adds	r2, r3, #4
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	9203      	str	r2, [sp, #12]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	bfb8      	it	lt
 8017500:	f04f 33ff 	movlt.w	r3, #4294967295
 8017504:	3402      	adds	r4, #2
 8017506:	9305      	str	r3, [sp, #20]
 8017508:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80175d4 <_svfiprintf_r+0x1fc>
 801750c:	7821      	ldrb	r1, [r4, #0]
 801750e:	2203      	movs	r2, #3
 8017510:	4650      	mov	r0, sl
 8017512:	f7e8 fe65 	bl	80001e0 <memchr>
 8017516:	b140      	cbz	r0, 801752a <_svfiprintf_r+0x152>
 8017518:	2340      	movs	r3, #64	; 0x40
 801751a:	eba0 000a 	sub.w	r0, r0, sl
 801751e:	fa03 f000 	lsl.w	r0, r3, r0
 8017522:	9b04      	ldr	r3, [sp, #16]
 8017524:	4303      	orrs	r3, r0
 8017526:	3401      	adds	r4, #1
 8017528:	9304      	str	r3, [sp, #16]
 801752a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801752e:	4826      	ldr	r0, [pc, #152]	; (80175c8 <_svfiprintf_r+0x1f0>)
 8017530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017534:	2206      	movs	r2, #6
 8017536:	f7e8 fe53 	bl	80001e0 <memchr>
 801753a:	2800      	cmp	r0, #0
 801753c:	d038      	beq.n	80175b0 <_svfiprintf_r+0x1d8>
 801753e:	4b23      	ldr	r3, [pc, #140]	; (80175cc <_svfiprintf_r+0x1f4>)
 8017540:	bb1b      	cbnz	r3, 801758a <_svfiprintf_r+0x1b2>
 8017542:	9b03      	ldr	r3, [sp, #12]
 8017544:	3307      	adds	r3, #7
 8017546:	f023 0307 	bic.w	r3, r3, #7
 801754a:	3308      	adds	r3, #8
 801754c:	9303      	str	r3, [sp, #12]
 801754e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017550:	4433      	add	r3, r6
 8017552:	9309      	str	r3, [sp, #36]	; 0x24
 8017554:	e767      	b.n	8017426 <_svfiprintf_r+0x4e>
 8017556:	fb0c 3202 	mla	r2, ip, r2, r3
 801755a:	460c      	mov	r4, r1
 801755c:	2001      	movs	r0, #1
 801755e:	e7a5      	b.n	80174ac <_svfiprintf_r+0xd4>
 8017560:	2300      	movs	r3, #0
 8017562:	3401      	adds	r4, #1
 8017564:	9305      	str	r3, [sp, #20]
 8017566:	4619      	mov	r1, r3
 8017568:	f04f 0c0a 	mov.w	ip, #10
 801756c:	4620      	mov	r0, r4
 801756e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017572:	3a30      	subs	r2, #48	; 0x30
 8017574:	2a09      	cmp	r2, #9
 8017576:	d903      	bls.n	8017580 <_svfiprintf_r+0x1a8>
 8017578:	2b00      	cmp	r3, #0
 801757a:	d0c5      	beq.n	8017508 <_svfiprintf_r+0x130>
 801757c:	9105      	str	r1, [sp, #20]
 801757e:	e7c3      	b.n	8017508 <_svfiprintf_r+0x130>
 8017580:	fb0c 2101 	mla	r1, ip, r1, r2
 8017584:	4604      	mov	r4, r0
 8017586:	2301      	movs	r3, #1
 8017588:	e7f0      	b.n	801756c <_svfiprintf_r+0x194>
 801758a:	ab03      	add	r3, sp, #12
 801758c:	9300      	str	r3, [sp, #0]
 801758e:	462a      	mov	r2, r5
 8017590:	4b0f      	ldr	r3, [pc, #60]	; (80175d0 <_svfiprintf_r+0x1f8>)
 8017592:	a904      	add	r1, sp, #16
 8017594:	4638      	mov	r0, r7
 8017596:	f7fb ff87 	bl	80134a8 <_printf_float>
 801759a:	1c42      	adds	r2, r0, #1
 801759c:	4606      	mov	r6, r0
 801759e:	d1d6      	bne.n	801754e <_svfiprintf_r+0x176>
 80175a0:	89ab      	ldrh	r3, [r5, #12]
 80175a2:	065b      	lsls	r3, r3, #25
 80175a4:	f53f af2c 	bmi.w	8017400 <_svfiprintf_r+0x28>
 80175a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175aa:	b01d      	add	sp, #116	; 0x74
 80175ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b0:	ab03      	add	r3, sp, #12
 80175b2:	9300      	str	r3, [sp, #0]
 80175b4:	462a      	mov	r2, r5
 80175b6:	4b06      	ldr	r3, [pc, #24]	; (80175d0 <_svfiprintf_r+0x1f8>)
 80175b8:	a904      	add	r1, sp, #16
 80175ba:	4638      	mov	r0, r7
 80175bc:	f7fc fa18 	bl	80139f0 <_printf_i>
 80175c0:	e7eb      	b.n	801759a <_svfiprintf_r+0x1c2>
 80175c2:	bf00      	nop
 80175c4:	0801ae94 	.word	0x0801ae94
 80175c8:	0801ae9e 	.word	0x0801ae9e
 80175cc:	080134a9 	.word	0x080134a9
 80175d0:	08017321 	.word	0x08017321
 80175d4:	0801ae9a 	.word	0x0801ae9a

080175d8 <nan>:
 80175d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80175e0 <nan+0x8>
 80175dc:	4770      	bx	lr
 80175de:	bf00      	nop
 80175e0:	00000000 	.word	0x00000000
 80175e4:	7ff80000 	.word	0x7ff80000

080175e8 <_sbrk_r>:
 80175e8:	b538      	push	{r3, r4, r5, lr}
 80175ea:	4d06      	ldr	r5, [pc, #24]	; (8017604 <_sbrk_r+0x1c>)
 80175ec:	2300      	movs	r3, #0
 80175ee:	4604      	mov	r4, r0
 80175f0:	4608      	mov	r0, r1
 80175f2:	602b      	str	r3, [r5, #0]
 80175f4:	f7f1 fbc2 	bl	8008d7c <_sbrk>
 80175f8:	1c43      	adds	r3, r0, #1
 80175fa:	d102      	bne.n	8017602 <_sbrk_r+0x1a>
 80175fc:	682b      	ldr	r3, [r5, #0]
 80175fe:	b103      	cbz	r3, 8017602 <_sbrk_r+0x1a>
 8017600:	6023      	str	r3, [r4, #0]
 8017602:	bd38      	pop	{r3, r4, r5, pc}
 8017604:	200035c4 	.word	0x200035c4

08017608 <__sread>:
 8017608:	b510      	push	{r4, lr}
 801760a:	460c      	mov	r4, r1
 801760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017610:	f000 fa88 	bl	8017b24 <_read_r>
 8017614:	2800      	cmp	r0, #0
 8017616:	bfab      	itete	ge
 8017618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801761a:	89a3      	ldrhlt	r3, [r4, #12]
 801761c:	181b      	addge	r3, r3, r0
 801761e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017622:	bfac      	ite	ge
 8017624:	6563      	strge	r3, [r4, #84]	; 0x54
 8017626:	81a3      	strhlt	r3, [r4, #12]
 8017628:	bd10      	pop	{r4, pc}

0801762a <__swrite>:
 801762a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801762e:	461f      	mov	r7, r3
 8017630:	898b      	ldrh	r3, [r1, #12]
 8017632:	05db      	lsls	r3, r3, #23
 8017634:	4605      	mov	r5, r0
 8017636:	460c      	mov	r4, r1
 8017638:	4616      	mov	r6, r2
 801763a:	d505      	bpl.n	8017648 <__swrite+0x1e>
 801763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017640:	2302      	movs	r3, #2
 8017642:	2200      	movs	r2, #0
 8017644:	f000 f8b6 	bl	80177b4 <_lseek_r>
 8017648:	89a3      	ldrh	r3, [r4, #12]
 801764a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801764e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017652:	81a3      	strh	r3, [r4, #12]
 8017654:	4632      	mov	r2, r6
 8017656:	463b      	mov	r3, r7
 8017658:	4628      	mov	r0, r5
 801765a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801765e:	f000 b835 	b.w	80176cc <_write_r>

08017662 <__sseek>:
 8017662:	b510      	push	{r4, lr}
 8017664:	460c      	mov	r4, r1
 8017666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801766a:	f000 f8a3 	bl	80177b4 <_lseek_r>
 801766e:	1c43      	adds	r3, r0, #1
 8017670:	89a3      	ldrh	r3, [r4, #12]
 8017672:	bf15      	itete	ne
 8017674:	6560      	strne	r0, [r4, #84]	; 0x54
 8017676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801767a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801767e:	81a3      	strheq	r3, [r4, #12]
 8017680:	bf18      	it	ne
 8017682:	81a3      	strhne	r3, [r4, #12]
 8017684:	bd10      	pop	{r4, pc}

08017686 <__sclose>:
 8017686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801768a:	f000 b84f 	b.w	801772c <_close_r>

0801768e <strncmp>:
 801768e:	b510      	push	{r4, lr}
 8017690:	b16a      	cbz	r2, 80176ae <strncmp+0x20>
 8017692:	3901      	subs	r1, #1
 8017694:	1884      	adds	r4, r0, r2
 8017696:	f810 3b01 	ldrb.w	r3, [r0], #1
 801769a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801769e:	4293      	cmp	r3, r2
 80176a0:	d103      	bne.n	80176aa <strncmp+0x1c>
 80176a2:	42a0      	cmp	r0, r4
 80176a4:	d001      	beq.n	80176aa <strncmp+0x1c>
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d1f5      	bne.n	8017696 <strncmp+0x8>
 80176aa:	1a98      	subs	r0, r3, r2
 80176ac:	bd10      	pop	{r4, pc}
 80176ae:	4610      	mov	r0, r2
 80176b0:	e7fc      	b.n	80176ac <strncmp+0x1e>

080176b2 <__ascii_wctomb>:
 80176b2:	b149      	cbz	r1, 80176c8 <__ascii_wctomb+0x16>
 80176b4:	2aff      	cmp	r2, #255	; 0xff
 80176b6:	bf85      	ittet	hi
 80176b8:	238a      	movhi	r3, #138	; 0x8a
 80176ba:	6003      	strhi	r3, [r0, #0]
 80176bc:	700a      	strbls	r2, [r1, #0]
 80176be:	f04f 30ff 	movhi.w	r0, #4294967295
 80176c2:	bf98      	it	ls
 80176c4:	2001      	movls	r0, #1
 80176c6:	4770      	bx	lr
 80176c8:	4608      	mov	r0, r1
 80176ca:	4770      	bx	lr

080176cc <_write_r>:
 80176cc:	b538      	push	{r3, r4, r5, lr}
 80176ce:	4d07      	ldr	r5, [pc, #28]	; (80176ec <_write_r+0x20>)
 80176d0:	4604      	mov	r4, r0
 80176d2:	4608      	mov	r0, r1
 80176d4:	4611      	mov	r1, r2
 80176d6:	2200      	movs	r2, #0
 80176d8:	602a      	str	r2, [r5, #0]
 80176da:	461a      	mov	r2, r3
 80176dc:	f7f1 fafd 	bl	8008cda <_write>
 80176e0:	1c43      	adds	r3, r0, #1
 80176e2:	d102      	bne.n	80176ea <_write_r+0x1e>
 80176e4:	682b      	ldr	r3, [r5, #0]
 80176e6:	b103      	cbz	r3, 80176ea <_write_r+0x1e>
 80176e8:	6023      	str	r3, [r4, #0]
 80176ea:	bd38      	pop	{r3, r4, r5, pc}
 80176ec:	200035c4 	.word	0x200035c4

080176f0 <__assert_func>:
 80176f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176f2:	4614      	mov	r4, r2
 80176f4:	461a      	mov	r2, r3
 80176f6:	4b09      	ldr	r3, [pc, #36]	; (801771c <__assert_func+0x2c>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	4605      	mov	r5, r0
 80176fc:	68d8      	ldr	r0, [r3, #12]
 80176fe:	b14c      	cbz	r4, 8017714 <__assert_func+0x24>
 8017700:	4b07      	ldr	r3, [pc, #28]	; (8017720 <__assert_func+0x30>)
 8017702:	9100      	str	r1, [sp, #0]
 8017704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017708:	4906      	ldr	r1, [pc, #24]	; (8017724 <__assert_func+0x34>)
 801770a:	462b      	mov	r3, r5
 801770c:	f000 f81e 	bl	801774c <fiprintf>
 8017710:	f000 fa1a 	bl	8017b48 <abort>
 8017714:	4b04      	ldr	r3, [pc, #16]	; (8017728 <__assert_func+0x38>)
 8017716:	461c      	mov	r4, r3
 8017718:	e7f3      	b.n	8017702 <__assert_func+0x12>
 801771a:	bf00      	nop
 801771c:	2000012c 	.word	0x2000012c
 8017720:	0801aea5 	.word	0x0801aea5
 8017724:	0801aeb2 	.word	0x0801aeb2
 8017728:	0801aee0 	.word	0x0801aee0

0801772c <_close_r>:
 801772c:	b538      	push	{r3, r4, r5, lr}
 801772e:	4d06      	ldr	r5, [pc, #24]	; (8017748 <_close_r+0x1c>)
 8017730:	2300      	movs	r3, #0
 8017732:	4604      	mov	r4, r0
 8017734:	4608      	mov	r0, r1
 8017736:	602b      	str	r3, [r5, #0]
 8017738:	f7f1 faeb 	bl	8008d12 <_close>
 801773c:	1c43      	adds	r3, r0, #1
 801773e:	d102      	bne.n	8017746 <_close_r+0x1a>
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	b103      	cbz	r3, 8017746 <_close_r+0x1a>
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	bd38      	pop	{r3, r4, r5, pc}
 8017748:	200035c4 	.word	0x200035c4

0801774c <fiprintf>:
 801774c:	b40e      	push	{r1, r2, r3}
 801774e:	b503      	push	{r0, r1, lr}
 8017750:	4601      	mov	r1, r0
 8017752:	ab03      	add	r3, sp, #12
 8017754:	4805      	ldr	r0, [pc, #20]	; (801776c <fiprintf+0x20>)
 8017756:	f853 2b04 	ldr.w	r2, [r3], #4
 801775a:	6800      	ldr	r0, [r0, #0]
 801775c:	9301      	str	r3, [sp, #4]
 801775e:	f000 f8b1 	bl	80178c4 <_vfiprintf_r>
 8017762:	b002      	add	sp, #8
 8017764:	f85d eb04 	ldr.w	lr, [sp], #4
 8017768:	b003      	add	sp, #12
 801776a:	4770      	bx	lr
 801776c:	2000012c 	.word	0x2000012c

08017770 <_fstat_r>:
 8017770:	b538      	push	{r3, r4, r5, lr}
 8017772:	4d07      	ldr	r5, [pc, #28]	; (8017790 <_fstat_r+0x20>)
 8017774:	2300      	movs	r3, #0
 8017776:	4604      	mov	r4, r0
 8017778:	4608      	mov	r0, r1
 801777a:	4611      	mov	r1, r2
 801777c:	602b      	str	r3, [r5, #0]
 801777e:	f7f1 fad4 	bl	8008d2a <_fstat>
 8017782:	1c43      	adds	r3, r0, #1
 8017784:	d102      	bne.n	801778c <_fstat_r+0x1c>
 8017786:	682b      	ldr	r3, [r5, #0]
 8017788:	b103      	cbz	r3, 801778c <_fstat_r+0x1c>
 801778a:	6023      	str	r3, [r4, #0]
 801778c:	bd38      	pop	{r3, r4, r5, pc}
 801778e:	bf00      	nop
 8017790:	200035c4 	.word	0x200035c4

08017794 <_isatty_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	4d06      	ldr	r5, [pc, #24]	; (80177b0 <_isatty_r+0x1c>)
 8017798:	2300      	movs	r3, #0
 801779a:	4604      	mov	r4, r0
 801779c:	4608      	mov	r0, r1
 801779e:	602b      	str	r3, [r5, #0]
 80177a0:	f7f1 fad3 	bl	8008d4a <_isatty>
 80177a4:	1c43      	adds	r3, r0, #1
 80177a6:	d102      	bne.n	80177ae <_isatty_r+0x1a>
 80177a8:	682b      	ldr	r3, [r5, #0]
 80177aa:	b103      	cbz	r3, 80177ae <_isatty_r+0x1a>
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	bd38      	pop	{r3, r4, r5, pc}
 80177b0:	200035c4 	.word	0x200035c4

080177b4 <_lseek_r>:
 80177b4:	b538      	push	{r3, r4, r5, lr}
 80177b6:	4d07      	ldr	r5, [pc, #28]	; (80177d4 <_lseek_r+0x20>)
 80177b8:	4604      	mov	r4, r0
 80177ba:	4608      	mov	r0, r1
 80177bc:	4611      	mov	r1, r2
 80177be:	2200      	movs	r2, #0
 80177c0:	602a      	str	r2, [r5, #0]
 80177c2:	461a      	mov	r2, r3
 80177c4:	f7f1 facc 	bl	8008d60 <_lseek>
 80177c8:	1c43      	adds	r3, r0, #1
 80177ca:	d102      	bne.n	80177d2 <_lseek_r+0x1e>
 80177cc:	682b      	ldr	r3, [r5, #0]
 80177ce:	b103      	cbz	r3, 80177d2 <_lseek_r+0x1e>
 80177d0:	6023      	str	r3, [r4, #0]
 80177d2:	bd38      	pop	{r3, r4, r5, pc}
 80177d4:	200035c4 	.word	0x200035c4

080177d8 <memmove>:
 80177d8:	4288      	cmp	r0, r1
 80177da:	b510      	push	{r4, lr}
 80177dc:	eb01 0402 	add.w	r4, r1, r2
 80177e0:	d902      	bls.n	80177e8 <memmove+0x10>
 80177e2:	4284      	cmp	r4, r0
 80177e4:	4623      	mov	r3, r4
 80177e6:	d807      	bhi.n	80177f8 <memmove+0x20>
 80177e8:	1e43      	subs	r3, r0, #1
 80177ea:	42a1      	cmp	r1, r4
 80177ec:	d008      	beq.n	8017800 <memmove+0x28>
 80177ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177f6:	e7f8      	b.n	80177ea <memmove+0x12>
 80177f8:	4402      	add	r2, r0
 80177fa:	4601      	mov	r1, r0
 80177fc:	428a      	cmp	r2, r1
 80177fe:	d100      	bne.n	8017802 <memmove+0x2a>
 8017800:	bd10      	pop	{r4, pc}
 8017802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801780a:	e7f7      	b.n	80177fc <memmove+0x24>

0801780c <__malloc_lock>:
 801780c:	4801      	ldr	r0, [pc, #4]	; (8017814 <__malloc_lock+0x8>)
 801780e:	f7fe bf92 	b.w	8016736 <__retarget_lock_acquire_recursive>
 8017812:	bf00      	nop
 8017814:	200035bc 	.word	0x200035bc

08017818 <__malloc_unlock>:
 8017818:	4801      	ldr	r0, [pc, #4]	; (8017820 <__malloc_unlock+0x8>)
 801781a:	f7fe bf8d 	b.w	8016738 <__retarget_lock_release_recursive>
 801781e:	bf00      	nop
 8017820:	200035bc 	.word	0x200035bc

08017824 <_realloc_r>:
 8017824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017826:	4607      	mov	r7, r0
 8017828:	4614      	mov	r4, r2
 801782a:	460e      	mov	r6, r1
 801782c:	b921      	cbnz	r1, 8017838 <_realloc_r+0x14>
 801782e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017832:	4611      	mov	r1, r2
 8017834:	f7ff bd1a 	b.w	801726c <_malloc_r>
 8017838:	b922      	cbnz	r2, 8017844 <_realloc_r+0x20>
 801783a:	f7ff fcc7 	bl	80171cc <_free_r>
 801783e:	4625      	mov	r5, r4
 8017840:	4628      	mov	r0, r5
 8017842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017844:	f000 f987 	bl	8017b56 <_malloc_usable_size_r>
 8017848:	42a0      	cmp	r0, r4
 801784a:	d20f      	bcs.n	801786c <_realloc_r+0x48>
 801784c:	4621      	mov	r1, r4
 801784e:	4638      	mov	r0, r7
 8017850:	f7ff fd0c 	bl	801726c <_malloc_r>
 8017854:	4605      	mov	r5, r0
 8017856:	2800      	cmp	r0, #0
 8017858:	d0f2      	beq.n	8017840 <_realloc_r+0x1c>
 801785a:	4631      	mov	r1, r6
 801785c:	4622      	mov	r2, r4
 801785e:	f7fb fd6d 	bl	801333c <memcpy>
 8017862:	4631      	mov	r1, r6
 8017864:	4638      	mov	r0, r7
 8017866:	f7ff fcb1 	bl	80171cc <_free_r>
 801786a:	e7e9      	b.n	8017840 <_realloc_r+0x1c>
 801786c:	4635      	mov	r5, r6
 801786e:	e7e7      	b.n	8017840 <_realloc_r+0x1c>

08017870 <__sfputc_r>:
 8017870:	6893      	ldr	r3, [r2, #8]
 8017872:	3b01      	subs	r3, #1
 8017874:	2b00      	cmp	r3, #0
 8017876:	b410      	push	{r4}
 8017878:	6093      	str	r3, [r2, #8]
 801787a:	da08      	bge.n	801788e <__sfputc_r+0x1e>
 801787c:	6994      	ldr	r4, [r2, #24]
 801787e:	42a3      	cmp	r3, r4
 8017880:	db01      	blt.n	8017886 <__sfputc_r+0x16>
 8017882:	290a      	cmp	r1, #10
 8017884:	d103      	bne.n	801788e <__sfputc_r+0x1e>
 8017886:	f85d 4b04 	ldr.w	r4, [sp], #4
 801788a:	f7fd baef 	b.w	8014e6c <__swbuf_r>
 801788e:	6813      	ldr	r3, [r2, #0]
 8017890:	1c58      	adds	r0, r3, #1
 8017892:	6010      	str	r0, [r2, #0]
 8017894:	7019      	strb	r1, [r3, #0]
 8017896:	4608      	mov	r0, r1
 8017898:	f85d 4b04 	ldr.w	r4, [sp], #4
 801789c:	4770      	bx	lr

0801789e <__sfputs_r>:
 801789e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a0:	4606      	mov	r6, r0
 80178a2:	460f      	mov	r7, r1
 80178a4:	4614      	mov	r4, r2
 80178a6:	18d5      	adds	r5, r2, r3
 80178a8:	42ac      	cmp	r4, r5
 80178aa:	d101      	bne.n	80178b0 <__sfputs_r+0x12>
 80178ac:	2000      	movs	r0, #0
 80178ae:	e007      	b.n	80178c0 <__sfputs_r+0x22>
 80178b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178b4:	463a      	mov	r2, r7
 80178b6:	4630      	mov	r0, r6
 80178b8:	f7ff ffda 	bl	8017870 <__sfputc_r>
 80178bc:	1c43      	adds	r3, r0, #1
 80178be:	d1f3      	bne.n	80178a8 <__sfputs_r+0xa>
 80178c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178c4 <_vfiprintf_r>:
 80178c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c8:	460d      	mov	r5, r1
 80178ca:	b09d      	sub	sp, #116	; 0x74
 80178cc:	4614      	mov	r4, r2
 80178ce:	4698      	mov	r8, r3
 80178d0:	4606      	mov	r6, r0
 80178d2:	b118      	cbz	r0, 80178dc <_vfiprintf_r+0x18>
 80178d4:	6983      	ldr	r3, [r0, #24]
 80178d6:	b90b      	cbnz	r3, 80178dc <_vfiprintf_r+0x18>
 80178d8:	f7fe fb1c 	bl	8015f14 <__sinit>
 80178dc:	4b89      	ldr	r3, [pc, #548]	; (8017b04 <_vfiprintf_r+0x240>)
 80178de:	429d      	cmp	r5, r3
 80178e0:	d11b      	bne.n	801791a <_vfiprintf_r+0x56>
 80178e2:	6875      	ldr	r5, [r6, #4]
 80178e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178e6:	07d9      	lsls	r1, r3, #31
 80178e8:	d405      	bmi.n	80178f6 <_vfiprintf_r+0x32>
 80178ea:	89ab      	ldrh	r3, [r5, #12]
 80178ec:	059a      	lsls	r2, r3, #22
 80178ee:	d402      	bmi.n	80178f6 <_vfiprintf_r+0x32>
 80178f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178f2:	f7fe ff20 	bl	8016736 <__retarget_lock_acquire_recursive>
 80178f6:	89ab      	ldrh	r3, [r5, #12]
 80178f8:	071b      	lsls	r3, r3, #28
 80178fa:	d501      	bpl.n	8017900 <_vfiprintf_r+0x3c>
 80178fc:	692b      	ldr	r3, [r5, #16]
 80178fe:	b9eb      	cbnz	r3, 801793c <_vfiprintf_r+0x78>
 8017900:	4629      	mov	r1, r5
 8017902:	4630      	mov	r0, r6
 8017904:	f7fd fb04 	bl	8014f10 <__swsetup_r>
 8017908:	b1c0      	cbz	r0, 801793c <_vfiprintf_r+0x78>
 801790a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801790c:	07dc      	lsls	r4, r3, #31
 801790e:	d50e      	bpl.n	801792e <_vfiprintf_r+0x6a>
 8017910:	f04f 30ff 	mov.w	r0, #4294967295
 8017914:	b01d      	add	sp, #116	; 0x74
 8017916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801791a:	4b7b      	ldr	r3, [pc, #492]	; (8017b08 <_vfiprintf_r+0x244>)
 801791c:	429d      	cmp	r5, r3
 801791e:	d101      	bne.n	8017924 <_vfiprintf_r+0x60>
 8017920:	68b5      	ldr	r5, [r6, #8]
 8017922:	e7df      	b.n	80178e4 <_vfiprintf_r+0x20>
 8017924:	4b79      	ldr	r3, [pc, #484]	; (8017b0c <_vfiprintf_r+0x248>)
 8017926:	429d      	cmp	r5, r3
 8017928:	bf08      	it	eq
 801792a:	68f5      	ldreq	r5, [r6, #12]
 801792c:	e7da      	b.n	80178e4 <_vfiprintf_r+0x20>
 801792e:	89ab      	ldrh	r3, [r5, #12]
 8017930:	0598      	lsls	r0, r3, #22
 8017932:	d4ed      	bmi.n	8017910 <_vfiprintf_r+0x4c>
 8017934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017936:	f7fe feff 	bl	8016738 <__retarget_lock_release_recursive>
 801793a:	e7e9      	b.n	8017910 <_vfiprintf_r+0x4c>
 801793c:	2300      	movs	r3, #0
 801793e:	9309      	str	r3, [sp, #36]	; 0x24
 8017940:	2320      	movs	r3, #32
 8017942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017946:	f8cd 800c 	str.w	r8, [sp, #12]
 801794a:	2330      	movs	r3, #48	; 0x30
 801794c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017b10 <_vfiprintf_r+0x24c>
 8017950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017954:	f04f 0901 	mov.w	r9, #1
 8017958:	4623      	mov	r3, r4
 801795a:	469a      	mov	sl, r3
 801795c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017960:	b10a      	cbz	r2, 8017966 <_vfiprintf_r+0xa2>
 8017962:	2a25      	cmp	r2, #37	; 0x25
 8017964:	d1f9      	bne.n	801795a <_vfiprintf_r+0x96>
 8017966:	ebba 0b04 	subs.w	fp, sl, r4
 801796a:	d00b      	beq.n	8017984 <_vfiprintf_r+0xc0>
 801796c:	465b      	mov	r3, fp
 801796e:	4622      	mov	r2, r4
 8017970:	4629      	mov	r1, r5
 8017972:	4630      	mov	r0, r6
 8017974:	f7ff ff93 	bl	801789e <__sfputs_r>
 8017978:	3001      	adds	r0, #1
 801797a:	f000 80aa 	beq.w	8017ad2 <_vfiprintf_r+0x20e>
 801797e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017980:	445a      	add	r2, fp
 8017982:	9209      	str	r2, [sp, #36]	; 0x24
 8017984:	f89a 3000 	ldrb.w	r3, [sl]
 8017988:	2b00      	cmp	r3, #0
 801798a:	f000 80a2 	beq.w	8017ad2 <_vfiprintf_r+0x20e>
 801798e:	2300      	movs	r3, #0
 8017990:	f04f 32ff 	mov.w	r2, #4294967295
 8017994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017998:	f10a 0a01 	add.w	sl, sl, #1
 801799c:	9304      	str	r3, [sp, #16]
 801799e:	9307      	str	r3, [sp, #28]
 80179a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179a4:	931a      	str	r3, [sp, #104]	; 0x68
 80179a6:	4654      	mov	r4, sl
 80179a8:	2205      	movs	r2, #5
 80179aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179ae:	4858      	ldr	r0, [pc, #352]	; (8017b10 <_vfiprintf_r+0x24c>)
 80179b0:	f7e8 fc16 	bl	80001e0 <memchr>
 80179b4:	9a04      	ldr	r2, [sp, #16]
 80179b6:	b9d8      	cbnz	r0, 80179f0 <_vfiprintf_r+0x12c>
 80179b8:	06d1      	lsls	r1, r2, #27
 80179ba:	bf44      	itt	mi
 80179bc:	2320      	movmi	r3, #32
 80179be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179c2:	0713      	lsls	r3, r2, #28
 80179c4:	bf44      	itt	mi
 80179c6:	232b      	movmi	r3, #43	; 0x2b
 80179c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179cc:	f89a 3000 	ldrb.w	r3, [sl]
 80179d0:	2b2a      	cmp	r3, #42	; 0x2a
 80179d2:	d015      	beq.n	8017a00 <_vfiprintf_r+0x13c>
 80179d4:	9a07      	ldr	r2, [sp, #28]
 80179d6:	4654      	mov	r4, sl
 80179d8:	2000      	movs	r0, #0
 80179da:	f04f 0c0a 	mov.w	ip, #10
 80179de:	4621      	mov	r1, r4
 80179e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179e4:	3b30      	subs	r3, #48	; 0x30
 80179e6:	2b09      	cmp	r3, #9
 80179e8:	d94e      	bls.n	8017a88 <_vfiprintf_r+0x1c4>
 80179ea:	b1b0      	cbz	r0, 8017a1a <_vfiprintf_r+0x156>
 80179ec:	9207      	str	r2, [sp, #28]
 80179ee:	e014      	b.n	8017a1a <_vfiprintf_r+0x156>
 80179f0:	eba0 0308 	sub.w	r3, r0, r8
 80179f4:	fa09 f303 	lsl.w	r3, r9, r3
 80179f8:	4313      	orrs	r3, r2
 80179fa:	9304      	str	r3, [sp, #16]
 80179fc:	46a2      	mov	sl, r4
 80179fe:	e7d2      	b.n	80179a6 <_vfiprintf_r+0xe2>
 8017a00:	9b03      	ldr	r3, [sp, #12]
 8017a02:	1d19      	adds	r1, r3, #4
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	9103      	str	r1, [sp, #12]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	bfbb      	ittet	lt
 8017a0c:	425b      	neglt	r3, r3
 8017a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8017a12:	9307      	strge	r3, [sp, #28]
 8017a14:	9307      	strlt	r3, [sp, #28]
 8017a16:	bfb8      	it	lt
 8017a18:	9204      	strlt	r2, [sp, #16]
 8017a1a:	7823      	ldrb	r3, [r4, #0]
 8017a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8017a1e:	d10c      	bne.n	8017a3a <_vfiprintf_r+0x176>
 8017a20:	7863      	ldrb	r3, [r4, #1]
 8017a22:	2b2a      	cmp	r3, #42	; 0x2a
 8017a24:	d135      	bne.n	8017a92 <_vfiprintf_r+0x1ce>
 8017a26:	9b03      	ldr	r3, [sp, #12]
 8017a28:	1d1a      	adds	r2, r3, #4
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	9203      	str	r2, [sp, #12]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	bfb8      	it	lt
 8017a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a36:	3402      	adds	r4, #2
 8017a38:	9305      	str	r3, [sp, #20]
 8017a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017b20 <_vfiprintf_r+0x25c>
 8017a3e:	7821      	ldrb	r1, [r4, #0]
 8017a40:	2203      	movs	r2, #3
 8017a42:	4650      	mov	r0, sl
 8017a44:	f7e8 fbcc 	bl	80001e0 <memchr>
 8017a48:	b140      	cbz	r0, 8017a5c <_vfiprintf_r+0x198>
 8017a4a:	2340      	movs	r3, #64	; 0x40
 8017a4c:	eba0 000a 	sub.w	r0, r0, sl
 8017a50:	fa03 f000 	lsl.w	r0, r3, r0
 8017a54:	9b04      	ldr	r3, [sp, #16]
 8017a56:	4303      	orrs	r3, r0
 8017a58:	3401      	adds	r4, #1
 8017a5a:	9304      	str	r3, [sp, #16]
 8017a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a60:	482c      	ldr	r0, [pc, #176]	; (8017b14 <_vfiprintf_r+0x250>)
 8017a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a66:	2206      	movs	r2, #6
 8017a68:	f7e8 fbba 	bl	80001e0 <memchr>
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	d03f      	beq.n	8017af0 <_vfiprintf_r+0x22c>
 8017a70:	4b29      	ldr	r3, [pc, #164]	; (8017b18 <_vfiprintf_r+0x254>)
 8017a72:	bb1b      	cbnz	r3, 8017abc <_vfiprintf_r+0x1f8>
 8017a74:	9b03      	ldr	r3, [sp, #12]
 8017a76:	3307      	adds	r3, #7
 8017a78:	f023 0307 	bic.w	r3, r3, #7
 8017a7c:	3308      	adds	r3, #8
 8017a7e:	9303      	str	r3, [sp, #12]
 8017a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a82:	443b      	add	r3, r7
 8017a84:	9309      	str	r3, [sp, #36]	; 0x24
 8017a86:	e767      	b.n	8017958 <_vfiprintf_r+0x94>
 8017a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a8c:	460c      	mov	r4, r1
 8017a8e:	2001      	movs	r0, #1
 8017a90:	e7a5      	b.n	80179de <_vfiprintf_r+0x11a>
 8017a92:	2300      	movs	r3, #0
 8017a94:	3401      	adds	r4, #1
 8017a96:	9305      	str	r3, [sp, #20]
 8017a98:	4619      	mov	r1, r3
 8017a9a:	f04f 0c0a 	mov.w	ip, #10
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017aa4:	3a30      	subs	r2, #48	; 0x30
 8017aa6:	2a09      	cmp	r2, #9
 8017aa8:	d903      	bls.n	8017ab2 <_vfiprintf_r+0x1ee>
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d0c5      	beq.n	8017a3a <_vfiprintf_r+0x176>
 8017aae:	9105      	str	r1, [sp, #20]
 8017ab0:	e7c3      	b.n	8017a3a <_vfiprintf_r+0x176>
 8017ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	2301      	movs	r3, #1
 8017aba:	e7f0      	b.n	8017a9e <_vfiprintf_r+0x1da>
 8017abc:	ab03      	add	r3, sp, #12
 8017abe:	9300      	str	r3, [sp, #0]
 8017ac0:	462a      	mov	r2, r5
 8017ac2:	4b16      	ldr	r3, [pc, #88]	; (8017b1c <_vfiprintf_r+0x258>)
 8017ac4:	a904      	add	r1, sp, #16
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	f7fb fcee 	bl	80134a8 <_printf_float>
 8017acc:	4607      	mov	r7, r0
 8017ace:	1c78      	adds	r0, r7, #1
 8017ad0:	d1d6      	bne.n	8017a80 <_vfiprintf_r+0x1bc>
 8017ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ad4:	07d9      	lsls	r1, r3, #31
 8017ad6:	d405      	bmi.n	8017ae4 <_vfiprintf_r+0x220>
 8017ad8:	89ab      	ldrh	r3, [r5, #12]
 8017ada:	059a      	lsls	r2, r3, #22
 8017adc:	d402      	bmi.n	8017ae4 <_vfiprintf_r+0x220>
 8017ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ae0:	f7fe fe2a 	bl	8016738 <__retarget_lock_release_recursive>
 8017ae4:	89ab      	ldrh	r3, [r5, #12]
 8017ae6:	065b      	lsls	r3, r3, #25
 8017ae8:	f53f af12 	bmi.w	8017910 <_vfiprintf_r+0x4c>
 8017aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017aee:	e711      	b.n	8017914 <_vfiprintf_r+0x50>
 8017af0:	ab03      	add	r3, sp, #12
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	462a      	mov	r2, r5
 8017af6:	4b09      	ldr	r3, [pc, #36]	; (8017b1c <_vfiprintf_r+0x258>)
 8017af8:	a904      	add	r1, sp, #16
 8017afa:	4630      	mov	r0, r6
 8017afc:	f7fb ff78 	bl	80139f0 <_printf_i>
 8017b00:	e7e4      	b.n	8017acc <_vfiprintf_r+0x208>
 8017b02:	bf00      	nop
 8017b04:	0801ac78 	.word	0x0801ac78
 8017b08:	0801ac98 	.word	0x0801ac98
 8017b0c:	0801ac58 	.word	0x0801ac58
 8017b10:	0801ae94 	.word	0x0801ae94
 8017b14:	0801ae9e 	.word	0x0801ae9e
 8017b18:	080134a9 	.word	0x080134a9
 8017b1c:	0801789f 	.word	0x0801789f
 8017b20:	0801ae9a 	.word	0x0801ae9a

08017b24 <_read_r>:
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	4d07      	ldr	r5, [pc, #28]	; (8017b44 <_read_r+0x20>)
 8017b28:	4604      	mov	r4, r0
 8017b2a:	4608      	mov	r0, r1
 8017b2c:	4611      	mov	r1, r2
 8017b2e:	2200      	movs	r2, #0
 8017b30:	602a      	str	r2, [r5, #0]
 8017b32:	461a      	mov	r2, r3
 8017b34:	f7f1 f8b4 	bl	8008ca0 <_read>
 8017b38:	1c43      	adds	r3, r0, #1
 8017b3a:	d102      	bne.n	8017b42 <_read_r+0x1e>
 8017b3c:	682b      	ldr	r3, [r5, #0]
 8017b3e:	b103      	cbz	r3, 8017b42 <_read_r+0x1e>
 8017b40:	6023      	str	r3, [r4, #0]
 8017b42:	bd38      	pop	{r3, r4, r5, pc}
 8017b44:	200035c4 	.word	0x200035c4

08017b48 <abort>:
 8017b48:	b508      	push	{r3, lr}
 8017b4a:	2006      	movs	r0, #6
 8017b4c:	f000 f834 	bl	8017bb8 <raise>
 8017b50:	2001      	movs	r0, #1
 8017b52:	f7f1 f89b 	bl	8008c8c <_exit>

08017b56 <_malloc_usable_size_r>:
 8017b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b5a:	1f18      	subs	r0, r3, #4
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	bfbc      	itt	lt
 8017b60:	580b      	ldrlt	r3, [r1, r0]
 8017b62:	18c0      	addlt	r0, r0, r3
 8017b64:	4770      	bx	lr

08017b66 <_raise_r>:
 8017b66:	291f      	cmp	r1, #31
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	460d      	mov	r5, r1
 8017b6e:	d904      	bls.n	8017b7a <_raise_r+0x14>
 8017b70:	2316      	movs	r3, #22
 8017b72:	6003      	str	r3, [r0, #0]
 8017b74:	f04f 30ff 	mov.w	r0, #4294967295
 8017b78:	bd38      	pop	{r3, r4, r5, pc}
 8017b7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017b7c:	b112      	cbz	r2, 8017b84 <_raise_r+0x1e>
 8017b7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b82:	b94b      	cbnz	r3, 8017b98 <_raise_r+0x32>
 8017b84:	4620      	mov	r0, r4
 8017b86:	f000 f831 	bl	8017bec <_getpid_r>
 8017b8a:	462a      	mov	r2, r5
 8017b8c:	4601      	mov	r1, r0
 8017b8e:	4620      	mov	r0, r4
 8017b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b94:	f000 b818 	b.w	8017bc8 <_kill_r>
 8017b98:	2b01      	cmp	r3, #1
 8017b9a:	d00a      	beq.n	8017bb2 <_raise_r+0x4c>
 8017b9c:	1c59      	adds	r1, r3, #1
 8017b9e:	d103      	bne.n	8017ba8 <_raise_r+0x42>
 8017ba0:	2316      	movs	r3, #22
 8017ba2:	6003      	str	r3, [r0, #0]
 8017ba4:	2001      	movs	r0, #1
 8017ba6:	e7e7      	b.n	8017b78 <_raise_r+0x12>
 8017ba8:	2400      	movs	r4, #0
 8017baa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bae:	4628      	mov	r0, r5
 8017bb0:	4798      	blx	r3
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	e7e0      	b.n	8017b78 <_raise_r+0x12>
	...

08017bb8 <raise>:
 8017bb8:	4b02      	ldr	r3, [pc, #8]	; (8017bc4 <raise+0xc>)
 8017bba:	4601      	mov	r1, r0
 8017bbc:	6818      	ldr	r0, [r3, #0]
 8017bbe:	f7ff bfd2 	b.w	8017b66 <_raise_r>
 8017bc2:	bf00      	nop
 8017bc4:	2000012c 	.word	0x2000012c

08017bc8 <_kill_r>:
 8017bc8:	b538      	push	{r3, r4, r5, lr}
 8017bca:	4d07      	ldr	r5, [pc, #28]	; (8017be8 <_kill_r+0x20>)
 8017bcc:	2300      	movs	r3, #0
 8017bce:	4604      	mov	r4, r0
 8017bd0:	4608      	mov	r0, r1
 8017bd2:	4611      	mov	r1, r2
 8017bd4:	602b      	str	r3, [r5, #0]
 8017bd6:	f7f1 f849 	bl	8008c6c <_kill>
 8017bda:	1c43      	adds	r3, r0, #1
 8017bdc:	d102      	bne.n	8017be4 <_kill_r+0x1c>
 8017bde:	682b      	ldr	r3, [r5, #0]
 8017be0:	b103      	cbz	r3, 8017be4 <_kill_r+0x1c>
 8017be2:	6023      	str	r3, [r4, #0]
 8017be4:	bd38      	pop	{r3, r4, r5, pc}
 8017be6:	bf00      	nop
 8017be8:	200035c4 	.word	0x200035c4

08017bec <_getpid_r>:
 8017bec:	f7f1 b836 	b.w	8008c5c <_getpid>

08017bf0 <cos>:
 8017bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bf2:	ec53 2b10 	vmov	r2, r3, d0
 8017bf6:	4824      	ldr	r0, [pc, #144]	; (8017c88 <cos+0x98>)
 8017bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017bfc:	4281      	cmp	r1, r0
 8017bfe:	dc06      	bgt.n	8017c0e <cos+0x1e>
 8017c00:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8017c80 <cos+0x90>
 8017c04:	f001 fc6c 	bl	80194e0 <__kernel_cos>
 8017c08:	ec51 0b10 	vmov	r0, r1, d0
 8017c0c:	e007      	b.n	8017c1e <cos+0x2e>
 8017c0e:	481f      	ldr	r0, [pc, #124]	; (8017c8c <cos+0x9c>)
 8017c10:	4281      	cmp	r1, r0
 8017c12:	dd09      	ble.n	8017c28 <cos+0x38>
 8017c14:	ee10 0a10 	vmov	r0, s0
 8017c18:	4619      	mov	r1, r3
 8017c1a:	f7e8 fb35 	bl	8000288 <__aeabi_dsub>
 8017c1e:	ec41 0b10 	vmov	d0, r0, r1
 8017c22:	b005      	add	sp, #20
 8017c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c28:	4668      	mov	r0, sp
 8017c2a:	f001 f999 	bl	8018f60 <__ieee754_rem_pio2>
 8017c2e:	f000 0003 	and.w	r0, r0, #3
 8017c32:	2801      	cmp	r0, #1
 8017c34:	d007      	beq.n	8017c46 <cos+0x56>
 8017c36:	2802      	cmp	r0, #2
 8017c38:	d012      	beq.n	8017c60 <cos+0x70>
 8017c3a:	b9c0      	cbnz	r0, 8017c6e <cos+0x7e>
 8017c3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c40:	ed9d 0b00 	vldr	d0, [sp]
 8017c44:	e7de      	b.n	8017c04 <cos+0x14>
 8017c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c4a:	ed9d 0b00 	vldr	d0, [sp]
 8017c4e:	f002 f84f 	bl	8019cf0 <__kernel_sin>
 8017c52:	ec53 2b10 	vmov	r2, r3, d0
 8017c56:	ee10 0a10 	vmov	r0, s0
 8017c5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017c5e:	e7de      	b.n	8017c1e <cos+0x2e>
 8017c60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c64:	ed9d 0b00 	vldr	d0, [sp]
 8017c68:	f001 fc3a 	bl	80194e0 <__kernel_cos>
 8017c6c:	e7f1      	b.n	8017c52 <cos+0x62>
 8017c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c72:	ed9d 0b00 	vldr	d0, [sp]
 8017c76:	2001      	movs	r0, #1
 8017c78:	f002 f83a 	bl	8019cf0 <__kernel_sin>
 8017c7c:	e7c4      	b.n	8017c08 <cos+0x18>
 8017c7e:	bf00      	nop
	...
 8017c88:	3fe921fb 	.word	0x3fe921fb
 8017c8c:	7fefffff 	.word	0x7fefffff

08017c90 <round>:
 8017c90:	ec51 0b10 	vmov	r0, r1, d0
 8017c94:	b570      	push	{r4, r5, r6, lr}
 8017c96:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8017c9a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8017c9e:	2c13      	cmp	r4, #19
 8017ca0:	ee10 2a10 	vmov	r2, s0
 8017ca4:	460b      	mov	r3, r1
 8017ca6:	dc19      	bgt.n	8017cdc <round+0x4c>
 8017ca8:	2c00      	cmp	r4, #0
 8017caa:	da09      	bge.n	8017cc0 <round+0x30>
 8017cac:	3401      	adds	r4, #1
 8017cae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017cb2:	d103      	bne.n	8017cbc <round+0x2c>
 8017cb4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017cb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017cbc:	2100      	movs	r1, #0
 8017cbe:	e028      	b.n	8017d12 <round+0x82>
 8017cc0:	4d15      	ldr	r5, [pc, #84]	; (8017d18 <round+0x88>)
 8017cc2:	4125      	asrs	r5, r4
 8017cc4:	ea01 0605 	and.w	r6, r1, r5
 8017cc8:	4332      	orrs	r2, r6
 8017cca:	d00e      	beq.n	8017cea <round+0x5a>
 8017ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017cd0:	fa42 f404 	asr.w	r4, r2, r4
 8017cd4:	4423      	add	r3, r4
 8017cd6:	ea23 0305 	bic.w	r3, r3, r5
 8017cda:	e7ef      	b.n	8017cbc <round+0x2c>
 8017cdc:	2c33      	cmp	r4, #51	; 0x33
 8017cde:	dd07      	ble.n	8017cf0 <round+0x60>
 8017ce0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8017ce4:	d101      	bne.n	8017cea <round+0x5a>
 8017ce6:	f7e8 fad1 	bl	800028c <__adddf3>
 8017cea:	ec41 0b10 	vmov	d0, r0, r1
 8017cee:	bd70      	pop	{r4, r5, r6, pc}
 8017cf0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8017cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8017cf8:	40f5      	lsrs	r5, r6
 8017cfa:	4228      	tst	r0, r5
 8017cfc:	d0f5      	beq.n	8017cea <round+0x5a>
 8017cfe:	2101      	movs	r1, #1
 8017d00:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8017d04:	fa01 f404 	lsl.w	r4, r1, r4
 8017d08:	1912      	adds	r2, r2, r4
 8017d0a:	bf28      	it	cs
 8017d0c:	185b      	addcs	r3, r3, r1
 8017d0e:	ea22 0105 	bic.w	r1, r2, r5
 8017d12:	4608      	mov	r0, r1
 8017d14:	4619      	mov	r1, r3
 8017d16:	e7e8      	b.n	8017cea <round+0x5a>
 8017d18:	000fffff 	.word	0x000fffff

08017d1c <asin>:
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	ed2d 8b02 	vpush	{d8}
 8017d22:	ec55 4b10 	vmov	r4, r5, d0
 8017d26:	f000 f917 	bl	8017f58 <__ieee754_asin>
 8017d2a:	4b16      	ldr	r3, [pc, #88]	; (8017d84 <asin+0x68>)
 8017d2c:	eeb0 8a40 	vmov.f32	s16, s0
 8017d30:	eef0 8a60 	vmov.f32	s17, s1
 8017d34:	f993 3000 	ldrsb.w	r3, [r3]
 8017d38:	3301      	adds	r3, #1
 8017d3a:	d01c      	beq.n	8017d76 <asin+0x5a>
 8017d3c:	4622      	mov	r2, r4
 8017d3e:	462b      	mov	r3, r5
 8017d40:	4620      	mov	r0, r4
 8017d42:	4629      	mov	r1, r5
 8017d44:	f7e8 fef2 	bl	8000b2c <__aeabi_dcmpun>
 8017d48:	b9a8      	cbnz	r0, 8017d76 <asin+0x5a>
 8017d4a:	ec45 4b10 	vmov	d0, r4, r5
 8017d4e:	f002 fa2f 	bl	801a1b0 <fabs>
 8017d52:	4b0d      	ldr	r3, [pc, #52]	; (8017d88 <asin+0x6c>)
 8017d54:	ec51 0b10 	vmov	r0, r1, d0
 8017d58:	2200      	movs	r2, #0
 8017d5a:	f7e8 fedd 	bl	8000b18 <__aeabi_dcmpgt>
 8017d5e:	b150      	cbz	r0, 8017d76 <asin+0x5a>
 8017d60:	f7fb fac2 	bl	80132e8 <__errno>
 8017d64:	ecbd 8b02 	vpop	{d8}
 8017d68:	2321      	movs	r3, #33	; 0x21
 8017d6a:	6003      	str	r3, [r0, #0]
 8017d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d70:	4806      	ldr	r0, [pc, #24]	; (8017d8c <asin+0x70>)
 8017d72:	f7ff bc31 	b.w	80175d8 <nan>
 8017d76:	eeb0 0a48 	vmov.f32	s0, s16
 8017d7a:	eef0 0a68 	vmov.f32	s1, s17
 8017d7e:	ecbd 8b02 	vpop	{d8}
 8017d82:	bd38      	pop	{r3, r4, r5, pc}
 8017d84:	20000300 	.word	0x20000300
 8017d88:	3ff00000 	.word	0x3ff00000
 8017d8c:	0801aee0 	.word	0x0801aee0

08017d90 <atan2>:
 8017d90:	f000 baf6 	b.w	8018380 <__ieee754_atan2>

08017d94 <pow>:
 8017d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d98:	ec59 8b10 	vmov	r8, r9, d0
 8017d9c:	ec57 6b11 	vmov	r6, r7, d1
 8017da0:	f000 fbba 	bl	8018518 <__ieee754_pow>
 8017da4:	4b4e      	ldr	r3, [pc, #312]	; (8017ee0 <pow+0x14c>)
 8017da6:	f993 3000 	ldrsb.w	r3, [r3]
 8017daa:	3301      	adds	r3, #1
 8017dac:	ec55 4b10 	vmov	r4, r5, d0
 8017db0:	d015      	beq.n	8017dde <pow+0x4a>
 8017db2:	4632      	mov	r2, r6
 8017db4:	463b      	mov	r3, r7
 8017db6:	4630      	mov	r0, r6
 8017db8:	4639      	mov	r1, r7
 8017dba:	f7e8 feb7 	bl	8000b2c <__aeabi_dcmpun>
 8017dbe:	b970      	cbnz	r0, 8017dde <pow+0x4a>
 8017dc0:	4642      	mov	r2, r8
 8017dc2:	464b      	mov	r3, r9
 8017dc4:	4640      	mov	r0, r8
 8017dc6:	4649      	mov	r1, r9
 8017dc8:	f7e8 feb0 	bl	8000b2c <__aeabi_dcmpun>
 8017dcc:	2200      	movs	r2, #0
 8017dce:	2300      	movs	r3, #0
 8017dd0:	b148      	cbz	r0, 8017de6 <pow+0x52>
 8017dd2:	4630      	mov	r0, r6
 8017dd4:	4639      	mov	r1, r7
 8017dd6:	f7e8 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	d17d      	bne.n	8017eda <pow+0x146>
 8017dde:	ec45 4b10 	vmov	d0, r4, r5
 8017de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017de6:	4640      	mov	r0, r8
 8017de8:	4649      	mov	r1, r9
 8017dea:	f7e8 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8017dee:	b1e0      	cbz	r0, 8017e2a <pow+0x96>
 8017df0:	2200      	movs	r2, #0
 8017df2:	2300      	movs	r3, #0
 8017df4:	4630      	mov	r0, r6
 8017df6:	4639      	mov	r1, r7
 8017df8:	f7e8 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	d16c      	bne.n	8017eda <pow+0x146>
 8017e00:	ec47 6b10 	vmov	d0, r6, r7
 8017e04:	f002 f9dd 	bl	801a1c2 <finite>
 8017e08:	2800      	cmp	r0, #0
 8017e0a:	d0e8      	beq.n	8017dde <pow+0x4a>
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	2300      	movs	r3, #0
 8017e10:	4630      	mov	r0, r6
 8017e12:	4639      	mov	r1, r7
 8017e14:	f7e8 fe62 	bl	8000adc <__aeabi_dcmplt>
 8017e18:	2800      	cmp	r0, #0
 8017e1a:	d0e0      	beq.n	8017dde <pow+0x4a>
 8017e1c:	f7fb fa64 	bl	80132e8 <__errno>
 8017e20:	2321      	movs	r3, #33	; 0x21
 8017e22:	6003      	str	r3, [r0, #0]
 8017e24:	2400      	movs	r4, #0
 8017e26:	4d2f      	ldr	r5, [pc, #188]	; (8017ee4 <pow+0x150>)
 8017e28:	e7d9      	b.n	8017dde <pow+0x4a>
 8017e2a:	ec45 4b10 	vmov	d0, r4, r5
 8017e2e:	f002 f9c8 	bl	801a1c2 <finite>
 8017e32:	bbb8      	cbnz	r0, 8017ea4 <pow+0x110>
 8017e34:	ec49 8b10 	vmov	d0, r8, r9
 8017e38:	f002 f9c3 	bl	801a1c2 <finite>
 8017e3c:	b390      	cbz	r0, 8017ea4 <pow+0x110>
 8017e3e:	ec47 6b10 	vmov	d0, r6, r7
 8017e42:	f002 f9be 	bl	801a1c2 <finite>
 8017e46:	b368      	cbz	r0, 8017ea4 <pow+0x110>
 8017e48:	4622      	mov	r2, r4
 8017e4a:	462b      	mov	r3, r5
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	4629      	mov	r1, r5
 8017e50:	f7e8 fe6c 	bl	8000b2c <__aeabi_dcmpun>
 8017e54:	b160      	cbz	r0, 8017e70 <pow+0xdc>
 8017e56:	f7fb fa47 	bl	80132e8 <__errno>
 8017e5a:	2321      	movs	r3, #33	; 0x21
 8017e5c:	6003      	str	r3, [r0, #0]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	2300      	movs	r3, #0
 8017e62:	4610      	mov	r0, r2
 8017e64:	4619      	mov	r1, r3
 8017e66:	f7e8 fcf1 	bl	800084c <__aeabi_ddiv>
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	460d      	mov	r5, r1
 8017e6e:	e7b6      	b.n	8017dde <pow+0x4a>
 8017e70:	f7fb fa3a 	bl	80132e8 <__errno>
 8017e74:	2322      	movs	r3, #34	; 0x22
 8017e76:	6003      	str	r3, [r0, #0]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	4640      	mov	r0, r8
 8017e7e:	4649      	mov	r1, r9
 8017e80:	f7e8 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8017e84:	2400      	movs	r4, #0
 8017e86:	b158      	cbz	r0, 8017ea0 <pow+0x10c>
 8017e88:	ec47 6b10 	vmov	d0, r6, r7
 8017e8c:	f002 fa24 	bl	801a2d8 <rint>
 8017e90:	4632      	mov	r2, r6
 8017e92:	ec51 0b10 	vmov	r0, r1, d0
 8017e96:	463b      	mov	r3, r7
 8017e98:	f7e8 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d0c2      	beq.n	8017e26 <pow+0x92>
 8017ea0:	4d11      	ldr	r5, [pc, #68]	; (8017ee8 <pow+0x154>)
 8017ea2:	e79c      	b.n	8017dde <pow+0x4a>
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	4629      	mov	r1, r5
 8017eac:	f7e8 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	d094      	beq.n	8017dde <pow+0x4a>
 8017eb4:	ec49 8b10 	vmov	d0, r8, r9
 8017eb8:	f002 f983 	bl	801a1c2 <finite>
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d08e      	beq.n	8017dde <pow+0x4a>
 8017ec0:	ec47 6b10 	vmov	d0, r6, r7
 8017ec4:	f002 f97d 	bl	801a1c2 <finite>
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d088      	beq.n	8017dde <pow+0x4a>
 8017ecc:	f7fb fa0c 	bl	80132e8 <__errno>
 8017ed0:	2322      	movs	r3, #34	; 0x22
 8017ed2:	6003      	str	r3, [r0, #0]
 8017ed4:	2400      	movs	r4, #0
 8017ed6:	2500      	movs	r5, #0
 8017ed8:	e781      	b.n	8017dde <pow+0x4a>
 8017eda:	4d04      	ldr	r5, [pc, #16]	; (8017eec <pow+0x158>)
 8017edc:	2400      	movs	r4, #0
 8017ede:	e77e      	b.n	8017dde <pow+0x4a>
 8017ee0:	20000300 	.word	0x20000300
 8017ee4:	fff00000 	.word	0xfff00000
 8017ee8:	7ff00000 	.word	0x7ff00000
 8017eec:	3ff00000 	.word	0x3ff00000

08017ef0 <sqrt>:
 8017ef0:	b538      	push	{r3, r4, r5, lr}
 8017ef2:	ed2d 8b02 	vpush	{d8}
 8017ef6:	ec55 4b10 	vmov	r4, r5, d0
 8017efa:	f001 fa3b 	bl	8019374 <__ieee754_sqrt>
 8017efe:	4b15      	ldr	r3, [pc, #84]	; (8017f54 <sqrt+0x64>)
 8017f00:	eeb0 8a40 	vmov.f32	s16, s0
 8017f04:	eef0 8a60 	vmov.f32	s17, s1
 8017f08:	f993 3000 	ldrsb.w	r3, [r3]
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	d019      	beq.n	8017f44 <sqrt+0x54>
 8017f10:	4622      	mov	r2, r4
 8017f12:	462b      	mov	r3, r5
 8017f14:	4620      	mov	r0, r4
 8017f16:	4629      	mov	r1, r5
 8017f18:	f7e8 fe08 	bl	8000b2c <__aeabi_dcmpun>
 8017f1c:	b990      	cbnz	r0, 8017f44 <sqrt+0x54>
 8017f1e:	2200      	movs	r2, #0
 8017f20:	2300      	movs	r3, #0
 8017f22:	4620      	mov	r0, r4
 8017f24:	4629      	mov	r1, r5
 8017f26:	f7e8 fdd9 	bl	8000adc <__aeabi_dcmplt>
 8017f2a:	b158      	cbz	r0, 8017f44 <sqrt+0x54>
 8017f2c:	f7fb f9dc 	bl	80132e8 <__errno>
 8017f30:	2321      	movs	r3, #33	; 0x21
 8017f32:	6003      	str	r3, [r0, #0]
 8017f34:	2200      	movs	r2, #0
 8017f36:	2300      	movs	r3, #0
 8017f38:	4610      	mov	r0, r2
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	f7e8 fc86 	bl	800084c <__aeabi_ddiv>
 8017f40:	ec41 0b18 	vmov	d8, r0, r1
 8017f44:	eeb0 0a48 	vmov.f32	s0, s16
 8017f48:	eef0 0a68 	vmov.f32	s1, s17
 8017f4c:	ecbd 8b02 	vpop	{d8}
 8017f50:	bd38      	pop	{r3, r4, r5, pc}
 8017f52:	bf00      	nop
 8017f54:	20000300 	.word	0x20000300

08017f58 <__ieee754_asin>:
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	ed2d 8b04 	vpush	{d8-d9}
 8017f60:	ec55 4b10 	vmov	r4, r5, d0
 8017f64:	4bcc      	ldr	r3, [pc, #816]	; (8018298 <__ieee754_asin+0x340>)
 8017f66:	b083      	sub	sp, #12
 8017f68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8017f6c:	4598      	cmp	r8, r3
 8017f6e:	9501      	str	r5, [sp, #4]
 8017f70:	dd35      	ble.n	8017fde <__ieee754_asin+0x86>
 8017f72:	ee10 3a10 	vmov	r3, s0
 8017f76:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8017f7a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8017f7e:	ea58 0303 	orrs.w	r3, r8, r3
 8017f82:	d117      	bne.n	8017fb4 <__ieee754_asin+0x5c>
 8017f84:	a3aa      	add	r3, pc, #680	; (adr r3, 8018230 <__ieee754_asin+0x2d8>)
 8017f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8a:	ee10 0a10 	vmov	r0, s0
 8017f8e:	4629      	mov	r1, r5
 8017f90:	f7e8 fb32 	bl	80005f8 <__aeabi_dmul>
 8017f94:	a3a8      	add	r3, pc, #672	; (adr r3, 8018238 <__ieee754_asin+0x2e0>)
 8017f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	460f      	mov	r7, r1
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	f7e8 fb29 	bl	80005f8 <__aeabi_dmul>
 8017fa6:	4602      	mov	r2, r0
 8017fa8:	460b      	mov	r3, r1
 8017faa:	4630      	mov	r0, r6
 8017fac:	4639      	mov	r1, r7
 8017fae:	f7e8 f96d 	bl	800028c <__adddf3>
 8017fb2:	e00b      	b.n	8017fcc <__ieee754_asin+0x74>
 8017fb4:	ee10 2a10 	vmov	r2, s0
 8017fb8:	462b      	mov	r3, r5
 8017fba:	ee10 0a10 	vmov	r0, s0
 8017fbe:	4629      	mov	r1, r5
 8017fc0:	f7e8 f962 	bl	8000288 <__aeabi_dsub>
 8017fc4:	4602      	mov	r2, r0
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	f7e8 fc40 	bl	800084c <__aeabi_ddiv>
 8017fcc:	4604      	mov	r4, r0
 8017fce:	460d      	mov	r5, r1
 8017fd0:	ec45 4b10 	vmov	d0, r4, r5
 8017fd4:	b003      	add	sp, #12
 8017fd6:	ecbd 8b04 	vpop	{d8-d9}
 8017fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fde:	4baf      	ldr	r3, [pc, #700]	; (801829c <__ieee754_asin+0x344>)
 8017fe0:	4598      	cmp	r8, r3
 8017fe2:	dc11      	bgt.n	8018008 <__ieee754_asin+0xb0>
 8017fe4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8017fe8:	f280 80ae 	bge.w	8018148 <__ieee754_asin+0x1f0>
 8017fec:	a394      	add	r3, pc, #592	; (adr r3, 8018240 <__ieee754_asin+0x2e8>)
 8017fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff2:	ee10 0a10 	vmov	r0, s0
 8017ff6:	4629      	mov	r1, r5
 8017ff8:	f7e8 f948 	bl	800028c <__adddf3>
 8017ffc:	4ba8      	ldr	r3, [pc, #672]	; (80182a0 <__ieee754_asin+0x348>)
 8017ffe:	2200      	movs	r2, #0
 8018000:	f7e8 fd8a 	bl	8000b18 <__aeabi_dcmpgt>
 8018004:	2800      	cmp	r0, #0
 8018006:	d1e3      	bne.n	8017fd0 <__ieee754_asin+0x78>
 8018008:	ec45 4b10 	vmov	d0, r4, r5
 801800c:	f002 f8d0 	bl	801a1b0 <fabs>
 8018010:	49a3      	ldr	r1, [pc, #652]	; (80182a0 <__ieee754_asin+0x348>)
 8018012:	ec53 2b10 	vmov	r2, r3, d0
 8018016:	2000      	movs	r0, #0
 8018018:	f7e8 f936 	bl	8000288 <__aeabi_dsub>
 801801c:	4ba1      	ldr	r3, [pc, #644]	; (80182a4 <__ieee754_asin+0x34c>)
 801801e:	2200      	movs	r2, #0
 8018020:	f7e8 faea 	bl	80005f8 <__aeabi_dmul>
 8018024:	a388      	add	r3, pc, #544	; (adr r3, 8018248 <__ieee754_asin+0x2f0>)
 8018026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802a:	4604      	mov	r4, r0
 801802c:	460d      	mov	r5, r1
 801802e:	f7e8 fae3 	bl	80005f8 <__aeabi_dmul>
 8018032:	a387      	add	r3, pc, #540	; (adr r3, 8018250 <__ieee754_asin+0x2f8>)
 8018034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018038:	f7e8 f928 	bl	800028c <__adddf3>
 801803c:	4622      	mov	r2, r4
 801803e:	462b      	mov	r3, r5
 8018040:	f7e8 fada 	bl	80005f8 <__aeabi_dmul>
 8018044:	a384      	add	r3, pc, #528	; (adr r3, 8018258 <__ieee754_asin+0x300>)
 8018046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804a:	f7e8 f91d 	bl	8000288 <__aeabi_dsub>
 801804e:	4622      	mov	r2, r4
 8018050:	462b      	mov	r3, r5
 8018052:	f7e8 fad1 	bl	80005f8 <__aeabi_dmul>
 8018056:	a382      	add	r3, pc, #520	; (adr r3, 8018260 <__ieee754_asin+0x308>)
 8018058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805c:	f7e8 f916 	bl	800028c <__adddf3>
 8018060:	4622      	mov	r2, r4
 8018062:	462b      	mov	r3, r5
 8018064:	f7e8 fac8 	bl	80005f8 <__aeabi_dmul>
 8018068:	a37f      	add	r3, pc, #508	; (adr r3, 8018268 <__ieee754_asin+0x310>)
 801806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801806e:	f7e8 f90b 	bl	8000288 <__aeabi_dsub>
 8018072:	4622      	mov	r2, r4
 8018074:	462b      	mov	r3, r5
 8018076:	f7e8 fabf 	bl	80005f8 <__aeabi_dmul>
 801807a:	a37d      	add	r3, pc, #500	; (adr r3, 8018270 <__ieee754_asin+0x318>)
 801807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018080:	f7e8 f904 	bl	800028c <__adddf3>
 8018084:	4622      	mov	r2, r4
 8018086:	462b      	mov	r3, r5
 8018088:	f7e8 fab6 	bl	80005f8 <__aeabi_dmul>
 801808c:	a37a      	add	r3, pc, #488	; (adr r3, 8018278 <__ieee754_asin+0x320>)
 801808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018092:	ec41 0b18 	vmov	d8, r0, r1
 8018096:	4620      	mov	r0, r4
 8018098:	4629      	mov	r1, r5
 801809a:	f7e8 faad 	bl	80005f8 <__aeabi_dmul>
 801809e:	a378      	add	r3, pc, #480	; (adr r3, 8018280 <__ieee754_asin+0x328>)
 80180a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180a4:	f7e8 f8f0 	bl	8000288 <__aeabi_dsub>
 80180a8:	4622      	mov	r2, r4
 80180aa:	462b      	mov	r3, r5
 80180ac:	f7e8 faa4 	bl	80005f8 <__aeabi_dmul>
 80180b0:	a375      	add	r3, pc, #468	; (adr r3, 8018288 <__ieee754_asin+0x330>)
 80180b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b6:	f7e8 f8e9 	bl	800028c <__adddf3>
 80180ba:	4622      	mov	r2, r4
 80180bc:	462b      	mov	r3, r5
 80180be:	f7e8 fa9b 	bl	80005f8 <__aeabi_dmul>
 80180c2:	a373      	add	r3, pc, #460	; (adr r3, 8018290 <__ieee754_asin+0x338>)
 80180c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c8:	f7e8 f8de 	bl	8000288 <__aeabi_dsub>
 80180cc:	4622      	mov	r2, r4
 80180ce:	462b      	mov	r3, r5
 80180d0:	f7e8 fa92 	bl	80005f8 <__aeabi_dmul>
 80180d4:	4b72      	ldr	r3, [pc, #456]	; (80182a0 <__ieee754_asin+0x348>)
 80180d6:	2200      	movs	r2, #0
 80180d8:	f7e8 f8d8 	bl	800028c <__adddf3>
 80180dc:	ec45 4b10 	vmov	d0, r4, r5
 80180e0:	4606      	mov	r6, r0
 80180e2:	460f      	mov	r7, r1
 80180e4:	f001 f946 	bl	8019374 <__ieee754_sqrt>
 80180e8:	4b6f      	ldr	r3, [pc, #444]	; (80182a8 <__ieee754_asin+0x350>)
 80180ea:	4598      	cmp	r8, r3
 80180ec:	ec5b ab10 	vmov	sl, fp, d0
 80180f0:	f340 80dc 	ble.w	80182ac <__ieee754_asin+0x354>
 80180f4:	4632      	mov	r2, r6
 80180f6:	463b      	mov	r3, r7
 80180f8:	ec51 0b18 	vmov	r0, r1, d8
 80180fc:	f7e8 fba6 	bl	800084c <__aeabi_ddiv>
 8018100:	4652      	mov	r2, sl
 8018102:	465b      	mov	r3, fp
 8018104:	f7e8 fa78 	bl	80005f8 <__aeabi_dmul>
 8018108:	4652      	mov	r2, sl
 801810a:	465b      	mov	r3, fp
 801810c:	f7e8 f8be 	bl	800028c <__adddf3>
 8018110:	4602      	mov	r2, r0
 8018112:	460b      	mov	r3, r1
 8018114:	f7e8 f8ba 	bl	800028c <__adddf3>
 8018118:	a347      	add	r3, pc, #284	; (adr r3, 8018238 <__ieee754_asin+0x2e0>)
 801811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801811e:	f7e8 f8b3 	bl	8000288 <__aeabi_dsub>
 8018122:	4602      	mov	r2, r0
 8018124:	460b      	mov	r3, r1
 8018126:	a142      	add	r1, pc, #264	; (adr r1, 8018230 <__ieee754_asin+0x2d8>)
 8018128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801812c:	f7e8 f8ac 	bl	8000288 <__aeabi_dsub>
 8018130:	9b01      	ldr	r3, [sp, #4]
 8018132:	2b00      	cmp	r3, #0
 8018134:	bfdc      	itt	le
 8018136:	4602      	movle	r2, r0
 8018138:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801813c:	4604      	mov	r4, r0
 801813e:	460d      	mov	r5, r1
 8018140:	bfdc      	itt	le
 8018142:	4614      	movle	r4, r2
 8018144:	461d      	movle	r5, r3
 8018146:	e743      	b.n	8017fd0 <__ieee754_asin+0x78>
 8018148:	ee10 2a10 	vmov	r2, s0
 801814c:	ee10 0a10 	vmov	r0, s0
 8018150:	462b      	mov	r3, r5
 8018152:	4629      	mov	r1, r5
 8018154:	f7e8 fa50 	bl	80005f8 <__aeabi_dmul>
 8018158:	a33b      	add	r3, pc, #236	; (adr r3, 8018248 <__ieee754_asin+0x2f0>)
 801815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801815e:	4606      	mov	r6, r0
 8018160:	460f      	mov	r7, r1
 8018162:	f7e8 fa49 	bl	80005f8 <__aeabi_dmul>
 8018166:	a33a      	add	r3, pc, #232	; (adr r3, 8018250 <__ieee754_asin+0x2f8>)
 8018168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816c:	f7e8 f88e 	bl	800028c <__adddf3>
 8018170:	4632      	mov	r2, r6
 8018172:	463b      	mov	r3, r7
 8018174:	f7e8 fa40 	bl	80005f8 <__aeabi_dmul>
 8018178:	a337      	add	r3, pc, #220	; (adr r3, 8018258 <__ieee754_asin+0x300>)
 801817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801817e:	f7e8 f883 	bl	8000288 <__aeabi_dsub>
 8018182:	4632      	mov	r2, r6
 8018184:	463b      	mov	r3, r7
 8018186:	f7e8 fa37 	bl	80005f8 <__aeabi_dmul>
 801818a:	a335      	add	r3, pc, #212	; (adr r3, 8018260 <__ieee754_asin+0x308>)
 801818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018190:	f7e8 f87c 	bl	800028c <__adddf3>
 8018194:	4632      	mov	r2, r6
 8018196:	463b      	mov	r3, r7
 8018198:	f7e8 fa2e 	bl	80005f8 <__aeabi_dmul>
 801819c:	a332      	add	r3, pc, #200	; (adr r3, 8018268 <__ieee754_asin+0x310>)
 801819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181a2:	f7e8 f871 	bl	8000288 <__aeabi_dsub>
 80181a6:	4632      	mov	r2, r6
 80181a8:	463b      	mov	r3, r7
 80181aa:	f7e8 fa25 	bl	80005f8 <__aeabi_dmul>
 80181ae:	a330      	add	r3, pc, #192	; (adr r3, 8018270 <__ieee754_asin+0x318>)
 80181b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b4:	f7e8 f86a 	bl	800028c <__adddf3>
 80181b8:	4632      	mov	r2, r6
 80181ba:	463b      	mov	r3, r7
 80181bc:	f7e8 fa1c 	bl	80005f8 <__aeabi_dmul>
 80181c0:	a32d      	add	r3, pc, #180	; (adr r3, 8018278 <__ieee754_asin+0x320>)
 80181c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181c6:	4680      	mov	r8, r0
 80181c8:	4689      	mov	r9, r1
 80181ca:	4630      	mov	r0, r6
 80181cc:	4639      	mov	r1, r7
 80181ce:	f7e8 fa13 	bl	80005f8 <__aeabi_dmul>
 80181d2:	a32b      	add	r3, pc, #172	; (adr r3, 8018280 <__ieee754_asin+0x328>)
 80181d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181d8:	f7e8 f856 	bl	8000288 <__aeabi_dsub>
 80181dc:	4632      	mov	r2, r6
 80181de:	463b      	mov	r3, r7
 80181e0:	f7e8 fa0a 	bl	80005f8 <__aeabi_dmul>
 80181e4:	a328      	add	r3, pc, #160	; (adr r3, 8018288 <__ieee754_asin+0x330>)
 80181e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ea:	f7e8 f84f 	bl	800028c <__adddf3>
 80181ee:	4632      	mov	r2, r6
 80181f0:	463b      	mov	r3, r7
 80181f2:	f7e8 fa01 	bl	80005f8 <__aeabi_dmul>
 80181f6:	a326      	add	r3, pc, #152	; (adr r3, 8018290 <__ieee754_asin+0x338>)
 80181f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181fc:	f7e8 f844 	bl	8000288 <__aeabi_dsub>
 8018200:	4632      	mov	r2, r6
 8018202:	463b      	mov	r3, r7
 8018204:	f7e8 f9f8 	bl	80005f8 <__aeabi_dmul>
 8018208:	4b25      	ldr	r3, [pc, #148]	; (80182a0 <__ieee754_asin+0x348>)
 801820a:	2200      	movs	r2, #0
 801820c:	f7e8 f83e 	bl	800028c <__adddf3>
 8018210:	4602      	mov	r2, r0
 8018212:	460b      	mov	r3, r1
 8018214:	4640      	mov	r0, r8
 8018216:	4649      	mov	r1, r9
 8018218:	f7e8 fb18 	bl	800084c <__aeabi_ddiv>
 801821c:	4622      	mov	r2, r4
 801821e:	462b      	mov	r3, r5
 8018220:	f7e8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8018224:	4602      	mov	r2, r0
 8018226:	460b      	mov	r3, r1
 8018228:	4620      	mov	r0, r4
 801822a:	4629      	mov	r1, r5
 801822c:	e6bf      	b.n	8017fae <__ieee754_asin+0x56>
 801822e:	bf00      	nop
 8018230:	54442d18 	.word	0x54442d18
 8018234:	3ff921fb 	.word	0x3ff921fb
 8018238:	33145c07 	.word	0x33145c07
 801823c:	3c91a626 	.word	0x3c91a626
 8018240:	8800759c 	.word	0x8800759c
 8018244:	7e37e43c 	.word	0x7e37e43c
 8018248:	0dfdf709 	.word	0x0dfdf709
 801824c:	3f023de1 	.word	0x3f023de1
 8018250:	7501b288 	.word	0x7501b288
 8018254:	3f49efe0 	.word	0x3f49efe0
 8018258:	b5688f3b 	.word	0xb5688f3b
 801825c:	3fa48228 	.word	0x3fa48228
 8018260:	0e884455 	.word	0x0e884455
 8018264:	3fc9c155 	.word	0x3fc9c155
 8018268:	03eb6f7d 	.word	0x03eb6f7d
 801826c:	3fd4d612 	.word	0x3fd4d612
 8018270:	55555555 	.word	0x55555555
 8018274:	3fc55555 	.word	0x3fc55555
 8018278:	b12e9282 	.word	0xb12e9282
 801827c:	3fb3b8c5 	.word	0x3fb3b8c5
 8018280:	1b8d0159 	.word	0x1b8d0159
 8018284:	3fe6066c 	.word	0x3fe6066c
 8018288:	9c598ac8 	.word	0x9c598ac8
 801828c:	40002ae5 	.word	0x40002ae5
 8018290:	1c8a2d4b 	.word	0x1c8a2d4b
 8018294:	40033a27 	.word	0x40033a27
 8018298:	3fefffff 	.word	0x3fefffff
 801829c:	3fdfffff 	.word	0x3fdfffff
 80182a0:	3ff00000 	.word	0x3ff00000
 80182a4:	3fe00000 	.word	0x3fe00000
 80182a8:	3fef3332 	.word	0x3fef3332
 80182ac:	ee10 2a10 	vmov	r2, s0
 80182b0:	ee10 0a10 	vmov	r0, s0
 80182b4:	465b      	mov	r3, fp
 80182b6:	4659      	mov	r1, fp
 80182b8:	f7e7 ffe8 	bl	800028c <__adddf3>
 80182bc:	4632      	mov	r2, r6
 80182be:	463b      	mov	r3, r7
 80182c0:	ec41 0b19 	vmov	d9, r0, r1
 80182c4:	ec51 0b18 	vmov	r0, r1, d8
 80182c8:	f7e8 fac0 	bl	800084c <__aeabi_ddiv>
 80182cc:	4602      	mov	r2, r0
 80182ce:	460b      	mov	r3, r1
 80182d0:	ec51 0b19 	vmov	r0, r1, d9
 80182d4:	f7e8 f990 	bl	80005f8 <__aeabi_dmul>
 80182d8:	f04f 0800 	mov.w	r8, #0
 80182dc:	4606      	mov	r6, r0
 80182de:	460f      	mov	r7, r1
 80182e0:	4642      	mov	r2, r8
 80182e2:	465b      	mov	r3, fp
 80182e4:	4640      	mov	r0, r8
 80182e6:	4659      	mov	r1, fp
 80182e8:	f7e8 f986 	bl	80005f8 <__aeabi_dmul>
 80182ec:	4602      	mov	r2, r0
 80182ee:	460b      	mov	r3, r1
 80182f0:	4620      	mov	r0, r4
 80182f2:	4629      	mov	r1, r5
 80182f4:	f7e7 ffc8 	bl	8000288 <__aeabi_dsub>
 80182f8:	4642      	mov	r2, r8
 80182fa:	4604      	mov	r4, r0
 80182fc:	460d      	mov	r5, r1
 80182fe:	465b      	mov	r3, fp
 8018300:	4650      	mov	r0, sl
 8018302:	4659      	mov	r1, fp
 8018304:	f7e7 ffc2 	bl	800028c <__adddf3>
 8018308:	4602      	mov	r2, r0
 801830a:	460b      	mov	r3, r1
 801830c:	4620      	mov	r0, r4
 801830e:	4629      	mov	r1, r5
 8018310:	f7e8 fa9c 	bl	800084c <__aeabi_ddiv>
 8018314:	4602      	mov	r2, r0
 8018316:	460b      	mov	r3, r1
 8018318:	f7e7 ffb8 	bl	800028c <__adddf3>
 801831c:	4602      	mov	r2, r0
 801831e:	460b      	mov	r3, r1
 8018320:	a113      	add	r1, pc, #76	; (adr r1, 8018370 <__ieee754_asin+0x418>)
 8018322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018326:	f7e7 ffaf 	bl	8000288 <__aeabi_dsub>
 801832a:	4602      	mov	r2, r0
 801832c:	460b      	mov	r3, r1
 801832e:	4630      	mov	r0, r6
 8018330:	4639      	mov	r1, r7
 8018332:	f7e7 ffa9 	bl	8000288 <__aeabi_dsub>
 8018336:	4642      	mov	r2, r8
 8018338:	4604      	mov	r4, r0
 801833a:	460d      	mov	r5, r1
 801833c:	465b      	mov	r3, fp
 801833e:	4640      	mov	r0, r8
 8018340:	4659      	mov	r1, fp
 8018342:	f7e7 ffa3 	bl	800028c <__adddf3>
 8018346:	4602      	mov	r2, r0
 8018348:	460b      	mov	r3, r1
 801834a:	a10b      	add	r1, pc, #44	; (adr r1, 8018378 <__ieee754_asin+0x420>)
 801834c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018350:	f7e7 ff9a 	bl	8000288 <__aeabi_dsub>
 8018354:	4602      	mov	r2, r0
 8018356:	460b      	mov	r3, r1
 8018358:	4620      	mov	r0, r4
 801835a:	4629      	mov	r1, r5
 801835c:	f7e7 ff94 	bl	8000288 <__aeabi_dsub>
 8018360:	4602      	mov	r2, r0
 8018362:	460b      	mov	r3, r1
 8018364:	a104      	add	r1, pc, #16	; (adr r1, 8018378 <__ieee754_asin+0x420>)
 8018366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801836a:	e6df      	b.n	801812c <__ieee754_asin+0x1d4>
 801836c:	f3af 8000 	nop.w
 8018370:	33145c07 	.word	0x33145c07
 8018374:	3c91a626 	.word	0x3c91a626
 8018378:	54442d18 	.word	0x54442d18
 801837c:	3fe921fb 	.word	0x3fe921fb

08018380 <__ieee754_atan2>:
 8018380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018384:	ec57 6b11 	vmov	r6, r7, d1
 8018388:	4273      	negs	r3, r6
 801838a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8018510 <__ieee754_atan2+0x190>
 801838e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018392:	4333      	orrs	r3, r6
 8018394:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018398:	4573      	cmp	r3, lr
 801839a:	ec51 0b10 	vmov	r0, r1, d0
 801839e:	ee11 8a10 	vmov	r8, s2
 80183a2:	d80a      	bhi.n	80183ba <__ieee754_atan2+0x3a>
 80183a4:	4244      	negs	r4, r0
 80183a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80183aa:	4304      	orrs	r4, r0
 80183ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80183b0:	4574      	cmp	r4, lr
 80183b2:	ee10 9a10 	vmov	r9, s0
 80183b6:	468c      	mov	ip, r1
 80183b8:	d907      	bls.n	80183ca <__ieee754_atan2+0x4a>
 80183ba:	4632      	mov	r2, r6
 80183bc:	463b      	mov	r3, r7
 80183be:	f7e7 ff65 	bl	800028c <__adddf3>
 80183c2:	ec41 0b10 	vmov	d0, r0, r1
 80183c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80183ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80183d2:	4334      	orrs	r4, r6
 80183d4:	d103      	bne.n	80183de <__ieee754_atan2+0x5e>
 80183d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183da:	f001 bd49 	b.w	8019e70 <atan>
 80183de:	17bc      	asrs	r4, r7, #30
 80183e0:	f004 0402 	and.w	r4, r4, #2
 80183e4:	ea53 0909 	orrs.w	r9, r3, r9
 80183e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80183ec:	d107      	bne.n	80183fe <__ieee754_atan2+0x7e>
 80183ee:	2c02      	cmp	r4, #2
 80183f0:	d060      	beq.n	80184b4 <__ieee754_atan2+0x134>
 80183f2:	2c03      	cmp	r4, #3
 80183f4:	d1e5      	bne.n	80183c2 <__ieee754_atan2+0x42>
 80183f6:	a142      	add	r1, pc, #264	; (adr r1, 8018500 <__ieee754_atan2+0x180>)
 80183f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80183fc:	e7e1      	b.n	80183c2 <__ieee754_atan2+0x42>
 80183fe:	ea52 0808 	orrs.w	r8, r2, r8
 8018402:	d106      	bne.n	8018412 <__ieee754_atan2+0x92>
 8018404:	f1bc 0f00 	cmp.w	ip, #0
 8018408:	da5f      	bge.n	80184ca <__ieee754_atan2+0x14a>
 801840a:	a13f      	add	r1, pc, #252	; (adr r1, 8018508 <__ieee754_atan2+0x188>)
 801840c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018410:	e7d7      	b.n	80183c2 <__ieee754_atan2+0x42>
 8018412:	4572      	cmp	r2, lr
 8018414:	d10f      	bne.n	8018436 <__ieee754_atan2+0xb6>
 8018416:	4293      	cmp	r3, r2
 8018418:	f104 34ff 	add.w	r4, r4, #4294967295
 801841c:	d107      	bne.n	801842e <__ieee754_atan2+0xae>
 801841e:	2c02      	cmp	r4, #2
 8018420:	d84c      	bhi.n	80184bc <__ieee754_atan2+0x13c>
 8018422:	4b35      	ldr	r3, [pc, #212]	; (80184f8 <__ieee754_atan2+0x178>)
 8018424:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018428:	e9d4 0100 	ldrd	r0, r1, [r4]
 801842c:	e7c9      	b.n	80183c2 <__ieee754_atan2+0x42>
 801842e:	2c02      	cmp	r4, #2
 8018430:	d848      	bhi.n	80184c4 <__ieee754_atan2+0x144>
 8018432:	4b32      	ldr	r3, [pc, #200]	; (80184fc <__ieee754_atan2+0x17c>)
 8018434:	e7f6      	b.n	8018424 <__ieee754_atan2+0xa4>
 8018436:	4573      	cmp	r3, lr
 8018438:	d0e4      	beq.n	8018404 <__ieee754_atan2+0x84>
 801843a:	1a9b      	subs	r3, r3, r2
 801843c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018440:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018444:	da1e      	bge.n	8018484 <__ieee754_atan2+0x104>
 8018446:	2f00      	cmp	r7, #0
 8018448:	da01      	bge.n	801844e <__ieee754_atan2+0xce>
 801844a:	323c      	adds	r2, #60	; 0x3c
 801844c:	db1e      	blt.n	801848c <__ieee754_atan2+0x10c>
 801844e:	4632      	mov	r2, r6
 8018450:	463b      	mov	r3, r7
 8018452:	f7e8 f9fb 	bl	800084c <__aeabi_ddiv>
 8018456:	ec41 0b10 	vmov	d0, r0, r1
 801845a:	f001 fea9 	bl	801a1b0 <fabs>
 801845e:	f001 fd07 	bl	8019e70 <atan>
 8018462:	ec51 0b10 	vmov	r0, r1, d0
 8018466:	2c01      	cmp	r4, #1
 8018468:	d013      	beq.n	8018492 <__ieee754_atan2+0x112>
 801846a:	2c02      	cmp	r4, #2
 801846c:	d015      	beq.n	801849a <__ieee754_atan2+0x11a>
 801846e:	2c00      	cmp	r4, #0
 8018470:	d0a7      	beq.n	80183c2 <__ieee754_atan2+0x42>
 8018472:	a319      	add	r3, pc, #100	; (adr r3, 80184d8 <__ieee754_atan2+0x158>)
 8018474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018478:	f7e7 ff06 	bl	8000288 <__aeabi_dsub>
 801847c:	a318      	add	r3, pc, #96	; (adr r3, 80184e0 <__ieee754_atan2+0x160>)
 801847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018482:	e014      	b.n	80184ae <__ieee754_atan2+0x12e>
 8018484:	a118      	add	r1, pc, #96	; (adr r1, 80184e8 <__ieee754_atan2+0x168>)
 8018486:	e9d1 0100 	ldrd	r0, r1, [r1]
 801848a:	e7ec      	b.n	8018466 <__ieee754_atan2+0xe6>
 801848c:	2000      	movs	r0, #0
 801848e:	2100      	movs	r1, #0
 8018490:	e7e9      	b.n	8018466 <__ieee754_atan2+0xe6>
 8018492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018496:	4619      	mov	r1, r3
 8018498:	e793      	b.n	80183c2 <__ieee754_atan2+0x42>
 801849a:	a30f      	add	r3, pc, #60	; (adr r3, 80184d8 <__ieee754_atan2+0x158>)
 801849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184a0:	f7e7 fef2 	bl	8000288 <__aeabi_dsub>
 80184a4:	4602      	mov	r2, r0
 80184a6:	460b      	mov	r3, r1
 80184a8:	a10d      	add	r1, pc, #52	; (adr r1, 80184e0 <__ieee754_atan2+0x160>)
 80184aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184ae:	f7e7 feeb 	bl	8000288 <__aeabi_dsub>
 80184b2:	e786      	b.n	80183c2 <__ieee754_atan2+0x42>
 80184b4:	a10a      	add	r1, pc, #40	; (adr r1, 80184e0 <__ieee754_atan2+0x160>)
 80184b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184ba:	e782      	b.n	80183c2 <__ieee754_atan2+0x42>
 80184bc:	a10c      	add	r1, pc, #48	; (adr r1, 80184f0 <__ieee754_atan2+0x170>)
 80184be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184c2:	e77e      	b.n	80183c2 <__ieee754_atan2+0x42>
 80184c4:	2000      	movs	r0, #0
 80184c6:	2100      	movs	r1, #0
 80184c8:	e77b      	b.n	80183c2 <__ieee754_atan2+0x42>
 80184ca:	a107      	add	r1, pc, #28	; (adr r1, 80184e8 <__ieee754_atan2+0x168>)
 80184cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184d0:	e777      	b.n	80183c2 <__ieee754_atan2+0x42>
 80184d2:	bf00      	nop
 80184d4:	f3af 8000 	nop.w
 80184d8:	33145c07 	.word	0x33145c07
 80184dc:	3ca1a626 	.word	0x3ca1a626
 80184e0:	54442d18 	.word	0x54442d18
 80184e4:	400921fb 	.word	0x400921fb
 80184e8:	54442d18 	.word	0x54442d18
 80184ec:	3ff921fb 	.word	0x3ff921fb
 80184f0:	54442d18 	.word	0x54442d18
 80184f4:	3fe921fb 	.word	0x3fe921fb
 80184f8:	0801aee8 	.word	0x0801aee8
 80184fc:	0801af00 	.word	0x0801af00
 8018500:	54442d18 	.word	0x54442d18
 8018504:	c00921fb 	.word	0xc00921fb
 8018508:	54442d18 	.word	0x54442d18
 801850c:	bff921fb 	.word	0xbff921fb
 8018510:	7ff00000 	.word	0x7ff00000
 8018514:	00000000 	.word	0x00000000

08018518 <__ieee754_pow>:
 8018518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801851c:	ed2d 8b06 	vpush	{d8-d10}
 8018520:	b08d      	sub	sp, #52	; 0x34
 8018522:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018526:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801852a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801852e:	ea56 0100 	orrs.w	r1, r6, r0
 8018532:	ec53 2b10 	vmov	r2, r3, d0
 8018536:	f000 84d1 	beq.w	8018edc <__ieee754_pow+0x9c4>
 801853a:	497f      	ldr	r1, [pc, #508]	; (8018738 <__ieee754_pow+0x220>)
 801853c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018540:	428c      	cmp	r4, r1
 8018542:	ee10 8a10 	vmov	r8, s0
 8018546:	4699      	mov	r9, r3
 8018548:	dc09      	bgt.n	801855e <__ieee754_pow+0x46>
 801854a:	d103      	bne.n	8018554 <__ieee754_pow+0x3c>
 801854c:	b97a      	cbnz	r2, 801856e <__ieee754_pow+0x56>
 801854e:	42a6      	cmp	r6, r4
 8018550:	dd02      	ble.n	8018558 <__ieee754_pow+0x40>
 8018552:	e00c      	b.n	801856e <__ieee754_pow+0x56>
 8018554:	428e      	cmp	r6, r1
 8018556:	dc02      	bgt.n	801855e <__ieee754_pow+0x46>
 8018558:	428e      	cmp	r6, r1
 801855a:	d110      	bne.n	801857e <__ieee754_pow+0x66>
 801855c:	b178      	cbz	r0, 801857e <__ieee754_pow+0x66>
 801855e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018562:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018566:	ea54 0308 	orrs.w	r3, r4, r8
 801856a:	f000 84b7 	beq.w	8018edc <__ieee754_pow+0x9c4>
 801856e:	4873      	ldr	r0, [pc, #460]	; (801873c <__ieee754_pow+0x224>)
 8018570:	b00d      	add	sp, #52	; 0x34
 8018572:	ecbd 8b06 	vpop	{d8-d10}
 8018576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801857a:	f7ff b82d 	b.w	80175d8 <nan>
 801857e:	f1b9 0f00 	cmp.w	r9, #0
 8018582:	da36      	bge.n	80185f2 <__ieee754_pow+0xda>
 8018584:	496e      	ldr	r1, [pc, #440]	; (8018740 <__ieee754_pow+0x228>)
 8018586:	428e      	cmp	r6, r1
 8018588:	dc51      	bgt.n	801862e <__ieee754_pow+0x116>
 801858a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801858e:	428e      	cmp	r6, r1
 8018590:	f340 84af 	ble.w	8018ef2 <__ieee754_pow+0x9da>
 8018594:	1531      	asrs	r1, r6, #20
 8018596:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801859a:	2914      	cmp	r1, #20
 801859c:	dd0f      	ble.n	80185be <__ieee754_pow+0xa6>
 801859e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80185a2:	fa20 fc01 	lsr.w	ip, r0, r1
 80185a6:	fa0c f101 	lsl.w	r1, ip, r1
 80185aa:	4281      	cmp	r1, r0
 80185ac:	f040 84a1 	bne.w	8018ef2 <__ieee754_pow+0x9da>
 80185b0:	f00c 0c01 	and.w	ip, ip, #1
 80185b4:	f1cc 0102 	rsb	r1, ip, #2
 80185b8:	9100      	str	r1, [sp, #0]
 80185ba:	b180      	cbz	r0, 80185de <__ieee754_pow+0xc6>
 80185bc:	e059      	b.n	8018672 <__ieee754_pow+0x15a>
 80185be:	2800      	cmp	r0, #0
 80185c0:	d155      	bne.n	801866e <__ieee754_pow+0x156>
 80185c2:	f1c1 0114 	rsb	r1, r1, #20
 80185c6:	fa46 fc01 	asr.w	ip, r6, r1
 80185ca:	fa0c f101 	lsl.w	r1, ip, r1
 80185ce:	42b1      	cmp	r1, r6
 80185d0:	f040 848c 	bne.w	8018eec <__ieee754_pow+0x9d4>
 80185d4:	f00c 0c01 	and.w	ip, ip, #1
 80185d8:	f1cc 0102 	rsb	r1, ip, #2
 80185dc:	9100      	str	r1, [sp, #0]
 80185de:	4959      	ldr	r1, [pc, #356]	; (8018744 <__ieee754_pow+0x22c>)
 80185e0:	428e      	cmp	r6, r1
 80185e2:	d12d      	bne.n	8018640 <__ieee754_pow+0x128>
 80185e4:	2f00      	cmp	r7, #0
 80185e6:	da79      	bge.n	80186dc <__ieee754_pow+0x1c4>
 80185e8:	4956      	ldr	r1, [pc, #344]	; (8018744 <__ieee754_pow+0x22c>)
 80185ea:	2000      	movs	r0, #0
 80185ec:	f7e8 f92e 	bl	800084c <__aeabi_ddiv>
 80185f0:	e016      	b.n	8018620 <__ieee754_pow+0x108>
 80185f2:	2100      	movs	r1, #0
 80185f4:	9100      	str	r1, [sp, #0]
 80185f6:	2800      	cmp	r0, #0
 80185f8:	d13b      	bne.n	8018672 <__ieee754_pow+0x15a>
 80185fa:	494f      	ldr	r1, [pc, #316]	; (8018738 <__ieee754_pow+0x220>)
 80185fc:	428e      	cmp	r6, r1
 80185fe:	d1ee      	bne.n	80185de <__ieee754_pow+0xc6>
 8018600:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018604:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018608:	ea53 0308 	orrs.w	r3, r3, r8
 801860c:	f000 8466 	beq.w	8018edc <__ieee754_pow+0x9c4>
 8018610:	4b4d      	ldr	r3, [pc, #308]	; (8018748 <__ieee754_pow+0x230>)
 8018612:	429c      	cmp	r4, r3
 8018614:	dd0d      	ble.n	8018632 <__ieee754_pow+0x11a>
 8018616:	2f00      	cmp	r7, #0
 8018618:	f280 8464 	bge.w	8018ee4 <__ieee754_pow+0x9cc>
 801861c:	2000      	movs	r0, #0
 801861e:	2100      	movs	r1, #0
 8018620:	ec41 0b10 	vmov	d0, r0, r1
 8018624:	b00d      	add	sp, #52	; 0x34
 8018626:	ecbd 8b06 	vpop	{d8-d10}
 801862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801862e:	2102      	movs	r1, #2
 8018630:	e7e0      	b.n	80185f4 <__ieee754_pow+0xdc>
 8018632:	2f00      	cmp	r7, #0
 8018634:	daf2      	bge.n	801861c <__ieee754_pow+0x104>
 8018636:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801863a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801863e:	e7ef      	b.n	8018620 <__ieee754_pow+0x108>
 8018640:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8018644:	d104      	bne.n	8018650 <__ieee754_pow+0x138>
 8018646:	4610      	mov	r0, r2
 8018648:	4619      	mov	r1, r3
 801864a:	f7e7 ffd5 	bl	80005f8 <__aeabi_dmul>
 801864e:	e7e7      	b.n	8018620 <__ieee754_pow+0x108>
 8018650:	493e      	ldr	r1, [pc, #248]	; (801874c <__ieee754_pow+0x234>)
 8018652:	428f      	cmp	r7, r1
 8018654:	d10d      	bne.n	8018672 <__ieee754_pow+0x15a>
 8018656:	f1b9 0f00 	cmp.w	r9, #0
 801865a:	db0a      	blt.n	8018672 <__ieee754_pow+0x15a>
 801865c:	ec43 2b10 	vmov	d0, r2, r3
 8018660:	b00d      	add	sp, #52	; 0x34
 8018662:	ecbd 8b06 	vpop	{d8-d10}
 8018666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801866a:	f000 be83 	b.w	8019374 <__ieee754_sqrt>
 801866e:	2100      	movs	r1, #0
 8018670:	9100      	str	r1, [sp, #0]
 8018672:	ec43 2b10 	vmov	d0, r2, r3
 8018676:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801867a:	f001 fd99 	bl	801a1b0 <fabs>
 801867e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018682:	ec51 0b10 	vmov	r0, r1, d0
 8018686:	f1b8 0f00 	cmp.w	r8, #0
 801868a:	d12a      	bne.n	80186e2 <__ieee754_pow+0x1ca>
 801868c:	b12c      	cbz	r4, 801869a <__ieee754_pow+0x182>
 801868e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018744 <__ieee754_pow+0x22c>
 8018692:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8018696:	45e6      	cmp	lr, ip
 8018698:	d123      	bne.n	80186e2 <__ieee754_pow+0x1ca>
 801869a:	2f00      	cmp	r7, #0
 801869c:	da05      	bge.n	80186aa <__ieee754_pow+0x192>
 801869e:	4602      	mov	r2, r0
 80186a0:	460b      	mov	r3, r1
 80186a2:	2000      	movs	r0, #0
 80186a4:	4927      	ldr	r1, [pc, #156]	; (8018744 <__ieee754_pow+0x22c>)
 80186a6:	f7e8 f8d1 	bl	800084c <__aeabi_ddiv>
 80186aa:	f1b9 0f00 	cmp.w	r9, #0
 80186ae:	dab7      	bge.n	8018620 <__ieee754_pow+0x108>
 80186b0:	9b00      	ldr	r3, [sp, #0]
 80186b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80186b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80186ba:	4323      	orrs	r3, r4
 80186bc:	d108      	bne.n	80186d0 <__ieee754_pow+0x1b8>
 80186be:	4602      	mov	r2, r0
 80186c0:	460b      	mov	r3, r1
 80186c2:	4610      	mov	r0, r2
 80186c4:	4619      	mov	r1, r3
 80186c6:	f7e7 fddf 	bl	8000288 <__aeabi_dsub>
 80186ca:	4602      	mov	r2, r0
 80186cc:	460b      	mov	r3, r1
 80186ce:	e78d      	b.n	80185ec <__ieee754_pow+0xd4>
 80186d0:	9b00      	ldr	r3, [sp, #0]
 80186d2:	2b01      	cmp	r3, #1
 80186d4:	d1a4      	bne.n	8018620 <__ieee754_pow+0x108>
 80186d6:	4602      	mov	r2, r0
 80186d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186dc:	4610      	mov	r0, r2
 80186de:	4619      	mov	r1, r3
 80186e0:	e79e      	b.n	8018620 <__ieee754_pow+0x108>
 80186e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80186e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80186ea:	950a      	str	r5, [sp, #40]	; 0x28
 80186ec:	9d00      	ldr	r5, [sp, #0]
 80186ee:	46ac      	mov	ip, r5
 80186f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80186f2:	ea5c 0505 	orrs.w	r5, ip, r5
 80186f6:	d0e4      	beq.n	80186c2 <__ieee754_pow+0x1aa>
 80186f8:	4b15      	ldr	r3, [pc, #84]	; (8018750 <__ieee754_pow+0x238>)
 80186fa:	429e      	cmp	r6, r3
 80186fc:	f340 80fc 	ble.w	80188f8 <__ieee754_pow+0x3e0>
 8018700:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018704:	429e      	cmp	r6, r3
 8018706:	4b10      	ldr	r3, [pc, #64]	; (8018748 <__ieee754_pow+0x230>)
 8018708:	dd07      	ble.n	801871a <__ieee754_pow+0x202>
 801870a:	429c      	cmp	r4, r3
 801870c:	dc0a      	bgt.n	8018724 <__ieee754_pow+0x20c>
 801870e:	2f00      	cmp	r7, #0
 8018710:	da84      	bge.n	801861c <__ieee754_pow+0x104>
 8018712:	a307      	add	r3, pc, #28	; (adr r3, 8018730 <__ieee754_pow+0x218>)
 8018714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018718:	e795      	b.n	8018646 <__ieee754_pow+0x12e>
 801871a:	429c      	cmp	r4, r3
 801871c:	dbf7      	blt.n	801870e <__ieee754_pow+0x1f6>
 801871e:	4b09      	ldr	r3, [pc, #36]	; (8018744 <__ieee754_pow+0x22c>)
 8018720:	429c      	cmp	r4, r3
 8018722:	dd17      	ble.n	8018754 <__ieee754_pow+0x23c>
 8018724:	2f00      	cmp	r7, #0
 8018726:	dcf4      	bgt.n	8018712 <__ieee754_pow+0x1fa>
 8018728:	e778      	b.n	801861c <__ieee754_pow+0x104>
 801872a:	bf00      	nop
 801872c:	f3af 8000 	nop.w
 8018730:	8800759c 	.word	0x8800759c
 8018734:	7e37e43c 	.word	0x7e37e43c
 8018738:	7ff00000 	.word	0x7ff00000
 801873c:	0801aee0 	.word	0x0801aee0
 8018740:	433fffff 	.word	0x433fffff
 8018744:	3ff00000 	.word	0x3ff00000
 8018748:	3fefffff 	.word	0x3fefffff
 801874c:	3fe00000 	.word	0x3fe00000
 8018750:	41e00000 	.word	0x41e00000
 8018754:	4b64      	ldr	r3, [pc, #400]	; (80188e8 <__ieee754_pow+0x3d0>)
 8018756:	2200      	movs	r2, #0
 8018758:	f7e7 fd96 	bl	8000288 <__aeabi_dsub>
 801875c:	a356      	add	r3, pc, #344	; (adr r3, 80188b8 <__ieee754_pow+0x3a0>)
 801875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018762:	4604      	mov	r4, r0
 8018764:	460d      	mov	r5, r1
 8018766:	f7e7 ff47 	bl	80005f8 <__aeabi_dmul>
 801876a:	a355      	add	r3, pc, #340	; (adr r3, 80188c0 <__ieee754_pow+0x3a8>)
 801876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018770:	4606      	mov	r6, r0
 8018772:	460f      	mov	r7, r1
 8018774:	4620      	mov	r0, r4
 8018776:	4629      	mov	r1, r5
 8018778:	f7e7 ff3e 	bl	80005f8 <__aeabi_dmul>
 801877c:	4b5b      	ldr	r3, [pc, #364]	; (80188ec <__ieee754_pow+0x3d4>)
 801877e:	4682      	mov	sl, r0
 8018780:	468b      	mov	fp, r1
 8018782:	2200      	movs	r2, #0
 8018784:	4620      	mov	r0, r4
 8018786:	4629      	mov	r1, r5
 8018788:	f7e7 ff36 	bl	80005f8 <__aeabi_dmul>
 801878c:	4602      	mov	r2, r0
 801878e:	460b      	mov	r3, r1
 8018790:	a14d      	add	r1, pc, #308	; (adr r1, 80188c8 <__ieee754_pow+0x3b0>)
 8018792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018796:	f7e7 fd77 	bl	8000288 <__aeabi_dsub>
 801879a:	4622      	mov	r2, r4
 801879c:	462b      	mov	r3, r5
 801879e:	f7e7 ff2b 	bl	80005f8 <__aeabi_dmul>
 80187a2:	4602      	mov	r2, r0
 80187a4:	460b      	mov	r3, r1
 80187a6:	2000      	movs	r0, #0
 80187a8:	4951      	ldr	r1, [pc, #324]	; (80188f0 <__ieee754_pow+0x3d8>)
 80187aa:	f7e7 fd6d 	bl	8000288 <__aeabi_dsub>
 80187ae:	4622      	mov	r2, r4
 80187b0:	4680      	mov	r8, r0
 80187b2:	4689      	mov	r9, r1
 80187b4:	462b      	mov	r3, r5
 80187b6:	4620      	mov	r0, r4
 80187b8:	4629      	mov	r1, r5
 80187ba:	f7e7 ff1d 	bl	80005f8 <__aeabi_dmul>
 80187be:	4602      	mov	r2, r0
 80187c0:	460b      	mov	r3, r1
 80187c2:	4640      	mov	r0, r8
 80187c4:	4649      	mov	r1, r9
 80187c6:	f7e7 ff17 	bl	80005f8 <__aeabi_dmul>
 80187ca:	a341      	add	r3, pc, #260	; (adr r3, 80188d0 <__ieee754_pow+0x3b8>)
 80187cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187d0:	f7e7 ff12 	bl	80005f8 <__aeabi_dmul>
 80187d4:	4602      	mov	r2, r0
 80187d6:	460b      	mov	r3, r1
 80187d8:	4650      	mov	r0, sl
 80187da:	4659      	mov	r1, fp
 80187dc:	f7e7 fd54 	bl	8000288 <__aeabi_dsub>
 80187e0:	4602      	mov	r2, r0
 80187e2:	460b      	mov	r3, r1
 80187e4:	4680      	mov	r8, r0
 80187e6:	4689      	mov	r9, r1
 80187e8:	4630      	mov	r0, r6
 80187ea:	4639      	mov	r1, r7
 80187ec:	f7e7 fd4e 	bl	800028c <__adddf3>
 80187f0:	2400      	movs	r4, #0
 80187f2:	4632      	mov	r2, r6
 80187f4:	463b      	mov	r3, r7
 80187f6:	4620      	mov	r0, r4
 80187f8:	460d      	mov	r5, r1
 80187fa:	f7e7 fd45 	bl	8000288 <__aeabi_dsub>
 80187fe:	4602      	mov	r2, r0
 8018800:	460b      	mov	r3, r1
 8018802:	4640      	mov	r0, r8
 8018804:	4649      	mov	r1, r9
 8018806:	f7e7 fd3f 	bl	8000288 <__aeabi_dsub>
 801880a:	9b00      	ldr	r3, [sp, #0]
 801880c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801880e:	3b01      	subs	r3, #1
 8018810:	4313      	orrs	r3, r2
 8018812:	4682      	mov	sl, r0
 8018814:	468b      	mov	fp, r1
 8018816:	f040 81f1 	bne.w	8018bfc <__ieee754_pow+0x6e4>
 801881a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80188d8 <__ieee754_pow+0x3c0>
 801881e:	eeb0 8a47 	vmov.f32	s16, s14
 8018822:	eef0 8a67 	vmov.f32	s17, s15
 8018826:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801882a:	2600      	movs	r6, #0
 801882c:	4632      	mov	r2, r6
 801882e:	463b      	mov	r3, r7
 8018830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018834:	f7e7 fd28 	bl	8000288 <__aeabi_dsub>
 8018838:	4622      	mov	r2, r4
 801883a:	462b      	mov	r3, r5
 801883c:	f7e7 fedc 	bl	80005f8 <__aeabi_dmul>
 8018840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018844:	4680      	mov	r8, r0
 8018846:	4689      	mov	r9, r1
 8018848:	4650      	mov	r0, sl
 801884a:	4659      	mov	r1, fp
 801884c:	f7e7 fed4 	bl	80005f8 <__aeabi_dmul>
 8018850:	4602      	mov	r2, r0
 8018852:	460b      	mov	r3, r1
 8018854:	4640      	mov	r0, r8
 8018856:	4649      	mov	r1, r9
 8018858:	f7e7 fd18 	bl	800028c <__adddf3>
 801885c:	4632      	mov	r2, r6
 801885e:	463b      	mov	r3, r7
 8018860:	4680      	mov	r8, r0
 8018862:	4689      	mov	r9, r1
 8018864:	4620      	mov	r0, r4
 8018866:	4629      	mov	r1, r5
 8018868:	f7e7 fec6 	bl	80005f8 <__aeabi_dmul>
 801886c:	460b      	mov	r3, r1
 801886e:	4604      	mov	r4, r0
 8018870:	460d      	mov	r5, r1
 8018872:	4602      	mov	r2, r0
 8018874:	4649      	mov	r1, r9
 8018876:	4640      	mov	r0, r8
 8018878:	f7e7 fd08 	bl	800028c <__adddf3>
 801887c:	4b1d      	ldr	r3, [pc, #116]	; (80188f4 <__ieee754_pow+0x3dc>)
 801887e:	4299      	cmp	r1, r3
 8018880:	ec45 4b19 	vmov	d9, r4, r5
 8018884:	4606      	mov	r6, r0
 8018886:	460f      	mov	r7, r1
 8018888:	468b      	mov	fp, r1
 801888a:	f340 82fe 	ble.w	8018e8a <__ieee754_pow+0x972>
 801888e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018892:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018896:	4303      	orrs	r3, r0
 8018898:	f000 81f0 	beq.w	8018c7c <__ieee754_pow+0x764>
 801889c:	a310      	add	r3, pc, #64	; (adr r3, 80188e0 <__ieee754_pow+0x3c8>)
 801889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188a2:	ec51 0b18 	vmov	r0, r1, d8
 80188a6:	f7e7 fea7 	bl	80005f8 <__aeabi_dmul>
 80188aa:	a30d      	add	r3, pc, #52	; (adr r3, 80188e0 <__ieee754_pow+0x3c8>)
 80188ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b0:	e6cb      	b.n	801864a <__ieee754_pow+0x132>
 80188b2:	bf00      	nop
 80188b4:	f3af 8000 	nop.w
 80188b8:	60000000 	.word	0x60000000
 80188bc:	3ff71547 	.word	0x3ff71547
 80188c0:	f85ddf44 	.word	0xf85ddf44
 80188c4:	3e54ae0b 	.word	0x3e54ae0b
 80188c8:	55555555 	.word	0x55555555
 80188cc:	3fd55555 	.word	0x3fd55555
 80188d0:	652b82fe 	.word	0x652b82fe
 80188d4:	3ff71547 	.word	0x3ff71547
 80188d8:	00000000 	.word	0x00000000
 80188dc:	bff00000 	.word	0xbff00000
 80188e0:	8800759c 	.word	0x8800759c
 80188e4:	7e37e43c 	.word	0x7e37e43c
 80188e8:	3ff00000 	.word	0x3ff00000
 80188ec:	3fd00000 	.word	0x3fd00000
 80188f0:	3fe00000 	.word	0x3fe00000
 80188f4:	408fffff 	.word	0x408fffff
 80188f8:	4bd7      	ldr	r3, [pc, #860]	; (8018c58 <__ieee754_pow+0x740>)
 80188fa:	ea03 0309 	and.w	r3, r3, r9
 80188fe:	2200      	movs	r2, #0
 8018900:	b92b      	cbnz	r3, 801890e <__ieee754_pow+0x3f6>
 8018902:	4bd6      	ldr	r3, [pc, #856]	; (8018c5c <__ieee754_pow+0x744>)
 8018904:	f7e7 fe78 	bl	80005f8 <__aeabi_dmul>
 8018908:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801890c:	460c      	mov	r4, r1
 801890e:	1523      	asrs	r3, r4, #20
 8018910:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018914:	4413      	add	r3, r2
 8018916:	9309      	str	r3, [sp, #36]	; 0x24
 8018918:	4bd1      	ldr	r3, [pc, #836]	; (8018c60 <__ieee754_pow+0x748>)
 801891a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801891e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018922:	429c      	cmp	r4, r3
 8018924:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018928:	dd08      	ble.n	801893c <__ieee754_pow+0x424>
 801892a:	4bce      	ldr	r3, [pc, #824]	; (8018c64 <__ieee754_pow+0x74c>)
 801892c:	429c      	cmp	r4, r3
 801892e:	f340 8163 	ble.w	8018bf8 <__ieee754_pow+0x6e0>
 8018932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018934:	3301      	adds	r3, #1
 8018936:	9309      	str	r3, [sp, #36]	; 0x24
 8018938:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801893c:	2400      	movs	r4, #0
 801893e:	00e3      	lsls	r3, r4, #3
 8018940:	930b      	str	r3, [sp, #44]	; 0x2c
 8018942:	4bc9      	ldr	r3, [pc, #804]	; (8018c68 <__ieee754_pow+0x750>)
 8018944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018948:	ed93 7b00 	vldr	d7, [r3]
 801894c:	4629      	mov	r1, r5
 801894e:	ec53 2b17 	vmov	r2, r3, d7
 8018952:	eeb0 8a47 	vmov.f32	s16, s14
 8018956:	eef0 8a67 	vmov.f32	s17, s15
 801895a:	4682      	mov	sl, r0
 801895c:	f7e7 fc94 	bl	8000288 <__aeabi_dsub>
 8018960:	4652      	mov	r2, sl
 8018962:	4606      	mov	r6, r0
 8018964:	460f      	mov	r7, r1
 8018966:	462b      	mov	r3, r5
 8018968:	ec51 0b18 	vmov	r0, r1, d8
 801896c:	f7e7 fc8e 	bl	800028c <__adddf3>
 8018970:	4602      	mov	r2, r0
 8018972:	460b      	mov	r3, r1
 8018974:	2000      	movs	r0, #0
 8018976:	49bd      	ldr	r1, [pc, #756]	; (8018c6c <__ieee754_pow+0x754>)
 8018978:	f7e7 ff68 	bl	800084c <__aeabi_ddiv>
 801897c:	ec41 0b19 	vmov	d9, r0, r1
 8018980:	4602      	mov	r2, r0
 8018982:	460b      	mov	r3, r1
 8018984:	4630      	mov	r0, r6
 8018986:	4639      	mov	r1, r7
 8018988:	f7e7 fe36 	bl	80005f8 <__aeabi_dmul>
 801898c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018994:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018998:	2300      	movs	r3, #0
 801899a:	9304      	str	r3, [sp, #16]
 801899c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80189a0:	46ab      	mov	fp, r5
 80189a2:	106d      	asrs	r5, r5, #1
 80189a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80189a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80189ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80189b0:	2200      	movs	r2, #0
 80189b2:	4640      	mov	r0, r8
 80189b4:	4649      	mov	r1, r9
 80189b6:	4614      	mov	r4, r2
 80189b8:	461d      	mov	r5, r3
 80189ba:	f7e7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80189be:	4602      	mov	r2, r0
 80189c0:	460b      	mov	r3, r1
 80189c2:	4630      	mov	r0, r6
 80189c4:	4639      	mov	r1, r7
 80189c6:	f7e7 fc5f 	bl	8000288 <__aeabi_dsub>
 80189ca:	ec53 2b18 	vmov	r2, r3, d8
 80189ce:	4606      	mov	r6, r0
 80189d0:	460f      	mov	r7, r1
 80189d2:	4620      	mov	r0, r4
 80189d4:	4629      	mov	r1, r5
 80189d6:	f7e7 fc57 	bl	8000288 <__aeabi_dsub>
 80189da:	4602      	mov	r2, r0
 80189dc:	460b      	mov	r3, r1
 80189de:	4650      	mov	r0, sl
 80189e0:	4659      	mov	r1, fp
 80189e2:	f7e7 fc51 	bl	8000288 <__aeabi_dsub>
 80189e6:	4642      	mov	r2, r8
 80189e8:	464b      	mov	r3, r9
 80189ea:	f7e7 fe05 	bl	80005f8 <__aeabi_dmul>
 80189ee:	4602      	mov	r2, r0
 80189f0:	460b      	mov	r3, r1
 80189f2:	4630      	mov	r0, r6
 80189f4:	4639      	mov	r1, r7
 80189f6:	f7e7 fc47 	bl	8000288 <__aeabi_dsub>
 80189fa:	ec53 2b19 	vmov	r2, r3, d9
 80189fe:	f7e7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8018a02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a06:	ec41 0b18 	vmov	d8, r0, r1
 8018a0a:	4610      	mov	r0, r2
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	f7e7 fdf3 	bl	80005f8 <__aeabi_dmul>
 8018a12:	a37d      	add	r3, pc, #500	; (adr r3, 8018c08 <__ieee754_pow+0x6f0>)
 8018a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a18:	4604      	mov	r4, r0
 8018a1a:	460d      	mov	r5, r1
 8018a1c:	f7e7 fdec 	bl	80005f8 <__aeabi_dmul>
 8018a20:	a37b      	add	r3, pc, #492	; (adr r3, 8018c10 <__ieee754_pow+0x6f8>)
 8018a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a26:	f7e7 fc31 	bl	800028c <__adddf3>
 8018a2a:	4622      	mov	r2, r4
 8018a2c:	462b      	mov	r3, r5
 8018a2e:	f7e7 fde3 	bl	80005f8 <__aeabi_dmul>
 8018a32:	a379      	add	r3, pc, #484	; (adr r3, 8018c18 <__ieee754_pow+0x700>)
 8018a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a38:	f7e7 fc28 	bl	800028c <__adddf3>
 8018a3c:	4622      	mov	r2, r4
 8018a3e:	462b      	mov	r3, r5
 8018a40:	f7e7 fdda 	bl	80005f8 <__aeabi_dmul>
 8018a44:	a376      	add	r3, pc, #472	; (adr r3, 8018c20 <__ieee754_pow+0x708>)
 8018a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a4a:	f7e7 fc1f 	bl	800028c <__adddf3>
 8018a4e:	4622      	mov	r2, r4
 8018a50:	462b      	mov	r3, r5
 8018a52:	f7e7 fdd1 	bl	80005f8 <__aeabi_dmul>
 8018a56:	a374      	add	r3, pc, #464	; (adr r3, 8018c28 <__ieee754_pow+0x710>)
 8018a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a5c:	f7e7 fc16 	bl	800028c <__adddf3>
 8018a60:	4622      	mov	r2, r4
 8018a62:	462b      	mov	r3, r5
 8018a64:	f7e7 fdc8 	bl	80005f8 <__aeabi_dmul>
 8018a68:	a371      	add	r3, pc, #452	; (adr r3, 8018c30 <__ieee754_pow+0x718>)
 8018a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a6e:	f7e7 fc0d 	bl	800028c <__adddf3>
 8018a72:	4622      	mov	r2, r4
 8018a74:	4606      	mov	r6, r0
 8018a76:	460f      	mov	r7, r1
 8018a78:	462b      	mov	r3, r5
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	4629      	mov	r1, r5
 8018a7e:	f7e7 fdbb 	bl	80005f8 <__aeabi_dmul>
 8018a82:	4602      	mov	r2, r0
 8018a84:	460b      	mov	r3, r1
 8018a86:	4630      	mov	r0, r6
 8018a88:	4639      	mov	r1, r7
 8018a8a:	f7e7 fdb5 	bl	80005f8 <__aeabi_dmul>
 8018a8e:	4642      	mov	r2, r8
 8018a90:	4604      	mov	r4, r0
 8018a92:	460d      	mov	r5, r1
 8018a94:	464b      	mov	r3, r9
 8018a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018a9a:	f7e7 fbf7 	bl	800028c <__adddf3>
 8018a9e:	ec53 2b18 	vmov	r2, r3, d8
 8018aa2:	f7e7 fda9 	bl	80005f8 <__aeabi_dmul>
 8018aa6:	4622      	mov	r2, r4
 8018aa8:	462b      	mov	r3, r5
 8018aaa:	f7e7 fbef 	bl	800028c <__adddf3>
 8018aae:	4642      	mov	r2, r8
 8018ab0:	4682      	mov	sl, r0
 8018ab2:	468b      	mov	fp, r1
 8018ab4:	464b      	mov	r3, r9
 8018ab6:	4640      	mov	r0, r8
 8018ab8:	4649      	mov	r1, r9
 8018aba:	f7e7 fd9d 	bl	80005f8 <__aeabi_dmul>
 8018abe:	4b6c      	ldr	r3, [pc, #432]	; (8018c70 <__ieee754_pow+0x758>)
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	4606      	mov	r6, r0
 8018ac4:	460f      	mov	r7, r1
 8018ac6:	f7e7 fbe1 	bl	800028c <__adddf3>
 8018aca:	4652      	mov	r2, sl
 8018acc:	465b      	mov	r3, fp
 8018ace:	f7e7 fbdd 	bl	800028c <__adddf3>
 8018ad2:	9c04      	ldr	r4, [sp, #16]
 8018ad4:	460d      	mov	r5, r1
 8018ad6:	4622      	mov	r2, r4
 8018ad8:	460b      	mov	r3, r1
 8018ada:	4640      	mov	r0, r8
 8018adc:	4649      	mov	r1, r9
 8018ade:	f7e7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8018ae2:	4b63      	ldr	r3, [pc, #396]	; (8018c70 <__ieee754_pow+0x758>)
 8018ae4:	4680      	mov	r8, r0
 8018ae6:	4689      	mov	r9, r1
 8018ae8:	2200      	movs	r2, #0
 8018aea:	4620      	mov	r0, r4
 8018aec:	4629      	mov	r1, r5
 8018aee:	f7e7 fbcb 	bl	8000288 <__aeabi_dsub>
 8018af2:	4632      	mov	r2, r6
 8018af4:	463b      	mov	r3, r7
 8018af6:	f7e7 fbc7 	bl	8000288 <__aeabi_dsub>
 8018afa:	4602      	mov	r2, r0
 8018afc:	460b      	mov	r3, r1
 8018afe:	4650      	mov	r0, sl
 8018b00:	4659      	mov	r1, fp
 8018b02:	f7e7 fbc1 	bl	8000288 <__aeabi_dsub>
 8018b06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b0a:	f7e7 fd75 	bl	80005f8 <__aeabi_dmul>
 8018b0e:	4622      	mov	r2, r4
 8018b10:	4606      	mov	r6, r0
 8018b12:	460f      	mov	r7, r1
 8018b14:	462b      	mov	r3, r5
 8018b16:	ec51 0b18 	vmov	r0, r1, d8
 8018b1a:	f7e7 fd6d 	bl	80005f8 <__aeabi_dmul>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	460b      	mov	r3, r1
 8018b22:	4630      	mov	r0, r6
 8018b24:	4639      	mov	r1, r7
 8018b26:	f7e7 fbb1 	bl	800028c <__adddf3>
 8018b2a:	4606      	mov	r6, r0
 8018b2c:	460f      	mov	r7, r1
 8018b2e:	4602      	mov	r2, r0
 8018b30:	460b      	mov	r3, r1
 8018b32:	4640      	mov	r0, r8
 8018b34:	4649      	mov	r1, r9
 8018b36:	f7e7 fba9 	bl	800028c <__adddf3>
 8018b3a:	9c04      	ldr	r4, [sp, #16]
 8018b3c:	a33e      	add	r3, pc, #248	; (adr r3, 8018c38 <__ieee754_pow+0x720>)
 8018b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b42:	4620      	mov	r0, r4
 8018b44:	460d      	mov	r5, r1
 8018b46:	f7e7 fd57 	bl	80005f8 <__aeabi_dmul>
 8018b4a:	4642      	mov	r2, r8
 8018b4c:	ec41 0b18 	vmov	d8, r0, r1
 8018b50:	464b      	mov	r3, r9
 8018b52:	4620      	mov	r0, r4
 8018b54:	4629      	mov	r1, r5
 8018b56:	f7e7 fb97 	bl	8000288 <__aeabi_dsub>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	4630      	mov	r0, r6
 8018b60:	4639      	mov	r1, r7
 8018b62:	f7e7 fb91 	bl	8000288 <__aeabi_dsub>
 8018b66:	a336      	add	r3, pc, #216	; (adr r3, 8018c40 <__ieee754_pow+0x728>)
 8018b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b6c:	f7e7 fd44 	bl	80005f8 <__aeabi_dmul>
 8018b70:	a335      	add	r3, pc, #212	; (adr r3, 8018c48 <__ieee754_pow+0x730>)
 8018b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b76:	4606      	mov	r6, r0
 8018b78:	460f      	mov	r7, r1
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	4629      	mov	r1, r5
 8018b7e:	f7e7 fd3b 	bl	80005f8 <__aeabi_dmul>
 8018b82:	4602      	mov	r2, r0
 8018b84:	460b      	mov	r3, r1
 8018b86:	4630      	mov	r0, r6
 8018b88:	4639      	mov	r1, r7
 8018b8a:	f7e7 fb7f 	bl	800028c <__adddf3>
 8018b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b90:	4b38      	ldr	r3, [pc, #224]	; (8018c74 <__ieee754_pow+0x75c>)
 8018b92:	4413      	add	r3, r2
 8018b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b98:	f7e7 fb78 	bl	800028c <__adddf3>
 8018b9c:	4682      	mov	sl, r0
 8018b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ba0:	468b      	mov	fp, r1
 8018ba2:	f7e7 fcbf 	bl	8000524 <__aeabi_i2d>
 8018ba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ba8:	4b33      	ldr	r3, [pc, #204]	; (8018c78 <__ieee754_pow+0x760>)
 8018baa:	4413      	add	r3, r2
 8018bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018bb0:	4606      	mov	r6, r0
 8018bb2:	460f      	mov	r7, r1
 8018bb4:	4652      	mov	r2, sl
 8018bb6:	465b      	mov	r3, fp
 8018bb8:	ec51 0b18 	vmov	r0, r1, d8
 8018bbc:	f7e7 fb66 	bl	800028c <__adddf3>
 8018bc0:	4642      	mov	r2, r8
 8018bc2:	464b      	mov	r3, r9
 8018bc4:	f7e7 fb62 	bl	800028c <__adddf3>
 8018bc8:	4632      	mov	r2, r6
 8018bca:	463b      	mov	r3, r7
 8018bcc:	f7e7 fb5e 	bl	800028c <__adddf3>
 8018bd0:	9c04      	ldr	r4, [sp, #16]
 8018bd2:	4632      	mov	r2, r6
 8018bd4:	463b      	mov	r3, r7
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	460d      	mov	r5, r1
 8018bda:	f7e7 fb55 	bl	8000288 <__aeabi_dsub>
 8018bde:	4642      	mov	r2, r8
 8018be0:	464b      	mov	r3, r9
 8018be2:	f7e7 fb51 	bl	8000288 <__aeabi_dsub>
 8018be6:	ec53 2b18 	vmov	r2, r3, d8
 8018bea:	f7e7 fb4d 	bl	8000288 <__aeabi_dsub>
 8018bee:	4602      	mov	r2, r0
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	4650      	mov	r0, sl
 8018bf4:	4659      	mov	r1, fp
 8018bf6:	e606      	b.n	8018806 <__ieee754_pow+0x2ee>
 8018bf8:	2401      	movs	r4, #1
 8018bfa:	e6a0      	b.n	801893e <__ieee754_pow+0x426>
 8018bfc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018c50 <__ieee754_pow+0x738>
 8018c00:	e60d      	b.n	801881e <__ieee754_pow+0x306>
 8018c02:	bf00      	nop
 8018c04:	f3af 8000 	nop.w
 8018c08:	4a454eef 	.word	0x4a454eef
 8018c0c:	3fca7e28 	.word	0x3fca7e28
 8018c10:	93c9db65 	.word	0x93c9db65
 8018c14:	3fcd864a 	.word	0x3fcd864a
 8018c18:	a91d4101 	.word	0xa91d4101
 8018c1c:	3fd17460 	.word	0x3fd17460
 8018c20:	518f264d 	.word	0x518f264d
 8018c24:	3fd55555 	.word	0x3fd55555
 8018c28:	db6fabff 	.word	0xdb6fabff
 8018c2c:	3fdb6db6 	.word	0x3fdb6db6
 8018c30:	33333303 	.word	0x33333303
 8018c34:	3fe33333 	.word	0x3fe33333
 8018c38:	e0000000 	.word	0xe0000000
 8018c3c:	3feec709 	.word	0x3feec709
 8018c40:	dc3a03fd 	.word	0xdc3a03fd
 8018c44:	3feec709 	.word	0x3feec709
 8018c48:	145b01f5 	.word	0x145b01f5
 8018c4c:	be3e2fe0 	.word	0xbe3e2fe0
 8018c50:	00000000 	.word	0x00000000
 8018c54:	3ff00000 	.word	0x3ff00000
 8018c58:	7ff00000 	.word	0x7ff00000
 8018c5c:	43400000 	.word	0x43400000
 8018c60:	0003988e 	.word	0x0003988e
 8018c64:	000bb679 	.word	0x000bb679
 8018c68:	0801af18 	.word	0x0801af18
 8018c6c:	3ff00000 	.word	0x3ff00000
 8018c70:	40080000 	.word	0x40080000
 8018c74:	0801af38 	.word	0x0801af38
 8018c78:	0801af28 	.word	0x0801af28
 8018c7c:	a3b5      	add	r3, pc, #724	; (adr r3, 8018f54 <__ieee754_pow+0xa3c>)
 8018c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c82:	4640      	mov	r0, r8
 8018c84:	4649      	mov	r1, r9
 8018c86:	f7e7 fb01 	bl	800028c <__adddf3>
 8018c8a:	4622      	mov	r2, r4
 8018c8c:	ec41 0b1a 	vmov	d10, r0, r1
 8018c90:	462b      	mov	r3, r5
 8018c92:	4630      	mov	r0, r6
 8018c94:	4639      	mov	r1, r7
 8018c96:	f7e7 faf7 	bl	8000288 <__aeabi_dsub>
 8018c9a:	4602      	mov	r2, r0
 8018c9c:	460b      	mov	r3, r1
 8018c9e:	ec51 0b1a 	vmov	r0, r1, d10
 8018ca2:	f7e7 ff39 	bl	8000b18 <__aeabi_dcmpgt>
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	f47f adf8 	bne.w	801889c <__ieee754_pow+0x384>
 8018cac:	4aa4      	ldr	r2, [pc, #656]	; (8018f40 <__ieee754_pow+0xa28>)
 8018cae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018cb2:	4293      	cmp	r3, r2
 8018cb4:	f340 810b 	ble.w	8018ece <__ieee754_pow+0x9b6>
 8018cb8:	151b      	asrs	r3, r3, #20
 8018cba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018cbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018cc2:	fa4a f303 	asr.w	r3, sl, r3
 8018cc6:	445b      	add	r3, fp
 8018cc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018ccc:	4e9d      	ldr	r6, [pc, #628]	; (8018f44 <__ieee754_pow+0xa2c>)
 8018cce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018cd2:	4116      	asrs	r6, r2
 8018cd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018cd8:	2000      	movs	r0, #0
 8018cda:	ea23 0106 	bic.w	r1, r3, r6
 8018cde:	f1c2 0214 	rsb	r2, r2, #20
 8018ce2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018ce6:	fa4a fa02 	asr.w	sl, sl, r2
 8018cea:	f1bb 0f00 	cmp.w	fp, #0
 8018cee:	4602      	mov	r2, r0
 8018cf0:	460b      	mov	r3, r1
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	4629      	mov	r1, r5
 8018cf6:	bfb8      	it	lt
 8018cf8:	f1ca 0a00 	rsblt	sl, sl, #0
 8018cfc:	f7e7 fac4 	bl	8000288 <__aeabi_dsub>
 8018d00:	ec41 0b19 	vmov	d9, r0, r1
 8018d04:	4642      	mov	r2, r8
 8018d06:	464b      	mov	r3, r9
 8018d08:	ec51 0b19 	vmov	r0, r1, d9
 8018d0c:	f7e7 fabe 	bl	800028c <__adddf3>
 8018d10:	2400      	movs	r4, #0
 8018d12:	a379      	add	r3, pc, #484	; (adr r3, 8018ef8 <__ieee754_pow+0x9e0>)
 8018d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d18:	4620      	mov	r0, r4
 8018d1a:	460d      	mov	r5, r1
 8018d1c:	f7e7 fc6c 	bl	80005f8 <__aeabi_dmul>
 8018d20:	ec53 2b19 	vmov	r2, r3, d9
 8018d24:	4606      	mov	r6, r0
 8018d26:	460f      	mov	r7, r1
 8018d28:	4620      	mov	r0, r4
 8018d2a:	4629      	mov	r1, r5
 8018d2c:	f7e7 faac 	bl	8000288 <__aeabi_dsub>
 8018d30:	4602      	mov	r2, r0
 8018d32:	460b      	mov	r3, r1
 8018d34:	4640      	mov	r0, r8
 8018d36:	4649      	mov	r1, r9
 8018d38:	f7e7 faa6 	bl	8000288 <__aeabi_dsub>
 8018d3c:	a370      	add	r3, pc, #448	; (adr r3, 8018f00 <__ieee754_pow+0x9e8>)
 8018d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d42:	f7e7 fc59 	bl	80005f8 <__aeabi_dmul>
 8018d46:	a370      	add	r3, pc, #448	; (adr r3, 8018f08 <__ieee754_pow+0x9f0>)
 8018d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d4c:	4680      	mov	r8, r0
 8018d4e:	4689      	mov	r9, r1
 8018d50:	4620      	mov	r0, r4
 8018d52:	4629      	mov	r1, r5
 8018d54:	f7e7 fc50 	bl	80005f8 <__aeabi_dmul>
 8018d58:	4602      	mov	r2, r0
 8018d5a:	460b      	mov	r3, r1
 8018d5c:	4640      	mov	r0, r8
 8018d5e:	4649      	mov	r1, r9
 8018d60:	f7e7 fa94 	bl	800028c <__adddf3>
 8018d64:	4604      	mov	r4, r0
 8018d66:	460d      	mov	r5, r1
 8018d68:	4602      	mov	r2, r0
 8018d6a:	460b      	mov	r3, r1
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	4639      	mov	r1, r7
 8018d70:	f7e7 fa8c 	bl	800028c <__adddf3>
 8018d74:	4632      	mov	r2, r6
 8018d76:	463b      	mov	r3, r7
 8018d78:	4680      	mov	r8, r0
 8018d7a:	4689      	mov	r9, r1
 8018d7c:	f7e7 fa84 	bl	8000288 <__aeabi_dsub>
 8018d80:	4602      	mov	r2, r0
 8018d82:	460b      	mov	r3, r1
 8018d84:	4620      	mov	r0, r4
 8018d86:	4629      	mov	r1, r5
 8018d88:	f7e7 fa7e 	bl	8000288 <__aeabi_dsub>
 8018d8c:	4642      	mov	r2, r8
 8018d8e:	4606      	mov	r6, r0
 8018d90:	460f      	mov	r7, r1
 8018d92:	464b      	mov	r3, r9
 8018d94:	4640      	mov	r0, r8
 8018d96:	4649      	mov	r1, r9
 8018d98:	f7e7 fc2e 	bl	80005f8 <__aeabi_dmul>
 8018d9c:	a35c      	add	r3, pc, #368	; (adr r3, 8018f10 <__ieee754_pow+0x9f8>)
 8018d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da2:	4604      	mov	r4, r0
 8018da4:	460d      	mov	r5, r1
 8018da6:	f7e7 fc27 	bl	80005f8 <__aeabi_dmul>
 8018daa:	a35b      	add	r3, pc, #364	; (adr r3, 8018f18 <__ieee754_pow+0xa00>)
 8018dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db0:	f7e7 fa6a 	bl	8000288 <__aeabi_dsub>
 8018db4:	4622      	mov	r2, r4
 8018db6:	462b      	mov	r3, r5
 8018db8:	f7e7 fc1e 	bl	80005f8 <__aeabi_dmul>
 8018dbc:	a358      	add	r3, pc, #352	; (adr r3, 8018f20 <__ieee754_pow+0xa08>)
 8018dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc2:	f7e7 fa63 	bl	800028c <__adddf3>
 8018dc6:	4622      	mov	r2, r4
 8018dc8:	462b      	mov	r3, r5
 8018dca:	f7e7 fc15 	bl	80005f8 <__aeabi_dmul>
 8018dce:	a356      	add	r3, pc, #344	; (adr r3, 8018f28 <__ieee754_pow+0xa10>)
 8018dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd4:	f7e7 fa58 	bl	8000288 <__aeabi_dsub>
 8018dd8:	4622      	mov	r2, r4
 8018dda:	462b      	mov	r3, r5
 8018ddc:	f7e7 fc0c 	bl	80005f8 <__aeabi_dmul>
 8018de0:	a353      	add	r3, pc, #332	; (adr r3, 8018f30 <__ieee754_pow+0xa18>)
 8018de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de6:	f7e7 fa51 	bl	800028c <__adddf3>
 8018dea:	4622      	mov	r2, r4
 8018dec:	462b      	mov	r3, r5
 8018dee:	f7e7 fc03 	bl	80005f8 <__aeabi_dmul>
 8018df2:	4602      	mov	r2, r0
 8018df4:	460b      	mov	r3, r1
 8018df6:	4640      	mov	r0, r8
 8018df8:	4649      	mov	r1, r9
 8018dfa:	f7e7 fa45 	bl	8000288 <__aeabi_dsub>
 8018dfe:	4604      	mov	r4, r0
 8018e00:	460d      	mov	r5, r1
 8018e02:	4602      	mov	r2, r0
 8018e04:	460b      	mov	r3, r1
 8018e06:	4640      	mov	r0, r8
 8018e08:	4649      	mov	r1, r9
 8018e0a:	f7e7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8018e0e:	2200      	movs	r2, #0
 8018e10:	ec41 0b19 	vmov	d9, r0, r1
 8018e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018e18:	4620      	mov	r0, r4
 8018e1a:	4629      	mov	r1, r5
 8018e1c:	f7e7 fa34 	bl	8000288 <__aeabi_dsub>
 8018e20:	4602      	mov	r2, r0
 8018e22:	460b      	mov	r3, r1
 8018e24:	ec51 0b19 	vmov	r0, r1, d9
 8018e28:	f7e7 fd10 	bl	800084c <__aeabi_ddiv>
 8018e2c:	4632      	mov	r2, r6
 8018e2e:	4604      	mov	r4, r0
 8018e30:	460d      	mov	r5, r1
 8018e32:	463b      	mov	r3, r7
 8018e34:	4640      	mov	r0, r8
 8018e36:	4649      	mov	r1, r9
 8018e38:	f7e7 fbde 	bl	80005f8 <__aeabi_dmul>
 8018e3c:	4632      	mov	r2, r6
 8018e3e:	463b      	mov	r3, r7
 8018e40:	f7e7 fa24 	bl	800028c <__adddf3>
 8018e44:	4602      	mov	r2, r0
 8018e46:	460b      	mov	r3, r1
 8018e48:	4620      	mov	r0, r4
 8018e4a:	4629      	mov	r1, r5
 8018e4c:	f7e7 fa1c 	bl	8000288 <__aeabi_dsub>
 8018e50:	4642      	mov	r2, r8
 8018e52:	464b      	mov	r3, r9
 8018e54:	f7e7 fa18 	bl	8000288 <__aeabi_dsub>
 8018e58:	460b      	mov	r3, r1
 8018e5a:	4602      	mov	r2, r0
 8018e5c:	493a      	ldr	r1, [pc, #232]	; (8018f48 <__ieee754_pow+0xa30>)
 8018e5e:	2000      	movs	r0, #0
 8018e60:	f7e7 fa12 	bl	8000288 <__aeabi_dsub>
 8018e64:	e9cd 0100 	strd	r0, r1, [sp]
 8018e68:	9b01      	ldr	r3, [sp, #4]
 8018e6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018e72:	da2f      	bge.n	8018ed4 <__ieee754_pow+0x9bc>
 8018e74:	4650      	mov	r0, sl
 8018e76:	ed9d 0b00 	vldr	d0, [sp]
 8018e7a:	f001 fab9 	bl	801a3f0 <scalbn>
 8018e7e:	ec51 0b10 	vmov	r0, r1, d0
 8018e82:	ec53 2b18 	vmov	r2, r3, d8
 8018e86:	f7ff bbe0 	b.w	801864a <__ieee754_pow+0x132>
 8018e8a:	4b30      	ldr	r3, [pc, #192]	; (8018f4c <__ieee754_pow+0xa34>)
 8018e8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018e90:	429e      	cmp	r6, r3
 8018e92:	f77f af0b 	ble.w	8018cac <__ieee754_pow+0x794>
 8018e96:	4b2e      	ldr	r3, [pc, #184]	; (8018f50 <__ieee754_pow+0xa38>)
 8018e98:	440b      	add	r3, r1
 8018e9a:	4303      	orrs	r3, r0
 8018e9c:	d00b      	beq.n	8018eb6 <__ieee754_pow+0x99e>
 8018e9e:	a326      	add	r3, pc, #152	; (adr r3, 8018f38 <__ieee754_pow+0xa20>)
 8018ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ea4:	ec51 0b18 	vmov	r0, r1, d8
 8018ea8:	f7e7 fba6 	bl	80005f8 <__aeabi_dmul>
 8018eac:	a322      	add	r3, pc, #136	; (adr r3, 8018f38 <__ieee754_pow+0xa20>)
 8018eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb2:	f7ff bbca 	b.w	801864a <__ieee754_pow+0x132>
 8018eb6:	4622      	mov	r2, r4
 8018eb8:	462b      	mov	r3, r5
 8018eba:	f7e7 f9e5 	bl	8000288 <__aeabi_dsub>
 8018ebe:	4642      	mov	r2, r8
 8018ec0:	464b      	mov	r3, r9
 8018ec2:	f7e7 fe1f 	bl	8000b04 <__aeabi_dcmpge>
 8018ec6:	2800      	cmp	r0, #0
 8018ec8:	f43f aef0 	beq.w	8018cac <__ieee754_pow+0x794>
 8018ecc:	e7e7      	b.n	8018e9e <__ieee754_pow+0x986>
 8018ece:	f04f 0a00 	mov.w	sl, #0
 8018ed2:	e717      	b.n	8018d04 <__ieee754_pow+0x7ec>
 8018ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018ed8:	4619      	mov	r1, r3
 8018eda:	e7d2      	b.n	8018e82 <__ieee754_pow+0x96a>
 8018edc:	491a      	ldr	r1, [pc, #104]	; (8018f48 <__ieee754_pow+0xa30>)
 8018ede:	2000      	movs	r0, #0
 8018ee0:	f7ff bb9e 	b.w	8018620 <__ieee754_pow+0x108>
 8018ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ee8:	f7ff bb9a 	b.w	8018620 <__ieee754_pow+0x108>
 8018eec:	9000      	str	r0, [sp, #0]
 8018eee:	f7ff bb76 	b.w	80185de <__ieee754_pow+0xc6>
 8018ef2:	2100      	movs	r1, #0
 8018ef4:	f7ff bb60 	b.w	80185b8 <__ieee754_pow+0xa0>
 8018ef8:	00000000 	.word	0x00000000
 8018efc:	3fe62e43 	.word	0x3fe62e43
 8018f00:	fefa39ef 	.word	0xfefa39ef
 8018f04:	3fe62e42 	.word	0x3fe62e42
 8018f08:	0ca86c39 	.word	0x0ca86c39
 8018f0c:	be205c61 	.word	0xbe205c61
 8018f10:	72bea4d0 	.word	0x72bea4d0
 8018f14:	3e663769 	.word	0x3e663769
 8018f18:	c5d26bf1 	.word	0xc5d26bf1
 8018f1c:	3ebbbd41 	.word	0x3ebbbd41
 8018f20:	af25de2c 	.word	0xaf25de2c
 8018f24:	3f11566a 	.word	0x3f11566a
 8018f28:	16bebd93 	.word	0x16bebd93
 8018f2c:	3f66c16c 	.word	0x3f66c16c
 8018f30:	5555553e 	.word	0x5555553e
 8018f34:	3fc55555 	.word	0x3fc55555
 8018f38:	c2f8f359 	.word	0xc2f8f359
 8018f3c:	01a56e1f 	.word	0x01a56e1f
 8018f40:	3fe00000 	.word	0x3fe00000
 8018f44:	000fffff 	.word	0x000fffff
 8018f48:	3ff00000 	.word	0x3ff00000
 8018f4c:	4090cbff 	.word	0x4090cbff
 8018f50:	3f6f3400 	.word	0x3f6f3400
 8018f54:	652b82fe 	.word	0x652b82fe
 8018f58:	3c971547 	.word	0x3c971547
 8018f5c:	00000000 	.word	0x00000000

08018f60 <__ieee754_rem_pio2>:
 8018f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f64:	ed2d 8b02 	vpush	{d8}
 8018f68:	ec55 4b10 	vmov	r4, r5, d0
 8018f6c:	4bca      	ldr	r3, [pc, #808]	; (8019298 <__ieee754_rem_pio2+0x338>)
 8018f6e:	b08b      	sub	sp, #44	; 0x2c
 8018f70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8018f74:	4598      	cmp	r8, r3
 8018f76:	4682      	mov	sl, r0
 8018f78:	9502      	str	r5, [sp, #8]
 8018f7a:	dc08      	bgt.n	8018f8e <__ieee754_rem_pio2+0x2e>
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	2300      	movs	r3, #0
 8018f80:	ed80 0b00 	vstr	d0, [r0]
 8018f84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018f88:	f04f 0b00 	mov.w	fp, #0
 8018f8c:	e028      	b.n	8018fe0 <__ieee754_rem_pio2+0x80>
 8018f8e:	4bc3      	ldr	r3, [pc, #780]	; (801929c <__ieee754_rem_pio2+0x33c>)
 8018f90:	4598      	cmp	r8, r3
 8018f92:	dc78      	bgt.n	8019086 <__ieee754_rem_pio2+0x126>
 8018f94:	9b02      	ldr	r3, [sp, #8]
 8018f96:	4ec2      	ldr	r6, [pc, #776]	; (80192a0 <__ieee754_rem_pio2+0x340>)
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	ee10 0a10 	vmov	r0, s0
 8018f9e:	a3b0      	add	r3, pc, #704	; (adr r3, 8019260 <__ieee754_rem_pio2+0x300>)
 8018fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fa4:	4629      	mov	r1, r5
 8018fa6:	dd39      	ble.n	801901c <__ieee754_rem_pio2+0xbc>
 8018fa8:	f7e7 f96e 	bl	8000288 <__aeabi_dsub>
 8018fac:	45b0      	cmp	r8, r6
 8018fae:	4604      	mov	r4, r0
 8018fb0:	460d      	mov	r5, r1
 8018fb2:	d01b      	beq.n	8018fec <__ieee754_rem_pio2+0x8c>
 8018fb4:	a3ac      	add	r3, pc, #688	; (adr r3, 8019268 <__ieee754_rem_pio2+0x308>)
 8018fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fba:	f7e7 f965 	bl	8000288 <__aeabi_dsub>
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	460b      	mov	r3, r1
 8018fc2:	e9ca 2300 	strd	r2, r3, [sl]
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	4629      	mov	r1, r5
 8018fca:	f7e7 f95d 	bl	8000288 <__aeabi_dsub>
 8018fce:	a3a6      	add	r3, pc, #664	; (adr r3, 8019268 <__ieee754_rem_pio2+0x308>)
 8018fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fd4:	f7e7 f958 	bl	8000288 <__aeabi_dsub>
 8018fd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018fdc:	f04f 0b01 	mov.w	fp, #1
 8018fe0:	4658      	mov	r0, fp
 8018fe2:	b00b      	add	sp, #44	; 0x2c
 8018fe4:	ecbd 8b02 	vpop	{d8}
 8018fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fec:	a3a0      	add	r3, pc, #640	; (adr r3, 8019270 <__ieee754_rem_pio2+0x310>)
 8018fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ff2:	f7e7 f949 	bl	8000288 <__aeabi_dsub>
 8018ff6:	a3a0      	add	r3, pc, #640	; (adr r3, 8019278 <__ieee754_rem_pio2+0x318>)
 8018ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ffc:	4604      	mov	r4, r0
 8018ffe:	460d      	mov	r5, r1
 8019000:	f7e7 f942 	bl	8000288 <__aeabi_dsub>
 8019004:	4602      	mov	r2, r0
 8019006:	460b      	mov	r3, r1
 8019008:	e9ca 2300 	strd	r2, r3, [sl]
 801900c:	4620      	mov	r0, r4
 801900e:	4629      	mov	r1, r5
 8019010:	f7e7 f93a 	bl	8000288 <__aeabi_dsub>
 8019014:	a398      	add	r3, pc, #608	; (adr r3, 8019278 <__ieee754_rem_pio2+0x318>)
 8019016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901a:	e7db      	b.n	8018fd4 <__ieee754_rem_pio2+0x74>
 801901c:	f7e7 f936 	bl	800028c <__adddf3>
 8019020:	45b0      	cmp	r8, r6
 8019022:	4604      	mov	r4, r0
 8019024:	460d      	mov	r5, r1
 8019026:	d016      	beq.n	8019056 <__ieee754_rem_pio2+0xf6>
 8019028:	a38f      	add	r3, pc, #572	; (adr r3, 8019268 <__ieee754_rem_pio2+0x308>)
 801902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801902e:	f7e7 f92d 	bl	800028c <__adddf3>
 8019032:	4602      	mov	r2, r0
 8019034:	460b      	mov	r3, r1
 8019036:	e9ca 2300 	strd	r2, r3, [sl]
 801903a:	4620      	mov	r0, r4
 801903c:	4629      	mov	r1, r5
 801903e:	f7e7 f923 	bl	8000288 <__aeabi_dsub>
 8019042:	a389      	add	r3, pc, #548	; (adr r3, 8019268 <__ieee754_rem_pio2+0x308>)
 8019044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019048:	f7e7 f920 	bl	800028c <__adddf3>
 801904c:	f04f 3bff 	mov.w	fp, #4294967295
 8019050:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019054:	e7c4      	b.n	8018fe0 <__ieee754_rem_pio2+0x80>
 8019056:	a386      	add	r3, pc, #536	; (adr r3, 8019270 <__ieee754_rem_pio2+0x310>)
 8019058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801905c:	f7e7 f916 	bl	800028c <__adddf3>
 8019060:	a385      	add	r3, pc, #532	; (adr r3, 8019278 <__ieee754_rem_pio2+0x318>)
 8019062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019066:	4604      	mov	r4, r0
 8019068:	460d      	mov	r5, r1
 801906a:	f7e7 f90f 	bl	800028c <__adddf3>
 801906e:	4602      	mov	r2, r0
 8019070:	460b      	mov	r3, r1
 8019072:	e9ca 2300 	strd	r2, r3, [sl]
 8019076:	4620      	mov	r0, r4
 8019078:	4629      	mov	r1, r5
 801907a:	f7e7 f905 	bl	8000288 <__aeabi_dsub>
 801907e:	a37e      	add	r3, pc, #504	; (adr r3, 8019278 <__ieee754_rem_pio2+0x318>)
 8019080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019084:	e7e0      	b.n	8019048 <__ieee754_rem_pio2+0xe8>
 8019086:	4b87      	ldr	r3, [pc, #540]	; (80192a4 <__ieee754_rem_pio2+0x344>)
 8019088:	4598      	cmp	r8, r3
 801908a:	f300 80d9 	bgt.w	8019240 <__ieee754_rem_pio2+0x2e0>
 801908e:	f001 f88f 	bl	801a1b0 <fabs>
 8019092:	ec55 4b10 	vmov	r4, r5, d0
 8019096:	ee10 0a10 	vmov	r0, s0
 801909a:	a379      	add	r3, pc, #484	; (adr r3, 8019280 <__ieee754_rem_pio2+0x320>)
 801909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a0:	4629      	mov	r1, r5
 80190a2:	f7e7 faa9 	bl	80005f8 <__aeabi_dmul>
 80190a6:	4b80      	ldr	r3, [pc, #512]	; (80192a8 <__ieee754_rem_pio2+0x348>)
 80190a8:	2200      	movs	r2, #0
 80190aa:	f7e7 f8ef 	bl	800028c <__adddf3>
 80190ae:	f7e7 fd53 	bl	8000b58 <__aeabi_d2iz>
 80190b2:	4683      	mov	fp, r0
 80190b4:	f7e7 fa36 	bl	8000524 <__aeabi_i2d>
 80190b8:	4602      	mov	r2, r0
 80190ba:	460b      	mov	r3, r1
 80190bc:	ec43 2b18 	vmov	d8, r2, r3
 80190c0:	a367      	add	r3, pc, #412	; (adr r3, 8019260 <__ieee754_rem_pio2+0x300>)
 80190c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190c6:	f7e7 fa97 	bl	80005f8 <__aeabi_dmul>
 80190ca:	4602      	mov	r2, r0
 80190cc:	460b      	mov	r3, r1
 80190ce:	4620      	mov	r0, r4
 80190d0:	4629      	mov	r1, r5
 80190d2:	f7e7 f8d9 	bl	8000288 <__aeabi_dsub>
 80190d6:	a364      	add	r3, pc, #400	; (adr r3, 8019268 <__ieee754_rem_pio2+0x308>)
 80190d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190dc:	4606      	mov	r6, r0
 80190de:	460f      	mov	r7, r1
 80190e0:	ec51 0b18 	vmov	r0, r1, d8
 80190e4:	f7e7 fa88 	bl	80005f8 <__aeabi_dmul>
 80190e8:	f1bb 0f1f 	cmp.w	fp, #31
 80190ec:	4604      	mov	r4, r0
 80190ee:	460d      	mov	r5, r1
 80190f0:	dc0d      	bgt.n	801910e <__ieee754_rem_pio2+0x1ae>
 80190f2:	4b6e      	ldr	r3, [pc, #440]	; (80192ac <__ieee754_rem_pio2+0x34c>)
 80190f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80190f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190fc:	4543      	cmp	r3, r8
 80190fe:	d006      	beq.n	801910e <__ieee754_rem_pio2+0x1ae>
 8019100:	4622      	mov	r2, r4
 8019102:	462b      	mov	r3, r5
 8019104:	4630      	mov	r0, r6
 8019106:	4639      	mov	r1, r7
 8019108:	f7e7 f8be 	bl	8000288 <__aeabi_dsub>
 801910c:	e00f      	b.n	801912e <__ieee754_rem_pio2+0x1ce>
 801910e:	462b      	mov	r3, r5
 8019110:	4622      	mov	r2, r4
 8019112:	4630      	mov	r0, r6
 8019114:	4639      	mov	r1, r7
 8019116:	f7e7 f8b7 	bl	8000288 <__aeabi_dsub>
 801911a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801911e:	9303      	str	r3, [sp, #12]
 8019120:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019124:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019128:	f1b8 0f10 	cmp.w	r8, #16
 801912c:	dc02      	bgt.n	8019134 <__ieee754_rem_pio2+0x1d4>
 801912e:	e9ca 0100 	strd	r0, r1, [sl]
 8019132:	e039      	b.n	80191a8 <__ieee754_rem_pio2+0x248>
 8019134:	a34e      	add	r3, pc, #312	; (adr r3, 8019270 <__ieee754_rem_pio2+0x310>)
 8019136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801913a:	ec51 0b18 	vmov	r0, r1, d8
 801913e:	f7e7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8019142:	4604      	mov	r4, r0
 8019144:	460d      	mov	r5, r1
 8019146:	4602      	mov	r2, r0
 8019148:	460b      	mov	r3, r1
 801914a:	4630      	mov	r0, r6
 801914c:	4639      	mov	r1, r7
 801914e:	f7e7 f89b 	bl	8000288 <__aeabi_dsub>
 8019152:	4602      	mov	r2, r0
 8019154:	460b      	mov	r3, r1
 8019156:	4680      	mov	r8, r0
 8019158:	4689      	mov	r9, r1
 801915a:	4630      	mov	r0, r6
 801915c:	4639      	mov	r1, r7
 801915e:	f7e7 f893 	bl	8000288 <__aeabi_dsub>
 8019162:	4622      	mov	r2, r4
 8019164:	462b      	mov	r3, r5
 8019166:	f7e7 f88f 	bl	8000288 <__aeabi_dsub>
 801916a:	a343      	add	r3, pc, #268	; (adr r3, 8019278 <__ieee754_rem_pio2+0x318>)
 801916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019170:	4604      	mov	r4, r0
 8019172:	460d      	mov	r5, r1
 8019174:	ec51 0b18 	vmov	r0, r1, d8
 8019178:	f7e7 fa3e 	bl	80005f8 <__aeabi_dmul>
 801917c:	4622      	mov	r2, r4
 801917e:	462b      	mov	r3, r5
 8019180:	f7e7 f882 	bl	8000288 <__aeabi_dsub>
 8019184:	4602      	mov	r2, r0
 8019186:	460b      	mov	r3, r1
 8019188:	4604      	mov	r4, r0
 801918a:	460d      	mov	r5, r1
 801918c:	4640      	mov	r0, r8
 801918e:	4649      	mov	r1, r9
 8019190:	f7e7 f87a 	bl	8000288 <__aeabi_dsub>
 8019194:	9a03      	ldr	r2, [sp, #12]
 8019196:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801919a:	1ad3      	subs	r3, r2, r3
 801919c:	2b31      	cmp	r3, #49	; 0x31
 801919e:	dc24      	bgt.n	80191ea <__ieee754_rem_pio2+0x28a>
 80191a0:	e9ca 0100 	strd	r0, r1, [sl]
 80191a4:	4646      	mov	r6, r8
 80191a6:	464f      	mov	r7, r9
 80191a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80191ac:	4630      	mov	r0, r6
 80191ae:	4642      	mov	r2, r8
 80191b0:	464b      	mov	r3, r9
 80191b2:	4639      	mov	r1, r7
 80191b4:	f7e7 f868 	bl	8000288 <__aeabi_dsub>
 80191b8:	462b      	mov	r3, r5
 80191ba:	4622      	mov	r2, r4
 80191bc:	f7e7 f864 	bl	8000288 <__aeabi_dsub>
 80191c0:	9b02      	ldr	r3, [sp, #8]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80191c8:	f6bf af0a 	bge.w	8018fe0 <__ieee754_rem_pio2+0x80>
 80191cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80191d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80191d4:	f8ca 8000 	str.w	r8, [sl]
 80191d8:	f8ca 0008 	str.w	r0, [sl, #8]
 80191dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80191e4:	f1cb 0b00 	rsb	fp, fp, #0
 80191e8:	e6fa      	b.n	8018fe0 <__ieee754_rem_pio2+0x80>
 80191ea:	a327      	add	r3, pc, #156	; (adr r3, 8019288 <__ieee754_rem_pio2+0x328>)
 80191ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f0:	ec51 0b18 	vmov	r0, r1, d8
 80191f4:	f7e7 fa00 	bl	80005f8 <__aeabi_dmul>
 80191f8:	4604      	mov	r4, r0
 80191fa:	460d      	mov	r5, r1
 80191fc:	4602      	mov	r2, r0
 80191fe:	460b      	mov	r3, r1
 8019200:	4640      	mov	r0, r8
 8019202:	4649      	mov	r1, r9
 8019204:	f7e7 f840 	bl	8000288 <__aeabi_dsub>
 8019208:	4602      	mov	r2, r0
 801920a:	460b      	mov	r3, r1
 801920c:	4606      	mov	r6, r0
 801920e:	460f      	mov	r7, r1
 8019210:	4640      	mov	r0, r8
 8019212:	4649      	mov	r1, r9
 8019214:	f7e7 f838 	bl	8000288 <__aeabi_dsub>
 8019218:	4622      	mov	r2, r4
 801921a:	462b      	mov	r3, r5
 801921c:	f7e7 f834 	bl	8000288 <__aeabi_dsub>
 8019220:	a31b      	add	r3, pc, #108	; (adr r3, 8019290 <__ieee754_rem_pio2+0x330>)
 8019222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019226:	4604      	mov	r4, r0
 8019228:	460d      	mov	r5, r1
 801922a:	ec51 0b18 	vmov	r0, r1, d8
 801922e:	f7e7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8019232:	4622      	mov	r2, r4
 8019234:	462b      	mov	r3, r5
 8019236:	f7e7 f827 	bl	8000288 <__aeabi_dsub>
 801923a:	4604      	mov	r4, r0
 801923c:	460d      	mov	r5, r1
 801923e:	e75f      	b.n	8019100 <__ieee754_rem_pio2+0x1a0>
 8019240:	4b1b      	ldr	r3, [pc, #108]	; (80192b0 <__ieee754_rem_pio2+0x350>)
 8019242:	4598      	cmp	r8, r3
 8019244:	dd36      	ble.n	80192b4 <__ieee754_rem_pio2+0x354>
 8019246:	ee10 2a10 	vmov	r2, s0
 801924a:	462b      	mov	r3, r5
 801924c:	4620      	mov	r0, r4
 801924e:	4629      	mov	r1, r5
 8019250:	f7e7 f81a 	bl	8000288 <__aeabi_dsub>
 8019254:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019258:	e9ca 0100 	strd	r0, r1, [sl]
 801925c:	e694      	b.n	8018f88 <__ieee754_rem_pio2+0x28>
 801925e:	bf00      	nop
 8019260:	54400000 	.word	0x54400000
 8019264:	3ff921fb 	.word	0x3ff921fb
 8019268:	1a626331 	.word	0x1a626331
 801926c:	3dd0b461 	.word	0x3dd0b461
 8019270:	1a600000 	.word	0x1a600000
 8019274:	3dd0b461 	.word	0x3dd0b461
 8019278:	2e037073 	.word	0x2e037073
 801927c:	3ba3198a 	.word	0x3ba3198a
 8019280:	6dc9c883 	.word	0x6dc9c883
 8019284:	3fe45f30 	.word	0x3fe45f30
 8019288:	2e000000 	.word	0x2e000000
 801928c:	3ba3198a 	.word	0x3ba3198a
 8019290:	252049c1 	.word	0x252049c1
 8019294:	397b839a 	.word	0x397b839a
 8019298:	3fe921fb 	.word	0x3fe921fb
 801929c:	4002d97b 	.word	0x4002d97b
 80192a0:	3ff921fb 	.word	0x3ff921fb
 80192a4:	413921fb 	.word	0x413921fb
 80192a8:	3fe00000 	.word	0x3fe00000
 80192ac:	0801af48 	.word	0x0801af48
 80192b0:	7fefffff 	.word	0x7fefffff
 80192b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80192b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80192bc:	ee10 0a10 	vmov	r0, s0
 80192c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80192c4:	ee10 6a10 	vmov	r6, s0
 80192c8:	460f      	mov	r7, r1
 80192ca:	f7e7 fc45 	bl	8000b58 <__aeabi_d2iz>
 80192ce:	f7e7 f929 	bl	8000524 <__aeabi_i2d>
 80192d2:	4602      	mov	r2, r0
 80192d4:	460b      	mov	r3, r1
 80192d6:	4630      	mov	r0, r6
 80192d8:	4639      	mov	r1, r7
 80192da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80192de:	f7e6 ffd3 	bl	8000288 <__aeabi_dsub>
 80192e2:	4b22      	ldr	r3, [pc, #136]	; (801936c <__ieee754_rem_pio2+0x40c>)
 80192e4:	2200      	movs	r2, #0
 80192e6:	f7e7 f987 	bl	80005f8 <__aeabi_dmul>
 80192ea:	460f      	mov	r7, r1
 80192ec:	4606      	mov	r6, r0
 80192ee:	f7e7 fc33 	bl	8000b58 <__aeabi_d2iz>
 80192f2:	f7e7 f917 	bl	8000524 <__aeabi_i2d>
 80192f6:	4602      	mov	r2, r0
 80192f8:	460b      	mov	r3, r1
 80192fa:	4630      	mov	r0, r6
 80192fc:	4639      	mov	r1, r7
 80192fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019302:	f7e6 ffc1 	bl	8000288 <__aeabi_dsub>
 8019306:	4b19      	ldr	r3, [pc, #100]	; (801936c <__ieee754_rem_pio2+0x40c>)
 8019308:	2200      	movs	r2, #0
 801930a:	f7e7 f975 	bl	80005f8 <__aeabi_dmul>
 801930e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019312:	ad04      	add	r5, sp, #16
 8019314:	f04f 0803 	mov.w	r8, #3
 8019318:	46a9      	mov	r9, r5
 801931a:	2600      	movs	r6, #0
 801931c:	2700      	movs	r7, #0
 801931e:	4632      	mov	r2, r6
 8019320:	463b      	mov	r3, r7
 8019322:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8019326:	46c3      	mov	fp, r8
 8019328:	3d08      	subs	r5, #8
 801932a:	f108 38ff 	add.w	r8, r8, #4294967295
 801932e:	f7e7 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8019332:	2800      	cmp	r0, #0
 8019334:	d1f3      	bne.n	801931e <__ieee754_rem_pio2+0x3be>
 8019336:	4b0e      	ldr	r3, [pc, #56]	; (8019370 <__ieee754_rem_pio2+0x410>)
 8019338:	9301      	str	r3, [sp, #4]
 801933a:	2302      	movs	r3, #2
 801933c:	9300      	str	r3, [sp, #0]
 801933e:	4622      	mov	r2, r4
 8019340:	465b      	mov	r3, fp
 8019342:	4651      	mov	r1, sl
 8019344:	4648      	mov	r0, r9
 8019346:	f000 f993 	bl	8019670 <__kernel_rem_pio2>
 801934a:	9b02      	ldr	r3, [sp, #8]
 801934c:	2b00      	cmp	r3, #0
 801934e:	4683      	mov	fp, r0
 8019350:	f6bf ae46 	bge.w	8018fe0 <__ieee754_rem_pio2+0x80>
 8019354:	f8da 3004 	ldr.w	r3, [sl, #4]
 8019358:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801935c:	f8ca 3004 	str.w	r3, [sl, #4]
 8019360:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019364:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019368:	e73a      	b.n	80191e0 <__ieee754_rem_pio2+0x280>
 801936a:	bf00      	nop
 801936c:	41700000 	.word	0x41700000
 8019370:	0801afc8 	.word	0x0801afc8

08019374 <__ieee754_sqrt>:
 8019374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019378:	ec55 4b10 	vmov	r4, r5, d0
 801937c:	4e56      	ldr	r6, [pc, #344]	; (80194d8 <__ieee754_sqrt+0x164>)
 801937e:	43ae      	bics	r6, r5
 8019380:	ee10 0a10 	vmov	r0, s0
 8019384:	ee10 3a10 	vmov	r3, s0
 8019388:	4629      	mov	r1, r5
 801938a:	462a      	mov	r2, r5
 801938c:	d110      	bne.n	80193b0 <__ieee754_sqrt+0x3c>
 801938e:	ee10 2a10 	vmov	r2, s0
 8019392:	462b      	mov	r3, r5
 8019394:	f7e7 f930 	bl	80005f8 <__aeabi_dmul>
 8019398:	4602      	mov	r2, r0
 801939a:	460b      	mov	r3, r1
 801939c:	4620      	mov	r0, r4
 801939e:	4629      	mov	r1, r5
 80193a0:	f7e6 ff74 	bl	800028c <__adddf3>
 80193a4:	4604      	mov	r4, r0
 80193a6:	460d      	mov	r5, r1
 80193a8:	ec45 4b10 	vmov	d0, r4, r5
 80193ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193b0:	2d00      	cmp	r5, #0
 80193b2:	dc10      	bgt.n	80193d6 <__ieee754_sqrt+0x62>
 80193b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80193b8:	4330      	orrs	r0, r6
 80193ba:	d0f5      	beq.n	80193a8 <__ieee754_sqrt+0x34>
 80193bc:	b15d      	cbz	r5, 80193d6 <__ieee754_sqrt+0x62>
 80193be:	ee10 2a10 	vmov	r2, s0
 80193c2:	462b      	mov	r3, r5
 80193c4:	ee10 0a10 	vmov	r0, s0
 80193c8:	f7e6 ff5e 	bl	8000288 <__aeabi_dsub>
 80193cc:	4602      	mov	r2, r0
 80193ce:	460b      	mov	r3, r1
 80193d0:	f7e7 fa3c 	bl	800084c <__aeabi_ddiv>
 80193d4:	e7e6      	b.n	80193a4 <__ieee754_sqrt+0x30>
 80193d6:	1509      	asrs	r1, r1, #20
 80193d8:	d076      	beq.n	80194c8 <__ieee754_sqrt+0x154>
 80193da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80193de:	07ce      	lsls	r6, r1, #31
 80193e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80193e4:	bf5e      	ittt	pl
 80193e6:	0fda      	lsrpl	r2, r3, #31
 80193e8:	005b      	lslpl	r3, r3, #1
 80193ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80193ee:	0fda      	lsrs	r2, r3, #31
 80193f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80193f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80193f8:	2000      	movs	r0, #0
 80193fa:	106d      	asrs	r5, r5, #1
 80193fc:	005b      	lsls	r3, r3, #1
 80193fe:	f04f 0e16 	mov.w	lr, #22
 8019402:	4684      	mov	ip, r0
 8019404:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019408:	eb0c 0401 	add.w	r4, ip, r1
 801940c:	4294      	cmp	r4, r2
 801940e:	bfde      	ittt	le
 8019410:	1b12      	suble	r2, r2, r4
 8019412:	eb04 0c01 	addle.w	ip, r4, r1
 8019416:	1840      	addle	r0, r0, r1
 8019418:	0052      	lsls	r2, r2, #1
 801941a:	f1be 0e01 	subs.w	lr, lr, #1
 801941e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019422:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019426:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801942a:	d1ed      	bne.n	8019408 <__ieee754_sqrt+0x94>
 801942c:	4671      	mov	r1, lr
 801942e:	2720      	movs	r7, #32
 8019430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019434:	4562      	cmp	r2, ip
 8019436:	eb04 060e 	add.w	r6, r4, lr
 801943a:	dc02      	bgt.n	8019442 <__ieee754_sqrt+0xce>
 801943c:	d113      	bne.n	8019466 <__ieee754_sqrt+0xf2>
 801943e:	429e      	cmp	r6, r3
 8019440:	d811      	bhi.n	8019466 <__ieee754_sqrt+0xf2>
 8019442:	2e00      	cmp	r6, #0
 8019444:	eb06 0e04 	add.w	lr, r6, r4
 8019448:	da43      	bge.n	80194d2 <__ieee754_sqrt+0x15e>
 801944a:	f1be 0f00 	cmp.w	lr, #0
 801944e:	db40      	blt.n	80194d2 <__ieee754_sqrt+0x15e>
 8019450:	f10c 0801 	add.w	r8, ip, #1
 8019454:	eba2 020c 	sub.w	r2, r2, ip
 8019458:	429e      	cmp	r6, r3
 801945a:	bf88      	it	hi
 801945c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019460:	1b9b      	subs	r3, r3, r6
 8019462:	4421      	add	r1, r4
 8019464:	46c4      	mov	ip, r8
 8019466:	0052      	lsls	r2, r2, #1
 8019468:	3f01      	subs	r7, #1
 801946a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801946e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019472:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019476:	d1dd      	bne.n	8019434 <__ieee754_sqrt+0xc0>
 8019478:	4313      	orrs	r3, r2
 801947a:	d006      	beq.n	801948a <__ieee754_sqrt+0x116>
 801947c:	1c4c      	adds	r4, r1, #1
 801947e:	bf13      	iteet	ne
 8019480:	3101      	addne	r1, #1
 8019482:	3001      	addeq	r0, #1
 8019484:	4639      	moveq	r1, r7
 8019486:	f021 0101 	bicne.w	r1, r1, #1
 801948a:	1043      	asrs	r3, r0, #1
 801948c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019490:	0849      	lsrs	r1, r1, #1
 8019492:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019496:	07c2      	lsls	r2, r0, #31
 8019498:	bf48      	it	mi
 801949a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801949e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80194a2:	460c      	mov	r4, r1
 80194a4:	463d      	mov	r5, r7
 80194a6:	e77f      	b.n	80193a8 <__ieee754_sqrt+0x34>
 80194a8:	0ada      	lsrs	r2, r3, #11
 80194aa:	3815      	subs	r0, #21
 80194ac:	055b      	lsls	r3, r3, #21
 80194ae:	2a00      	cmp	r2, #0
 80194b0:	d0fa      	beq.n	80194a8 <__ieee754_sqrt+0x134>
 80194b2:	02d7      	lsls	r7, r2, #11
 80194b4:	d50a      	bpl.n	80194cc <__ieee754_sqrt+0x158>
 80194b6:	f1c1 0420 	rsb	r4, r1, #32
 80194ba:	fa23 f404 	lsr.w	r4, r3, r4
 80194be:	1e4d      	subs	r5, r1, #1
 80194c0:	408b      	lsls	r3, r1
 80194c2:	4322      	orrs	r2, r4
 80194c4:	1b41      	subs	r1, r0, r5
 80194c6:	e788      	b.n	80193da <__ieee754_sqrt+0x66>
 80194c8:	4608      	mov	r0, r1
 80194ca:	e7f0      	b.n	80194ae <__ieee754_sqrt+0x13a>
 80194cc:	0052      	lsls	r2, r2, #1
 80194ce:	3101      	adds	r1, #1
 80194d0:	e7ef      	b.n	80194b2 <__ieee754_sqrt+0x13e>
 80194d2:	46e0      	mov	r8, ip
 80194d4:	e7be      	b.n	8019454 <__ieee754_sqrt+0xe0>
 80194d6:	bf00      	nop
 80194d8:	7ff00000 	.word	0x7ff00000
 80194dc:	00000000 	.word	0x00000000

080194e0 <__kernel_cos>:
 80194e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e4:	ec57 6b10 	vmov	r6, r7, d0
 80194e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80194ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80194f0:	ed8d 1b00 	vstr	d1, [sp]
 80194f4:	da07      	bge.n	8019506 <__kernel_cos+0x26>
 80194f6:	ee10 0a10 	vmov	r0, s0
 80194fa:	4639      	mov	r1, r7
 80194fc:	f7e7 fb2c 	bl	8000b58 <__aeabi_d2iz>
 8019500:	2800      	cmp	r0, #0
 8019502:	f000 8088 	beq.w	8019616 <__kernel_cos+0x136>
 8019506:	4632      	mov	r2, r6
 8019508:	463b      	mov	r3, r7
 801950a:	4630      	mov	r0, r6
 801950c:	4639      	mov	r1, r7
 801950e:	f7e7 f873 	bl	80005f8 <__aeabi_dmul>
 8019512:	4b51      	ldr	r3, [pc, #324]	; (8019658 <__kernel_cos+0x178>)
 8019514:	2200      	movs	r2, #0
 8019516:	4604      	mov	r4, r0
 8019518:	460d      	mov	r5, r1
 801951a:	f7e7 f86d 	bl	80005f8 <__aeabi_dmul>
 801951e:	a340      	add	r3, pc, #256	; (adr r3, 8019620 <__kernel_cos+0x140>)
 8019520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019524:	4682      	mov	sl, r0
 8019526:	468b      	mov	fp, r1
 8019528:	4620      	mov	r0, r4
 801952a:	4629      	mov	r1, r5
 801952c:	f7e7 f864 	bl	80005f8 <__aeabi_dmul>
 8019530:	a33d      	add	r3, pc, #244	; (adr r3, 8019628 <__kernel_cos+0x148>)
 8019532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019536:	f7e6 fea9 	bl	800028c <__adddf3>
 801953a:	4622      	mov	r2, r4
 801953c:	462b      	mov	r3, r5
 801953e:	f7e7 f85b 	bl	80005f8 <__aeabi_dmul>
 8019542:	a33b      	add	r3, pc, #236	; (adr r3, 8019630 <__kernel_cos+0x150>)
 8019544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019548:	f7e6 fe9e 	bl	8000288 <__aeabi_dsub>
 801954c:	4622      	mov	r2, r4
 801954e:	462b      	mov	r3, r5
 8019550:	f7e7 f852 	bl	80005f8 <__aeabi_dmul>
 8019554:	a338      	add	r3, pc, #224	; (adr r3, 8019638 <__kernel_cos+0x158>)
 8019556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801955a:	f7e6 fe97 	bl	800028c <__adddf3>
 801955e:	4622      	mov	r2, r4
 8019560:	462b      	mov	r3, r5
 8019562:	f7e7 f849 	bl	80005f8 <__aeabi_dmul>
 8019566:	a336      	add	r3, pc, #216	; (adr r3, 8019640 <__kernel_cos+0x160>)
 8019568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801956c:	f7e6 fe8c 	bl	8000288 <__aeabi_dsub>
 8019570:	4622      	mov	r2, r4
 8019572:	462b      	mov	r3, r5
 8019574:	f7e7 f840 	bl	80005f8 <__aeabi_dmul>
 8019578:	a333      	add	r3, pc, #204	; (adr r3, 8019648 <__kernel_cos+0x168>)
 801957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957e:	f7e6 fe85 	bl	800028c <__adddf3>
 8019582:	4622      	mov	r2, r4
 8019584:	462b      	mov	r3, r5
 8019586:	f7e7 f837 	bl	80005f8 <__aeabi_dmul>
 801958a:	4622      	mov	r2, r4
 801958c:	462b      	mov	r3, r5
 801958e:	f7e7 f833 	bl	80005f8 <__aeabi_dmul>
 8019592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019596:	4604      	mov	r4, r0
 8019598:	460d      	mov	r5, r1
 801959a:	4630      	mov	r0, r6
 801959c:	4639      	mov	r1, r7
 801959e:	f7e7 f82b 	bl	80005f8 <__aeabi_dmul>
 80195a2:	460b      	mov	r3, r1
 80195a4:	4602      	mov	r2, r0
 80195a6:	4629      	mov	r1, r5
 80195a8:	4620      	mov	r0, r4
 80195aa:	f7e6 fe6d 	bl	8000288 <__aeabi_dsub>
 80195ae:	4b2b      	ldr	r3, [pc, #172]	; (801965c <__kernel_cos+0x17c>)
 80195b0:	4598      	cmp	r8, r3
 80195b2:	4606      	mov	r6, r0
 80195b4:	460f      	mov	r7, r1
 80195b6:	dc10      	bgt.n	80195da <__kernel_cos+0xfa>
 80195b8:	4602      	mov	r2, r0
 80195ba:	460b      	mov	r3, r1
 80195bc:	4650      	mov	r0, sl
 80195be:	4659      	mov	r1, fp
 80195c0:	f7e6 fe62 	bl	8000288 <__aeabi_dsub>
 80195c4:	460b      	mov	r3, r1
 80195c6:	4926      	ldr	r1, [pc, #152]	; (8019660 <__kernel_cos+0x180>)
 80195c8:	4602      	mov	r2, r0
 80195ca:	2000      	movs	r0, #0
 80195cc:	f7e6 fe5c 	bl	8000288 <__aeabi_dsub>
 80195d0:	ec41 0b10 	vmov	d0, r0, r1
 80195d4:	b003      	add	sp, #12
 80195d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195da:	4b22      	ldr	r3, [pc, #136]	; (8019664 <__kernel_cos+0x184>)
 80195dc:	4920      	ldr	r1, [pc, #128]	; (8019660 <__kernel_cos+0x180>)
 80195de:	4598      	cmp	r8, r3
 80195e0:	bfcc      	ite	gt
 80195e2:	4d21      	ldrgt	r5, [pc, #132]	; (8019668 <__kernel_cos+0x188>)
 80195e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80195e8:	2400      	movs	r4, #0
 80195ea:	4622      	mov	r2, r4
 80195ec:	462b      	mov	r3, r5
 80195ee:	2000      	movs	r0, #0
 80195f0:	f7e6 fe4a 	bl	8000288 <__aeabi_dsub>
 80195f4:	4622      	mov	r2, r4
 80195f6:	4680      	mov	r8, r0
 80195f8:	4689      	mov	r9, r1
 80195fa:	462b      	mov	r3, r5
 80195fc:	4650      	mov	r0, sl
 80195fe:	4659      	mov	r1, fp
 8019600:	f7e6 fe42 	bl	8000288 <__aeabi_dsub>
 8019604:	4632      	mov	r2, r6
 8019606:	463b      	mov	r3, r7
 8019608:	f7e6 fe3e 	bl	8000288 <__aeabi_dsub>
 801960c:	4602      	mov	r2, r0
 801960e:	460b      	mov	r3, r1
 8019610:	4640      	mov	r0, r8
 8019612:	4649      	mov	r1, r9
 8019614:	e7da      	b.n	80195cc <__kernel_cos+0xec>
 8019616:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019650 <__kernel_cos+0x170>
 801961a:	e7db      	b.n	80195d4 <__kernel_cos+0xf4>
 801961c:	f3af 8000 	nop.w
 8019620:	be8838d4 	.word	0xbe8838d4
 8019624:	bda8fae9 	.word	0xbda8fae9
 8019628:	bdb4b1c4 	.word	0xbdb4b1c4
 801962c:	3e21ee9e 	.word	0x3e21ee9e
 8019630:	809c52ad 	.word	0x809c52ad
 8019634:	3e927e4f 	.word	0x3e927e4f
 8019638:	19cb1590 	.word	0x19cb1590
 801963c:	3efa01a0 	.word	0x3efa01a0
 8019640:	16c15177 	.word	0x16c15177
 8019644:	3f56c16c 	.word	0x3f56c16c
 8019648:	5555554c 	.word	0x5555554c
 801964c:	3fa55555 	.word	0x3fa55555
 8019650:	00000000 	.word	0x00000000
 8019654:	3ff00000 	.word	0x3ff00000
 8019658:	3fe00000 	.word	0x3fe00000
 801965c:	3fd33332 	.word	0x3fd33332
 8019660:	3ff00000 	.word	0x3ff00000
 8019664:	3fe90000 	.word	0x3fe90000
 8019668:	3fd20000 	.word	0x3fd20000
 801966c:	00000000 	.word	0x00000000

08019670 <__kernel_rem_pio2>:
 8019670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019674:	ed2d 8b02 	vpush	{d8}
 8019678:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801967c:	f112 0f14 	cmn.w	r2, #20
 8019680:	9308      	str	r3, [sp, #32]
 8019682:	9101      	str	r1, [sp, #4]
 8019684:	4bc6      	ldr	r3, [pc, #792]	; (80199a0 <__kernel_rem_pio2+0x330>)
 8019686:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8019688:	9009      	str	r0, [sp, #36]	; 0x24
 801968a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801968e:	9304      	str	r3, [sp, #16]
 8019690:	9b08      	ldr	r3, [sp, #32]
 8019692:	f103 33ff 	add.w	r3, r3, #4294967295
 8019696:	bfa8      	it	ge
 8019698:	1ed4      	subge	r4, r2, #3
 801969a:	9306      	str	r3, [sp, #24]
 801969c:	bfb2      	itee	lt
 801969e:	2400      	movlt	r4, #0
 80196a0:	2318      	movge	r3, #24
 80196a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80196a6:	f06f 0317 	mvn.w	r3, #23
 80196aa:	fb04 3303 	mla	r3, r4, r3, r3
 80196ae:	eb03 0a02 	add.w	sl, r3, r2
 80196b2:	9b04      	ldr	r3, [sp, #16]
 80196b4:	9a06      	ldr	r2, [sp, #24]
 80196b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8019990 <__kernel_rem_pio2+0x320>
 80196ba:	eb03 0802 	add.w	r8, r3, r2
 80196be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80196c0:	1aa7      	subs	r7, r4, r2
 80196c2:	ae20      	add	r6, sp, #128	; 0x80
 80196c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80196c8:	2500      	movs	r5, #0
 80196ca:	4545      	cmp	r5, r8
 80196cc:	dd18      	ble.n	8019700 <__kernel_rem_pio2+0x90>
 80196ce:	9b08      	ldr	r3, [sp, #32]
 80196d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80196d4:	aa20      	add	r2, sp, #128	; 0x80
 80196d6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8019990 <__kernel_rem_pio2+0x320>
 80196da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80196de:	f1c3 0301 	rsb	r3, r3, #1
 80196e2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80196e6:	9307      	str	r3, [sp, #28]
 80196e8:	9b07      	ldr	r3, [sp, #28]
 80196ea:	9a04      	ldr	r2, [sp, #16]
 80196ec:	4443      	add	r3, r8
 80196ee:	429a      	cmp	r2, r3
 80196f0:	db2f      	blt.n	8019752 <__kernel_rem_pio2+0xe2>
 80196f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80196f6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80196fa:	462f      	mov	r7, r5
 80196fc:	2600      	movs	r6, #0
 80196fe:	e01b      	b.n	8019738 <__kernel_rem_pio2+0xc8>
 8019700:	42ef      	cmn	r7, r5
 8019702:	d407      	bmi.n	8019714 <__kernel_rem_pio2+0xa4>
 8019704:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019708:	f7e6 ff0c 	bl	8000524 <__aeabi_i2d>
 801970c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019710:	3501      	adds	r5, #1
 8019712:	e7da      	b.n	80196ca <__kernel_rem_pio2+0x5a>
 8019714:	ec51 0b18 	vmov	r0, r1, d8
 8019718:	e7f8      	b.n	801970c <__kernel_rem_pio2+0x9c>
 801971a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801971e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019722:	f7e6 ff69 	bl	80005f8 <__aeabi_dmul>
 8019726:	4602      	mov	r2, r0
 8019728:	460b      	mov	r3, r1
 801972a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801972e:	f7e6 fdad 	bl	800028c <__adddf3>
 8019732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019736:	3601      	adds	r6, #1
 8019738:	9b06      	ldr	r3, [sp, #24]
 801973a:	429e      	cmp	r6, r3
 801973c:	f1a7 0708 	sub.w	r7, r7, #8
 8019740:	ddeb      	ble.n	801971a <__kernel_rem_pio2+0xaa>
 8019742:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019746:	3508      	adds	r5, #8
 8019748:	ecab 7b02 	vstmia	fp!, {d7}
 801974c:	f108 0801 	add.w	r8, r8, #1
 8019750:	e7ca      	b.n	80196e8 <__kernel_rem_pio2+0x78>
 8019752:	9b04      	ldr	r3, [sp, #16]
 8019754:	aa0c      	add	r2, sp, #48	; 0x30
 8019756:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801975a:	930b      	str	r3, [sp, #44]	; 0x2c
 801975c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801975e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019762:	9c04      	ldr	r4, [sp, #16]
 8019764:	930a      	str	r3, [sp, #40]	; 0x28
 8019766:	ab98      	add	r3, sp, #608	; 0x260
 8019768:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801976c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019770:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8019774:	f8cd b008 	str.w	fp, [sp, #8]
 8019778:	4625      	mov	r5, r4
 801977a:	2d00      	cmp	r5, #0
 801977c:	dc78      	bgt.n	8019870 <__kernel_rem_pio2+0x200>
 801977e:	ec47 6b10 	vmov	d0, r6, r7
 8019782:	4650      	mov	r0, sl
 8019784:	f000 fe34 	bl	801a3f0 <scalbn>
 8019788:	ec57 6b10 	vmov	r6, r7, d0
 801978c:	2200      	movs	r2, #0
 801978e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019792:	ee10 0a10 	vmov	r0, s0
 8019796:	4639      	mov	r1, r7
 8019798:	f7e6 ff2e 	bl	80005f8 <__aeabi_dmul>
 801979c:	ec41 0b10 	vmov	d0, r0, r1
 80197a0:	f000 fd1a 	bl	801a1d8 <floor>
 80197a4:	4b7f      	ldr	r3, [pc, #508]	; (80199a4 <__kernel_rem_pio2+0x334>)
 80197a6:	ec51 0b10 	vmov	r0, r1, d0
 80197aa:	2200      	movs	r2, #0
 80197ac:	f7e6 ff24 	bl	80005f8 <__aeabi_dmul>
 80197b0:	4602      	mov	r2, r0
 80197b2:	460b      	mov	r3, r1
 80197b4:	4630      	mov	r0, r6
 80197b6:	4639      	mov	r1, r7
 80197b8:	f7e6 fd66 	bl	8000288 <__aeabi_dsub>
 80197bc:	460f      	mov	r7, r1
 80197be:	4606      	mov	r6, r0
 80197c0:	f7e7 f9ca 	bl	8000b58 <__aeabi_d2iz>
 80197c4:	9007      	str	r0, [sp, #28]
 80197c6:	f7e6 fead 	bl	8000524 <__aeabi_i2d>
 80197ca:	4602      	mov	r2, r0
 80197cc:	460b      	mov	r3, r1
 80197ce:	4630      	mov	r0, r6
 80197d0:	4639      	mov	r1, r7
 80197d2:	f7e6 fd59 	bl	8000288 <__aeabi_dsub>
 80197d6:	f1ba 0f00 	cmp.w	sl, #0
 80197da:	4606      	mov	r6, r0
 80197dc:	460f      	mov	r7, r1
 80197de:	dd70      	ble.n	80198c2 <__kernel_rem_pio2+0x252>
 80197e0:	1e62      	subs	r2, r4, #1
 80197e2:	ab0c      	add	r3, sp, #48	; 0x30
 80197e4:	9d07      	ldr	r5, [sp, #28]
 80197e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80197ea:	f1ca 0118 	rsb	r1, sl, #24
 80197ee:	fa40 f301 	asr.w	r3, r0, r1
 80197f2:	441d      	add	r5, r3
 80197f4:	408b      	lsls	r3, r1
 80197f6:	1ac0      	subs	r0, r0, r3
 80197f8:	ab0c      	add	r3, sp, #48	; 0x30
 80197fa:	9507      	str	r5, [sp, #28]
 80197fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019800:	f1ca 0317 	rsb	r3, sl, #23
 8019804:	fa40 f303 	asr.w	r3, r0, r3
 8019808:	9302      	str	r3, [sp, #8]
 801980a:	9b02      	ldr	r3, [sp, #8]
 801980c:	2b00      	cmp	r3, #0
 801980e:	dd66      	ble.n	80198de <__kernel_rem_pio2+0x26e>
 8019810:	9b07      	ldr	r3, [sp, #28]
 8019812:	2200      	movs	r2, #0
 8019814:	3301      	adds	r3, #1
 8019816:	9307      	str	r3, [sp, #28]
 8019818:	4615      	mov	r5, r2
 801981a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801981e:	4294      	cmp	r4, r2
 8019820:	f300 8099 	bgt.w	8019956 <__kernel_rem_pio2+0x2e6>
 8019824:	f1ba 0f00 	cmp.w	sl, #0
 8019828:	dd07      	ble.n	801983a <__kernel_rem_pio2+0x1ca>
 801982a:	f1ba 0f01 	cmp.w	sl, #1
 801982e:	f000 80a5 	beq.w	801997c <__kernel_rem_pio2+0x30c>
 8019832:	f1ba 0f02 	cmp.w	sl, #2
 8019836:	f000 80c1 	beq.w	80199bc <__kernel_rem_pio2+0x34c>
 801983a:	9b02      	ldr	r3, [sp, #8]
 801983c:	2b02      	cmp	r3, #2
 801983e:	d14e      	bne.n	80198de <__kernel_rem_pio2+0x26e>
 8019840:	4632      	mov	r2, r6
 8019842:	463b      	mov	r3, r7
 8019844:	4958      	ldr	r1, [pc, #352]	; (80199a8 <__kernel_rem_pio2+0x338>)
 8019846:	2000      	movs	r0, #0
 8019848:	f7e6 fd1e 	bl	8000288 <__aeabi_dsub>
 801984c:	4606      	mov	r6, r0
 801984e:	460f      	mov	r7, r1
 8019850:	2d00      	cmp	r5, #0
 8019852:	d044      	beq.n	80198de <__kernel_rem_pio2+0x26e>
 8019854:	4650      	mov	r0, sl
 8019856:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8019998 <__kernel_rem_pio2+0x328>
 801985a:	f000 fdc9 	bl	801a3f0 <scalbn>
 801985e:	4630      	mov	r0, r6
 8019860:	4639      	mov	r1, r7
 8019862:	ec53 2b10 	vmov	r2, r3, d0
 8019866:	f7e6 fd0f 	bl	8000288 <__aeabi_dsub>
 801986a:	4606      	mov	r6, r0
 801986c:	460f      	mov	r7, r1
 801986e:	e036      	b.n	80198de <__kernel_rem_pio2+0x26e>
 8019870:	4b4e      	ldr	r3, [pc, #312]	; (80199ac <__kernel_rem_pio2+0x33c>)
 8019872:	2200      	movs	r2, #0
 8019874:	4630      	mov	r0, r6
 8019876:	4639      	mov	r1, r7
 8019878:	f7e6 febe 	bl	80005f8 <__aeabi_dmul>
 801987c:	f7e7 f96c 	bl	8000b58 <__aeabi_d2iz>
 8019880:	f7e6 fe50 	bl	8000524 <__aeabi_i2d>
 8019884:	4b4a      	ldr	r3, [pc, #296]	; (80199b0 <__kernel_rem_pio2+0x340>)
 8019886:	2200      	movs	r2, #0
 8019888:	4680      	mov	r8, r0
 801988a:	4689      	mov	r9, r1
 801988c:	f7e6 feb4 	bl	80005f8 <__aeabi_dmul>
 8019890:	4602      	mov	r2, r0
 8019892:	460b      	mov	r3, r1
 8019894:	4630      	mov	r0, r6
 8019896:	4639      	mov	r1, r7
 8019898:	f7e6 fcf6 	bl	8000288 <__aeabi_dsub>
 801989c:	f7e7 f95c 	bl	8000b58 <__aeabi_d2iz>
 80198a0:	9b02      	ldr	r3, [sp, #8]
 80198a2:	f843 0b04 	str.w	r0, [r3], #4
 80198a6:	3d01      	subs	r5, #1
 80198a8:	9302      	str	r3, [sp, #8]
 80198aa:	ab70      	add	r3, sp, #448	; 0x1c0
 80198ac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80198b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b4:	4640      	mov	r0, r8
 80198b6:	4649      	mov	r1, r9
 80198b8:	f7e6 fce8 	bl	800028c <__adddf3>
 80198bc:	4606      	mov	r6, r0
 80198be:	460f      	mov	r7, r1
 80198c0:	e75b      	b.n	801977a <__kernel_rem_pio2+0x10a>
 80198c2:	d105      	bne.n	80198d0 <__kernel_rem_pio2+0x260>
 80198c4:	1e63      	subs	r3, r4, #1
 80198c6:	aa0c      	add	r2, sp, #48	; 0x30
 80198c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80198cc:	15c3      	asrs	r3, r0, #23
 80198ce:	e79b      	b.n	8019808 <__kernel_rem_pio2+0x198>
 80198d0:	4b38      	ldr	r3, [pc, #224]	; (80199b4 <__kernel_rem_pio2+0x344>)
 80198d2:	2200      	movs	r2, #0
 80198d4:	f7e7 f916 	bl	8000b04 <__aeabi_dcmpge>
 80198d8:	2800      	cmp	r0, #0
 80198da:	d139      	bne.n	8019950 <__kernel_rem_pio2+0x2e0>
 80198dc:	9002      	str	r0, [sp, #8]
 80198de:	2200      	movs	r2, #0
 80198e0:	2300      	movs	r3, #0
 80198e2:	4630      	mov	r0, r6
 80198e4:	4639      	mov	r1, r7
 80198e6:	f7e7 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80198ea:	2800      	cmp	r0, #0
 80198ec:	f000 80b4 	beq.w	8019a58 <__kernel_rem_pio2+0x3e8>
 80198f0:	f104 3bff 	add.w	fp, r4, #4294967295
 80198f4:	465b      	mov	r3, fp
 80198f6:	2200      	movs	r2, #0
 80198f8:	9904      	ldr	r1, [sp, #16]
 80198fa:	428b      	cmp	r3, r1
 80198fc:	da65      	bge.n	80199ca <__kernel_rem_pio2+0x35a>
 80198fe:	2a00      	cmp	r2, #0
 8019900:	d07b      	beq.n	80199fa <__kernel_rem_pio2+0x38a>
 8019902:	ab0c      	add	r3, sp, #48	; 0x30
 8019904:	f1aa 0a18 	sub.w	sl, sl, #24
 8019908:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801990c:	2b00      	cmp	r3, #0
 801990e:	f000 80a0 	beq.w	8019a52 <__kernel_rem_pio2+0x3e2>
 8019912:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8019998 <__kernel_rem_pio2+0x328>
 8019916:	4650      	mov	r0, sl
 8019918:	f000 fd6a 	bl	801a3f0 <scalbn>
 801991c:	4f23      	ldr	r7, [pc, #140]	; (80199ac <__kernel_rem_pio2+0x33c>)
 801991e:	ec55 4b10 	vmov	r4, r5, d0
 8019922:	46d8      	mov	r8, fp
 8019924:	2600      	movs	r6, #0
 8019926:	f1b8 0f00 	cmp.w	r8, #0
 801992a:	f280 80cf 	bge.w	8019acc <__kernel_rem_pio2+0x45c>
 801992e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8019990 <__kernel_rem_pio2+0x320>
 8019932:	465f      	mov	r7, fp
 8019934:	f04f 0800 	mov.w	r8, #0
 8019938:	2f00      	cmp	r7, #0
 801993a:	f2c0 80fd 	blt.w	8019b38 <__kernel_rem_pio2+0x4c8>
 801993e:	ab70      	add	r3, sp, #448	; 0x1c0
 8019940:	f8df a074 	ldr.w	sl, [pc, #116]	; 80199b8 <__kernel_rem_pio2+0x348>
 8019944:	ec55 4b18 	vmov	r4, r5, d8
 8019948:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801994c:	2600      	movs	r6, #0
 801994e:	e0e5      	b.n	8019b1c <__kernel_rem_pio2+0x4ac>
 8019950:	2302      	movs	r3, #2
 8019952:	9302      	str	r3, [sp, #8]
 8019954:	e75c      	b.n	8019810 <__kernel_rem_pio2+0x1a0>
 8019956:	f8db 3000 	ldr.w	r3, [fp]
 801995a:	b955      	cbnz	r5, 8019972 <__kernel_rem_pio2+0x302>
 801995c:	b123      	cbz	r3, 8019968 <__kernel_rem_pio2+0x2f8>
 801995e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8019962:	f8cb 3000 	str.w	r3, [fp]
 8019966:	2301      	movs	r3, #1
 8019968:	3201      	adds	r2, #1
 801996a:	f10b 0b04 	add.w	fp, fp, #4
 801996e:	461d      	mov	r5, r3
 8019970:	e755      	b.n	801981e <__kernel_rem_pio2+0x1ae>
 8019972:	1acb      	subs	r3, r1, r3
 8019974:	f8cb 3000 	str.w	r3, [fp]
 8019978:	462b      	mov	r3, r5
 801997a:	e7f5      	b.n	8019968 <__kernel_rem_pio2+0x2f8>
 801997c:	1e62      	subs	r2, r4, #1
 801997e:	ab0c      	add	r3, sp, #48	; 0x30
 8019980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019984:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019988:	a90c      	add	r1, sp, #48	; 0x30
 801998a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801998e:	e754      	b.n	801983a <__kernel_rem_pio2+0x1ca>
	...
 801999c:	3ff00000 	.word	0x3ff00000
 80199a0:	0801b110 	.word	0x0801b110
 80199a4:	40200000 	.word	0x40200000
 80199a8:	3ff00000 	.word	0x3ff00000
 80199ac:	3e700000 	.word	0x3e700000
 80199b0:	41700000 	.word	0x41700000
 80199b4:	3fe00000 	.word	0x3fe00000
 80199b8:	0801b0d0 	.word	0x0801b0d0
 80199bc:	1e62      	subs	r2, r4, #1
 80199be:	ab0c      	add	r3, sp, #48	; 0x30
 80199c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80199c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80199c8:	e7de      	b.n	8019988 <__kernel_rem_pio2+0x318>
 80199ca:	a90c      	add	r1, sp, #48	; 0x30
 80199cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80199d0:	3b01      	subs	r3, #1
 80199d2:	430a      	orrs	r2, r1
 80199d4:	e790      	b.n	80198f8 <__kernel_rem_pio2+0x288>
 80199d6:	3301      	adds	r3, #1
 80199d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80199dc:	2900      	cmp	r1, #0
 80199de:	d0fa      	beq.n	80199d6 <__kernel_rem_pio2+0x366>
 80199e0:	9a08      	ldr	r2, [sp, #32]
 80199e2:	18e3      	adds	r3, r4, r3
 80199e4:	18a6      	adds	r6, r4, r2
 80199e6:	aa20      	add	r2, sp, #128	; 0x80
 80199e8:	1c65      	adds	r5, r4, #1
 80199ea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80199ee:	9302      	str	r3, [sp, #8]
 80199f0:	9b02      	ldr	r3, [sp, #8]
 80199f2:	42ab      	cmp	r3, r5
 80199f4:	da04      	bge.n	8019a00 <__kernel_rem_pio2+0x390>
 80199f6:	461c      	mov	r4, r3
 80199f8:	e6b5      	b.n	8019766 <__kernel_rem_pio2+0xf6>
 80199fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199fc:	2301      	movs	r3, #1
 80199fe:	e7eb      	b.n	80199d8 <__kernel_rem_pio2+0x368>
 8019a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019a06:	f7e6 fd8d 	bl	8000524 <__aeabi_i2d>
 8019a0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a10:	46b3      	mov	fp, r6
 8019a12:	461c      	mov	r4, r3
 8019a14:	2700      	movs	r7, #0
 8019a16:	f04f 0800 	mov.w	r8, #0
 8019a1a:	f04f 0900 	mov.w	r9, #0
 8019a1e:	9b06      	ldr	r3, [sp, #24]
 8019a20:	429f      	cmp	r7, r3
 8019a22:	dd06      	ble.n	8019a32 <__kernel_rem_pio2+0x3c2>
 8019a24:	ab70      	add	r3, sp, #448	; 0x1c0
 8019a26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019a2a:	e9c3 8900 	strd	r8, r9, [r3]
 8019a2e:	3501      	adds	r5, #1
 8019a30:	e7de      	b.n	80199f0 <__kernel_rem_pio2+0x380>
 8019a32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8019a36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8019a3a:	f7e6 fddd 	bl	80005f8 <__aeabi_dmul>
 8019a3e:	4602      	mov	r2, r0
 8019a40:	460b      	mov	r3, r1
 8019a42:	4640      	mov	r0, r8
 8019a44:	4649      	mov	r1, r9
 8019a46:	f7e6 fc21 	bl	800028c <__adddf3>
 8019a4a:	3701      	adds	r7, #1
 8019a4c:	4680      	mov	r8, r0
 8019a4e:	4689      	mov	r9, r1
 8019a50:	e7e5      	b.n	8019a1e <__kernel_rem_pio2+0x3ae>
 8019a52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019a56:	e754      	b.n	8019902 <__kernel_rem_pio2+0x292>
 8019a58:	ec47 6b10 	vmov	d0, r6, r7
 8019a5c:	f1ca 0000 	rsb	r0, sl, #0
 8019a60:	f000 fcc6 	bl	801a3f0 <scalbn>
 8019a64:	ec57 6b10 	vmov	r6, r7, d0
 8019a68:	4b9f      	ldr	r3, [pc, #636]	; (8019ce8 <__kernel_rem_pio2+0x678>)
 8019a6a:	ee10 0a10 	vmov	r0, s0
 8019a6e:	2200      	movs	r2, #0
 8019a70:	4639      	mov	r1, r7
 8019a72:	f7e7 f847 	bl	8000b04 <__aeabi_dcmpge>
 8019a76:	b300      	cbz	r0, 8019aba <__kernel_rem_pio2+0x44a>
 8019a78:	4b9c      	ldr	r3, [pc, #624]	; (8019cec <__kernel_rem_pio2+0x67c>)
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	4630      	mov	r0, r6
 8019a7e:	4639      	mov	r1, r7
 8019a80:	f7e6 fdba 	bl	80005f8 <__aeabi_dmul>
 8019a84:	f7e7 f868 	bl	8000b58 <__aeabi_d2iz>
 8019a88:	4605      	mov	r5, r0
 8019a8a:	f7e6 fd4b 	bl	8000524 <__aeabi_i2d>
 8019a8e:	4b96      	ldr	r3, [pc, #600]	; (8019ce8 <__kernel_rem_pio2+0x678>)
 8019a90:	2200      	movs	r2, #0
 8019a92:	f7e6 fdb1 	bl	80005f8 <__aeabi_dmul>
 8019a96:	460b      	mov	r3, r1
 8019a98:	4602      	mov	r2, r0
 8019a9a:	4639      	mov	r1, r7
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	f7e6 fbf3 	bl	8000288 <__aeabi_dsub>
 8019aa2:	f7e7 f859 	bl	8000b58 <__aeabi_d2iz>
 8019aa6:	f104 0b01 	add.w	fp, r4, #1
 8019aaa:	ab0c      	add	r3, sp, #48	; 0x30
 8019aac:	f10a 0a18 	add.w	sl, sl, #24
 8019ab0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019ab4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8019ab8:	e72b      	b.n	8019912 <__kernel_rem_pio2+0x2a2>
 8019aba:	4630      	mov	r0, r6
 8019abc:	4639      	mov	r1, r7
 8019abe:	f7e7 f84b 	bl	8000b58 <__aeabi_d2iz>
 8019ac2:	ab0c      	add	r3, sp, #48	; 0x30
 8019ac4:	46a3      	mov	fp, r4
 8019ac6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019aca:	e722      	b.n	8019912 <__kernel_rem_pio2+0x2a2>
 8019acc:	ab70      	add	r3, sp, #448	; 0x1c0
 8019ace:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8019ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8019ad4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019ad8:	f7e6 fd24 	bl	8000524 <__aeabi_i2d>
 8019adc:	4622      	mov	r2, r4
 8019ade:	462b      	mov	r3, r5
 8019ae0:	f7e6 fd8a 	bl	80005f8 <__aeabi_dmul>
 8019ae4:	4632      	mov	r2, r6
 8019ae6:	e9c9 0100 	strd	r0, r1, [r9]
 8019aea:	463b      	mov	r3, r7
 8019aec:	4620      	mov	r0, r4
 8019aee:	4629      	mov	r1, r5
 8019af0:	f7e6 fd82 	bl	80005f8 <__aeabi_dmul>
 8019af4:	f108 38ff 	add.w	r8, r8, #4294967295
 8019af8:	4604      	mov	r4, r0
 8019afa:	460d      	mov	r5, r1
 8019afc:	e713      	b.n	8019926 <__kernel_rem_pio2+0x2b6>
 8019afe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8019b02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8019b06:	f7e6 fd77 	bl	80005f8 <__aeabi_dmul>
 8019b0a:	4602      	mov	r2, r0
 8019b0c:	460b      	mov	r3, r1
 8019b0e:	4620      	mov	r0, r4
 8019b10:	4629      	mov	r1, r5
 8019b12:	f7e6 fbbb 	bl	800028c <__adddf3>
 8019b16:	3601      	adds	r6, #1
 8019b18:	4604      	mov	r4, r0
 8019b1a:	460d      	mov	r5, r1
 8019b1c:	9b04      	ldr	r3, [sp, #16]
 8019b1e:	429e      	cmp	r6, r3
 8019b20:	dc01      	bgt.n	8019b26 <__kernel_rem_pio2+0x4b6>
 8019b22:	45b0      	cmp	r8, r6
 8019b24:	daeb      	bge.n	8019afe <__kernel_rem_pio2+0x48e>
 8019b26:	ab48      	add	r3, sp, #288	; 0x120
 8019b28:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019b2c:	e9c3 4500 	strd	r4, r5, [r3]
 8019b30:	3f01      	subs	r7, #1
 8019b32:	f108 0801 	add.w	r8, r8, #1
 8019b36:	e6ff      	b.n	8019938 <__kernel_rem_pio2+0x2c8>
 8019b38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8019b3a:	2b02      	cmp	r3, #2
 8019b3c:	dc0b      	bgt.n	8019b56 <__kernel_rem_pio2+0x4e6>
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	dc6e      	bgt.n	8019c20 <__kernel_rem_pio2+0x5b0>
 8019b42:	d045      	beq.n	8019bd0 <__kernel_rem_pio2+0x560>
 8019b44:	9b07      	ldr	r3, [sp, #28]
 8019b46:	f003 0007 	and.w	r0, r3, #7
 8019b4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8019b4e:	ecbd 8b02 	vpop	{d8}
 8019b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8019b58:	2b03      	cmp	r3, #3
 8019b5a:	d1f3      	bne.n	8019b44 <__kernel_rem_pio2+0x4d4>
 8019b5c:	ab48      	add	r3, sp, #288	; 0x120
 8019b5e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8019b62:	46d0      	mov	r8, sl
 8019b64:	46d9      	mov	r9, fp
 8019b66:	f1b9 0f00 	cmp.w	r9, #0
 8019b6a:	f1a8 0808 	sub.w	r8, r8, #8
 8019b6e:	dc64      	bgt.n	8019c3a <__kernel_rem_pio2+0x5ca>
 8019b70:	465c      	mov	r4, fp
 8019b72:	2c01      	cmp	r4, #1
 8019b74:	f1aa 0a08 	sub.w	sl, sl, #8
 8019b78:	dc7e      	bgt.n	8019c78 <__kernel_rem_pio2+0x608>
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	f1bb 0f01 	cmp.w	fp, #1
 8019b82:	f300 8097 	bgt.w	8019cb4 <__kernel_rem_pio2+0x644>
 8019b86:	9b02      	ldr	r3, [sp, #8]
 8019b88:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8019b8c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	f040 8099 	bne.w	8019cc8 <__kernel_rem_pio2+0x658>
 8019b96:	9b01      	ldr	r3, [sp, #4]
 8019b98:	e9c3 5600 	strd	r5, r6, [r3]
 8019b9c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8019ba0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8019ba4:	e7ce      	b.n	8019b44 <__kernel_rem_pio2+0x4d4>
 8019ba6:	ab48      	add	r3, sp, #288	; 0x120
 8019ba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bb0:	f7e6 fb6c 	bl	800028c <__adddf3>
 8019bb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019bb8:	f1bb 0f00 	cmp.w	fp, #0
 8019bbc:	daf3      	bge.n	8019ba6 <__kernel_rem_pio2+0x536>
 8019bbe:	9b02      	ldr	r3, [sp, #8]
 8019bc0:	b113      	cbz	r3, 8019bc8 <__kernel_rem_pio2+0x558>
 8019bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019bc6:	4619      	mov	r1, r3
 8019bc8:	9b01      	ldr	r3, [sp, #4]
 8019bca:	e9c3 0100 	strd	r0, r1, [r3]
 8019bce:	e7b9      	b.n	8019b44 <__kernel_rem_pio2+0x4d4>
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	2100      	movs	r1, #0
 8019bd4:	e7f0      	b.n	8019bb8 <__kernel_rem_pio2+0x548>
 8019bd6:	ab48      	add	r3, sp, #288	; 0x120
 8019bd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be0:	f7e6 fb54 	bl	800028c <__adddf3>
 8019be4:	3c01      	subs	r4, #1
 8019be6:	2c00      	cmp	r4, #0
 8019be8:	daf5      	bge.n	8019bd6 <__kernel_rem_pio2+0x566>
 8019bea:	9b02      	ldr	r3, [sp, #8]
 8019bec:	b1e3      	cbz	r3, 8019c28 <__kernel_rem_pio2+0x5b8>
 8019bee:	4602      	mov	r2, r0
 8019bf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019bf4:	9c01      	ldr	r4, [sp, #4]
 8019bf6:	e9c4 2300 	strd	r2, r3, [r4]
 8019bfa:	4602      	mov	r2, r0
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8019c02:	f7e6 fb41 	bl	8000288 <__aeabi_dsub>
 8019c06:	ad4a      	add	r5, sp, #296	; 0x128
 8019c08:	2401      	movs	r4, #1
 8019c0a:	45a3      	cmp	fp, r4
 8019c0c:	da0f      	bge.n	8019c2e <__kernel_rem_pio2+0x5be>
 8019c0e:	9b02      	ldr	r3, [sp, #8]
 8019c10:	b113      	cbz	r3, 8019c18 <__kernel_rem_pio2+0x5a8>
 8019c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c16:	4619      	mov	r1, r3
 8019c18:	9b01      	ldr	r3, [sp, #4]
 8019c1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019c1e:	e791      	b.n	8019b44 <__kernel_rem_pio2+0x4d4>
 8019c20:	465c      	mov	r4, fp
 8019c22:	2000      	movs	r0, #0
 8019c24:	2100      	movs	r1, #0
 8019c26:	e7de      	b.n	8019be6 <__kernel_rem_pio2+0x576>
 8019c28:	4602      	mov	r2, r0
 8019c2a:	460b      	mov	r3, r1
 8019c2c:	e7e2      	b.n	8019bf4 <__kernel_rem_pio2+0x584>
 8019c2e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8019c32:	f7e6 fb2b 	bl	800028c <__adddf3>
 8019c36:	3401      	adds	r4, #1
 8019c38:	e7e7      	b.n	8019c0a <__kernel_rem_pio2+0x59a>
 8019c3a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8019c3e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8019c42:	4620      	mov	r0, r4
 8019c44:	4632      	mov	r2, r6
 8019c46:	463b      	mov	r3, r7
 8019c48:	4629      	mov	r1, r5
 8019c4a:	f7e6 fb1f 	bl	800028c <__adddf3>
 8019c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019c52:	4602      	mov	r2, r0
 8019c54:	460b      	mov	r3, r1
 8019c56:	4620      	mov	r0, r4
 8019c58:	4629      	mov	r1, r5
 8019c5a:	f7e6 fb15 	bl	8000288 <__aeabi_dsub>
 8019c5e:	4632      	mov	r2, r6
 8019c60:	463b      	mov	r3, r7
 8019c62:	f7e6 fb13 	bl	800028c <__adddf3>
 8019c66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019c6a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8019c6e:	ed88 7b00 	vstr	d7, [r8]
 8019c72:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c76:	e776      	b.n	8019b66 <__kernel_rem_pio2+0x4f6>
 8019c78:	e9da 8900 	ldrd	r8, r9, [sl]
 8019c7c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8019c80:	4640      	mov	r0, r8
 8019c82:	4632      	mov	r2, r6
 8019c84:	463b      	mov	r3, r7
 8019c86:	4649      	mov	r1, r9
 8019c88:	f7e6 fb00 	bl	800028c <__adddf3>
 8019c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019c90:	4602      	mov	r2, r0
 8019c92:	460b      	mov	r3, r1
 8019c94:	4640      	mov	r0, r8
 8019c96:	4649      	mov	r1, r9
 8019c98:	f7e6 faf6 	bl	8000288 <__aeabi_dsub>
 8019c9c:	4632      	mov	r2, r6
 8019c9e:	463b      	mov	r3, r7
 8019ca0:	f7e6 faf4 	bl	800028c <__adddf3>
 8019ca4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019ca8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019cac:	ed8a 7b00 	vstr	d7, [sl]
 8019cb0:	3c01      	subs	r4, #1
 8019cb2:	e75e      	b.n	8019b72 <__kernel_rem_pio2+0x502>
 8019cb4:	ab48      	add	r3, sp, #288	; 0x120
 8019cb6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cbe:	f7e6 fae5 	bl	800028c <__adddf3>
 8019cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019cc6:	e75a      	b.n	8019b7e <__kernel_rem_pio2+0x50e>
 8019cc8:	9b01      	ldr	r3, [sp, #4]
 8019cca:	9a01      	ldr	r2, [sp, #4]
 8019ccc:	601d      	str	r5, [r3, #0]
 8019cce:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8019cd2:	605c      	str	r4, [r3, #4]
 8019cd4:	609f      	str	r7, [r3, #8]
 8019cd6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8019cda:	60d3      	str	r3, [r2, #12]
 8019cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019ce0:	6110      	str	r0, [r2, #16]
 8019ce2:	6153      	str	r3, [r2, #20]
 8019ce4:	e72e      	b.n	8019b44 <__kernel_rem_pio2+0x4d4>
 8019ce6:	bf00      	nop
 8019ce8:	41700000 	.word	0x41700000
 8019cec:	3e700000 	.word	0x3e700000

08019cf0 <__kernel_sin>:
 8019cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cf4:	ed2d 8b04 	vpush	{d8-d9}
 8019cf8:	eeb0 8a41 	vmov.f32	s16, s2
 8019cfc:	eef0 8a61 	vmov.f32	s17, s3
 8019d00:	ec55 4b10 	vmov	r4, r5, d0
 8019d04:	b083      	sub	sp, #12
 8019d06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019d0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019d0e:	9001      	str	r0, [sp, #4]
 8019d10:	da06      	bge.n	8019d20 <__kernel_sin+0x30>
 8019d12:	ee10 0a10 	vmov	r0, s0
 8019d16:	4629      	mov	r1, r5
 8019d18:	f7e6 ff1e 	bl	8000b58 <__aeabi_d2iz>
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	d051      	beq.n	8019dc4 <__kernel_sin+0xd4>
 8019d20:	4622      	mov	r2, r4
 8019d22:	462b      	mov	r3, r5
 8019d24:	4620      	mov	r0, r4
 8019d26:	4629      	mov	r1, r5
 8019d28:	f7e6 fc66 	bl	80005f8 <__aeabi_dmul>
 8019d2c:	4682      	mov	sl, r0
 8019d2e:	468b      	mov	fp, r1
 8019d30:	4602      	mov	r2, r0
 8019d32:	460b      	mov	r3, r1
 8019d34:	4620      	mov	r0, r4
 8019d36:	4629      	mov	r1, r5
 8019d38:	f7e6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8019d3c:	a341      	add	r3, pc, #260	; (adr r3, 8019e44 <__kernel_sin+0x154>)
 8019d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d42:	4680      	mov	r8, r0
 8019d44:	4689      	mov	r9, r1
 8019d46:	4650      	mov	r0, sl
 8019d48:	4659      	mov	r1, fp
 8019d4a:	f7e6 fc55 	bl	80005f8 <__aeabi_dmul>
 8019d4e:	a33f      	add	r3, pc, #252	; (adr r3, 8019e4c <__kernel_sin+0x15c>)
 8019d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d54:	f7e6 fa98 	bl	8000288 <__aeabi_dsub>
 8019d58:	4652      	mov	r2, sl
 8019d5a:	465b      	mov	r3, fp
 8019d5c:	f7e6 fc4c 	bl	80005f8 <__aeabi_dmul>
 8019d60:	a33c      	add	r3, pc, #240	; (adr r3, 8019e54 <__kernel_sin+0x164>)
 8019d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d66:	f7e6 fa91 	bl	800028c <__adddf3>
 8019d6a:	4652      	mov	r2, sl
 8019d6c:	465b      	mov	r3, fp
 8019d6e:	f7e6 fc43 	bl	80005f8 <__aeabi_dmul>
 8019d72:	a33a      	add	r3, pc, #232	; (adr r3, 8019e5c <__kernel_sin+0x16c>)
 8019d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d78:	f7e6 fa86 	bl	8000288 <__aeabi_dsub>
 8019d7c:	4652      	mov	r2, sl
 8019d7e:	465b      	mov	r3, fp
 8019d80:	f7e6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8019d84:	a337      	add	r3, pc, #220	; (adr r3, 8019e64 <__kernel_sin+0x174>)
 8019d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d8a:	f7e6 fa7f 	bl	800028c <__adddf3>
 8019d8e:	9b01      	ldr	r3, [sp, #4]
 8019d90:	4606      	mov	r6, r0
 8019d92:	460f      	mov	r7, r1
 8019d94:	b9eb      	cbnz	r3, 8019dd2 <__kernel_sin+0xe2>
 8019d96:	4602      	mov	r2, r0
 8019d98:	460b      	mov	r3, r1
 8019d9a:	4650      	mov	r0, sl
 8019d9c:	4659      	mov	r1, fp
 8019d9e:	f7e6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8019da2:	a325      	add	r3, pc, #148	; (adr r3, 8019e38 <__kernel_sin+0x148>)
 8019da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da8:	f7e6 fa6e 	bl	8000288 <__aeabi_dsub>
 8019dac:	4642      	mov	r2, r8
 8019dae:	464b      	mov	r3, r9
 8019db0:	f7e6 fc22 	bl	80005f8 <__aeabi_dmul>
 8019db4:	4602      	mov	r2, r0
 8019db6:	460b      	mov	r3, r1
 8019db8:	4620      	mov	r0, r4
 8019dba:	4629      	mov	r1, r5
 8019dbc:	f7e6 fa66 	bl	800028c <__adddf3>
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	460d      	mov	r5, r1
 8019dc4:	ec45 4b10 	vmov	d0, r4, r5
 8019dc8:	b003      	add	sp, #12
 8019dca:	ecbd 8b04 	vpop	{d8-d9}
 8019dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd2:	4b1b      	ldr	r3, [pc, #108]	; (8019e40 <__kernel_sin+0x150>)
 8019dd4:	ec51 0b18 	vmov	r0, r1, d8
 8019dd8:	2200      	movs	r2, #0
 8019dda:	f7e6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8019dde:	4632      	mov	r2, r6
 8019de0:	ec41 0b19 	vmov	d9, r0, r1
 8019de4:	463b      	mov	r3, r7
 8019de6:	4640      	mov	r0, r8
 8019de8:	4649      	mov	r1, r9
 8019dea:	f7e6 fc05 	bl	80005f8 <__aeabi_dmul>
 8019dee:	4602      	mov	r2, r0
 8019df0:	460b      	mov	r3, r1
 8019df2:	ec51 0b19 	vmov	r0, r1, d9
 8019df6:	f7e6 fa47 	bl	8000288 <__aeabi_dsub>
 8019dfa:	4652      	mov	r2, sl
 8019dfc:	465b      	mov	r3, fp
 8019dfe:	f7e6 fbfb 	bl	80005f8 <__aeabi_dmul>
 8019e02:	ec53 2b18 	vmov	r2, r3, d8
 8019e06:	f7e6 fa3f 	bl	8000288 <__aeabi_dsub>
 8019e0a:	a30b      	add	r3, pc, #44	; (adr r3, 8019e38 <__kernel_sin+0x148>)
 8019e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e10:	4606      	mov	r6, r0
 8019e12:	460f      	mov	r7, r1
 8019e14:	4640      	mov	r0, r8
 8019e16:	4649      	mov	r1, r9
 8019e18:	f7e6 fbee 	bl	80005f8 <__aeabi_dmul>
 8019e1c:	4602      	mov	r2, r0
 8019e1e:	460b      	mov	r3, r1
 8019e20:	4630      	mov	r0, r6
 8019e22:	4639      	mov	r1, r7
 8019e24:	f7e6 fa32 	bl	800028c <__adddf3>
 8019e28:	4602      	mov	r2, r0
 8019e2a:	460b      	mov	r3, r1
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	4629      	mov	r1, r5
 8019e30:	f7e6 fa2a 	bl	8000288 <__aeabi_dsub>
 8019e34:	e7c4      	b.n	8019dc0 <__kernel_sin+0xd0>
 8019e36:	bf00      	nop
 8019e38:	55555549 	.word	0x55555549
 8019e3c:	3fc55555 	.word	0x3fc55555
 8019e40:	3fe00000 	.word	0x3fe00000
 8019e44:	5acfd57c 	.word	0x5acfd57c
 8019e48:	3de5d93a 	.word	0x3de5d93a
 8019e4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019e50:	3e5ae5e6 	.word	0x3e5ae5e6
 8019e54:	57b1fe7d 	.word	0x57b1fe7d
 8019e58:	3ec71de3 	.word	0x3ec71de3
 8019e5c:	19c161d5 	.word	0x19c161d5
 8019e60:	3f2a01a0 	.word	0x3f2a01a0
 8019e64:	1110f8a6 	.word	0x1110f8a6
 8019e68:	3f811111 	.word	0x3f811111
 8019e6c:	00000000 	.word	0x00000000

08019e70 <atan>:
 8019e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e74:	ec55 4b10 	vmov	r4, r5, d0
 8019e78:	4bc3      	ldr	r3, [pc, #780]	; (801a188 <atan+0x318>)
 8019e7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019e7e:	429e      	cmp	r6, r3
 8019e80:	46ab      	mov	fp, r5
 8019e82:	dd18      	ble.n	8019eb6 <atan+0x46>
 8019e84:	4bc1      	ldr	r3, [pc, #772]	; (801a18c <atan+0x31c>)
 8019e86:	429e      	cmp	r6, r3
 8019e88:	dc01      	bgt.n	8019e8e <atan+0x1e>
 8019e8a:	d109      	bne.n	8019ea0 <atan+0x30>
 8019e8c:	b144      	cbz	r4, 8019ea0 <atan+0x30>
 8019e8e:	4622      	mov	r2, r4
 8019e90:	462b      	mov	r3, r5
 8019e92:	4620      	mov	r0, r4
 8019e94:	4629      	mov	r1, r5
 8019e96:	f7e6 f9f9 	bl	800028c <__adddf3>
 8019e9a:	4604      	mov	r4, r0
 8019e9c:	460d      	mov	r5, r1
 8019e9e:	e006      	b.n	8019eae <atan+0x3e>
 8019ea0:	f1bb 0f00 	cmp.w	fp, #0
 8019ea4:	f300 8131 	bgt.w	801a10a <atan+0x29a>
 8019ea8:	a59b      	add	r5, pc, #620	; (adr r5, 801a118 <atan+0x2a8>)
 8019eaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019eae:	ec45 4b10 	vmov	d0, r4, r5
 8019eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb6:	4bb6      	ldr	r3, [pc, #728]	; (801a190 <atan+0x320>)
 8019eb8:	429e      	cmp	r6, r3
 8019eba:	dc14      	bgt.n	8019ee6 <atan+0x76>
 8019ebc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019ec0:	429e      	cmp	r6, r3
 8019ec2:	dc0d      	bgt.n	8019ee0 <atan+0x70>
 8019ec4:	a396      	add	r3, pc, #600	; (adr r3, 801a120 <atan+0x2b0>)
 8019ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eca:	ee10 0a10 	vmov	r0, s0
 8019ece:	4629      	mov	r1, r5
 8019ed0:	f7e6 f9dc 	bl	800028c <__adddf3>
 8019ed4:	4baf      	ldr	r3, [pc, #700]	; (801a194 <atan+0x324>)
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	f7e6 fe1e 	bl	8000b18 <__aeabi_dcmpgt>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d1e6      	bne.n	8019eae <atan+0x3e>
 8019ee0:	f04f 3aff 	mov.w	sl, #4294967295
 8019ee4:	e02b      	b.n	8019f3e <atan+0xce>
 8019ee6:	f000 f963 	bl	801a1b0 <fabs>
 8019eea:	4bab      	ldr	r3, [pc, #684]	; (801a198 <atan+0x328>)
 8019eec:	429e      	cmp	r6, r3
 8019eee:	ec55 4b10 	vmov	r4, r5, d0
 8019ef2:	f300 80bf 	bgt.w	801a074 <atan+0x204>
 8019ef6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019efa:	429e      	cmp	r6, r3
 8019efc:	f300 80a0 	bgt.w	801a040 <atan+0x1d0>
 8019f00:	ee10 2a10 	vmov	r2, s0
 8019f04:	ee10 0a10 	vmov	r0, s0
 8019f08:	462b      	mov	r3, r5
 8019f0a:	4629      	mov	r1, r5
 8019f0c:	f7e6 f9be 	bl	800028c <__adddf3>
 8019f10:	4ba0      	ldr	r3, [pc, #640]	; (801a194 <atan+0x324>)
 8019f12:	2200      	movs	r2, #0
 8019f14:	f7e6 f9b8 	bl	8000288 <__aeabi_dsub>
 8019f18:	2200      	movs	r2, #0
 8019f1a:	4606      	mov	r6, r0
 8019f1c:	460f      	mov	r7, r1
 8019f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019f22:	4620      	mov	r0, r4
 8019f24:	4629      	mov	r1, r5
 8019f26:	f7e6 f9b1 	bl	800028c <__adddf3>
 8019f2a:	4602      	mov	r2, r0
 8019f2c:	460b      	mov	r3, r1
 8019f2e:	4630      	mov	r0, r6
 8019f30:	4639      	mov	r1, r7
 8019f32:	f7e6 fc8b 	bl	800084c <__aeabi_ddiv>
 8019f36:	f04f 0a00 	mov.w	sl, #0
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	460d      	mov	r5, r1
 8019f3e:	4622      	mov	r2, r4
 8019f40:	462b      	mov	r3, r5
 8019f42:	4620      	mov	r0, r4
 8019f44:	4629      	mov	r1, r5
 8019f46:	f7e6 fb57 	bl	80005f8 <__aeabi_dmul>
 8019f4a:	4602      	mov	r2, r0
 8019f4c:	460b      	mov	r3, r1
 8019f4e:	4680      	mov	r8, r0
 8019f50:	4689      	mov	r9, r1
 8019f52:	f7e6 fb51 	bl	80005f8 <__aeabi_dmul>
 8019f56:	a374      	add	r3, pc, #464	; (adr r3, 801a128 <atan+0x2b8>)
 8019f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5c:	4606      	mov	r6, r0
 8019f5e:	460f      	mov	r7, r1
 8019f60:	f7e6 fb4a 	bl	80005f8 <__aeabi_dmul>
 8019f64:	a372      	add	r3, pc, #456	; (adr r3, 801a130 <atan+0x2c0>)
 8019f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6a:	f7e6 f98f 	bl	800028c <__adddf3>
 8019f6e:	4632      	mov	r2, r6
 8019f70:	463b      	mov	r3, r7
 8019f72:	f7e6 fb41 	bl	80005f8 <__aeabi_dmul>
 8019f76:	a370      	add	r3, pc, #448	; (adr r3, 801a138 <atan+0x2c8>)
 8019f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7c:	f7e6 f986 	bl	800028c <__adddf3>
 8019f80:	4632      	mov	r2, r6
 8019f82:	463b      	mov	r3, r7
 8019f84:	f7e6 fb38 	bl	80005f8 <__aeabi_dmul>
 8019f88:	a36d      	add	r3, pc, #436	; (adr r3, 801a140 <atan+0x2d0>)
 8019f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8e:	f7e6 f97d 	bl	800028c <__adddf3>
 8019f92:	4632      	mov	r2, r6
 8019f94:	463b      	mov	r3, r7
 8019f96:	f7e6 fb2f 	bl	80005f8 <__aeabi_dmul>
 8019f9a:	a36b      	add	r3, pc, #428	; (adr r3, 801a148 <atan+0x2d8>)
 8019f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa0:	f7e6 f974 	bl	800028c <__adddf3>
 8019fa4:	4632      	mov	r2, r6
 8019fa6:	463b      	mov	r3, r7
 8019fa8:	f7e6 fb26 	bl	80005f8 <__aeabi_dmul>
 8019fac:	a368      	add	r3, pc, #416	; (adr r3, 801a150 <atan+0x2e0>)
 8019fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb2:	f7e6 f96b 	bl	800028c <__adddf3>
 8019fb6:	4642      	mov	r2, r8
 8019fb8:	464b      	mov	r3, r9
 8019fba:	f7e6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8019fbe:	a366      	add	r3, pc, #408	; (adr r3, 801a158 <atan+0x2e8>)
 8019fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc4:	4680      	mov	r8, r0
 8019fc6:	4689      	mov	r9, r1
 8019fc8:	4630      	mov	r0, r6
 8019fca:	4639      	mov	r1, r7
 8019fcc:	f7e6 fb14 	bl	80005f8 <__aeabi_dmul>
 8019fd0:	a363      	add	r3, pc, #396	; (adr r3, 801a160 <atan+0x2f0>)
 8019fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fd6:	f7e6 f957 	bl	8000288 <__aeabi_dsub>
 8019fda:	4632      	mov	r2, r6
 8019fdc:	463b      	mov	r3, r7
 8019fde:	f7e6 fb0b 	bl	80005f8 <__aeabi_dmul>
 8019fe2:	a361      	add	r3, pc, #388	; (adr r3, 801a168 <atan+0x2f8>)
 8019fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe8:	f7e6 f94e 	bl	8000288 <__aeabi_dsub>
 8019fec:	4632      	mov	r2, r6
 8019fee:	463b      	mov	r3, r7
 8019ff0:	f7e6 fb02 	bl	80005f8 <__aeabi_dmul>
 8019ff4:	a35e      	add	r3, pc, #376	; (adr r3, 801a170 <atan+0x300>)
 8019ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffa:	f7e6 f945 	bl	8000288 <__aeabi_dsub>
 8019ffe:	4632      	mov	r2, r6
 801a000:	463b      	mov	r3, r7
 801a002:	f7e6 faf9 	bl	80005f8 <__aeabi_dmul>
 801a006:	a35c      	add	r3, pc, #368	; (adr r3, 801a178 <atan+0x308>)
 801a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a00c:	f7e6 f93c 	bl	8000288 <__aeabi_dsub>
 801a010:	4632      	mov	r2, r6
 801a012:	463b      	mov	r3, r7
 801a014:	f7e6 faf0 	bl	80005f8 <__aeabi_dmul>
 801a018:	4602      	mov	r2, r0
 801a01a:	460b      	mov	r3, r1
 801a01c:	4640      	mov	r0, r8
 801a01e:	4649      	mov	r1, r9
 801a020:	f7e6 f934 	bl	800028c <__adddf3>
 801a024:	4622      	mov	r2, r4
 801a026:	462b      	mov	r3, r5
 801a028:	f7e6 fae6 	bl	80005f8 <__aeabi_dmul>
 801a02c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a030:	4602      	mov	r2, r0
 801a032:	460b      	mov	r3, r1
 801a034:	d14b      	bne.n	801a0ce <atan+0x25e>
 801a036:	4620      	mov	r0, r4
 801a038:	4629      	mov	r1, r5
 801a03a:	f7e6 f925 	bl	8000288 <__aeabi_dsub>
 801a03e:	e72c      	b.n	8019e9a <atan+0x2a>
 801a040:	ee10 0a10 	vmov	r0, s0
 801a044:	4b53      	ldr	r3, [pc, #332]	; (801a194 <atan+0x324>)
 801a046:	2200      	movs	r2, #0
 801a048:	4629      	mov	r1, r5
 801a04a:	f7e6 f91d 	bl	8000288 <__aeabi_dsub>
 801a04e:	4b51      	ldr	r3, [pc, #324]	; (801a194 <atan+0x324>)
 801a050:	4606      	mov	r6, r0
 801a052:	460f      	mov	r7, r1
 801a054:	2200      	movs	r2, #0
 801a056:	4620      	mov	r0, r4
 801a058:	4629      	mov	r1, r5
 801a05a:	f7e6 f917 	bl	800028c <__adddf3>
 801a05e:	4602      	mov	r2, r0
 801a060:	460b      	mov	r3, r1
 801a062:	4630      	mov	r0, r6
 801a064:	4639      	mov	r1, r7
 801a066:	f7e6 fbf1 	bl	800084c <__aeabi_ddiv>
 801a06a:	f04f 0a01 	mov.w	sl, #1
 801a06e:	4604      	mov	r4, r0
 801a070:	460d      	mov	r5, r1
 801a072:	e764      	b.n	8019f3e <atan+0xce>
 801a074:	4b49      	ldr	r3, [pc, #292]	; (801a19c <atan+0x32c>)
 801a076:	429e      	cmp	r6, r3
 801a078:	da1d      	bge.n	801a0b6 <atan+0x246>
 801a07a:	ee10 0a10 	vmov	r0, s0
 801a07e:	4b48      	ldr	r3, [pc, #288]	; (801a1a0 <atan+0x330>)
 801a080:	2200      	movs	r2, #0
 801a082:	4629      	mov	r1, r5
 801a084:	f7e6 f900 	bl	8000288 <__aeabi_dsub>
 801a088:	4b45      	ldr	r3, [pc, #276]	; (801a1a0 <atan+0x330>)
 801a08a:	4606      	mov	r6, r0
 801a08c:	460f      	mov	r7, r1
 801a08e:	2200      	movs	r2, #0
 801a090:	4620      	mov	r0, r4
 801a092:	4629      	mov	r1, r5
 801a094:	f7e6 fab0 	bl	80005f8 <__aeabi_dmul>
 801a098:	4b3e      	ldr	r3, [pc, #248]	; (801a194 <atan+0x324>)
 801a09a:	2200      	movs	r2, #0
 801a09c:	f7e6 f8f6 	bl	800028c <__adddf3>
 801a0a0:	4602      	mov	r2, r0
 801a0a2:	460b      	mov	r3, r1
 801a0a4:	4630      	mov	r0, r6
 801a0a6:	4639      	mov	r1, r7
 801a0a8:	f7e6 fbd0 	bl	800084c <__aeabi_ddiv>
 801a0ac:	f04f 0a02 	mov.w	sl, #2
 801a0b0:	4604      	mov	r4, r0
 801a0b2:	460d      	mov	r5, r1
 801a0b4:	e743      	b.n	8019f3e <atan+0xce>
 801a0b6:	462b      	mov	r3, r5
 801a0b8:	ee10 2a10 	vmov	r2, s0
 801a0bc:	4939      	ldr	r1, [pc, #228]	; (801a1a4 <atan+0x334>)
 801a0be:	2000      	movs	r0, #0
 801a0c0:	f7e6 fbc4 	bl	800084c <__aeabi_ddiv>
 801a0c4:	f04f 0a03 	mov.w	sl, #3
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	460d      	mov	r5, r1
 801a0cc:	e737      	b.n	8019f3e <atan+0xce>
 801a0ce:	4b36      	ldr	r3, [pc, #216]	; (801a1a8 <atan+0x338>)
 801a0d0:	4e36      	ldr	r6, [pc, #216]	; (801a1ac <atan+0x33c>)
 801a0d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a0d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a0da:	e9da 2300 	ldrd	r2, r3, [sl]
 801a0de:	f7e6 f8d3 	bl	8000288 <__aeabi_dsub>
 801a0e2:	4622      	mov	r2, r4
 801a0e4:	462b      	mov	r3, r5
 801a0e6:	f7e6 f8cf 	bl	8000288 <__aeabi_dsub>
 801a0ea:	4602      	mov	r2, r0
 801a0ec:	460b      	mov	r3, r1
 801a0ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a0f2:	f7e6 f8c9 	bl	8000288 <__aeabi_dsub>
 801a0f6:	f1bb 0f00 	cmp.w	fp, #0
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	460d      	mov	r5, r1
 801a0fe:	f6bf aed6 	bge.w	8019eae <atan+0x3e>
 801a102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a106:	461d      	mov	r5, r3
 801a108:	e6d1      	b.n	8019eae <atan+0x3e>
 801a10a:	a51d      	add	r5, pc, #116	; (adr r5, 801a180 <atan+0x310>)
 801a10c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a110:	e6cd      	b.n	8019eae <atan+0x3e>
 801a112:	bf00      	nop
 801a114:	f3af 8000 	nop.w
 801a118:	54442d18 	.word	0x54442d18
 801a11c:	bff921fb 	.word	0xbff921fb
 801a120:	8800759c 	.word	0x8800759c
 801a124:	7e37e43c 	.word	0x7e37e43c
 801a128:	e322da11 	.word	0xe322da11
 801a12c:	3f90ad3a 	.word	0x3f90ad3a
 801a130:	24760deb 	.word	0x24760deb
 801a134:	3fa97b4b 	.word	0x3fa97b4b
 801a138:	a0d03d51 	.word	0xa0d03d51
 801a13c:	3fb10d66 	.word	0x3fb10d66
 801a140:	c54c206e 	.word	0xc54c206e
 801a144:	3fb745cd 	.word	0x3fb745cd
 801a148:	920083ff 	.word	0x920083ff
 801a14c:	3fc24924 	.word	0x3fc24924
 801a150:	5555550d 	.word	0x5555550d
 801a154:	3fd55555 	.word	0x3fd55555
 801a158:	2c6a6c2f 	.word	0x2c6a6c2f
 801a15c:	bfa2b444 	.word	0xbfa2b444
 801a160:	52defd9a 	.word	0x52defd9a
 801a164:	3fadde2d 	.word	0x3fadde2d
 801a168:	af749a6d 	.word	0xaf749a6d
 801a16c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a170:	fe231671 	.word	0xfe231671
 801a174:	3fbc71c6 	.word	0x3fbc71c6
 801a178:	9998ebc4 	.word	0x9998ebc4
 801a17c:	3fc99999 	.word	0x3fc99999
 801a180:	54442d18 	.word	0x54442d18
 801a184:	3ff921fb 	.word	0x3ff921fb
 801a188:	440fffff 	.word	0x440fffff
 801a18c:	7ff00000 	.word	0x7ff00000
 801a190:	3fdbffff 	.word	0x3fdbffff
 801a194:	3ff00000 	.word	0x3ff00000
 801a198:	3ff2ffff 	.word	0x3ff2ffff
 801a19c:	40038000 	.word	0x40038000
 801a1a0:	3ff80000 	.word	0x3ff80000
 801a1a4:	bff00000 	.word	0xbff00000
 801a1a8:	0801b140 	.word	0x0801b140
 801a1ac:	0801b120 	.word	0x0801b120

0801a1b0 <fabs>:
 801a1b0:	ec51 0b10 	vmov	r0, r1, d0
 801a1b4:	ee10 2a10 	vmov	r2, s0
 801a1b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a1bc:	ec43 2b10 	vmov	d0, r2, r3
 801a1c0:	4770      	bx	lr

0801a1c2 <finite>:
 801a1c2:	b082      	sub	sp, #8
 801a1c4:	ed8d 0b00 	vstr	d0, [sp]
 801a1c8:	9801      	ldr	r0, [sp, #4]
 801a1ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a1ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a1d2:	0fc0      	lsrs	r0, r0, #31
 801a1d4:	b002      	add	sp, #8
 801a1d6:	4770      	bx	lr

0801a1d8 <floor>:
 801a1d8:	ec51 0b10 	vmov	r0, r1, d0
 801a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a1e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a1e8:	2e13      	cmp	r6, #19
 801a1ea:	ee10 5a10 	vmov	r5, s0
 801a1ee:	ee10 8a10 	vmov	r8, s0
 801a1f2:	460c      	mov	r4, r1
 801a1f4:	dc32      	bgt.n	801a25c <floor+0x84>
 801a1f6:	2e00      	cmp	r6, #0
 801a1f8:	da14      	bge.n	801a224 <floor+0x4c>
 801a1fa:	a333      	add	r3, pc, #204	; (adr r3, 801a2c8 <floor+0xf0>)
 801a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a200:	f7e6 f844 	bl	800028c <__adddf3>
 801a204:	2200      	movs	r2, #0
 801a206:	2300      	movs	r3, #0
 801a208:	f7e6 fc86 	bl	8000b18 <__aeabi_dcmpgt>
 801a20c:	b138      	cbz	r0, 801a21e <floor+0x46>
 801a20e:	2c00      	cmp	r4, #0
 801a210:	da57      	bge.n	801a2c2 <floor+0xea>
 801a212:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a216:	431d      	orrs	r5, r3
 801a218:	d001      	beq.n	801a21e <floor+0x46>
 801a21a:	4c2d      	ldr	r4, [pc, #180]	; (801a2d0 <floor+0xf8>)
 801a21c:	2500      	movs	r5, #0
 801a21e:	4621      	mov	r1, r4
 801a220:	4628      	mov	r0, r5
 801a222:	e025      	b.n	801a270 <floor+0x98>
 801a224:	4f2b      	ldr	r7, [pc, #172]	; (801a2d4 <floor+0xfc>)
 801a226:	4137      	asrs	r7, r6
 801a228:	ea01 0307 	and.w	r3, r1, r7
 801a22c:	4303      	orrs	r3, r0
 801a22e:	d01f      	beq.n	801a270 <floor+0x98>
 801a230:	a325      	add	r3, pc, #148	; (adr r3, 801a2c8 <floor+0xf0>)
 801a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a236:	f7e6 f829 	bl	800028c <__adddf3>
 801a23a:	2200      	movs	r2, #0
 801a23c:	2300      	movs	r3, #0
 801a23e:	f7e6 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 801a242:	2800      	cmp	r0, #0
 801a244:	d0eb      	beq.n	801a21e <floor+0x46>
 801a246:	2c00      	cmp	r4, #0
 801a248:	bfbe      	ittt	lt
 801a24a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a24e:	fa43 f606 	asrlt.w	r6, r3, r6
 801a252:	19a4      	addlt	r4, r4, r6
 801a254:	ea24 0407 	bic.w	r4, r4, r7
 801a258:	2500      	movs	r5, #0
 801a25a:	e7e0      	b.n	801a21e <floor+0x46>
 801a25c:	2e33      	cmp	r6, #51	; 0x33
 801a25e:	dd0b      	ble.n	801a278 <floor+0xa0>
 801a260:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a264:	d104      	bne.n	801a270 <floor+0x98>
 801a266:	ee10 2a10 	vmov	r2, s0
 801a26a:	460b      	mov	r3, r1
 801a26c:	f7e6 f80e 	bl	800028c <__adddf3>
 801a270:	ec41 0b10 	vmov	d0, r0, r1
 801a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a278:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a27c:	f04f 33ff 	mov.w	r3, #4294967295
 801a280:	fa23 f707 	lsr.w	r7, r3, r7
 801a284:	4207      	tst	r7, r0
 801a286:	d0f3      	beq.n	801a270 <floor+0x98>
 801a288:	a30f      	add	r3, pc, #60	; (adr r3, 801a2c8 <floor+0xf0>)
 801a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28e:	f7e5 fffd 	bl	800028c <__adddf3>
 801a292:	2200      	movs	r2, #0
 801a294:	2300      	movs	r3, #0
 801a296:	f7e6 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 801a29a:	2800      	cmp	r0, #0
 801a29c:	d0bf      	beq.n	801a21e <floor+0x46>
 801a29e:	2c00      	cmp	r4, #0
 801a2a0:	da02      	bge.n	801a2a8 <floor+0xd0>
 801a2a2:	2e14      	cmp	r6, #20
 801a2a4:	d103      	bne.n	801a2ae <floor+0xd6>
 801a2a6:	3401      	adds	r4, #1
 801a2a8:	ea25 0507 	bic.w	r5, r5, r7
 801a2ac:	e7b7      	b.n	801a21e <floor+0x46>
 801a2ae:	2301      	movs	r3, #1
 801a2b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a2b4:	fa03 f606 	lsl.w	r6, r3, r6
 801a2b8:	4435      	add	r5, r6
 801a2ba:	4545      	cmp	r5, r8
 801a2bc:	bf38      	it	cc
 801a2be:	18e4      	addcc	r4, r4, r3
 801a2c0:	e7f2      	b.n	801a2a8 <floor+0xd0>
 801a2c2:	2500      	movs	r5, #0
 801a2c4:	462c      	mov	r4, r5
 801a2c6:	e7aa      	b.n	801a21e <floor+0x46>
 801a2c8:	8800759c 	.word	0x8800759c
 801a2cc:	7e37e43c 	.word	0x7e37e43c
 801a2d0:	bff00000 	.word	0xbff00000
 801a2d4:	000fffff 	.word	0x000fffff

0801a2d8 <rint>:
 801a2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2da:	ec51 0b10 	vmov	r0, r1, d0
 801a2de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a2e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a2e6:	2e13      	cmp	r6, #19
 801a2e8:	ee10 4a10 	vmov	r4, s0
 801a2ec:	460b      	mov	r3, r1
 801a2ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a2f2:	dc58      	bgt.n	801a3a6 <rint+0xce>
 801a2f4:	2e00      	cmp	r6, #0
 801a2f6:	da2b      	bge.n	801a350 <rint+0x78>
 801a2f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a2fc:	4302      	orrs	r2, r0
 801a2fe:	d023      	beq.n	801a348 <rint+0x70>
 801a300:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a304:	4302      	orrs	r2, r0
 801a306:	4254      	negs	r4, r2
 801a308:	4314      	orrs	r4, r2
 801a30a:	0c4b      	lsrs	r3, r1, #17
 801a30c:	0b24      	lsrs	r4, r4, #12
 801a30e:	045b      	lsls	r3, r3, #17
 801a310:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a314:	ea44 0103 	orr.w	r1, r4, r3
 801a318:	4b32      	ldr	r3, [pc, #200]	; (801a3e4 <rint+0x10c>)
 801a31a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a31e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a322:	4602      	mov	r2, r0
 801a324:	460b      	mov	r3, r1
 801a326:	4630      	mov	r0, r6
 801a328:	4639      	mov	r1, r7
 801a32a:	f7e5 ffaf 	bl	800028c <__adddf3>
 801a32e:	e9cd 0100 	strd	r0, r1, [sp]
 801a332:	463b      	mov	r3, r7
 801a334:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a338:	4632      	mov	r2, r6
 801a33a:	f7e5 ffa5 	bl	8000288 <__aeabi_dsub>
 801a33e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a342:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a346:	4639      	mov	r1, r7
 801a348:	ec41 0b10 	vmov	d0, r0, r1
 801a34c:	b003      	add	sp, #12
 801a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a350:	4a25      	ldr	r2, [pc, #148]	; (801a3e8 <rint+0x110>)
 801a352:	4132      	asrs	r2, r6
 801a354:	ea01 0702 	and.w	r7, r1, r2
 801a358:	4307      	orrs	r7, r0
 801a35a:	d0f5      	beq.n	801a348 <rint+0x70>
 801a35c:	0851      	lsrs	r1, r2, #1
 801a35e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a362:	4314      	orrs	r4, r2
 801a364:	d00c      	beq.n	801a380 <rint+0xa8>
 801a366:	ea23 0201 	bic.w	r2, r3, r1
 801a36a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a36e:	2e13      	cmp	r6, #19
 801a370:	fa43 f606 	asr.w	r6, r3, r6
 801a374:	bf0c      	ite	eq
 801a376:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a37a:	2400      	movne	r4, #0
 801a37c:	ea42 0306 	orr.w	r3, r2, r6
 801a380:	4918      	ldr	r1, [pc, #96]	; (801a3e4 <rint+0x10c>)
 801a382:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a386:	4622      	mov	r2, r4
 801a388:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a38c:	4620      	mov	r0, r4
 801a38e:	4629      	mov	r1, r5
 801a390:	f7e5 ff7c 	bl	800028c <__adddf3>
 801a394:	e9cd 0100 	strd	r0, r1, [sp]
 801a398:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a39c:	4622      	mov	r2, r4
 801a39e:	462b      	mov	r3, r5
 801a3a0:	f7e5 ff72 	bl	8000288 <__aeabi_dsub>
 801a3a4:	e7d0      	b.n	801a348 <rint+0x70>
 801a3a6:	2e33      	cmp	r6, #51	; 0x33
 801a3a8:	dd07      	ble.n	801a3ba <rint+0xe2>
 801a3aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a3ae:	d1cb      	bne.n	801a348 <rint+0x70>
 801a3b0:	ee10 2a10 	vmov	r2, s0
 801a3b4:	f7e5 ff6a 	bl	800028c <__adddf3>
 801a3b8:	e7c6      	b.n	801a348 <rint+0x70>
 801a3ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a3be:	f04f 36ff 	mov.w	r6, #4294967295
 801a3c2:	40d6      	lsrs	r6, r2
 801a3c4:	4230      	tst	r0, r6
 801a3c6:	d0bf      	beq.n	801a348 <rint+0x70>
 801a3c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a3cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a3d0:	bf1f      	itttt	ne
 801a3d2:	ea24 0101 	bicne.w	r1, r4, r1
 801a3d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a3da:	fa44 f202 	asrne.w	r2, r4, r2
 801a3de:	ea41 0402 	orrne.w	r4, r1, r2
 801a3e2:	e7cd      	b.n	801a380 <rint+0xa8>
 801a3e4:	0801b160 	.word	0x0801b160
 801a3e8:	000fffff 	.word	0x000fffff
 801a3ec:	00000000 	.word	0x00000000

0801a3f0 <scalbn>:
 801a3f0:	b570      	push	{r4, r5, r6, lr}
 801a3f2:	ec55 4b10 	vmov	r4, r5, d0
 801a3f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a3fa:	4606      	mov	r6, r0
 801a3fc:	462b      	mov	r3, r5
 801a3fe:	b99a      	cbnz	r2, 801a428 <scalbn+0x38>
 801a400:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a404:	4323      	orrs	r3, r4
 801a406:	d036      	beq.n	801a476 <scalbn+0x86>
 801a408:	4b39      	ldr	r3, [pc, #228]	; (801a4f0 <scalbn+0x100>)
 801a40a:	4629      	mov	r1, r5
 801a40c:	ee10 0a10 	vmov	r0, s0
 801a410:	2200      	movs	r2, #0
 801a412:	f7e6 f8f1 	bl	80005f8 <__aeabi_dmul>
 801a416:	4b37      	ldr	r3, [pc, #220]	; (801a4f4 <scalbn+0x104>)
 801a418:	429e      	cmp	r6, r3
 801a41a:	4604      	mov	r4, r0
 801a41c:	460d      	mov	r5, r1
 801a41e:	da10      	bge.n	801a442 <scalbn+0x52>
 801a420:	a32b      	add	r3, pc, #172	; (adr r3, 801a4d0 <scalbn+0xe0>)
 801a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a426:	e03a      	b.n	801a49e <scalbn+0xae>
 801a428:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a42c:	428a      	cmp	r2, r1
 801a42e:	d10c      	bne.n	801a44a <scalbn+0x5a>
 801a430:	ee10 2a10 	vmov	r2, s0
 801a434:	4620      	mov	r0, r4
 801a436:	4629      	mov	r1, r5
 801a438:	f7e5 ff28 	bl	800028c <__adddf3>
 801a43c:	4604      	mov	r4, r0
 801a43e:	460d      	mov	r5, r1
 801a440:	e019      	b.n	801a476 <scalbn+0x86>
 801a442:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a446:	460b      	mov	r3, r1
 801a448:	3a36      	subs	r2, #54	; 0x36
 801a44a:	4432      	add	r2, r6
 801a44c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a450:	428a      	cmp	r2, r1
 801a452:	dd08      	ble.n	801a466 <scalbn+0x76>
 801a454:	2d00      	cmp	r5, #0
 801a456:	a120      	add	r1, pc, #128	; (adr r1, 801a4d8 <scalbn+0xe8>)
 801a458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a45c:	da1c      	bge.n	801a498 <scalbn+0xa8>
 801a45e:	a120      	add	r1, pc, #128	; (adr r1, 801a4e0 <scalbn+0xf0>)
 801a460:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a464:	e018      	b.n	801a498 <scalbn+0xa8>
 801a466:	2a00      	cmp	r2, #0
 801a468:	dd08      	ble.n	801a47c <scalbn+0x8c>
 801a46a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a46e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a472:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a476:	ec45 4b10 	vmov	d0, r4, r5
 801a47a:	bd70      	pop	{r4, r5, r6, pc}
 801a47c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a480:	da19      	bge.n	801a4b6 <scalbn+0xc6>
 801a482:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a486:	429e      	cmp	r6, r3
 801a488:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a48c:	dd0a      	ble.n	801a4a4 <scalbn+0xb4>
 801a48e:	a112      	add	r1, pc, #72	; (adr r1, 801a4d8 <scalbn+0xe8>)
 801a490:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d1e2      	bne.n	801a45e <scalbn+0x6e>
 801a498:	a30f      	add	r3, pc, #60	; (adr r3, 801a4d8 <scalbn+0xe8>)
 801a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a49e:	f7e6 f8ab 	bl	80005f8 <__aeabi_dmul>
 801a4a2:	e7cb      	b.n	801a43c <scalbn+0x4c>
 801a4a4:	a10a      	add	r1, pc, #40	; (adr r1, 801a4d0 <scalbn+0xe0>)
 801a4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d0b8      	beq.n	801a420 <scalbn+0x30>
 801a4ae:	a10e      	add	r1, pc, #56	; (adr r1, 801a4e8 <scalbn+0xf8>)
 801a4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4b4:	e7b4      	b.n	801a420 <scalbn+0x30>
 801a4b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a4ba:	3236      	adds	r2, #54	; 0x36
 801a4bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a4c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	4b0c      	ldr	r3, [pc, #48]	; (801a4f8 <scalbn+0x108>)
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	e7e8      	b.n	801a49e <scalbn+0xae>
 801a4cc:	f3af 8000 	nop.w
 801a4d0:	c2f8f359 	.word	0xc2f8f359
 801a4d4:	01a56e1f 	.word	0x01a56e1f
 801a4d8:	8800759c 	.word	0x8800759c
 801a4dc:	7e37e43c 	.word	0x7e37e43c
 801a4e0:	8800759c 	.word	0x8800759c
 801a4e4:	fe37e43c 	.word	0xfe37e43c
 801a4e8:	c2f8f359 	.word	0xc2f8f359
 801a4ec:	81a56e1f 	.word	0x81a56e1f
 801a4f0:	43500000 	.word	0x43500000
 801a4f4:	ffff3cb0 	.word	0xffff3cb0
 801a4f8:	3c900000 	.word	0x3c900000

0801a4fc <_init>:
 801a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4fe:	bf00      	nop
 801a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a502:	bc08      	pop	{r3}
 801a504:	469e      	mov	lr, r3
 801a506:	4770      	bx	lr

0801a508 <_fini>:
 801a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a50a:	bf00      	nop
 801a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a50e:	bc08      	pop	{r3}
 801a510:	469e      	mov	lr, r3
 801a512:	4770      	bx	lr
